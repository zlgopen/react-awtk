(function() {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = 'function' == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw ((a.code = 'MODULE_NOT_FOUND'), a);
        }
        var p = (n[i] = { exports: {} });
        e[i][0].call(
          p.exports,
          function(r) {
            var n = e[i][1][r];
            return o(n || r);
          },
          p,
          p.exports,
          r,
          e,
          n,
          t
        );
      }
      return n[i].exports;
    }
    for (
      var u = 'function' == typeof require && require, i = 0;
      i < t.length;
      i++
    )
      o(t[i]);
    return o;
  }
  return r;
})()(
  {
    1: [
      function(require, module, exports) {
        'use strict';
        var __extends =
          (this && this.__extends) ||
          (function() {
            var extendStatics = function(d, b) {
              extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                  function(d, b) {
                    d.__proto__ = b;
                  }) ||
                function(d, b) {
                  for (var p in b)
                    if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
              return extendStatics(d, b);
            };
            return function(d, b) {
              if (typeof b !== 'function' && b !== null)
                throw new TypeError(
                  'Class extends value ' +
                    String(b) +
                    ' is not a constructor or null'
                );
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.TVpageEvent = exports.TIndicatorDefaultPaint = exports.TExtWidgets = exports.TAppConf = exports.TWidget = exports.TWidgetCursor = exports.TWidgetState = exports.TWindowClosable = exports.TWindowStage = exports.TWidgetType = exports.TWidgetProp = exports.TVgcanvasLineJoin = exports.TVgcanvasLineCap = exports.TVgcanvas = exports.TBitmapFlag = exports.TBitmapFormat = exports.TAppType = exports.TAlignH = exports.TAlignV = exports.TTimer = exports.TTheme = exports.TStyle = exports.TStyleId = exports.TLocaleInfo = exports.TKeyCode = exports.TInputMethod = exports.TInputType = exports.TImageManager = exports.TIdle = exports.TGlyphFormat = exports.TFontManager = exports.TEvent = exports.TEventType = exports.TDialogQuitCode = exports.TClipBoard = exports.TClipBoardDataType = exports.TCanvas = exports.TCanvasOffline = exports.TImageDrawType = exports.TBidiType = exports.TGlobal = exports.TValue = exports.TObject = exports.TBitmap = exports.TRect = exports.TRectf = exports.TPointf = exports.TPoint = exports.TEmitter = exports.init = void 0;
        exports.TScrollBar = exports.TListView = exports.TListViewH = exports.TListItem = exports.THscrollLabel = exports.TRichText = exports.TRichTextView = exports.TProgressCircle = exports.TMledit = exports.TLineNumber = exports.TLangIndicator = exports.TCandidates = exports.TImageValue = exports.TImageAnimation = exports.TGauge = exports.TGaugePointer = exports.TFileChooser = exports.TFileBrowserView = exports.TDraggable = exports.TColorPicker = exports.TColorComponent = exports.TCanvasWidget = exports.TWindowManager = exports.TWindowBase = exports.TStyleMutable = exports.TImageBase = exports.TMultiGestureEvent = exports.TWindowEvent = exports.TPaintEvent = exports.TKeyEvent = exports.TPointerEvent = exports.TValueChangeEvent = exports.TOrientationEvent = exports.TWheelEvent = exports.TAssetsManager = exports.TValueType = exports.TRet = exports.TTimerManager = exports.TTimeNow = exports.TRlog = exports.TObjectProp = exports.TObjectCmd = exports.TNamedValue = exports.TMIME_TYPE = exports.TIdleManager = exports.TEasingType = exports.TDateTime = exports.TColor = exports.TAssetInfo = exports.TAssetType = void 0;
        exports.TCalibrationWin = exports.TTimerInfo = exports.TObjectDefault = exports.TObjectArray = exports.TIdleInfo = exports.TSvgImage = exports.TMutableImage = exports.TKeyboard = exports.TGifImage = exports.TWindow = exports.TNativeWindow = exports.TDialog = exports.TView = exports.TTabControl = exports.TTabButton = exports.TTabButtonGroup = exports.TSlider = exports.TRow = exports.TProgressBar = exports.TPages = exports.TLabel = exports.TGroupBox = exports.TGrid = exports.TGridItem = exports.TEdit = exports.TDragger = exports.TDigitClock = exports.TDialogTitle = exports.TDialogClient = exports.TComboBoxItem = exports.TColumn = exports.TColorTile = exports.TClipView = exports.TCheckButton = exports.TButton = exports.TButtonGroup = exports.TAppBar = exports.TCmdExecEvent = exports.TErrorEvent = exports.TDoneEvent = exports.TProgressEvent = exports.TPropChangeEvent = exports.TVpage = exports.TTimeClock = exports.TTextSelector = exports.TSwitch = exports.TSlideView = exports.TSlideIndicator = exports.TSlideMenu = exports.TScrollView = void 0;
        exports.TComboBoxEx = exports.TSystemBar = exports.TSpinBox = exports.TPopup = exports.TOverlay = exports.TImage = exports.TComboBox = void 0;
        var Module = window.Module || {};
        var TBrowser = window.TBrowser || {};
        function wrap_on_event(func) {
          return function(ctx, evt) {
            return func(evt, ctx);
          };
        }
        function wrap_on_visit(func) {
          return function(ctx, data) {
            return func(data, ctx);
          };
        }
        function init(w, h, title, isDesktop) {
          console.log('init(for compatible)');
        }
        exports.init = init;
        var emitter_create = Module.cwrap('emitter_create', 'number', []);
        var emitter_dispatch = Module.cwrap('emitter_dispatch', 'number', [
          'number',
          'number',
        ]);
        var emitter_dispatch_simple_event = Module.cwrap(
          'emitter_dispatch_simple_event',
          'number',
          ['number', 'number']
        );
        var emitter_on = Module.cwrap('emitter_on', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var emitter_off = Module.cwrap('emitter_off', 'number', [
          'number',
          'number',
        ]);
        var emitter_enable = Module.cwrap('emitter_enable', 'number', [
          'number',
        ]);
        var emitter_disable = Module.cwrap('emitter_disable', 'number', [
          'number',
        ]);
        var emitter_destroy = Module.cwrap('emitter_destroy', 'number', [
          'number',
        ]);
        var emitter_cast = Module.cwrap('emitter_cast', 'number', ['number']);
        var rectf_t_get_prop_x = Module.cwrap('rectf_t_get_prop_x', 'number', [
          'number',
        ]);
        var rectf_t_get_prop_y = Module.cwrap('rectf_t_get_prop_y', 'number', [
          'number',
        ]);
        var rectf_t_get_prop_w = Module.cwrap('rectf_t_get_prop_w', 'number', [
          'number',
        ]);
        var rectf_t_get_prop_h = Module.cwrap('rectf_t_get_prop_h', 'number', [
          'number',
        ]);
        var rect_create = Module.cwrap('rect_create', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var rect_set = Module.cwrap('rect_set', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var rect_cast = Module.cwrap('rect_cast', 'number', ['number']);
        var rect_destroy = Module.cwrap('rect_destroy', 'number', ['number']);
        var rect_t_get_prop_x = Module.cwrap('rect_t_get_prop_x', 'number', [
          'number',
        ]);
        var rect_t_get_prop_y = Module.cwrap('rect_t_get_prop_y', 'number', [
          'number',
        ]);
        var rect_t_get_prop_w = Module.cwrap('rect_t_get_prop_w', 'number', [
          'number',
        ]);
        var rect_t_get_prop_h = Module.cwrap('rect_t_get_prop_h', 'number', [
          'number',
        ]);
        var bitmap_create = Module.cwrap('bitmap_create', 'number', []);
        var bitmap_create_ex = Module.cwrap('bitmap_create_ex', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var bitmap_get_bpp = Module.cwrap('bitmap_get_bpp', 'number', [
          'number',
        ]);
        var bitmap_destroy_with_self = Module.cwrap(
          'bitmap_destroy_with_self',
          'number',
          ['number']
        );
        var bitmap_get_bpp_of_format = Module.cwrap(
          'bitmap_get_bpp_of_format',
          'number',
          ['number']
        );
        var bitmap_t_get_prop_w = Module.cwrap(
          'bitmap_t_get_prop_w',
          'number',
          ['number']
        );
        var bitmap_t_get_prop_h = Module.cwrap(
          'bitmap_t_get_prop_h',
          'number',
          ['number']
        );
        var bitmap_t_get_prop_line_length = Module.cwrap(
          'bitmap_t_get_prop_line_length',
          'number',
          ['number']
        );
        var bitmap_t_get_prop_flags = Module.cwrap(
          'bitmap_t_get_prop_flags',
          'number',
          ['number']
        );
        var bitmap_t_get_prop_format = Module.cwrap(
          'bitmap_t_get_prop_format',
          'number',
          ['number']
        );
        var bitmap_t_get_prop_name = Module.cwrap(
          'bitmap_t_get_prop_name',
          'string',
          ['number']
        );
        var object_unref = Module.cwrap('object_unref', 'number', ['number']);
        var object_ref = Module.cwrap('object_ref', 'number', ['number']);
        var object_get_type = Module.cwrap('object_get_type', 'string', [
          'number',
        ]);
        var object_get_desc = Module.cwrap('object_get_desc', 'string', [
          'number',
        ]);
        var object_get_size = Module.cwrap('object_get_size', 'number', [
          'number',
        ]);
        var object_is_collection = Module.cwrap(
          'object_is_collection',
          'number',
          ['number']
        );
        var object_set_name = Module.cwrap('object_set_name', 'number', [
          'number',
          'string',
        ]);
        var object_compare = Module.cwrap('object_compare', 'number', [
          'number',
          'number',
        ]);
        var object_get_prop = Module.cwrap('object_get_prop', 'number', [
          'number',
          'string',
          'number',
        ]);
        var object_get_prop_str = Module.cwrap(
          'object_get_prop_str',
          'string',
          ['number', 'string']
        );
        var object_get_prop_pointer = Module.cwrap(
          'object_get_prop_pointer',
          'number',
          ['number', 'string']
        );
        var object_get_prop_object = Module.cwrap(
          'object_get_prop_object',
          'number',
          ['number', 'string']
        );
        var object_get_prop_int = Module.cwrap(
          'object_get_prop_int',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_bool = Module.cwrap(
          'object_get_prop_bool',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_float = Module.cwrap(
          'object_get_prop_float',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_double = Module.cwrap(
          'object_get_prop_double',
          'number',
          ['number', 'string', 'number']
        );
        var object_remove_prop = Module.cwrap('object_remove_prop', 'number', [
          'number',
          'string',
        ]);
        var object_set_prop = Module.cwrap('object_set_prop', 'number', [
          'number',
          'string',
          'number',
        ]);
        var object_set_prop_str = Module.cwrap(
          'object_set_prop_str',
          'number',
          ['number', 'string', 'string']
        );
        var object_set_prop_object = Module.cwrap(
          'object_set_prop_object',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_int = Module.cwrap(
          'object_set_prop_int',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_bool = Module.cwrap(
          'object_set_prop_bool',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_float = Module.cwrap(
          'object_set_prop_float',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_double = Module.cwrap(
          'object_set_prop_double',
          'number',
          ['number', 'string', 'number']
        );
        var object_copy_prop = Module.cwrap('object_copy_prop', 'number', [
          'number',
          'number',
          'string',
        ]);
        var object_has_prop = Module.cwrap('object_has_prop', 'number', [
          'number',
          'string',
        ]);
        var object_eval = Module.cwrap('object_eval', 'number', [
          'number',
          'string',
          'number',
        ]);
        var object_can_exec = Module.cwrap('object_can_exec', 'number', [
          'number',
          'string',
          'string',
        ]);
        var object_exec = Module.cwrap('object_exec', 'number', [
          'number',
          'string',
          'string',
        ]);
        var object_notify_changed = Module.cwrap(
          'object_notify_changed',
          'number',
          ['number']
        );
        var object_has_prop_by_path = Module.cwrap(
          'object_has_prop_by_path',
          'number',
          ['number', 'string']
        );
        var object_get_prop_str_by_path = Module.cwrap(
          'object_get_prop_str_by_path',
          'string',
          ['number', 'string']
        );
        var object_get_prop_pointer_by_path = Module.cwrap(
          'object_get_prop_pointer_by_path',
          'number',
          ['number', 'string']
        );
        var object_get_prop_object_by_path = Module.cwrap(
          'object_get_prop_object_by_path',
          'number',
          ['number', 'string']
        );
        var object_get_prop_int_by_path = Module.cwrap(
          'object_get_prop_int_by_path',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_bool_by_path = Module.cwrap(
          'object_get_prop_bool_by_path',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_float_by_path = Module.cwrap(
          'object_get_prop_float_by_path',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_by_path = Module.cwrap(
          'object_set_prop_by_path',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_str_by_path = Module.cwrap(
          'object_set_prop_str_by_path',
          'number',
          ['number', 'string', 'string']
        );
        var object_set_prop_object_by_path = Module.cwrap(
          'object_set_prop_object_by_path',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_int_by_path = Module.cwrap(
          'object_set_prop_int_by_path',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_bool_by_path = Module.cwrap(
          'object_set_prop_bool_by_path',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_float_by_path = Module.cwrap(
          'object_set_prop_float_by_path',
          'number',
          ['number', 'string', 'number']
        );
        var object_can_exec_by_path = Module.cwrap(
          'object_can_exec_by_path',
          'number',
          ['number', 'string', 'string']
        );
        var object_exec_by_path = Module.cwrap(
          'object_exec_by_path',
          'number',
          ['number', 'string', 'string']
        );
        var object_get_prop_int8 = Module.cwrap(
          'object_get_prop_int8',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_int8 = Module.cwrap(
          'object_set_prop_int8',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_uint8 = Module.cwrap(
          'object_get_prop_uint8',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_uint8 = Module.cwrap(
          'object_set_prop_uint8',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_int16 = Module.cwrap(
          'object_get_prop_int16',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_int16 = Module.cwrap(
          'object_set_prop_int16',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_uint16 = Module.cwrap(
          'object_get_prop_uint16',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_uint16 = Module.cwrap(
          'object_set_prop_uint16',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_int32 = Module.cwrap(
          'object_get_prop_int32',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_int32 = Module.cwrap(
          'object_set_prop_int32',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_uint32 = Module.cwrap(
          'object_get_prop_uint32',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_uint32 = Module.cwrap(
          'object_set_prop_uint32',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_int64 = Module.cwrap(
          'object_get_prop_int64',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_int64 = Module.cwrap(
          'object_set_prop_int64',
          'number',
          ['number', 'string', 'number']
        );
        var object_get_prop_uint64 = Module.cwrap(
          'object_get_prop_uint64',
          'number',
          ['number', 'string', 'number']
        );
        var object_set_prop_uint64 = Module.cwrap(
          'object_set_prop_uint64',
          'number',
          ['number', 'string', 'number']
        );
        var object_t_get_prop_ref_count = Module.cwrap(
          'object_t_get_prop_ref_count',
          'number',
          ['number']
        );
        var object_t_get_prop_name = Module.cwrap(
          'object_t_get_prop_name',
          'string',
          ['number']
        );
        var value_set_bool = Module.cwrap('value_set_bool', 'number', [
          'number',
          'number',
        ]);
        var value_bool = Module.cwrap('value_bool', 'number', ['number']);
        var value_set_int8 = Module.cwrap('value_set_int8', 'number', [
          'number',
          'number',
        ]);
        var value_int8 = Module.cwrap('value_int8', 'number', ['number']);
        var value_set_uint8 = Module.cwrap('value_set_uint8', 'number', [
          'number',
          'number',
        ]);
        var value_uint8 = Module.cwrap('value_uint8', 'number', ['number']);
        var value_set_int16 = Module.cwrap('value_set_int16', 'number', [
          'number',
          'number',
        ]);
        var value_int16 = Module.cwrap('value_int16', 'number', ['number']);
        var value_set_uint16 = Module.cwrap('value_set_uint16', 'number', [
          'number',
          'number',
        ]);
        var value_uint16 = Module.cwrap('value_uint16', 'number', ['number']);
        var value_set_int32 = Module.cwrap('value_set_int32', 'number', [
          'number',
          'number',
        ]);
        var value_int32 = Module.cwrap('value_int32', 'number', ['number']);
        var value_set_uint32 = Module.cwrap('value_set_uint32', 'number', [
          'number',
          'number',
        ]);
        var value_set_int64 = Module.cwrap('value_set_int64', 'number', [
          'number',
          'number',
        ]);
        var value_int64 = Module.cwrap('value_int64', 'number', ['number']);
        var value_set_uint64 = Module.cwrap('value_set_uint64', 'number', [
          'number',
          'number',
        ]);
        var value_uint64 = Module.cwrap('value_uint64', 'number', ['number']);
        var value_set_float = Module.cwrap('value_set_float', 'number', [
          'number',
          'number',
        ]);
        var value_float32 = Module.cwrap('value_float32', 'number', ['number']);
        var value_set_double = Module.cwrap('value_set_double', 'number', [
          'number',
          'number',
        ]);
        var value_double = Module.cwrap('value_double', 'number', ['number']);
        var value_dup_str = Module.cwrap('value_dup_str', 'number', [
          'number',
          'string',
        ]);
        var value_str = Module.cwrap('value_str', 'string', ['number']);
        var value_str_ex = Module.cwrap('value_str_ex', 'string', [
          'number',
          'string',
          'number',
        ]);
        var value_is_null = Module.cwrap('value_is_null', 'number', ['number']);
        var value_set_int = Module.cwrap('value_set_int', 'number', [
          'number',
          'number',
        ]);
        var value_set_object = Module.cwrap('value_set_object', 'number', [
          'number',
          'number',
        ]);
        var value_object = Module.cwrap('value_object', 'number', ['number']);
        var value_set_token = Module.cwrap('value_set_token', 'number', [
          'number',
          'number',
        ]);
        var value_token = Module.cwrap('value_token', 'number', ['number']);
        var value_create = Module.cwrap('value_create', 'number', []);
        var value_destroy = Module.cwrap('value_destroy', 'number', ['number']);
        var value_reset = Module.cwrap('value_reset', 'number', ['number']);
        var value_cast = Module.cwrap('value_cast', 'number', ['number']);
        var tk_init = Module.cwrap('tk_init', 'number', [
          'number',
          'number',
          'number',
          'string',
          'string',
        ]);
        var tk_run = Module.cwrap('tk_run', 'number', []);
        var tk_quit = Module.cwrap('tk_quit', 'number', []);
        var tk_get_pointer_x = Module.cwrap('tk_get_pointer_x', 'number', []);
        var tk_get_pointer_y = Module.cwrap('tk_get_pointer_y', 'number', []);
        var tk_is_pointer_pressed = Module.cwrap(
          'tk_is_pointer_pressed',
          'number',
          []
        );
        var BIDI_TYPE_AUTO = Module.cwrap('get_BIDI_TYPE_AUTO', 'number', []);
        var BIDI_TYPE_LTR = Module.cwrap('get_BIDI_TYPE_LTR', 'number', []);
        var BIDI_TYPE_RTL = Module.cwrap('get_BIDI_TYPE_RTL', 'number', []);
        var BIDI_TYPE_LRO = Module.cwrap('get_BIDI_TYPE_LRO', 'number', []);
        var BIDI_TYPE_RLO = Module.cwrap('get_BIDI_TYPE_RLO', 'number', []);
        var BIDI_TYPE_WLTR = Module.cwrap('get_BIDI_TYPE_WLTR', 'number', []);
        var BIDI_TYPE_WRTL = Module.cwrap('get_BIDI_TYPE_WRTL', 'number', []);
        var IMAGE_DRAW_DEFAULT = Module.cwrap(
          'get_IMAGE_DRAW_DEFAULT',
          'number',
          []
        );
        var IMAGE_DRAW_CENTER = Module.cwrap(
          'get_IMAGE_DRAW_CENTER',
          'number',
          []
        );
        var IMAGE_DRAW_ICON = Module.cwrap('get_IMAGE_DRAW_ICON', 'number', []);
        var IMAGE_DRAW_SCALE = Module.cwrap(
          'get_IMAGE_DRAW_SCALE',
          'number',
          []
        );
        var IMAGE_DRAW_SCALE_AUTO = Module.cwrap(
          'get_IMAGE_DRAW_SCALE_AUTO',
          'number',
          []
        );
        var IMAGE_DRAW_SCALE_DOWN = Module.cwrap(
          'get_IMAGE_DRAW_SCALE_DOWN',
          'number',
          []
        );
        var IMAGE_DRAW_SCALE_W = Module.cwrap(
          'get_IMAGE_DRAW_SCALE_W',
          'number',
          []
        );
        var IMAGE_DRAW_SCALE_H = Module.cwrap(
          'get_IMAGE_DRAW_SCALE_H',
          'number',
          []
        );
        var IMAGE_DRAW_REPEAT = Module.cwrap(
          'get_IMAGE_DRAW_REPEAT',
          'number',
          []
        );
        var IMAGE_DRAW_REPEAT_X = Module.cwrap(
          'get_IMAGE_DRAW_REPEAT_X',
          'number',
          []
        );
        var IMAGE_DRAW_REPEAT_Y = Module.cwrap(
          'get_IMAGE_DRAW_REPEAT_Y',
          'number',
          []
        );
        var IMAGE_DRAW_REPEAT_Y_INVERSE = Module.cwrap(
          'get_IMAGE_DRAW_REPEAT_Y_INVERSE',
          'number',
          []
        );
        var IMAGE_DRAW_PATCH9 = Module.cwrap(
          'get_IMAGE_DRAW_PATCH9',
          'number',
          []
        );
        var IMAGE_DRAW_PATCH3_X = Module.cwrap(
          'get_IMAGE_DRAW_PATCH3_X',
          'number',
          []
        );
        var IMAGE_DRAW_PATCH3_Y = Module.cwrap(
          'get_IMAGE_DRAW_PATCH3_Y',
          'number',
          []
        );
        var IMAGE_DRAW_PATCH3_X_SCALE_Y = Module.cwrap(
          'get_IMAGE_DRAW_PATCH3_X_SCALE_Y',
          'number',
          []
        );
        var IMAGE_DRAW_PATCH3_Y_SCALE_X = Module.cwrap(
          'get_IMAGE_DRAW_PATCH3_Y_SCALE_X',
          'number',
          []
        );
        var IMAGE_DRAW_REPEAT9 = Module.cwrap(
          'get_IMAGE_DRAW_REPEAT9',
          'number',
          []
        );
        var IMAGE_DRAW_REPEAT3_X = Module.cwrap(
          'get_IMAGE_DRAW_REPEAT3_X',
          'number',
          []
        );
        var IMAGE_DRAW_REPEAT3_Y = Module.cwrap(
          'get_IMAGE_DRAW_REPEAT3_Y',
          'number',
          []
        );
        var canvas_get_width = Module.cwrap('canvas_get_width', 'number', [
          'number',
        ]);
        var canvas_get_height = Module.cwrap('canvas_get_height', 'number', [
          'number',
        ]);
        var canvas_get_clip_rect = Module.cwrap(
          'canvas_get_clip_rect',
          'number',
          ['number', 'number']
        );
        var canvas_set_clip_rect = Module.cwrap(
          'canvas_set_clip_rect',
          'number',
          ['number', 'number']
        );
        var canvas_set_clip_rect_ex = Module.cwrap(
          'canvas_set_clip_rect_ex',
          'number',
          ['number', 'number', 'number']
        );
        var canvas_set_fill_color_str = Module.cwrap(
          'canvas_set_fill_color_str',
          'number',
          ['number', 'string']
        );
        var canvas_set_text_color_str = Module.cwrap(
          'canvas_set_text_color_str',
          'number',
          ['number', 'string']
        );
        var canvas_set_stroke_color_str = Module.cwrap(
          'canvas_set_stroke_color_str',
          'number',
          ['number', 'string']
        );
        var canvas_set_global_alpha = Module.cwrap(
          'canvas_set_global_alpha',
          'number',
          ['number', 'number']
        );
        var canvas_translate = Module.cwrap('canvas_translate', 'number', [
          'number',
          'number',
          'number',
        ]);
        var canvas_untranslate = Module.cwrap('canvas_untranslate', 'number', [
          'number',
          'number',
          'number',
        ]);
        var canvas_draw_vline = Module.cwrap('canvas_draw_vline', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var canvas_draw_hline = Module.cwrap('canvas_draw_hline', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var canvas_fill_rect = Module.cwrap('canvas_fill_rect', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var canvas_clear_rect = Module.cwrap('canvas_clear_rect', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var canvas_stroke_rect = Module.cwrap('canvas_stroke_rect', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var canvas_set_font = Module.cwrap('canvas_set_font', 'number', [
          'number',
          'string',
          'number',
        ]);
        var canvas_measure_utf8 = Module.cwrap(
          'canvas_measure_utf8',
          'number',
          ['number', 'string']
        );
        var canvas_draw_utf8 = Module.cwrap('canvas_draw_utf8', 'number', [
          'number',
          'string',
          'number',
          'number',
        ]);
        var canvas_draw_utf8_in_rect = Module.cwrap(
          'canvas_draw_utf8_in_rect',
          'number',
          ['number', 'string', 'number']
        );
        var canvas_draw_icon = Module.cwrap('canvas_draw_icon', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var canvas_draw_image = Module.cwrap('canvas_draw_image', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var canvas_draw_image_ex = Module.cwrap(
          'canvas_draw_image_ex',
          'number',
          ['number', 'number', 'number', 'number']
        );
        var canvas_draw_image_ex2 = Module.cwrap(
          'canvas_draw_image_ex2',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var canvas_get_vgcanvas = Module.cwrap(
          'canvas_get_vgcanvas',
          'number',
          ['number']
        );
        var canvas_cast = Module.cwrap('canvas_cast', 'number', ['number']);
        var canvas_reset = Module.cwrap('canvas_reset', 'number', ['number']);
        var canvas_t_get_prop_ox = Module.cwrap(
          'canvas_t_get_prop_ox',
          'number',
          ['number']
        );
        var canvas_t_get_prop_oy = Module.cwrap(
          'canvas_t_get_prop_oy',
          'number',
          ['number']
        );
        var canvas_t_get_prop_font_name = Module.cwrap(
          'canvas_t_get_prop_font_name',
          'string',
          ['number']
        );
        var canvas_t_get_prop_font_size = Module.cwrap(
          'canvas_t_get_prop_font_size',
          'number',
          ['number']
        );
        var canvas_t_get_prop_global_alpha = Module.cwrap(
          'canvas_t_get_prop_global_alpha',
          'number',
          ['number']
        );
        var CLIP_BOARD_DATA_TYPE_NONE = Module.cwrap(
          'get_CLIP_BOARD_DATA_TYPE_NONE',
          'number',
          []
        );
        var CLIP_BOARD_DATA_TYPE_TEXT = Module.cwrap(
          'get_CLIP_BOARD_DATA_TYPE_TEXT',
          'number',
          []
        );
        var clip_board_set_text = Module.cwrap(
          'clip_board_set_text',
          'number',
          ['string']
        );
        var clip_board_get_text = Module.cwrap(
          'clip_board_get_text',
          'string',
          []
        );
        var DIALOG_QUIT_NONE = Module.cwrap(
          'get_DIALOG_QUIT_NONE',
          'number',
          []
        );
        var DIALOG_QUIT_OK = Module.cwrap('get_DIALOG_QUIT_OK', 'number', []);
        var DIALOG_QUIT_YES = Module.cwrap('get_DIALOG_QUIT_YES', 'number', []);
        var DIALOG_QUIT_CANCEL = Module.cwrap(
          'get_DIALOG_QUIT_CANCEL',
          'number',
          []
        );
        var DIALOG_QUIT_NO = Module.cwrap('get_DIALOG_QUIT_NO', 'number', []);
        var DIALOG_QUIT_OTHER = Module.cwrap(
          'get_DIALOG_QUIT_OTHER',
          'number',
          []
        );
        var EVT_POINTER_DOWN = Module.cwrap(
          'get_EVT_POINTER_DOWN',
          'number',
          []
        );
        var EVT_POINTER_DOWN_BEFORE_CHILDREN = Module.cwrap(
          'get_EVT_POINTER_DOWN_BEFORE_CHILDREN',
          'number',
          []
        );
        var EVT_POINTER_MOVE = Module.cwrap(
          'get_EVT_POINTER_MOVE',
          'number',
          []
        );
        var EVT_POINTER_MOVE_BEFORE_CHILDREN = Module.cwrap(
          'get_EVT_POINTER_MOVE_BEFORE_CHILDREN',
          'number',
          []
        );
        var EVT_POINTER_UP = Module.cwrap('get_EVT_POINTER_UP', 'number', []);
        var EVT_POINTER_UP_BEFORE_CHILDREN = Module.cwrap(
          'get_EVT_POINTER_UP_BEFORE_CHILDREN',
          'number',
          []
        );
        var EVT_WHEEL = Module.cwrap('get_EVT_WHEEL', 'number', []);
        var EVT_WHEEL_BEFORE_CHILDREN = Module.cwrap(
          'get_EVT_WHEEL_BEFORE_CHILDREN',
          'number',
          []
        );
        var EVT_POINTER_DOWN_ABORT = Module.cwrap(
          'get_EVT_POINTER_DOWN_ABORT',
          'number',
          []
        );
        var EVT_CONTEXT_MENU = Module.cwrap(
          'get_EVT_CONTEXT_MENU',
          'number',
          []
        );
        var EVT_POINTER_ENTER = Module.cwrap(
          'get_EVT_POINTER_ENTER',
          'number',
          []
        );
        var EVT_POINTER_LEAVE = Module.cwrap(
          'get_EVT_POINTER_LEAVE',
          'number',
          []
        );
        var EVT_LONG_PRESS = Module.cwrap('get_EVT_LONG_PRESS', 'number', []);
        var EVT_CLICK = Module.cwrap('get_EVT_CLICK', 'number', []);
        var EVT_FOCUS = Module.cwrap('get_EVT_FOCUS', 'number', []);
        var EVT_BLUR = Module.cwrap('get_EVT_BLUR', 'number', []);
        var EVT_KEY_DOWN = Module.cwrap('get_EVT_KEY_DOWN', 'number', []);
        var EVT_KEY_LONG_PRESS = Module.cwrap(
          'get_EVT_KEY_LONG_PRESS',
          'number',
          []
        );
        var EVT_KEY_DOWN_BEFORE_CHILDREN = Module.cwrap(
          'get_EVT_KEY_DOWN_BEFORE_CHILDREN',
          'number',
          []
        );
        var EVT_KEY_REPEAT = Module.cwrap('get_EVT_KEY_REPEAT', 'number', []);
        var EVT_KEY_UP = Module.cwrap('get_EVT_KEY_UP', 'number', []);
        var EVT_KEY_UP_BEFORE_CHILDREN = Module.cwrap(
          'get_EVT_KEY_UP_BEFORE_CHILDREN',
          'number',
          []
        );
        var EVT_WILL_MOVE = Module.cwrap('get_EVT_WILL_MOVE', 'number', []);
        var EVT_MOVE = Module.cwrap('get_EVT_MOVE', 'number', []);
        var EVT_WILL_RESIZE = Module.cwrap('get_EVT_WILL_RESIZE', 'number', []);
        var EVT_RESIZE = Module.cwrap('get_EVT_RESIZE', 'number', []);
        var EVT_WILL_MOVE_RESIZE = Module.cwrap(
          'get_EVT_WILL_MOVE_RESIZE',
          'number',
          []
        );
        var EVT_MOVE_RESIZE = Module.cwrap('get_EVT_MOVE_RESIZE', 'number', []);
        var EVT_VALUE_WILL_CHANGE = Module.cwrap(
          'get_EVT_VALUE_WILL_CHANGE',
          'number',
          []
        );
        var EVT_VALUE_CHANGED = Module.cwrap(
          'get_EVT_VALUE_CHANGED',
          'number',
          []
        );
        var EVT_VALUE_CHANGING = Module.cwrap(
          'get_EVT_VALUE_CHANGING',
          'number',
          []
        );
        var EVT_PAINT = Module.cwrap('get_EVT_PAINT', 'number', []);
        var EVT_BEFORE_PAINT = Module.cwrap(
          'get_EVT_BEFORE_PAINT',
          'number',
          []
        );
        var EVT_AFTER_PAINT = Module.cwrap('get_EVT_AFTER_PAINT', 'number', []);
        var EVT_PAINT_DONE = Module.cwrap('get_EVT_PAINT_DONE', 'number', []);
        var EVT_LOCALE_CHANGED = Module.cwrap(
          'get_EVT_LOCALE_CHANGED',
          'number',
          []
        );
        var EVT_ANIM_START = Module.cwrap('get_EVT_ANIM_START', 'number', []);
        var EVT_ANIM_STOP = Module.cwrap('get_EVT_ANIM_STOP', 'number', []);
        var EVT_ANIM_PAUSE = Module.cwrap('get_EVT_ANIM_PAUSE', 'number', []);
        var EVT_ANIM_ONCE = Module.cwrap('get_EVT_ANIM_ONCE', 'number', []);
        var EVT_ANIM_END = Module.cwrap('get_EVT_ANIM_END', 'number', []);
        var EVT_WINDOW_LOAD = Module.cwrap('get_EVT_WINDOW_LOAD', 'number', []);
        var EVT_WIDGET_LOAD = Module.cwrap('get_EVT_WIDGET_LOAD', 'number', []);
        var EVT_WINDOW_WILL_OPEN = Module.cwrap(
          'get_EVT_WINDOW_WILL_OPEN',
          'number',
          []
        );
        var EVT_WINDOW_OPEN = Module.cwrap('get_EVT_WINDOW_OPEN', 'number', []);
        var EVT_WINDOW_TO_BACKGROUND = Module.cwrap(
          'get_EVT_WINDOW_TO_BACKGROUND',
          'number',
          []
        );
        var EVT_WINDOW_TO_FOREGROUND = Module.cwrap(
          'get_EVT_WINDOW_TO_FOREGROUND',
          'number',
          []
        );
        var EVT_WINDOW_CLOSE = Module.cwrap(
          'get_EVT_WINDOW_CLOSE',
          'number',
          []
        );
        var EVT_REQUEST_CLOSE_WINDOW = Module.cwrap(
          'get_EVT_REQUEST_CLOSE_WINDOW',
          'number',
          []
        );
        var EVT_TOP_WINDOW_CHANGED = Module.cwrap(
          'get_EVT_TOP_WINDOW_CHANGED',
          'number',
          []
        );
        var EVT_IM_START = Module.cwrap('get_EVT_IM_START', 'number', []);
        var EVT_IM_STOP = Module.cwrap('get_EVT_IM_STOP', 'number', []);
        var EVT_IM_COMMIT = Module.cwrap('get_EVT_IM_COMMIT', 'number', []);
        var EVT_IM_CLEAR = Module.cwrap('get_EVT_IM_CLEAR', 'number', []);
        var EVT_IM_CANCEL = Module.cwrap('get_EVT_IM_CANCEL', 'number', []);
        var EVT_IM_PREEDIT = Module.cwrap('get_EVT_IM_PREEDIT', 'number', []);
        var EVT_IM_PREEDIT_CONFIRM = Module.cwrap(
          'get_EVT_IM_PREEDIT_CONFIRM',
          'number',
          []
        );
        var EVT_IM_PREEDIT_ABORT = Module.cwrap(
          'get_EVT_IM_PREEDIT_ABORT',
          'number',
          []
        );
        var EVT_IM_SHOW_CANDIDATES = Module.cwrap(
          'get_EVT_IM_SHOW_CANDIDATES',
          'number',
          []
        );
        var EVT_IM_SHOW_PRE_CANDIDATES = Module.cwrap(
          'get_EVT_IM_SHOW_PRE_CANDIDATES',
          'number',
          []
        );
        var EVT_IM_LANG_CHANGED = Module.cwrap(
          'get_EVT_IM_LANG_CHANGED',
          'number',
          []
        );
        var EVT_IM_ACTION = Module.cwrap('get_EVT_IM_ACTION', 'number', []);
        var EVT_IM_ACTION_INFO = Module.cwrap(
          'get_EVT_IM_ACTION_INFO',
          'number',
          []
        );
        var EVT_DRAG_START = Module.cwrap('get_EVT_DRAG_START', 'number', []);
        var EVT_DRAG = Module.cwrap('get_EVT_DRAG', 'number', []);
        var EVT_DRAG_END = Module.cwrap('get_EVT_DRAG_END', 'number', []);
        var EVT_RESET = Module.cwrap('get_EVT_RESET', 'number', []);
        var EVT_SCREEN_SAVER = Module.cwrap(
          'get_EVT_SCREEN_SAVER',
          'number',
          []
        );
        var EVT_LOW_MEMORY = Module.cwrap('get_EVT_LOW_MEMORY', 'number', []);
        var EVT_OUT_OF_MEMORY = Module.cwrap(
          'get_EVT_OUT_OF_MEMORY',
          'number',
          []
        );
        var EVT_ORIENTATION_WILL_CHANGED = Module.cwrap(
          'get_EVT_ORIENTATION_WILL_CHANGED',
          'number',
          []
        );
        var EVT_ORIENTATION_CHANGED = Module.cwrap(
          'get_EVT_ORIENTATION_CHANGED',
          'number',
          []
        );
        var EVT_WIDGET_CREATED = Module.cwrap(
          'get_EVT_WIDGET_CREATED',
          'number',
          []
        );
        var EVT_REQUEST_QUIT_APP = Module.cwrap(
          'get_EVT_REQUEST_QUIT_APP',
          'number',
          []
        );
        var EVT_THEME_CHANGED = Module.cwrap(
          'get_EVT_THEME_CHANGED',
          'number',
          []
        );
        var EVT_WIDGET_ADD_CHILD = Module.cwrap(
          'get_EVT_WIDGET_ADD_CHILD',
          'number',
          []
        );
        var EVT_WIDGET_REMOVE_CHILD = Module.cwrap(
          'get_EVT_WIDGET_REMOVE_CHILD',
          'number',
          []
        );
        var EVT_SCROLL_START = Module.cwrap(
          'get_EVT_SCROLL_START',
          'number',
          []
        );
        var EVT_SCROLL = Module.cwrap('get_EVT_SCROLL', 'number', []);
        var EVT_SCROLL_END = Module.cwrap('get_EVT_SCROLL_END', 'number', []);
        var EVT_MULTI_GESTURE = Module.cwrap(
          'get_EVT_MULTI_GESTURE',
          'number',
          []
        );
        var EVT_PAGE_CHANGED = Module.cwrap(
          'get_EVT_PAGE_CHANGED',
          'number',
          []
        );
        var EVT_ASSET_MANAGER_LOAD_ASSET = Module.cwrap(
          'get_EVT_ASSET_MANAGER_LOAD_ASSET',
          'number',
          []
        );
        var EVT_ASSET_MANAGER_UNLOAD_ASSET = Module.cwrap(
          'get_EVT_ASSET_MANAGER_UNLOAD_ASSET',
          'number',
          []
        );
        var EVT_ASSET_MANAGER_CLEAR_CACHE = Module.cwrap(
          'get_EVT_ASSET_MANAGER_CLEAR_CACHE',
          'number',
          []
        );
        var EVT_TIMER = Module.cwrap('get_EVT_TIMER', 'number', []);
        var EVT_REQ_START = Module.cwrap('get_EVT_REQ_START', 'number', []);
        var EVT_USER_START = Module.cwrap('get_EVT_USER_START', 'number', []);
        var EVT_NONE = Module.cwrap('get_EVT_NONE', 'number', []);
        var EVT_PROP_WILL_CHANGE = Module.cwrap(
          'get_EVT_PROP_WILL_CHANGE',
          'number',
          []
        );
        var EVT_PROP_CHANGED = Module.cwrap(
          'get_EVT_PROP_CHANGED',
          'number',
          []
        );
        var EVT_CMD_WILL_EXEC = Module.cwrap(
          'get_EVT_CMD_WILL_EXEC',
          'number',
          []
        );
        var EVT_CMD_EXECED = Module.cwrap('get_EVT_CMD_EXECED', 'number', []);
        var EVT_CMD_CAN_EXEC = Module.cwrap(
          'get_EVT_CMD_CAN_EXEC',
          'number',
          []
        );
        var EVT_ITEMS_WILL_CHANGE = Module.cwrap(
          'get_EVT_ITEMS_WILL_CHANGE',
          'number',
          []
        );
        var EVT_ITEMS_CHANGED = Module.cwrap(
          'get_EVT_ITEMS_CHANGED',
          'number',
          []
        );
        var EVT_PROPS_CHANGED = Module.cwrap(
          'get_EVT_PROPS_CHANGED',
          'number',
          []
        );
        var EVT_PROGRESS = Module.cwrap('get_EVT_PROGRESS', 'number', []);
        var EVT_DONE = Module.cwrap('get_EVT_DONE', 'number', []);
        var EVT_ERROR = Module.cwrap('get_EVT_ERROR', 'number', []);
        var EVT_DESTROY = Module.cwrap('get_EVT_DESTROY', 'number', []);
        var event_from_name = Module.cwrap('event_from_name', 'number', [
          'string',
        ]);
        var event_cast = Module.cwrap('event_cast', 'number', ['number']);
        var event_get_type = Module.cwrap('event_get_type', 'number', [
          'number',
        ]);
        var event_create = Module.cwrap('event_create', 'number', ['number']);
        var event_destroy = Module.cwrap('event_destroy', 'number', ['number']);
        var event_t_get_prop_type = Module.cwrap(
          'event_t_get_prop_type',
          'number',
          ['number']
        );
        var event_t_get_prop_size = Module.cwrap(
          'event_t_get_prop_size',
          'number',
          ['number']
        );
        var event_t_get_prop_time = Module.cwrap(
          'event_t_get_prop_time',
          'number',
          ['number']
        );
        var event_t_get_prop_target = Module.cwrap(
          'event_t_get_prop_target',
          'number',
          ['number']
        );
        var font_manager_unload_font = Module.cwrap(
          'font_manager_unload_font',
          'number',
          ['number', 'string', 'number']
        );
        var font_manager_shrink_cache = Module.cwrap(
          'font_manager_shrink_cache',
          'number',
          ['number', 'number']
        );
        var font_manager_unload_all = Module.cwrap(
          'font_manager_unload_all',
          'number',
          ['number']
        );
        var GLYPH_FMT_ALPHA = Module.cwrap('get_GLYPH_FMT_ALPHA', 'number', []);
        var GLYPH_FMT_MONO = Module.cwrap('get_GLYPH_FMT_MONO', 'number', []);
        var GLYPH_FMT_RGBA = Module.cwrap('get_GLYPH_FMT_RGBA', 'number', []);
        var idle_add = Module.cwrap('idle_add', 'number', ['number', 'number']);
        var idle_remove = Module.cwrap('idle_remove', 'number', ['number']);
        var idle_remove_all_by_ctx = Module.cwrap(
          'idle_remove_all_by_ctx',
          'number',
          ['number']
        );
        var image_manager = Module.cwrap('image_manager', 'number', []);
        var image_manager_get_bitmap = Module.cwrap(
          'image_manager_get_bitmap',
          'number',
          ['number', 'string', 'number']
        );
        var image_manager_preload = Module.cwrap(
          'image_manager_preload',
          'number',
          ['number', 'string']
        );
        var INPUT_TEXT = Module.cwrap('get_INPUT_TEXT', 'number', []);
        var INPUT_INT = Module.cwrap('get_INPUT_INT', 'number', []);
        var INPUT_UINT = Module.cwrap('get_INPUT_UINT', 'number', []);
        var INPUT_HEX = Module.cwrap('get_INPUT_HEX', 'number', []);
        var INPUT_FLOAT = Module.cwrap('get_INPUT_FLOAT', 'number', []);
        var INPUT_UFLOAT = Module.cwrap('get_INPUT_UFLOAT', 'number', []);
        var INPUT_EMAIL = Module.cwrap('get_INPUT_EMAIL', 'number', []);
        var INPUT_PASSWORD = Module.cwrap('get_INPUT_PASSWORD', 'number', []);
        var INPUT_PHONE = Module.cwrap('get_INPUT_PHONE', 'number', []);
        var INPUT_IPV4 = Module.cwrap('get_INPUT_IPV4', 'number', []);
        var INPUT_DATE = Module.cwrap('get_INPUT_DATE', 'number', []);
        var INPUT_TIME = Module.cwrap('get_INPUT_TIME', 'number', []);
        var INPUT_TIME_FULL = Module.cwrap('get_INPUT_TIME_FULL', 'number', []);
        var INPUT_CUSTOM = Module.cwrap('get_INPUT_CUSTOM', 'number', []);
        var INPUT_CUSTOM_PASSWORD = Module.cwrap(
          'get_INPUT_CUSTOM_PASSWORD',
          'number',
          []
        );
        var INPUT_ASCII = Module.cwrap('get_INPUT_ASCII', 'number', []);
        var input_method_commit_text = Module.cwrap(
          'input_method_commit_text',
          'number',
          ['number', 'string']
        );
        var input_method_set_lang = Module.cwrap(
          'input_method_set_lang',
          'number',
          ['number', 'string']
        );
        var input_method_get_lang = Module.cwrap(
          'input_method_get_lang',
          'string',
          ['number']
        );
        var input_method_dispatch_key = Module.cwrap(
          'input_method_dispatch_key',
          'number',
          ['number', 'number']
        );
        var input_method_dispatch_keys = Module.cwrap(
          'input_method_dispatch_keys',
          'number',
          ['number', 'string']
        );
        var input_method_dispatch_preedit = Module.cwrap(
          'input_method_dispatch_preedit',
          'number',
          ['number']
        );
        var input_method_dispatch_preedit_confirm = Module.cwrap(
          'input_method_dispatch_preedit_confirm',
          'number',
          ['number']
        );
        var input_method_dispatch_preedit_abort = Module.cwrap(
          'input_method_dispatch_preedit_abort',
          'number',
          ['number']
        );
        var input_method = Module.cwrap('input_method', 'number', []);
        var TK_KEY_RETURN = Module.cwrap('get_TK_KEY_RETURN', 'number', []);
        var TK_KEY_ESCAPE = Module.cwrap('get_TK_KEY_ESCAPE', 'number', []);
        var TK_KEY_BACKSPACE = Module.cwrap(
          'get_TK_KEY_BACKSPACE',
          'number',
          []
        );
        var TK_KEY_TAB = Module.cwrap('get_TK_KEY_TAB', 'number', []);
        var TK_KEY_SPACE = Module.cwrap('get_TK_KEY_SPACE', 'number', []);
        var TK_KEY_EXCLAIM = Module.cwrap('get_TK_KEY_EXCLAIM', 'number', []);
        var TK_KEY_QUOTEDBL = Module.cwrap('get_TK_KEY_QUOTEDBL', 'number', []);
        var TK_KEY_HASH = Module.cwrap('get_TK_KEY_HASH', 'number', []);
        var TK_KEY_PERCENT = Module.cwrap('get_TK_KEY_PERCENT', 'number', []);
        var TK_KEY_DOLLAR = Module.cwrap('get_TK_KEY_DOLLAR', 'number', []);
        var TK_KEY_AMPERSAND = Module.cwrap(
          'get_TK_KEY_AMPERSAND',
          'number',
          []
        );
        var TK_KEY_QUOTE = Module.cwrap('get_TK_KEY_QUOTE', 'number', []);
        var TK_KEY_LEFTPAREN = Module.cwrap(
          'get_TK_KEY_LEFTPAREN',
          'number',
          []
        );
        var TK_KEY_RIGHTPAREN = Module.cwrap(
          'get_TK_KEY_RIGHTPAREN',
          'number',
          []
        );
        var TK_KEY_ASTERISK = Module.cwrap('get_TK_KEY_ASTERISK', 'number', []);
        var TK_KEY_PLUS = Module.cwrap('get_TK_KEY_PLUS', 'number', []);
        var TK_KEY_COMMA = Module.cwrap('get_TK_KEY_COMMA', 'number', []);
        var TK_KEY_MINUS = Module.cwrap('get_TK_KEY_MINUS', 'number', []);
        var TK_KEY_PERIOD = Module.cwrap('get_TK_KEY_PERIOD', 'number', []);
        var TK_KEY_SLASH = Module.cwrap('get_TK_KEY_SLASH', 'number', []);
        var TK_KEY_0 = Module.cwrap('get_TK_KEY_0', 'number', []);
        var TK_KEY_1 = Module.cwrap('get_TK_KEY_1', 'number', []);
        var TK_KEY_2 = Module.cwrap('get_TK_KEY_2', 'number', []);
        var TK_KEY_3 = Module.cwrap('get_TK_KEY_3', 'number', []);
        var TK_KEY_4 = Module.cwrap('get_TK_KEY_4', 'number', []);
        var TK_KEY_5 = Module.cwrap('get_TK_KEY_5', 'number', []);
        var TK_KEY_6 = Module.cwrap('get_TK_KEY_6', 'number', []);
        var TK_KEY_7 = Module.cwrap('get_TK_KEY_7', 'number', []);
        var TK_KEY_8 = Module.cwrap('get_TK_KEY_8', 'number', []);
        var TK_KEY_9 = Module.cwrap('get_TK_KEY_9', 'number', []);
        var TK_KEY_COLON = Module.cwrap('get_TK_KEY_COLON', 'number', []);
        var TK_KEY_SEMICOLON = Module.cwrap(
          'get_TK_KEY_SEMICOLON',
          'number',
          []
        );
        var TK_KEY_LESS = Module.cwrap('get_TK_KEY_LESS', 'number', []);
        var TK_KEY_EQUAL = Module.cwrap('get_TK_KEY_EQUAL', 'number', []);
        var TK_KEY_GREATER = Module.cwrap('get_TK_KEY_GREATER', 'number', []);
        var TK_KEY_QUESTION = Module.cwrap('get_TK_KEY_QUESTION', 'number', []);
        var TK_KEY_AT = Module.cwrap('get_TK_KEY_AT', 'number', []);
        var TK_KEY_LEFTBRACKET = Module.cwrap(
          'get_TK_KEY_LEFTBRACKET',
          'number',
          []
        );
        var TK_KEY_BACKSLASH = Module.cwrap(
          'get_TK_KEY_BACKSLASH',
          'number',
          []
        );
        var TK_KEY_RIGHTBRACKET = Module.cwrap(
          'get_TK_KEY_RIGHTBRACKET',
          'number',
          []
        );
        var TK_KEY_CARET = Module.cwrap('get_TK_KEY_CARET', 'number', []);
        var TK_KEY_UNDERSCORE = Module.cwrap(
          'get_TK_KEY_UNDERSCORE',
          'number',
          []
        );
        var TK_KEY_BACKQUOTE = Module.cwrap(
          'get_TK_KEY_BACKQUOTE',
          'number',
          []
        );
        var TK_KEY_a = Module.cwrap('get_TK_KEY_a', 'number', []);
        var TK_KEY_b = Module.cwrap('get_TK_KEY_b', 'number', []);
        var TK_KEY_c = Module.cwrap('get_TK_KEY_c', 'number', []);
        var TK_KEY_d = Module.cwrap('get_TK_KEY_d', 'number', []);
        var TK_KEY_e = Module.cwrap('get_TK_KEY_e', 'number', []);
        var TK_KEY_f = Module.cwrap('get_TK_KEY_f', 'number', []);
        var TK_KEY_g = Module.cwrap('get_TK_KEY_g', 'number', []);
        var TK_KEY_h = Module.cwrap('get_TK_KEY_h', 'number', []);
        var TK_KEY_i = Module.cwrap('get_TK_KEY_i', 'number', []);
        var TK_KEY_j = Module.cwrap('get_TK_KEY_j', 'number', []);
        var TK_KEY_k = Module.cwrap('get_TK_KEY_k', 'number', []);
        var TK_KEY_l = Module.cwrap('get_TK_KEY_l', 'number', []);
        var TK_KEY_m = Module.cwrap('get_TK_KEY_m', 'number', []);
        var TK_KEY_n = Module.cwrap('get_TK_KEY_n', 'number', []);
        var TK_KEY_o = Module.cwrap('get_TK_KEY_o', 'number', []);
        var TK_KEY_p = Module.cwrap('get_TK_KEY_p', 'number', []);
        var TK_KEY_q = Module.cwrap('get_TK_KEY_q', 'number', []);
        var TK_KEY_r = Module.cwrap('get_TK_KEY_r', 'number', []);
        var TK_KEY_s = Module.cwrap('get_TK_KEY_s', 'number', []);
        var TK_KEY_t = Module.cwrap('get_TK_KEY_t', 'number', []);
        var TK_KEY_u = Module.cwrap('get_TK_KEY_u', 'number', []);
        var TK_KEY_v = Module.cwrap('get_TK_KEY_v', 'number', []);
        var TK_KEY_w = Module.cwrap('get_TK_KEY_w', 'number', []);
        var TK_KEY_x = Module.cwrap('get_TK_KEY_x', 'number', []);
        var TK_KEY_y = Module.cwrap('get_TK_KEY_y', 'number', []);
        var TK_KEY_z = Module.cwrap('get_TK_KEY_z', 'number', []);
        var TK_KEY_A = Module.cwrap('get_TK_KEY_A', 'number', []);
        var TK_KEY_B = Module.cwrap('get_TK_KEY_B', 'number', []);
        var TK_KEY_C = Module.cwrap('get_TK_KEY_C', 'number', []);
        var TK_KEY_D = Module.cwrap('get_TK_KEY_D', 'number', []);
        var TK_KEY_E = Module.cwrap('get_TK_KEY_E', 'number', []);
        var TK_KEY_F = Module.cwrap('get_TK_KEY_F', 'number', []);
        var TK_KEY_G = Module.cwrap('get_TK_KEY_G', 'number', []);
        var TK_KEY_H = Module.cwrap('get_TK_KEY_H', 'number', []);
        var TK_KEY_I = Module.cwrap('get_TK_KEY_I', 'number', []);
        var TK_KEY_J = Module.cwrap('get_TK_KEY_J', 'number', []);
        var TK_KEY_K = Module.cwrap('get_TK_KEY_K', 'number', []);
        var TK_KEY_L = Module.cwrap('get_TK_KEY_L', 'number', []);
        var TK_KEY_M = Module.cwrap('get_TK_KEY_M', 'number', []);
        var TK_KEY_N = Module.cwrap('get_TK_KEY_N', 'number', []);
        var TK_KEY_O = Module.cwrap('get_TK_KEY_O', 'number', []);
        var TK_KEY_P = Module.cwrap('get_TK_KEY_P', 'number', []);
        var TK_KEY_Q = Module.cwrap('get_TK_KEY_Q', 'number', []);
        var TK_KEY_R = Module.cwrap('get_TK_KEY_R', 'number', []);
        var TK_KEY_S = Module.cwrap('get_TK_KEY_S', 'number', []);
        var TK_KEY_T = Module.cwrap('get_TK_KEY_T', 'number', []);
        var TK_KEY_U = Module.cwrap('get_TK_KEY_U', 'number', []);
        var TK_KEY_V = Module.cwrap('get_TK_KEY_V', 'number', []);
        var TK_KEY_W = Module.cwrap('get_TK_KEY_W', 'number', []);
        var TK_KEY_X = Module.cwrap('get_TK_KEY_X', 'number', []);
        var TK_KEY_Y = Module.cwrap('get_TK_KEY_Y', 'number', []);
        var TK_KEY_Z = Module.cwrap('get_TK_KEY_Z', 'number', []);
        var TK_KEY_DOT = Module.cwrap('get_TK_KEY_DOT', 'number', []);
        var TK_KEY_DELETE = Module.cwrap('get_TK_KEY_DELETE', 'number', []);
        var TK_KEY_LEFTBRACE = Module.cwrap(
          'get_TK_KEY_LEFTBRACE',
          'number',
          []
        );
        var TK_KEY_RIGHTBRACE = Module.cwrap(
          'get_TK_KEY_RIGHTBRACE',
          'number',
          []
        );
        var TK_KEY_LSHIFT = Module.cwrap('get_TK_KEY_LSHIFT', 'number', []);
        var TK_KEY_RSHIFT = Module.cwrap('get_TK_KEY_RSHIFT', 'number', []);
        var TK_KEY_LCTRL = Module.cwrap('get_TK_KEY_LCTRL', 'number', []);
        var TK_KEY_RCTRL = Module.cwrap('get_TK_KEY_RCTRL', 'number', []);
        var TK_KEY_LALT = Module.cwrap('get_TK_KEY_LALT', 'number', []);
        var TK_KEY_RALT = Module.cwrap('get_TK_KEY_RALT', 'number', []);
        var TK_KEY_CAPSLOCK = Module.cwrap('get_TK_KEY_CAPSLOCK', 'number', []);
        var TK_KEY_HOME = Module.cwrap('get_TK_KEY_HOME', 'number', []);
        var TK_KEY_END = Module.cwrap('get_TK_KEY_END', 'number', []);
        var TK_KEY_INSERT = Module.cwrap('get_TK_KEY_INSERT', 'number', []);
        var TK_KEY_UP = Module.cwrap('get_TK_KEY_UP', 'number', []);
        var TK_KEY_DOWN = Module.cwrap('get_TK_KEY_DOWN', 'number', []);
        var TK_KEY_LEFT = Module.cwrap('get_TK_KEY_LEFT', 'number', []);
        var TK_KEY_RIGHT = Module.cwrap('get_TK_KEY_RIGHT', 'number', []);
        var TK_KEY_PAGEUP = Module.cwrap('get_TK_KEY_PAGEUP', 'number', []);
        var TK_KEY_PAGEDOWN = Module.cwrap('get_TK_KEY_PAGEDOWN', 'number', []);
        var TK_KEY_F1 = Module.cwrap('get_TK_KEY_F1', 'number', []);
        var TK_KEY_F2 = Module.cwrap('get_TK_KEY_F2', 'number', []);
        var TK_KEY_F3 = Module.cwrap('get_TK_KEY_F3', 'number', []);
        var TK_KEY_F4 = Module.cwrap('get_TK_KEY_F4', 'number', []);
        var TK_KEY_F5 = Module.cwrap('get_TK_KEY_F5', 'number', []);
        var TK_KEY_F6 = Module.cwrap('get_TK_KEY_F6', 'number', []);
        var TK_KEY_F7 = Module.cwrap('get_TK_KEY_F7', 'number', []);
        var TK_KEY_F8 = Module.cwrap('get_TK_KEY_F8', 'number', []);
        var TK_KEY_F9 = Module.cwrap('get_TK_KEY_F9', 'number', []);
        var TK_KEY_F10 = Module.cwrap('get_TK_KEY_F10', 'number', []);
        var TK_KEY_F11 = Module.cwrap('get_TK_KEY_F11', 'number', []);
        var TK_KEY_F12 = Module.cwrap('get_TK_KEY_F12', 'number', []);
        var TK_KEY_MENU = Module.cwrap('get_TK_KEY_MENU', 'number', []);
        var TK_KEY_COMMAND = Module.cwrap('get_TK_KEY_COMMAND', 'number', []);
        var TK_KEY_BACK = Module.cwrap('get_TK_KEY_BACK', 'number', []);
        var TK_KEY_CANCEL = Module.cwrap('get_TK_KEY_CANCEL', 'number', []);
        var TK_KEY_WHEEL = Module.cwrap('get_TK_KEY_WHEEL', 'number', []);
        var locale_info = Module.cwrap('locale_info', 'number', []);
        var locale_info_tr = Module.cwrap('locale_info_tr', 'string', [
          'number',
          'string',
        ]);
        var locale_info_change = Module.cwrap('locale_info_change', 'number', [
          'number',
          'string',
          'string',
        ]);
        var locale_info_off = Module.cwrap('locale_info_off', 'number', [
          'number',
          'number',
        ]);
        var STYLE_ID_BG_COLOR = Module.cwrap(
          'get_STYLE_ID_BG_COLOR',
          'string',
          []
        );
        var STYLE_ID_FG_COLOR = Module.cwrap(
          'get_STYLE_ID_FG_COLOR',
          'string',
          []
        );
        var STYLE_ID_MASK_COLOR = Module.cwrap(
          'get_STYLE_ID_MASK_COLOR',
          'string',
          []
        );
        var STYLE_ID_FONT_NAME = Module.cwrap(
          'get_STYLE_ID_FONT_NAME',
          'string',
          []
        );
        var STYLE_ID_FONT_SIZE = Module.cwrap(
          'get_STYLE_ID_FONT_SIZE',
          'string',
          []
        );
        var STYLE_ID_FONT_STYLE = Module.cwrap(
          'get_STYLE_ID_FONT_STYLE',
          'string',
          []
        );
        var STYLE_ID_TEXT_COLOR = Module.cwrap(
          'get_STYLE_ID_TEXT_COLOR',
          'string',
          []
        );
        var STYLE_ID_HIGHLIGHT_FONT_NAME = Module.cwrap(
          'get_STYLE_ID_HIGHLIGHT_FONT_NAME',
          'string',
          []
        );
        var STYLE_ID_HIGHLIGHT_FONT_SIZE = Module.cwrap(
          'get_STYLE_ID_HIGHLIGHT_FONT_SIZE',
          'string',
          []
        );
        var STYLE_ID_HIGHLIGHT_TEXT_COLOR = Module.cwrap(
          'get_STYLE_ID_HIGHLIGHT_TEXT_COLOR',
          'string',
          []
        );
        var STYLE_ID_TIPS_TEXT_COLOR = Module.cwrap(
          'get_STYLE_ID_TIPS_TEXT_COLOR',
          'string',
          []
        );
        var STYLE_ID_TEXT_ALIGN_H = Module.cwrap(
          'get_STYLE_ID_TEXT_ALIGN_H',
          'string',
          []
        );
        var STYLE_ID_TEXT_ALIGN_V = Module.cwrap(
          'get_STYLE_ID_TEXT_ALIGN_V',
          'string',
          []
        );
        var STYLE_ID_BORDER_COLOR = Module.cwrap(
          'get_STYLE_ID_BORDER_COLOR',
          'string',
          []
        );
        var STYLE_ID_BORDER_WIDTH = Module.cwrap(
          'get_STYLE_ID_BORDER_WIDTH',
          'string',
          []
        );
        var STYLE_ID_BORDER = Module.cwrap('get_STYLE_ID_BORDER', 'string', []);
        var STYLE_ID_BG_IMAGE = Module.cwrap(
          'get_STYLE_ID_BG_IMAGE',
          'string',
          []
        );
        var STYLE_ID_BG_IMAGE_DRAW_TYPE = Module.cwrap(
          'get_STYLE_ID_BG_IMAGE_DRAW_TYPE',
          'string',
          []
        );
        var STYLE_ID_ICON = Module.cwrap('get_STYLE_ID_ICON', 'string', []);
        var STYLE_ID_FG_IMAGE = Module.cwrap(
          'get_STYLE_ID_FG_IMAGE',
          'string',
          []
        );
        var STYLE_ID_FG_IMAGE_DRAW_TYPE = Module.cwrap(
          'get_STYLE_ID_FG_IMAGE_DRAW_TYPE',
          'string',
          []
        );
        var STYLE_ID_SPACER = Module.cwrap('get_STYLE_ID_SPACER', 'string', []);
        var STYLE_ID_MARGIN = Module.cwrap('get_STYLE_ID_MARGIN', 'string', []);
        var STYLE_ID_MARGIN_LEFT = Module.cwrap(
          'get_STYLE_ID_MARGIN_LEFT',
          'string',
          []
        );
        var STYLE_ID_MARGIN_RIGHT = Module.cwrap(
          'get_STYLE_ID_MARGIN_RIGHT',
          'string',
          []
        );
        var STYLE_ID_MARGIN_TOP = Module.cwrap(
          'get_STYLE_ID_MARGIN_TOP',
          'string',
          []
        );
        var STYLE_ID_MARGIN_BOTTOM = Module.cwrap(
          'get_STYLE_ID_MARGIN_BOTTOM',
          'string',
          []
        );
        var STYLE_ID_ICON_AT = Module.cwrap(
          'get_STYLE_ID_ICON_AT',
          'string',
          []
        );
        var STYLE_ID_ACTIVE_ICON = Module.cwrap(
          'get_STYLE_ID_ACTIVE_ICON',
          'string',
          []
        );
        var STYLE_ID_X_OFFSET = Module.cwrap(
          'get_STYLE_ID_X_OFFSET',
          'string',
          []
        );
        var STYLE_ID_Y_OFFSET = Module.cwrap(
          'get_STYLE_ID_Y_OFFSET',
          'string',
          []
        );
        var STYLE_ID_SELECTED_BG_COLOR = Module.cwrap(
          'get_STYLE_ID_SELECTED_BG_COLOR',
          'string',
          []
        );
        var STYLE_ID_SELECTED_FG_COLOR = Module.cwrap(
          'get_STYLE_ID_SELECTED_FG_COLOR',
          'string',
          []
        );
        var STYLE_ID_SELECTED_TEXT_COLOR = Module.cwrap(
          'get_STYLE_ID_SELECTED_TEXT_COLOR',
          'string',
          []
        );
        var STYLE_ID_ROUND_RADIUS = Module.cwrap(
          'get_STYLE_ID_ROUND_RADIUS',
          'string',
          []
        );
        var STYLE_ID_ROUND_RADIUS_TOP_LETF = Module.cwrap(
          'get_STYLE_ID_ROUND_RADIUS_TOP_LETF',
          'string',
          []
        );
        var STYLE_ID_ROUND_RADIUS_TOP_RIGHT = Module.cwrap(
          'get_STYLE_ID_ROUND_RADIUS_TOP_RIGHT',
          'string',
          []
        );
        var STYLE_ID_ROUND_RADIUS_BOTTOM_LETF = Module.cwrap(
          'get_STYLE_ID_ROUND_RADIUS_BOTTOM_LETF',
          'string',
          []
        );
        var STYLE_ID_ROUND_RADIUS_BOTTOM_RIGHT = Module.cwrap(
          'get_STYLE_ID_ROUND_RADIUS_BOTTOM_RIGHT',
          'string',
          []
        );
        var STYLE_ID_CHILDREN_LAYOUT = Module.cwrap(
          'get_STYLE_ID_CHILDREN_LAYOUT',
          'string',
          []
        );
        var STYLE_ID_SELF_LAYOUT = Module.cwrap(
          'get_STYLE_ID_SELF_LAYOUT',
          'string',
          []
        );
        var STYLE_ID_FOCUSABLE = Module.cwrap(
          'get_STYLE_ID_FOCUSABLE',
          'string',
          []
        );
        var STYLE_ID_FEEDBACK = Module.cwrap(
          'get_STYLE_ID_FEEDBACK',
          'string',
          []
        );
        var style_notify_widget_state_changed = Module.cwrap(
          'style_notify_widget_state_changed',
          'number',
          ['number', 'number']
        );
        var style_is_valid = Module.cwrap('style_is_valid', 'number', [
          'number',
        ]);
        var style_get_int = Module.cwrap('style_get_int', 'number', [
          'number',
          'string',
          'number',
        ]);
        var style_get_uint = Module.cwrap('style_get_uint', 'number', [
          'number',
          'string',
          'number',
        ]);
        var style_get_str = Module.cwrap('style_get_str', 'string', [
          'number',
          'string',
          'string',
        ]);
        var style_set = Module.cwrap('style_set', 'number', [
          'number',
          'string',
          'string',
          'number',
        ]);
        var style_update_state = Module.cwrap('style_update_state', 'number', [
          'number',
          'number',
          'string',
          'string',
          'string',
        ]);
        var style_get_style_state = Module.cwrap(
          'style_get_style_state',
          'string',
          ['number']
        );
        var style_is_mutable = Module.cwrap('style_is_mutable', 'number', [
          'number',
        ]);
        var style_get_style_type = Module.cwrap(
          'style_get_style_type',
          'string',
          ['number']
        );
        var theme = Module.cwrap('theme', 'number', []);
        var timer_add = Module.cwrap('timer_add', 'number', [
          'number',
          'number',
          'number',
        ]);
        var timer_remove = Module.cwrap('timer_remove', 'number', ['number']);
        var timer_remove_all_by_ctx = Module.cwrap(
          'timer_remove_all_by_ctx',
          'number',
          ['number']
        );
        var timer_reset = Module.cwrap('timer_reset', 'number', ['number']);
        var timer_suspend = Module.cwrap('timer_suspend', 'number', ['number']);
        var timer_resume = Module.cwrap('timer_resume', 'number', ['number']);
        var timer_modify = Module.cwrap('timer_modify', 'number', [
          'number',
          'number',
        ]);
        var ALIGN_V_NONE = Module.cwrap('get_ALIGN_V_NONE', 'number', []);
        var ALIGN_V_MIDDLE = Module.cwrap('get_ALIGN_V_MIDDLE', 'number', []);
        var ALIGN_V_TOP = Module.cwrap('get_ALIGN_V_TOP', 'number', []);
        var ALIGN_V_BOTTOM = Module.cwrap('get_ALIGN_V_BOTTOM', 'number', []);
        var ALIGN_H_NONE = Module.cwrap('get_ALIGN_H_NONE', 'number', []);
        var ALIGN_H_CENTER = Module.cwrap('get_ALIGN_H_CENTER', 'number', []);
        var ALIGN_H_LEFT = Module.cwrap('get_ALIGN_H_LEFT', 'number', []);
        var ALIGN_H_RIGHT = Module.cwrap('get_ALIGN_H_RIGHT', 'number', []);
        var APP_MOBILE = Module.cwrap('get_APP_MOBILE', 'number', []);
        var APP_SIMULATOR = Module.cwrap('get_APP_SIMULATOR', 'number', []);
        var APP_DESKTOP = Module.cwrap('get_APP_DESKTOP', 'number', []);
        var BITMAP_FMT_NONE = Module.cwrap('get_BITMAP_FMT_NONE', 'number', []);
        var BITMAP_FMT_RGBA8888 = Module.cwrap(
          'get_BITMAP_FMT_RGBA8888',
          'number',
          []
        );
        var BITMAP_FMT_ABGR8888 = Module.cwrap(
          'get_BITMAP_FMT_ABGR8888',
          'number',
          []
        );
        var BITMAP_FMT_BGRA8888 = Module.cwrap(
          'get_BITMAP_FMT_BGRA8888',
          'number',
          []
        );
        var BITMAP_FMT_ARGB8888 = Module.cwrap(
          'get_BITMAP_FMT_ARGB8888',
          'number',
          []
        );
        var BITMAP_FMT_RGB565 = Module.cwrap(
          'get_BITMAP_FMT_RGB565',
          'number',
          []
        );
        var BITMAP_FMT_BGR565 = Module.cwrap(
          'get_BITMAP_FMT_BGR565',
          'number',
          []
        );
        var BITMAP_FMT_RGB888 = Module.cwrap(
          'get_BITMAP_FMT_RGB888',
          'number',
          []
        );
        var BITMAP_FMT_BGR888 = Module.cwrap(
          'get_BITMAP_FMT_BGR888',
          'number',
          []
        );
        var BITMAP_FMT_GRAY = Module.cwrap('get_BITMAP_FMT_GRAY', 'number', []);
        var BITMAP_FMT_MONO = Module.cwrap('get_BITMAP_FMT_MONO', 'number', []);
        var BITMAP_FLAG_NONE = Module.cwrap(
          'get_BITMAP_FLAG_NONE',
          'number',
          []
        );
        var BITMAP_FLAG_OPAQUE = Module.cwrap(
          'get_BITMAP_FLAG_OPAQUE',
          'number',
          []
        );
        var BITMAP_FLAG_IMMUTABLE = Module.cwrap(
          'get_BITMAP_FLAG_IMMUTABLE',
          'number',
          []
        );
        var BITMAP_FLAG_TEXTURE = Module.cwrap(
          'get_BITMAP_FLAG_TEXTURE',
          'number',
          []
        );
        var BITMAP_FLAG_CHANGED = Module.cwrap(
          'get_BITMAP_FLAG_CHANGED',
          'number',
          []
        );
        var BITMAP_FLAG_PREMULTI_ALPHA = Module.cwrap(
          'get_BITMAP_FLAG_PREMULTI_ALPHA',
          'number',
          []
        );
        var vgcanvas_cast = Module.cwrap('vgcanvas_cast', 'number', ['number']);
        var vgcanvas_flush = Module.cwrap('vgcanvas_flush', 'number', [
          'number',
        ]);
        var vgcanvas_begin_path = Module.cwrap(
          'vgcanvas_begin_path',
          'number',
          ['number']
        );
        var vgcanvas_move_to = Module.cwrap('vgcanvas_move_to', 'number', [
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_line_to = Module.cwrap('vgcanvas_line_to', 'number', [
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_quad_to = Module.cwrap('vgcanvas_quad_to', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_bezier_to = Module.cwrap('vgcanvas_bezier_to', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_arc_to = Module.cwrap('vgcanvas_arc_to', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_arc = Module.cwrap('vgcanvas_arc', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_is_point_in_path = Module.cwrap(
          'vgcanvas_is_point_in_path',
          'number',
          ['number', 'number', 'number']
        );
        var vgcanvas_rect = Module.cwrap('vgcanvas_rect', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_rounded_rect = Module.cwrap(
          'vgcanvas_rounded_rect',
          'number',
          ['number', 'number', 'number', 'number', 'number', 'number']
        );
        var vgcanvas_ellipse = Module.cwrap('vgcanvas_ellipse', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_close_path = Module.cwrap(
          'vgcanvas_close_path',
          'number',
          ['number']
        );
        var vgcanvas_path_winding = Module.cwrap(
          'vgcanvas_path_winding',
          'number',
          ['number', 'number']
        );
        var vgcanvas_rotate = Module.cwrap('vgcanvas_rotate', 'number', [
          'number',
          'number',
        ]);
        var vgcanvas_scale = Module.cwrap('vgcanvas_scale', 'number', [
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_translate = Module.cwrap('vgcanvas_translate', 'number', [
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_transform = Module.cwrap('vgcanvas_transform', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_set_transform = Module.cwrap(
          'vgcanvas_set_transform',
          'number',
          ['number', 'number', 'number', 'number', 'number', 'number', 'number']
        );
        var vgcanvas_clip_path = Module.cwrap('vgcanvas_clip_path', 'number', [
          'number',
        ]);
        var vgcanvas_clip_rect = Module.cwrap('vgcanvas_clip_rect', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_intersect_clip_rect = Module.cwrap(
          'vgcanvas_intersect_clip_rect',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var vgcanvas_fill = Module.cwrap('vgcanvas_fill', 'number', ['number']);
        var vgcanvas_stroke = Module.cwrap('vgcanvas_stroke', 'number', [
          'number',
        ]);
        var vgcanvas_paint = Module.cwrap('vgcanvas_paint', 'number', [
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_set_font = Module.cwrap('vgcanvas_set_font', 'number', [
          'number',
          'string',
        ]);
        var vgcanvas_set_font_size = Module.cwrap(
          'vgcanvas_set_font_size',
          'number',
          ['number', 'number']
        );
        var vgcanvas_set_text_align = Module.cwrap(
          'vgcanvas_set_text_align',
          'number',
          ['number', 'string']
        );
        var vgcanvas_set_text_baseline = Module.cwrap(
          'vgcanvas_set_text_baseline',
          'number',
          ['number', 'string']
        );
        var vgcanvas_fill_text = Module.cwrap('vgcanvas_fill_text', 'number', [
          'number',
          'string',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_measure_text = Module.cwrap(
          'vgcanvas_measure_text',
          'number',
          ['number', 'string']
        );
        var vgcanvas_draw_image = Module.cwrap(
          'vgcanvas_draw_image',
          'number',
          [
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
          ]
        );
        var vgcanvas_draw_icon = Module.cwrap('vgcanvas_draw_icon', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vgcanvas_set_antialias = Module.cwrap(
          'vgcanvas_set_antialias',
          'number',
          ['number', 'number']
        );
        var vgcanvas_set_global_alpha = Module.cwrap(
          'vgcanvas_set_global_alpha',
          'number',
          ['number', 'number']
        );
        var vgcanvas_set_line_width = Module.cwrap(
          'vgcanvas_set_line_width',
          'number',
          ['number', 'number']
        );
        var vgcanvas_set_fill_color_str = Module.cwrap(
          'vgcanvas_set_fill_color_str',
          'number',
          ['number', 'string']
        );
        var vgcanvas_set_stroke_color_str = Module.cwrap(
          'vgcanvas_set_stroke_color_str',
          'number',
          ['number', 'string']
        );
        var vgcanvas_set_line_cap = Module.cwrap(
          'vgcanvas_set_line_cap',
          'number',
          ['number', 'string']
        );
        var vgcanvas_set_line_join = Module.cwrap(
          'vgcanvas_set_line_join',
          'number',
          ['number', 'string']
        );
        var vgcanvas_set_miter_limit = Module.cwrap(
          'vgcanvas_set_miter_limit',
          'number',
          ['number', 'number']
        );
        var vgcanvas_save = Module.cwrap('vgcanvas_save', 'number', ['number']);
        var vgcanvas_restore = Module.cwrap('vgcanvas_restore', 'number', [
          'number',
        ]);
        var vgcanvas_t_get_prop_w = Module.cwrap(
          'vgcanvas_t_get_prop_w',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_h = Module.cwrap(
          'vgcanvas_t_get_prop_h',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_stride = Module.cwrap(
          'vgcanvas_t_get_prop_stride',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_ratio = Module.cwrap(
          'vgcanvas_t_get_prop_ratio',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_anti_alias = Module.cwrap(
          'vgcanvas_t_get_prop_anti_alias',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_line_width = Module.cwrap(
          'vgcanvas_t_get_prop_line_width',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_global_alpha = Module.cwrap(
          'vgcanvas_t_get_prop_global_alpha',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_miter_limit = Module.cwrap(
          'vgcanvas_t_get_prop_miter_limit',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_line_cap = Module.cwrap(
          'vgcanvas_t_get_prop_line_cap',
          'string',
          ['number']
        );
        var vgcanvas_t_get_prop_line_join = Module.cwrap(
          'vgcanvas_t_get_prop_line_join',
          'string',
          ['number']
        );
        var vgcanvas_t_get_prop_font = Module.cwrap(
          'vgcanvas_t_get_prop_font',
          'string',
          ['number']
        );
        var vgcanvas_t_get_prop_font_size = Module.cwrap(
          'vgcanvas_t_get_prop_font_size',
          'number',
          ['number']
        );
        var vgcanvas_t_get_prop_text_align = Module.cwrap(
          'vgcanvas_t_get_prop_text_align',
          'string',
          ['number']
        );
        var vgcanvas_t_get_prop_text_baseline = Module.cwrap(
          'vgcanvas_t_get_prop_text_baseline',
          'string',
          ['number']
        );
        var VGCANVAS_LINE_CAP_ROUND = Module.cwrap(
          'get_VGCANVAS_LINE_CAP_ROUND',
          'string',
          []
        );
        var VGCANVAS_LINE_CAP_SQUARE = Module.cwrap(
          'get_VGCANVAS_LINE_CAP_SQUARE',
          'string',
          []
        );
        var VGCANVAS_LINE_CAP_BUTT = Module.cwrap(
          'get_VGCANVAS_LINE_CAP_BUTT',
          'string',
          []
        );
        var VGCANVAS_LINE_JOIN_ROUND = Module.cwrap(
          'get_VGCANVAS_LINE_JOIN_ROUND',
          'string',
          []
        );
        var VGCANVAS_LINE_JOIN_BEVEL = Module.cwrap(
          'get_VGCANVAS_LINE_JOIN_BEVEL',
          'string',
          []
        );
        var VGCANVAS_LINE_JOIN_MITTER = Module.cwrap(
          'get_VGCANVAS_LINE_JOIN_MITTER',
          'string',
          []
        );
        var WIDGET_PROP_EXEC = Module.cwrap(
          'get_WIDGET_PROP_EXEC',
          'string',
          []
        );
        var WIDGET_PROP_X = Module.cwrap('get_WIDGET_PROP_X', 'string', []);
        var WIDGET_PROP_Y = Module.cwrap('get_WIDGET_PROP_Y', 'string', []);
        var WIDGET_PROP_W = Module.cwrap('get_WIDGET_PROP_W', 'string', []);
        var WIDGET_PROP_H = Module.cwrap('get_WIDGET_PROP_H', 'string', []);
        var WIDGET_PROP_MAX_H = Module.cwrap(
          'get_WIDGET_PROP_MAX_H',
          'string',
          []
        );
        var WIDGET_PROP_DESIGN_W = Module.cwrap(
          'get_WIDGET_PROP_DESIGN_W',
          'string',
          []
        );
        var WIDGET_PROP_DESIGN_H = Module.cwrap(
          'get_WIDGET_PROP_DESIGN_H',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_SCALE_CHILDREN_X = Module.cwrap(
          'get_WIDGET_PROP_AUTO_SCALE_CHILDREN_X',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_SCALE_CHILDREN_Y = Module.cwrap(
          'get_WIDGET_PROP_AUTO_SCALE_CHILDREN_Y',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_SCALE_CHILDREN_W = Module.cwrap(
          'get_WIDGET_PROP_AUTO_SCALE_CHILDREN_W',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_SCALE_CHILDREN_H = Module.cwrap(
          'get_WIDGET_PROP_AUTO_SCALE_CHILDREN_H',
          'string',
          []
        );
        var WIDGET_PROP_INPUTING = Module.cwrap(
          'get_WIDGET_PROP_INPUTING',
          'string',
          []
        );
        var WIDGET_PROP_ALWAYS_ON_TOP = Module.cwrap(
          'get_WIDGET_PROP_ALWAYS_ON_TOP',
          'string',
          []
        );
        var WIDGET_PROP_CARET_X = Module.cwrap(
          'get_WIDGET_PROP_CARET_X',
          'string',
          []
        );
        var WIDGET_PROP_CARET_Y = Module.cwrap(
          'get_WIDGET_PROP_CARET_Y',
          'string',
          []
        );
        var WIDGET_PROP_DIRTY_RECT_TOLERANCE = Module.cwrap(
          'get_WIDGET_PROP_DIRTY_RECT_TOLERANCE',
          'string',
          []
        );
        var WIDGET_PROP_BIDI = Module.cwrap(
          'get_WIDGET_PROP_BIDI',
          'string',
          []
        );
        var WIDGET_PROP_CANVAS = Module.cwrap(
          'get_WIDGET_PROP_CANVAS',
          'string',
          []
        );
        var WIDGET_PROP_LOCALIZE_OPTIONS = Module.cwrap(
          'get_WIDGET_PROP_LOCALIZE_OPTIONS',
          'string',
          []
        );
        var WIDGET_PROP_NATIVE_WINDOW = Module.cwrap(
          'get_WIDGET_PROP_NATIVE_WINDOW',
          'string',
          []
        );
        var WIDGET_PROP_HIGHLIGHT = Module.cwrap(
          'get_WIDGET_PROP_HIGHLIGHT',
          'string',
          []
        );
        var WIDGET_PROP_BAR_SIZE = Module.cwrap(
          'get_WIDGET_PROP_BAR_SIZE',
          'string',
          []
        );
        var WIDGET_PROP_OPACITY = Module.cwrap(
          'get_WIDGET_PROP_OPACITY',
          'string',
          []
        );
        var WIDGET_PROP_MIN_W = Module.cwrap(
          'get_WIDGET_PROP_MIN_W',
          'string',
          []
        );
        var WIDGET_PROP_MAX_W = Module.cwrap(
          'get_WIDGET_PROP_MAX_W',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_ADJUST_SIZE = Module.cwrap(
          'get_WIDGET_PROP_AUTO_ADJUST_SIZE',
          'string',
          []
        );
        var WIDGET_PROP_SINGLE_INSTANCE = Module.cwrap(
          'get_WIDGET_PROP_SINGLE_INSTANCE',
          'string',
          []
        );
        var WIDGET_PROP_STRONGLY_FOCUS = Module.cwrap(
          'get_WIDGET_PROP_STRONGLY_FOCUS',
          'string',
          []
        );
        var WIDGET_PROP_CHILDREN_LAYOUT = Module.cwrap(
          'get_WIDGET_PROP_CHILDREN_LAYOUT',
          'string',
          []
        );
        var WIDGET_PROP_LAYOUT = Module.cwrap(
          'get_WIDGET_PROP_LAYOUT',
          'string',
          []
        );
        var WIDGET_PROP_SELF_LAYOUT = Module.cwrap(
          'get_WIDGET_PROP_SELF_LAYOUT',
          'string',
          []
        );
        var WIDGET_PROP_LAYOUT_W = Module.cwrap(
          'get_WIDGET_PROP_LAYOUT_W',
          'string',
          []
        );
        var WIDGET_PROP_LAYOUT_H = Module.cwrap(
          'get_WIDGET_PROP_LAYOUT_H',
          'string',
          []
        );
        var WIDGET_PROP_VIRTUAL_W = Module.cwrap(
          'get_WIDGET_PROP_VIRTUAL_W',
          'string',
          []
        );
        var WIDGET_PROP_VIRTUAL_H = Module.cwrap(
          'get_WIDGET_PROP_VIRTUAL_H',
          'string',
          []
        );
        var WIDGET_PROP_NAME = Module.cwrap(
          'get_WIDGET_PROP_NAME',
          'string',
          []
        );
        var WIDGET_PROP_TYPE = Module.cwrap(
          'get_WIDGET_PROP_TYPE',
          'string',
          []
        );
        var WIDGET_PROP_CLOSABLE = Module.cwrap(
          'get_WIDGET_PROP_CLOSABLE',
          'string',
          []
        );
        var WIDGET_PROP_POINTER_CURSOR = Module.cwrap(
          'get_WIDGET_PROP_POINTER_CURSOR',
          'string',
          []
        );
        var WIDGET_PROP_VALUE = Module.cwrap(
          'get_WIDGET_PROP_VALUE',
          'string',
          []
        );
        var WIDGET_PROP_RADIO = Module.cwrap(
          'get_WIDGET_PROP_RADIO',
          'string',
          []
        );
        var WIDGET_PROP_REVERSE = Module.cwrap(
          'get_WIDGET_PROP_REVERSE',
          'string',
          []
        );
        var WIDGET_PROP_LENGTH = Module.cwrap(
          'get_WIDGET_PROP_LENGTH',
          'string',
          []
        );
        var WIDGET_PROP_LINE_WRAP = Module.cwrap(
          'get_WIDGET_PROP_LINE_WRAP',
          'string',
          []
        );
        var WIDGET_PROP_WORD_WRAP = Module.cwrap(
          'get_WIDGET_PROP_WORD_WRAP',
          'string',
          []
        );
        var WIDGET_PROP_TEXT = Module.cwrap(
          'get_WIDGET_PROP_TEXT',
          'string',
          []
        );
        var WIDGET_PROP_TR_TEXT = Module.cwrap(
          'get_WIDGET_PROP_TR_TEXT',
          'string',
          []
        );
        var WIDGET_PROP_STYLE = Module.cwrap(
          'get_WIDGET_PROP_STYLE',
          'string',
          []
        );
        var WIDGET_PROP_ENABLE = Module.cwrap(
          'get_WIDGET_PROP_ENABLE',
          'string',
          []
        );
        var WIDGET_PROP_FEEDBACK = Module.cwrap(
          'get_WIDGET_PROP_FEEDBACK',
          'string',
          []
        );
        var WIDGET_PROP_FLOATING = Module.cwrap(
          'get_WIDGET_PROP_FLOATING',
          'string',
          []
        );
        var WIDGET_PROP_MARGIN = Module.cwrap(
          'get_WIDGET_PROP_MARGIN',
          'string',
          []
        );
        var WIDGET_PROP_SPACING = Module.cwrap(
          'get_WIDGET_PROP_SPACING',
          'string',
          []
        );
        var WIDGET_PROP_LEFT_MARGIN = Module.cwrap(
          'get_WIDGET_PROP_LEFT_MARGIN',
          'string',
          []
        );
        var WIDGET_PROP_RIGHT_MARGIN = Module.cwrap(
          'get_WIDGET_PROP_RIGHT_MARGIN',
          'string',
          []
        );
        var WIDGET_PROP_TOP_MARGIN = Module.cwrap(
          'get_WIDGET_PROP_TOP_MARGIN',
          'string',
          []
        );
        var WIDGET_PROP_BOTTOM_MARGIN = Module.cwrap(
          'get_WIDGET_PROP_BOTTOM_MARGIN',
          'string',
          []
        );
        var WIDGET_PROP_STEP = Module.cwrap(
          'get_WIDGET_PROP_STEP',
          'string',
          []
        );
        var WIDGET_PROP_VISIBLE = Module.cwrap(
          'get_WIDGET_PROP_VISIBLE',
          'string',
          []
        );
        var WIDGET_PROP_SENSITIVE = Module.cwrap(
          'get_WIDGET_PROP_SENSITIVE',
          'string',
          []
        );
        var WIDGET_PROP_ANIMATION = Module.cwrap(
          'get_WIDGET_PROP_ANIMATION',
          'string',
          []
        );
        var WIDGET_PROP_ANIM_HINT = Module.cwrap(
          'get_WIDGET_PROP_ANIM_HINT',
          'string',
          []
        );
        var WIDGET_PROP_FULLSCREEN = Module.cwrap(
          'get_WIDGET_PROP_FULLSCREEN',
          'string',
          []
        );
        var WIDGET_PROP_DISABLE_ANIM = Module.cwrap(
          'get_WIDGET_PROP_DISABLE_ANIM',
          'string',
          []
        );
        var WIDGET_PROP_OPEN_ANIM_HINT = Module.cwrap(
          'get_WIDGET_PROP_OPEN_ANIM_HINT',
          'string',
          []
        );
        var WIDGET_PROP_CLOSE_ANIM_HINT = Module.cwrap(
          'get_WIDGET_PROP_CLOSE_ANIM_HINT',
          'string',
          []
        );
        var WIDGET_PROP_MIN = Module.cwrap('get_WIDGET_PROP_MIN', 'string', []);
        var WIDGET_PROP_ACTION_TEXT = Module.cwrap(
          'get_WIDGET_PROP_ACTION_TEXT',
          'string',
          []
        );
        var WIDGET_PROP_TIPS = Module.cwrap(
          'get_WIDGET_PROP_TIPS',
          'string',
          []
        );
        var WIDGET_PROP_TR_TIPS = Module.cwrap(
          'get_WIDGET_PROP_TR_TIPS',
          'string',
          []
        );
        var WIDGET_PROP_INPUT_TYPE = Module.cwrap(
          'get_WIDGET_PROP_INPUT_TYPE',
          'string',
          []
        );
        var WIDGET_PROP_KEYBOARD = Module.cwrap(
          'get_WIDGET_PROP_KEYBOARD',
          'string',
          []
        );
        var WIDGET_PROP_DEFAULT_FOCUSED_CHILD = Module.cwrap(
          'get_WIDGET_PROP_DEFAULT_FOCUSED_CHILD',
          'string',
          []
        );
        var WIDGET_PROP_READONLY = Module.cwrap(
          'get_WIDGET_PROP_READONLY',
          'string',
          []
        );
        var WIDGET_PROP_CANCELABLE = Module.cwrap(
          'get_WIDGET_PROP_CANCELABLE',
          'string',
          []
        );
        var WIDGET_PROP_PASSWORD_VISIBLE = Module.cwrap(
          'get_WIDGET_PROP_PASSWORD_VISIBLE',
          'string',
          []
        );
        var WIDGET_PROP_ACTIVE = Module.cwrap(
          'get_WIDGET_PROP_ACTIVE',
          'string',
          []
        );
        var WIDGET_PROP_CURR_PAGE = Module.cwrap(
          'get_WIDGET_PROP_CURR_PAGE',
          'string',
          []
        );
        var WIDGET_PROP_PAGE_MAX_NUMBER = Module.cwrap(
          'get_WIDGET_PROP_PAGE_MAX_NUMBER',
          'string',
          []
        );
        var WIDGET_PROP_VERTICAL = Module.cwrap(
          'get_WIDGET_PROP_VERTICAL',
          'string',
          []
        );
        var WIDGET_PROP_SHOW_TEXT = Module.cwrap(
          'get_WIDGET_PROP_SHOW_TEXT',
          'string',
          []
        );
        var WIDGET_PROP_XOFFSET = Module.cwrap(
          'get_WIDGET_PROP_XOFFSET',
          'string',
          []
        );
        var WIDGET_PROP_YOFFSET = Module.cwrap(
          'get_WIDGET_PROP_YOFFSET',
          'string',
          []
        );
        var WIDGET_PROP_ALIGN_V = Module.cwrap(
          'get_WIDGET_PROP_ALIGN_V',
          'string',
          []
        );
        var WIDGET_PROP_ALIGN_H = Module.cwrap(
          'get_WIDGET_PROP_ALIGN_H',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_PLAY = Module.cwrap(
          'get_WIDGET_PROP_AUTO_PLAY',
          'string',
          []
        );
        var WIDGET_PROP_LOOP = Module.cwrap(
          'get_WIDGET_PROP_LOOP',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_FIX = Module.cwrap(
          'get_WIDGET_PROP_AUTO_FIX',
          'string',
          []
        );
        var WIDGET_PROP_SELECT_NONE_WHEN_FOCUSED = Module.cwrap(
          'get_WIDGET_PROP_SELECT_NONE_WHEN_FOCUSED',
          'string',
          []
        );
        var WIDGET_PROP_OPEN_IM_WHEN_FOCUSED = Module.cwrap(
          'get_WIDGET_PROP_OPEN_IM_WHEN_FOCUSED',
          'string',
          []
        );
        var WIDGET_PROP_CLOSE_IM_WHEN_BLURED = Module.cwrap(
          'get_WIDGET_PROP_CLOSE_IM_WHEN_BLURED',
          'string',
          []
        );
        var WIDGET_PROP_X_MIN = Module.cwrap(
          'get_WIDGET_PROP_X_MIN',
          'string',
          []
        );
        var WIDGET_PROP_X_MAX = Module.cwrap(
          'get_WIDGET_PROP_X_MAX',
          'string',
          []
        );
        var WIDGET_PROP_Y_MIN = Module.cwrap(
          'get_WIDGET_PROP_Y_MIN',
          'string',
          []
        );
        var WIDGET_PROP_Y_MAX = Module.cwrap(
          'get_WIDGET_PROP_Y_MAX',
          'string',
          []
        );
        var WIDGET_PROP_MAX = Module.cwrap('get_WIDGET_PROP_MAX', 'string', []);
        var WIDGET_PROP_GRAB_KEYS = Module.cwrap(
          'get_WIDGET_PROP_GRAB_KEYS',
          'string',
          []
        );
        var WIDGET_PROP_ROW = Module.cwrap('get_WIDGET_PROP_ROW', 'string', []);
        var WIDGET_PROP_STATE_FOR_STYLE = Module.cwrap(
          'get_WIDGET_PROP_STATE_FOR_STYLE',
          'string',
          []
        );
        var WIDGET_PROP_THEME = Module.cwrap(
          'get_WIDGET_PROP_THEME',
          'string',
          []
        );
        var WIDGET_PROP_STAGE = Module.cwrap(
          'get_WIDGET_PROP_STAGE',
          'string',
          []
        );
        var WIDGET_PROP_IMAGE_MANAGER = Module.cwrap(
          'get_WIDGET_PROP_IMAGE_MANAGER',
          'string',
          []
        );
        var WIDGET_PROP_ASSETS_MANAGER = Module.cwrap(
          'get_WIDGET_PROP_ASSETS_MANAGER',
          'string',
          []
        );
        var WIDGET_PROP_LOCALE_INFO = Module.cwrap(
          'get_WIDGET_PROP_LOCALE_INFO',
          'string',
          []
        );
        var WIDGET_PROP_FONT_MANAGER = Module.cwrap(
          'get_WIDGET_PROP_FONT_MANAGER',
          'string',
          []
        );
        var WIDGET_PROP_THEME_OBJ = Module.cwrap(
          'get_WIDGET_PROP_THEME_OBJ',
          'string',
          []
        );
        var WIDGET_PROP_DEFAULT_THEME_OBJ = Module.cwrap(
          'get_WIDGET_PROP_DEFAULT_THEME_OBJ',
          'string',
          []
        );
        var WIDGET_PROP_ITEM_WIDTH = Module.cwrap(
          'get_WIDGET_PROP_ITEM_WIDTH',
          'string',
          []
        );
        var WIDGET_PROP_ITEM_HEIGHT = Module.cwrap(
          'get_WIDGET_PROP_ITEM_HEIGHT',
          'string',
          []
        );
        var WIDGET_PROP_DEFAULT_ITEM_HEIGHT = Module.cwrap(
          'get_WIDGET_PROP_DEFAULT_ITEM_HEIGHT',
          'string',
          []
        );
        var WIDGET_PROP_XSLIDABLE = Module.cwrap(
          'get_WIDGET_PROP_XSLIDABLE',
          'string',
          []
        );
        var WIDGET_PROP_YSLIDABLE = Module.cwrap(
          'get_WIDGET_PROP_YSLIDABLE',
          'string',
          []
        );
        var WIDGET_PROP_REPEAT = Module.cwrap(
          'get_WIDGET_PROP_REPEAT',
          'string',
          []
        );
        var WIDGET_PROP_LONG_PRESS_TIME = Module.cwrap(
          'get_WIDGET_PROP_LONG_PRESS_TIME',
          'string',
          []
        );
        var WIDGET_PROP_ENABLE_LONG_PRESS = Module.cwrap(
          'get_WIDGET_PROP_ENABLE_LONG_PRESS',
          'string',
          []
        );
        var WIDGET_PROP_CLICK_THROUGH = Module.cwrap(
          'get_WIDGET_PROP_CLICK_THROUGH',
          'string',
          []
        );
        var WIDGET_PROP_ANIMATABLE = Module.cwrap(
          'get_WIDGET_PROP_ANIMATABLE',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_HIDE = Module.cwrap(
          'get_WIDGET_PROP_AUTO_HIDE',
          'string',
          []
        );
        var WIDGET_PROP_AUTO_HIDE_SCROLL_BAR = Module.cwrap(
          'get_WIDGET_PROP_AUTO_HIDE_SCROLL_BAR',
          'string',
          []
        );
        var WIDGET_PROP_IMAGE = Module.cwrap(
          'get_WIDGET_PROP_IMAGE',
          'string',
          []
        );
        var WIDGET_PROP_FORMAT = Module.cwrap(
          'get_WIDGET_PROP_FORMAT',
          'string',
          []
        );
        var WIDGET_PROP_DRAW_TYPE = Module.cwrap(
          'get_WIDGET_PROP_DRAW_TYPE',
          'string',
          []
        );
        var WIDGET_PROP_SELECTABLE = Module.cwrap(
          'get_WIDGET_PROP_SELECTABLE',
          'string',
          []
        );
        var WIDGET_PROP_CLICKABLE = Module.cwrap(
          'get_WIDGET_PROP_CLICKABLE',
          'string',
          []
        );
        var WIDGET_PROP_SCALE_X = Module.cwrap(
          'get_WIDGET_PROP_SCALE_X',
          'string',
          []
        );
        var WIDGET_PROP_SCALE_Y = Module.cwrap(
          'get_WIDGET_PROP_SCALE_Y',
          'string',
          []
        );
        var WIDGET_PROP_ANCHOR_X = Module.cwrap(
          'get_WIDGET_PROP_ANCHOR_X',
          'string',
          []
        );
        var WIDGET_PROP_ANCHOR_Y = Module.cwrap(
          'get_WIDGET_PROP_ANCHOR_Y',
          'string',
          []
        );
        var WIDGET_PROP_ROTATION = Module.cwrap(
          'get_WIDGET_PROP_ROTATION',
          'string',
          []
        );
        var WIDGET_PROP_COMPACT = Module.cwrap(
          'get_WIDGET_PROP_COMPACT',
          'string',
          []
        );
        var WIDGET_PROP_SCROLLABLE = Module.cwrap(
          'get_WIDGET_PROP_SCROLLABLE',
          'string',
          []
        );
        var WIDGET_PROP_ICON = Module.cwrap(
          'get_WIDGET_PROP_ICON',
          'string',
          []
        );
        var WIDGET_PROP_OPTIONS = Module.cwrap(
          'get_WIDGET_PROP_OPTIONS',
          'string',
          []
        );
        var WIDGET_PROP_SELECTED = Module.cwrap(
          'get_WIDGET_PROP_SELECTED',
          'string',
          []
        );
        var WIDGET_PROP_CHECKED = Module.cwrap(
          'get_WIDGET_PROP_CHECKED',
          'string',
          []
        );
        var WIDGET_PROP_ACTIVE_ICON = Module.cwrap(
          'get_WIDGET_PROP_ACTIVE_ICON',
          'string',
          []
        );
        var WIDGET_PROP_LOAD_UI = Module.cwrap(
          'get_WIDGET_PROP_LOAD_UI',
          'string',
          []
        );
        var WIDGET_PROP_OPEN_WINDOW = Module.cwrap(
          'get_WIDGET_PROP_OPEN_WINDOW',
          'string',
          []
        );
        var WIDGET_PROP_SELECTED_INDEX = Module.cwrap(
          'get_WIDGET_PROP_SELECTED_INDEX',
          'string',
          []
        );
        var WIDGET_PROP_CLOSE_WHEN_CLICK = Module.cwrap(
          'get_WIDGET_PROP_CLOSE_WHEN_CLICK',
          'string',
          []
        );
        var WIDGET_PROP_CLOSE_WHEN_CLICK_OUTSIDE = Module.cwrap(
          'get_WIDGET_PROP_CLOSE_WHEN_CLICK_OUTSIDE',
          'string',
          []
        );
        var WIDGET_PROP_CLOSE_WHEN_TIMEOUT = Module.cwrap(
          'get_WIDGET_PROP_CLOSE_WHEN_TIMEOUT',
          'string',
          []
        );
        var WIDGET_PROP_LINE_GAP = Module.cwrap(
          'get_WIDGET_PROP_LINE_GAP',
          'string',
          []
        );
        var WIDGET_PROP_BG_COLOR = Module.cwrap(
          'get_WIDGET_PROP_BG_COLOR',
          'string',
          []
        );
        var WIDGET_PROP_BORDER_COLOR = Module.cwrap(
          'get_WIDGET_PROP_BORDER_COLOR',
          'string',
          []
        );
        var WIDGET_PROP_DELAY = Module.cwrap(
          'get_WIDGET_PROP_DELAY',
          'string',
          []
        );
        var WIDGET_PROP_IS_KEYBOARD = Module.cwrap(
          'get_WIDGET_PROP_IS_KEYBOARD',
          'string',
          []
        );
        var WIDGET_PROP_FOCUSED = Module.cwrap(
          'get_WIDGET_PROP_FOCUSED',
          'string',
          []
        );
        var WIDGET_PROP_FOCUS = Module.cwrap(
          'get_WIDGET_PROP_FOCUS',
          'string',
          []
        );
        var WIDGET_PROP_FOCUSABLE = Module.cwrap(
          'get_WIDGET_PROP_FOCUSABLE',
          'string',
          []
        );
        var WIDGET_PROP_WITH_FOCUS_STATE = Module.cwrap(
          'get_WIDGET_PROP_WITH_FOCUS_STATE',
          'string',
          []
        );
        var WIDGET_PROP_MOVE_FOCUS_PREV_KEY = Module.cwrap(
          'get_WIDGET_PROP_MOVE_FOCUS_PREV_KEY',
          'string',
          []
        );
        var WIDGET_PROP_MOVE_FOCUS_NEXT_KEY = Module.cwrap(
          'get_WIDGET_PROP_MOVE_FOCUS_NEXT_KEY',
          'string',
          []
        );
        var WIDGET_PROP_MOVE_FOCUS_UP_KEY = Module.cwrap(
          'get_WIDGET_PROP_MOVE_FOCUS_UP_KEY',
          'string',
          []
        );
        var WIDGET_PROP_MOVE_FOCUS_DOWN_KEY = Module.cwrap(
          'get_WIDGET_PROP_MOVE_FOCUS_DOWN_KEY',
          'string',
          []
        );
        var WIDGET_PROP_MOVE_FOCUS_LEFT_KEY = Module.cwrap(
          'get_WIDGET_PROP_MOVE_FOCUS_LEFT_KEY',
          'string',
          []
        );
        var WIDGET_PROP_MOVE_FOCUS_RIGHT_KEY = Module.cwrap(
          'get_WIDGET_PROP_MOVE_FOCUS_RIGHT_KEY',
          'string',
          []
        );
        var WIDGET_TYPE_NONE = Module.cwrap(
          'get_WIDGET_TYPE_NONE',
          'string',
          []
        );
        var WIDGET_TYPE_WINDOW_MANAGER = Module.cwrap(
          'get_WIDGET_TYPE_WINDOW_MANAGER',
          'string',
          []
        );
        var WIDGET_TYPE_NORMAL_WINDOW = Module.cwrap(
          'get_WIDGET_TYPE_NORMAL_WINDOW',
          'string',
          []
        );
        var WIDGET_TYPE_OVERLAY = Module.cwrap(
          'get_WIDGET_TYPE_OVERLAY',
          'string',
          []
        );
        var WIDGET_TYPE_TOOL_BAR = Module.cwrap(
          'get_WIDGET_TYPE_TOOL_BAR',
          'string',
          []
        );
        var WIDGET_TYPE_DIALOG = Module.cwrap(
          'get_WIDGET_TYPE_DIALOG',
          'string',
          []
        );
        var WIDGET_TYPE_POPUP = Module.cwrap(
          'get_WIDGET_TYPE_POPUP',
          'string',
          []
        );
        var WIDGET_TYPE_SYSTEM_BAR = Module.cwrap(
          'get_WIDGET_TYPE_SYSTEM_BAR',
          'string',
          []
        );
        var WIDGET_TYPE_SYSTEM_BAR_BOTTOM = Module.cwrap(
          'get_WIDGET_TYPE_SYSTEM_BAR_BOTTOM',
          'string',
          []
        );
        var WIDGET_TYPE_SPRITE = Module.cwrap(
          'get_WIDGET_TYPE_SPRITE',
          'string',
          []
        );
        var WIDGET_TYPE_KEYBOARD = Module.cwrap(
          'get_WIDGET_TYPE_KEYBOARD',
          'string',
          []
        );
        var WIDGET_TYPE_DND = Module.cwrap('get_WIDGET_TYPE_DND', 'string', []);
        var WIDGET_TYPE_LABEL = Module.cwrap(
          'get_WIDGET_TYPE_LABEL',
          'string',
          []
        );
        var WIDGET_TYPE_BUTTON = Module.cwrap(
          'get_WIDGET_TYPE_BUTTON',
          'string',
          []
        );
        var WIDGET_TYPE_IMAGE = Module.cwrap(
          'get_WIDGET_TYPE_IMAGE',
          'string',
          []
        );
        var WIDGET_TYPE_EDIT = Module.cwrap(
          'get_WIDGET_TYPE_EDIT',
          'string',
          []
        );
        var WIDGET_TYPE_PROGRESS_BAR = Module.cwrap(
          'get_WIDGET_TYPE_PROGRESS_BAR',
          'string',
          []
        );
        var WIDGET_TYPE_GROUP_BOX = Module.cwrap(
          'get_WIDGET_TYPE_GROUP_BOX',
          'string',
          []
        );
        var WIDGET_TYPE_CHECK_BUTTON = Module.cwrap(
          'get_WIDGET_TYPE_CHECK_BUTTON',
          'string',
          []
        );
        var WIDGET_TYPE_RADIO_BUTTON = Module.cwrap(
          'get_WIDGET_TYPE_RADIO_BUTTON',
          'string',
          []
        );
        var WIDGET_TYPE_DIALOG_TITLE = Module.cwrap(
          'get_WIDGET_TYPE_DIALOG_TITLE',
          'string',
          []
        );
        var WIDGET_TYPE_DIALOG_CLIENT = Module.cwrap(
          'get_WIDGET_TYPE_DIALOG_CLIENT',
          'string',
          []
        );
        var WIDGET_TYPE_SLIDER = Module.cwrap(
          'get_WIDGET_TYPE_SLIDER',
          'string',
          []
        );
        var WIDGET_TYPE_VIEW = Module.cwrap(
          'get_WIDGET_TYPE_VIEW',
          'string',
          []
        );
        var WIDGET_TYPE_COMBO_BOX = Module.cwrap(
          'get_WIDGET_TYPE_COMBO_BOX',
          'string',
          []
        );
        var WIDGET_TYPE_COMBO_BOX_ITEM = Module.cwrap(
          'get_WIDGET_TYPE_COMBO_BOX_ITEM',
          'string',
          []
        );
        var WIDGET_TYPE_SLIDE_VIEW = Module.cwrap(
          'get_WIDGET_TYPE_SLIDE_VIEW',
          'string',
          []
        );
        var WIDGET_TYPE_SLIDE_INDICATOR = Module.cwrap(
          'get_WIDGET_TYPE_SLIDE_INDICATOR',
          'string',
          []
        );
        var WIDGET_TYPE_SLIDE_INDICATOR_ARC = Module.cwrap(
          'get_WIDGET_TYPE_SLIDE_INDICATOR_ARC',
          'string',
          []
        );
        var WIDGET_TYPE_PAGES = Module.cwrap(
          'get_WIDGET_TYPE_PAGES',
          'string',
          []
        );
        var WIDGET_TYPE_TAB_BUTTON = Module.cwrap(
          'get_WIDGET_TYPE_TAB_BUTTON',
          'string',
          []
        );
        var WIDGET_TYPE_TAB_CONTROL = Module.cwrap(
          'get_WIDGET_TYPE_TAB_CONTROL',
          'string',
          []
        );
        var WIDGET_TYPE_TAB_BUTTON_GROUP = Module.cwrap(
          'get_WIDGET_TYPE_TAB_BUTTON_GROUP',
          'string',
          []
        );
        var WIDGET_TYPE_BUTTON_GROUP = Module.cwrap(
          'get_WIDGET_TYPE_BUTTON_GROUP',
          'string',
          []
        );
        var WIDGET_TYPE_CANDIDATES = Module.cwrap(
          'get_WIDGET_TYPE_CANDIDATES',
          'string',
          []
        );
        var WIDGET_TYPE_SPIN_BOX = Module.cwrap(
          'get_WIDGET_TYPE_SPIN_BOX',
          'string',
          []
        );
        var WIDGET_TYPE_DRAGGER = Module.cwrap(
          'get_WIDGET_TYPE_DRAGGER',
          'string',
          []
        );
        var WIDGET_TYPE_SCROLL_BAR = Module.cwrap(
          'get_WIDGET_TYPE_SCROLL_BAR',
          'string',
          []
        );
        var WIDGET_TYPE_SCROLL_BAR_DESKTOP = Module.cwrap(
          'get_WIDGET_TYPE_SCROLL_BAR_DESKTOP',
          'string',
          []
        );
        var WIDGET_TYPE_SCROLL_BAR_MOBILE = Module.cwrap(
          'get_WIDGET_TYPE_SCROLL_BAR_MOBILE',
          'string',
          []
        );
        var WIDGET_TYPE_SCROLL_VIEW = Module.cwrap(
          'get_WIDGET_TYPE_SCROLL_VIEW',
          'string',
          []
        );
        var WIDGET_TYPE_LIST_VIEW = Module.cwrap(
          'get_WIDGET_TYPE_LIST_VIEW',
          'string',
          []
        );
        var WIDGET_TYPE_LIST_VIEW_H = Module.cwrap(
          'get_WIDGET_TYPE_LIST_VIEW_H',
          'string',
          []
        );
        var WIDGET_TYPE_LIST_ITEM = Module.cwrap(
          'get_WIDGET_TYPE_LIST_ITEM',
          'string',
          []
        );
        var WIDGET_TYPE_COLOR_PICKER = Module.cwrap(
          'get_WIDGET_TYPE_COLOR_PICKER',
          'string',
          []
        );
        var WIDGET_TYPE_COLOR_COMPONENT = Module.cwrap(
          'get_WIDGET_TYPE_COLOR_COMPONENT',
          'string',
          []
        );
        var WIDGET_TYPE_COLOR_TILE = Module.cwrap(
          'get_WIDGET_TYPE_COLOR_TILE',
          'string',
          []
        );
        var WIDGET_TYPE_CLIP_VIEW = Module.cwrap(
          'get_WIDGET_TYPE_CLIP_VIEW',
          'string',
          []
        );
        var WIDGET_TYPE_RICH_TEXT = Module.cwrap(
          'get_WIDGET_TYPE_RICH_TEXT',
          'string',
          []
        );
        var WIDGET_TYPE_APP_BAR = Module.cwrap(
          'get_WIDGET_TYPE_APP_BAR',
          'string',
          []
        );
        var WIDGET_TYPE_GRID = Module.cwrap(
          'get_WIDGET_TYPE_GRID',
          'string',
          []
        );
        var WIDGET_TYPE_GRID_ITEM = Module.cwrap(
          'get_WIDGET_TYPE_GRID_ITEM',
          'string',
          []
        );
        var WIDGET_TYPE_ROW = Module.cwrap('get_WIDGET_TYPE_ROW', 'string', []);
        var WIDGET_TYPE_COLUMN = Module.cwrap(
          'get_WIDGET_TYPE_COLUMN',
          'string',
          []
        );
        var WIDGET_TYPE_CALIBRATION_WIN = Module.cwrap(
          'get_WIDGET_TYPE_CALIBRATION_WIN',
          'string',
          []
        );
        var WINDOW_STAGE_NONE = Module.cwrap(
          'get_WINDOW_STAGE_NONE',
          'number',
          []
        );
        var WINDOW_STAGE_LOADED = Module.cwrap(
          'get_WINDOW_STAGE_LOADED',
          'number',
          []
        );
        var WINDOW_STAGE_CREATED = Module.cwrap(
          'get_WINDOW_STAGE_CREATED',
          'number',
          []
        );
        var WINDOW_STAGE_OPENED = Module.cwrap(
          'get_WINDOW_STAGE_OPENED',
          'number',
          []
        );
        var WINDOW_STAGE_CLOSED = Module.cwrap(
          'get_WINDOW_STAGE_CLOSED',
          'number',
          []
        );
        var WINDOW_STAGE_SUSPEND = Module.cwrap(
          'get_WINDOW_STAGE_SUSPEND',
          'number',
          []
        );
        var WINDOW_CLOSABLE_YES = Module.cwrap(
          'get_WINDOW_CLOSABLE_YES',
          'number',
          []
        );
        var WINDOW_CLOSABLE_NO = Module.cwrap(
          'get_WINDOW_CLOSABLE_NO',
          'number',
          []
        );
        var WINDOW_CLOSABLE_CONFIRM = Module.cwrap(
          'get_WINDOW_CLOSABLE_CONFIRM',
          'number',
          []
        );
        var WIDGET_STATE_NONE = Module.cwrap(
          'get_WIDGET_STATE_NONE',
          'string',
          []
        );
        var WIDGET_STATE_NORMAL = Module.cwrap(
          'get_WIDGET_STATE_NORMAL',
          'string',
          []
        );
        var WIDGET_STATE_CHANGED = Module.cwrap(
          'get_WIDGET_STATE_CHANGED',
          'string',
          []
        );
        var WIDGET_STATE_PRESSED = Module.cwrap(
          'get_WIDGET_STATE_PRESSED',
          'string',
          []
        );
        var WIDGET_STATE_OVER = Module.cwrap(
          'get_WIDGET_STATE_OVER',
          'string',
          []
        );
        var WIDGET_STATE_DISABLE = Module.cwrap(
          'get_WIDGET_STATE_DISABLE',
          'string',
          []
        );
        var WIDGET_STATE_FOCUSED = Module.cwrap(
          'get_WIDGET_STATE_FOCUSED',
          'string',
          []
        );
        var WIDGET_STATE_CHECKED = Module.cwrap(
          'get_WIDGET_STATE_CHECKED',
          'string',
          []
        );
        var WIDGET_STATE_UNCHECKED = Module.cwrap(
          'get_WIDGET_STATE_UNCHECKED',
          'string',
          []
        );
        var WIDGET_STATE_EMPTY = Module.cwrap(
          'get_WIDGET_STATE_EMPTY',
          'string',
          []
        );
        var WIDGET_STATE_EMPTY_FOCUS = Module.cwrap(
          'get_WIDGET_STATE_EMPTY_FOCUS',
          'string',
          []
        );
        var WIDGET_STATE_ERROR = Module.cwrap(
          'get_WIDGET_STATE_ERROR',
          'string',
          []
        );
        var WIDGET_STATE_SELECTED = Module.cwrap(
          'get_WIDGET_STATE_SELECTED',
          'string',
          []
        );
        var WIDGET_STATE_NORMAL_OF_CHECKED = Module.cwrap(
          'get_WIDGET_STATE_NORMAL_OF_CHECKED',
          'string',
          []
        );
        var WIDGET_STATE_PRESSED_OF_CHECKED = Module.cwrap(
          'get_WIDGET_STATE_PRESSED_OF_CHECKED',
          'string',
          []
        );
        var WIDGET_STATE_OVER_OF_CHECKED = Module.cwrap(
          'get_WIDGET_STATE_OVER_OF_CHECKED',
          'string',
          []
        );
        var WIDGET_STATE_DISABLE_OF_CHECKED = Module.cwrap(
          'get_WIDGET_STATE_DISABLE_OF_CHECKED',
          'string',
          []
        );
        var WIDGET_STATE_FOCUSED_OF_CHECKED = Module.cwrap(
          'get_WIDGET_STATE_FOCUSED_OF_CHECKED',
          'string',
          []
        );
        var WIDGET_STATE_NORMAL_OF_ACTIVE = Module.cwrap(
          'get_WIDGET_STATE_NORMAL_OF_ACTIVE',
          'string',
          []
        );
        var WIDGET_STATE_PRESSED_OF_ACTIVE = Module.cwrap(
          'get_WIDGET_STATE_PRESSED_OF_ACTIVE',
          'string',
          []
        );
        var WIDGET_STATE_OVER_OF_ACTIVE = Module.cwrap(
          'get_WIDGET_STATE_OVER_OF_ACTIVE',
          'string',
          []
        );
        var WIDGET_STATE_DISABLE_OF_ACTIVE = Module.cwrap(
          'get_WIDGET_STATE_DISABLE_OF_ACTIVE',
          'string',
          []
        );
        var WIDGET_STATE_FOCUSED_OF_ACTIVE = Module.cwrap(
          'get_WIDGET_STATE_FOCUSED_OF_ACTIVE',
          'string',
          []
        );
        var WIDGET_CURSOR_DEFAULT = Module.cwrap(
          'get_WIDGET_CURSOR_DEFAULT',
          'string',
          []
        );
        var WIDGET_CURSOR_EDIT = Module.cwrap(
          'get_WIDGET_CURSOR_EDIT',
          'string',
          []
        );
        var WIDGET_CURSOR_HAND = Module.cwrap(
          'get_WIDGET_CURSOR_HAND',
          'string',
          []
        );
        var WIDGET_CURSOR_WAIT = Module.cwrap(
          'get_WIDGET_CURSOR_WAIT',
          'string',
          []
        );
        var WIDGET_CURSOR_CROSS = Module.cwrap(
          'get_WIDGET_CURSOR_CROSS',
          'string',
          []
        );
        var WIDGET_CURSOR_NO = Module.cwrap(
          'get_WIDGET_CURSOR_NO',
          'string',
          []
        );
        var WIDGET_CURSOR_SIZENWSE = Module.cwrap(
          'get_WIDGET_CURSOR_SIZENWSE',
          'string',
          []
        );
        var WIDGET_CURSOR_SIZENESW = Module.cwrap(
          'get_WIDGET_CURSOR_SIZENESW',
          'string',
          []
        );
        var WIDGET_CURSOR_SIZEWE = Module.cwrap(
          'get_WIDGET_CURSOR_SIZEWE',
          'string',
          []
        );
        var WIDGET_CURSOR_SIZENS = Module.cwrap(
          'get_WIDGET_CURSOR_SIZENS',
          'string',
          []
        );
        var WIDGET_CURSOR_SIZEALL = Module.cwrap(
          'get_WIDGET_CURSOR_SIZEALL',
          'string',
          []
        );
        var widget_count_children = Module.cwrap(
          'widget_count_children',
          'number',
          ['number']
        );
        var widget_get_child = Module.cwrap('widget_get_child', 'number', [
          'number',
          'number',
        ]);
        var widget_get_focused_widget = Module.cwrap(
          'widget_get_focused_widget',
          'number',
          ['number']
        );
        var widget_get_native_window = Module.cwrap(
          'widget_get_native_window',
          'number',
          ['number']
        );
        var widget_index_of = Module.cwrap('widget_index_of', 'number', [
          'number',
        ]);
        var widget_close_window = Module.cwrap(
          'widget_close_window',
          'number',
          ['number']
        );
        var widget_close_window_force = Module.cwrap(
          'widget_close_window_force',
          'number',
          ['number']
        );
        var widget_back = Module.cwrap('widget_back', 'number', ['number']);
        var widget_back_to_home = Module.cwrap(
          'widget_back_to_home',
          'number',
          ['number']
        );
        var widget_move = Module.cwrap('widget_move', 'number', [
          'number',
          'number',
          'number',
        ]);
        var widget_resize = Module.cwrap('widget_resize', 'number', [
          'number',
          'number',
          'number',
        ]);
        var widget_move_resize = Module.cwrap('widget_move_resize', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var widget_set_value = Module.cwrap('widget_set_value', 'number', [
          'number',
          'number',
        ]);
        var widget_animate_value_to = Module.cwrap(
          'widget_animate_value_to',
          'number',
          ['number', 'number', 'number']
        );
        var widget_add_value = Module.cwrap('widget_add_value', 'number', [
          'number',
          'number',
        ]);
        var widget_is_style_exist = Module.cwrap(
          'widget_is_style_exist',
          'number',
          ['number', 'string', 'string']
        );
        var widget_use_style = Module.cwrap('widget_use_style', 'number', [
          'number',
          'string',
        ]);
        var widget_set_text_utf8 = Module.cwrap(
          'widget_set_text_utf8',
          'number',
          ['number', 'string']
        );
        var widget_set_child_text_utf8 = Module.cwrap(
          'widget_set_child_text_utf8',
          'number',
          ['number', 'string', 'string']
        );
        var widget_set_child_text_with_double = Module.cwrap(
          'widget_set_child_text_with_double',
          'number',
          ['number', 'string', 'string', 'number']
        );
        var widget_set_child_text_with_int = Module.cwrap(
          'widget_set_child_text_with_int',
          'number',
          ['number', 'string', 'string', 'number']
        );
        var widget_set_tr_text = Module.cwrap('widget_set_tr_text', 'number', [
          'number',
          'string',
        ]);
        var widget_get_value = Module.cwrap('widget_get_value', 'number', [
          'number',
        ]);
        var widget_get_enable = Module.cwrap('widget_get_enable', 'number', [
          'number',
        ]);
        var widget_get_floating = Module.cwrap(
          'widget_get_floating',
          'number',
          ['number']
        );
        var widget_get_auto_adjust_size = Module.cwrap(
          'widget_get_auto_adjust_size',
          'number',
          ['number']
        );
        var widget_get_with_focus_state = Module.cwrap(
          'widget_get_with_focus_state',
          'number',
          ['number']
        );
        var widget_get_focusable = Module.cwrap(
          'widget_get_focusable',
          'number',
          ['number']
        );
        var widget_get_sensitive = Module.cwrap(
          'widget_get_sensitive',
          'number',
          ['number']
        );
        var widget_get_visible = Module.cwrap('widget_get_visible', 'number', [
          'number',
        ]);
        var widget_get_feedback = Module.cwrap(
          'widget_get_feedback',
          'number',
          ['number']
        );
        var widget_get_text = Module.cwrap('widget_get_text', 'number', [
          'number',
        ]);
        var widget_set_name = Module.cwrap('widget_set_name', 'number', [
          'number',
          'string',
        ]);
        var widget_set_theme = Module.cwrap('widget_set_theme', 'number', [
          'number',
          'string',
        ]);
        var widget_set_pointer_cursor = Module.cwrap(
          'widget_set_pointer_cursor',
          'number',
          ['number', 'string']
        );
        var widget_set_animation = Module.cwrap(
          'widget_set_animation',
          'number',
          ['number', 'string']
        );
        var widget_create_animator = Module.cwrap(
          'widget_create_animator',
          'number',
          ['number', 'string']
        );
        var widget_start_animator = Module.cwrap(
          'widget_start_animator',
          'number',
          ['number', 'string']
        );
        var widget_set_animator_time_scale = Module.cwrap(
          'widget_set_animator_time_scale',
          'number',
          ['number', 'string', 'number']
        );
        var widget_pause_animator = Module.cwrap(
          'widget_pause_animator',
          'number',
          ['number', 'string']
        );
        var widget_stop_animator = Module.cwrap(
          'widget_stop_animator',
          'number',
          ['number', 'string']
        );
        var widget_destroy_animator = Module.cwrap(
          'widget_destroy_animator',
          'number',
          ['number', 'string']
        );
        var widget_set_enable = Module.cwrap('widget_set_enable', 'number', [
          'number',
          'number',
        ]);
        var widget_set_feedback = Module.cwrap(
          'widget_set_feedback',
          'number',
          ['number', 'number']
        );
        var widget_set_auto_adjust_size = Module.cwrap(
          'widget_set_auto_adjust_size',
          'number',
          ['number', 'number']
        );
        var widget_set_floating = Module.cwrap(
          'widget_set_floating',
          'number',
          ['number', 'number']
        );
        var widget_set_focused = Module.cwrap('widget_set_focused', 'number', [
          'number',
          'number',
        ]);
        var widget_set_focusable = Module.cwrap(
          'widget_set_focusable',
          'number',
          ['number', 'number']
        );
        var widget_set_state = Module.cwrap('widget_set_state', 'number', [
          'number',
          'string',
        ]);
        var widget_set_opacity = Module.cwrap('widget_set_opacity', 'number', [
          'number',
          'number',
        ]);
        var widget_set_dirty_rect_tolerance = Module.cwrap(
          'widget_set_dirty_rect_tolerance',
          'number',
          ['number', 'number']
        );
        var widget_destroy_children = Module.cwrap(
          'widget_destroy_children',
          'number',
          ['number']
        );
        var widget_add_child = Module.cwrap('widget_add_child', 'number', [
          'number',
          'number',
        ]);
        var widget_remove_child = Module.cwrap(
          'widget_remove_child',
          'number',
          ['number', 'number']
        );
        var widget_insert_child = Module.cwrap(
          'widget_insert_child',
          'number',
          ['number', 'number', 'number']
        );
        var widget_restack = Module.cwrap('widget_restack', 'number', [
          'number',
          'number',
        ]);
        var widget_child = Module.cwrap('widget_child', 'number', [
          'number',
          'string',
        ]);
        var widget_lookup = Module.cwrap('widget_lookup', 'number', [
          'number',
          'string',
          'number',
        ]);
        var widget_lookup_by_type = Module.cwrap(
          'widget_lookup_by_type',
          'number',
          ['number', 'string', 'number']
        );
        var widget_set_visible = Module.cwrap('widget_set_visible', 'number', [
          'number',
          'number',
        ]);
        var widget_set_visible_only = Module.cwrap(
          'widget_set_visible_only',
          'number',
          ['number', 'number']
        );
        var widget_set_sensitive = Module.cwrap(
          'widget_set_sensitive',
          'number',
          ['number', 'number']
        );
        var widget_on = Module.cwrap('widget_on', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var widget_off = Module.cwrap('widget_off', 'number', [
          'number',
          'number',
        ]);
        var widget_invalidate_force = Module.cwrap(
          'widget_invalidate_force',
          'number',
          ['number', 'number']
        );
        var widget_set_prop_str = Module.cwrap(
          'widget_set_prop_str',
          'number',
          ['number', 'string', 'string']
        );
        var widget_get_prop_str = Module.cwrap(
          'widget_get_prop_str',
          'string',
          ['number', 'string', 'string']
        );
        var widget_set_prop_pointer = Module.cwrap(
          'widget_set_prop_pointer',
          'number',
          ['number', 'string', 'number']
        );
        var widget_get_prop_pointer = Module.cwrap(
          'widget_get_prop_pointer',
          'number',
          ['number', 'string']
        );
        var widget_set_prop_int = Module.cwrap(
          'widget_set_prop_int',
          'number',
          ['number', 'string', 'number']
        );
        var widget_get_prop_int = Module.cwrap(
          'widget_get_prop_int',
          'number',
          ['number', 'string', 'number']
        );
        var widget_set_prop_bool = Module.cwrap(
          'widget_set_prop_bool',
          'number',
          ['number', 'string', 'number']
        );
        var widget_get_prop_bool = Module.cwrap(
          'widget_get_prop_bool',
          'number',
          ['number', 'string', 'number']
        );
        var widget_is_window_opened = Module.cwrap(
          'widget_is_window_opened',
          'number',
          ['number']
        );
        var widget_is_window_created = Module.cwrap(
          'widget_is_window_created',
          'number',
          ['number']
        );
        var widget_is_parent_of = Module.cwrap(
          'widget_is_parent_of',
          'number',
          ['number', 'number']
        );
        var widget_is_direct_parent_of = Module.cwrap(
          'widget_is_direct_parent_of',
          'number',
          ['number', 'number']
        );
        var widget_is_window = Module.cwrap('widget_is_window', 'number', [
          'number',
        ]);
        var widget_is_system_bar = Module.cwrap(
          'widget_is_system_bar',
          'number',
          ['number']
        );
        var widget_is_normal_window = Module.cwrap(
          'widget_is_normal_window',
          'number',
          ['number']
        );
        var widget_is_dialog = Module.cwrap('widget_is_dialog', 'number', [
          'number',
        ]);
        var widget_is_popup = Module.cwrap('widget_is_popup', 'number', [
          'number',
        ]);
        var widget_is_overlay = Module.cwrap('widget_is_overlay', 'number', [
          'number',
        ]);
        var widget_is_opened_dialog = Module.cwrap(
          'widget_is_opened_dialog',
          'number',
          ['number']
        );
        var widget_is_opened_popup = Module.cwrap(
          'widget_is_opened_popup',
          'number',
          ['number']
        );
        var widget_is_keyboard = Module.cwrap('widget_is_keyboard', 'number', [
          'number',
        ]);
        var widget_is_designing_window = Module.cwrap(
          'widget_is_designing_window',
          'number',
          ['number']
        );
        var widget_is_window_manager = Module.cwrap(
          'widget_is_window_manager',
          'number',
          ['number']
        );
        var widget_foreach = Module.cwrap('widget_foreach', 'number', [
          'number',
          'number',
          'number',
        ]);
        var widget_get_window = Module.cwrap('widget_get_window', 'number', [
          'number',
        ]);
        var widget_get_window_manager = Module.cwrap(
          'widget_get_window_manager',
          'number',
          ['number']
        );
        var widget_get_type = Module.cwrap('widget_get_type', 'string', [
          'number',
        ]);
        var widget_clone = Module.cwrap('widget_clone', 'number', [
          'number',
          'number',
        ]);
        var widget_equal = Module.cwrap('widget_equal', 'number', [
          'number',
          'number',
        ]);
        var widget_cast = Module.cwrap('widget_cast', 'number', ['number']);
        var widget_destroy = Module.cwrap('widget_destroy', 'number', [
          'number',
        ]);
        var widget_destroy_async = Module.cwrap(
          'widget_destroy_async',
          'number',
          ['number']
        );
        var widget_unref = Module.cwrap('widget_unref', 'number', ['number']);
        var widget_stroke_border_rect = Module.cwrap(
          'widget_stroke_border_rect',
          'number',
          ['number', 'number', 'number']
        );
        var widget_fill_bg_rect = Module.cwrap(
          'widget_fill_bg_rect',
          'number',
          ['number', 'number', 'number', 'number']
        );
        var widget_fill_fg_rect = Module.cwrap(
          'widget_fill_fg_rect',
          'number',
          ['number', 'number', 'number', 'number']
        );
        var widget_dispatch_to_target = Module.cwrap(
          'widget_dispatch_to_target',
          'number',
          ['number', 'number']
        );
        var widget_dispatch_to_key_target = Module.cwrap(
          'widget_dispatch_to_key_target',
          'number',
          ['number', 'number']
        );
        var widget_get_style_type = Module.cwrap(
          'widget_get_style_type',
          'string',
          ['number']
        );
        var widget_update_style = Module.cwrap(
          'widget_update_style',
          'number',
          ['number']
        );
        var widget_update_style_recursive = Module.cwrap(
          'widget_update_style_recursive',
          'number',
          ['number']
        );
        var widget_set_as_key_target = Module.cwrap(
          'widget_set_as_key_target',
          'number',
          ['number']
        );
        var widget_focus_next = Module.cwrap('widget_focus_next', 'number', [
          'number',
        ]);
        var widget_focus_prev = Module.cwrap('widget_focus_prev', 'number', [
          'number',
        ]);
        var widget_get_state_for_style = Module.cwrap(
          'widget_get_state_for_style',
          'string',
          ['number', 'number', 'number']
        );
        var widget_layout = Module.cwrap('widget_layout', 'number', ['number']);
        var widget_set_self_layout = Module.cwrap(
          'widget_set_self_layout',
          'number',
          ['number', 'string']
        );
        var widget_set_children_layout = Module.cwrap(
          'widget_set_children_layout',
          'number',
          ['number', 'string']
        );
        var widget_set_self_layout_params = Module.cwrap(
          'widget_set_self_layout_params',
          'number',
          ['number', 'string', 'string', 'string', 'string']
        );
        var widget_set_style_int = Module.cwrap(
          'widget_set_style_int',
          'number',
          ['number', 'string', 'number']
        );
        var widget_set_style_str = Module.cwrap(
          'widget_set_style_str',
          'number',
          ['number', 'string', 'string']
        );
        var widget_set_style_color = Module.cwrap(
          'widget_set_style_color',
          'number',
          ['number', 'string', 'number']
        );
        var widget_t_get_prop_x = Module.cwrap(
          'widget_t_get_prop_x',
          'number',
          ['number']
        );
        var widget_t_get_prop_y = Module.cwrap(
          'widget_t_get_prop_y',
          'number',
          ['number']
        );
        var widget_t_get_prop_w = Module.cwrap(
          'widget_t_get_prop_w',
          'number',
          ['number']
        );
        var widget_t_get_prop_h = Module.cwrap(
          'widget_t_get_prop_h',
          'number',
          ['number']
        );
        var widget_t_get_prop_name = Module.cwrap(
          'widget_t_get_prop_name',
          'string',
          ['number']
        );
        var widget_t_get_prop_pointer_cursor = Module.cwrap(
          'widget_t_get_prop_pointer_cursor',
          'string',
          ['number']
        );
        var widget_t_get_prop_tr_text = Module.cwrap(
          'widget_t_get_prop_tr_text',
          'string',
          ['number']
        );
        var widget_t_get_prop_style = Module.cwrap(
          'widget_t_get_prop_style',
          'string',
          ['number']
        );
        var widget_t_get_prop_animation = Module.cwrap(
          'widget_t_get_prop_animation',
          'string',
          ['number']
        );
        var widget_t_get_prop_enable = Module.cwrap(
          'widget_t_get_prop_enable',
          'number',
          ['number']
        );
        var widget_t_get_prop_feedback = Module.cwrap(
          'widget_t_get_prop_feedback',
          'number',
          ['number']
        );
        var widget_t_get_prop_visible = Module.cwrap(
          'widget_t_get_prop_visible',
          'number',
          ['number']
        );
        var widget_t_get_prop_sensitive = Module.cwrap(
          'widget_t_get_prop_sensitive',
          'number',
          ['number']
        );
        var widget_t_get_prop_focusable = Module.cwrap(
          'widget_t_get_prop_focusable',
          'number',
          ['number']
        );
        var widget_t_get_prop_with_focus_state = Module.cwrap(
          'widget_t_get_prop_with_focus_state',
          'number',
          ['number']
        );
        var widget_t_get_prop_auto_adjust_size = Module.cwrap(
          'widget_t_get_prop_auto_adjust_size',
          'number',
          ['number']
        );
        var widget_t_get_prop_floating = Module.cwrap(
          'widget_t_get_prop_floating',
          'number',
          ['number']
        );
        var widget_t_get_prop_dirty_rect_tolerance = Module.cwrap(
          'widget_t_get_prop_dirty_rect_tolerance',
          'number',
          ['number']
        );
        var widget_t_get_prop_parent = Module.cwrap(
          'widget_t_get_prop_parent',
          'number',
          ['number']
        );
        var app_conf_save = Module.cwrap('app_conf_save', 'number', []);
        var app_conf_reload = Module.cwrap('app_conf_reload', 'number', []);
        var app_conf_deinit = Module.cwrap('app_conf_deinit', 'number', []);
        var app_conf_exist = Module.cwrap('app_conf_exist', 'number', [
          'string',
        ]);
        var app_conf_set_int = Module.cwrap('app_conf_set_int', 'number', [
          'string',
          'number',
        ]);
        var app_conf_set_int64 = Module.cwrap('app_conf_set_int64', 'number', [
          'string',
          'number',
        ]);
        var app_conf_set_bool = Module.cwrap('app_conf_set_bool', 'number', [
          'string',
          'number',
        ]);
        var app_conf_set_double = Module.cwrap(
          'app_conf_set_double',
          'number',
          ['string', 'number']
        );
        var app_conf_set_str = Module.cwrap('app_conf_set_str', 'number', [
          'string',
          'string',
        ]);
        var app_conf_get_int = Module.cwrap('app_conf_get_int', 'number', [
          'string',
          'number',
        ]);
        var app_conf_get_int64 = Module.cwrap('app_conf_get_int64', 'number', [
          'string',
          'number',
        ]);
        var app_conf_get_bool = Module.cwrap('app_conf_get_bool', 'number', [
          'string',
          'number',
        ]);
        var app_conf_get_double = Module.cwrap(
          'app_conf_get_double',
          'number',
          ['string', 'number']
        );
        var app_conf_get_str = Module.cwrap('app_conf_get_str', 'string', [
          'string',
          'string',
        ]);
        var app_conf_remove = Module.cwrap('app_conf_remove', 'number', [
          'string',
        ]);
        var tk_ext_widgets_init = Module.cwrap(
          'tk_ext_widgets_init',
          'number',
          []
        );
        var INDICATOR_DEFAULT_PAINT_AUTO = Module.cwrap(
          'get_INDICATOR_DEFAULT_PAINT_AUTO',
          'number',
          []
        );
        var INDICATOR_DEFAULT_PAINT_FILL_DOT = Module.cwrap(
          'get_INDICATOR_DEFAULT_PAINT_FILL_DOT',
          'number',
          []
        );
        var INDICATOR_DEFAULT_PAINT_STROKE_DOT = Module.cwrap(
          'get_INDICATOR_DEFAULT_PAINT_STROKE_DOT',
          'number',
          []
        );
        var INDICATOR_DEFAULT_PAINT_FILL_RECT = Module.cwrap(
          'get_INDICATOR_DEFAULT_PAINT_FILL_RECT',
          'number',
          []
        );
        var INDICATOR_DEFAULT_PAINT_STROKE_RECT = Module.cwrap(
          'get_INDICATOR_DEFAULT_PAINT_STROKE_RECT',
          'number',
          []
        );
        var EVT_VPAGE_WILL_OPEN = Module.cwrap(
          'get_EVT_VPAGE_WILL_OPEN',
          'number',
          []
        );
        var EVT_VPAGE_OPEN = Module.cwrap('get_EVT_VPAGE_OPEN', 'number', []);
        var EVT_VPAGE_CLOSE = Module.cwrap('get_EVT_VPAGE_CLOSE', 'number', []);
        var ASSET_TYPE_NONE = Module.cwrap('get_ASSET_TYPE_NONE', 'number', []);
        var ASSET_TYPE_FONT = Module.cwrap('get_ASSET_TYPE_FONT', 'number', []);
        var ASSET_TYPE_IMAGE = Module.cwrap(
          'get_ASSET_TYPE_IMAGE',
          'number',
          []
        );
        var ASSET_TYPE_STYLE = Module.cwrap(
          'get_ASSET_TYPE_STYLE',
          'number',
          []
        );
        var ASSET_TYPE_UI = Module.cwrap('get_ASSET_TYPE_UI', 'number', []);
        var ASSET_TYPE_XML = Module.cwrap('get_ASSET_TYPE_XML', 'number', []);
        var ASSET_TYPE_STRINGS = Module.cwrap(
          'get_ASSET_TYPE_STRINGS',
          'number',
          []
        );
        var ASSET_TYPE_SCRIPT = Module.cwrap(
          'get_ASSET_TYPE_SCRIPT',
          'number',
          []
        );
        var ASSET_TYPE_FLOW = Module.cwrap('get_ASSET_TYPE_FLOW', 'number', []);
        var ASSET_TYPE_DATA = Module.cwrap('get_ASSET_TYPE_DATA', 'number', []);
        var asset_info_get_type = Module.cwrap(
          'asset_info_get_type',
          'number',
          ['number']
        );
        var asset_info_get_name = Module.cwrap(
          'asset_info_get_name',
          'string',
          ['number']
        );
        var asset_info_t_get_prop_type = Module.cwrap(
          'asset_info_t_get_prop_type',
          'number',
          ['number']
        );
        var asset_info_t_get_prop_subtype = Module.cwrap(
          'asset_info_t_get_prop_subtype',
          'number',
          ['number']
        );
        var asset_info_t_get_prop_is_in_rom = Module.cwrap(
          'asset_info_t_get_prop_is_in_rom',
          'number',
          ['number']
        );
        var asset_info_t_get_prop_size = Module.cwrap(
          'asset_info_t_get_prop_size',
          'number',
          ['number']
        );
        var asset_info_t_get_prop_refcount = Module.cwrap(
          'asset_info_t_get_prop_refcount',
          'number',
          ['number']
        );
        var asset_info_t_get_prop_name = Module.cwrap(
          'asset_info_t_get_prop_name',
          'string',
          ['number']
        );
        var color_create = Module.cwrap('color_create', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var color_from_str = Module.cwrap('color_from_str', 'number', [
          'number',
          'string',
        ]);
        var color_r = Module.cwrap('color_r', 'number', ['number']);
        var color_g = Module.cwrap('color_g', 'number', ['number']);
        var color_b = Module.cwrap('color_b', 'number', ['number']);
        var color_a = Module.cwrap('color_a', 'number', ['number']);
        var color_get_color = Module.cwrap('color_get_color', 'number', [
          'number',
        ]);
        var color_cast = Module.cwrap('color_cast', 'number', ['number']);
        var color_destroy = Module.cwrap('color_destroy', 'number', ['number']);
        var color_t_get_prop_color = Module.cwrap(
          'color_t_get_prop_color',
          'number',
          ['number']
        );
        var color_t_set_prop_color = Module.cwrap(
          'color_t_set_prop_color',
          'number',
          ['number', 'number']
        );
        var date_time_create = Module.cwrap('date_time_create', 'number', []);
        var date_time_set_year = Module.cwrap('date_time_set_year', 'number', [
          'number',
          'number',
        ]);
        var date_time_set_month = Module.cwrap(
          'date_time_set_month',
          'number',
          ['number', 'number']
        );
        var date_time_set_day = Module.cwrap('date_time_set_day', 'number', [
          'number',
          'number',
        ]);
        var date_time_set_hour = Module.cwrap('date_time_set_hour', 'number', [
          'number',
          'number',
        ]);
        var date_time_set_minute = Module.cwrap(
          'date_time_set_minute',
          'number',
          ['number', 'number']
        );
        var date_time_set_second = Module.cwrap(
          'date_time_set_second',
          'number',
          ['number', 'number']
        );
        var date_time_set = Module.cwrap('date_time_set', 'number', ['number']);
        var date_time_from_time = Module.cwrap(
          'date_time_from_time',
          'number',
          ['number', 'number']
        );
        var date_time_to_time = Module.cwrap('date_time_to_time', 'number', [
          'number',
        ]);
        var date_time_add_delta = Module.cwrap(
          'date_time_add_delta',
          'number',
          ['number', 'number']
        );
        var date_time_is_leap = Module.cwrap('date_time_is_leap', 'number', [
          'number',
        ]);
        var date_time_get_days = Module.cwrap('date_time_get_days', 'number', [
          'number',
          'number',
        ]);
        var date_time_get_wday = Module.cwrap('date_time_get_wday', 'number', [
          'number',
          'number',
          'number',
        ]);
        var date_time_get_month_name = Module.cwrap(
          'date_time_get_month_name',
          'string',
          ['number']
        );
        var date_time_get_wday_name = Module.cwrap(
          'date_time_get_wday_name',
          'string',
          ['number']
        );
        var date_time_destroy = Module.cwrap('date_time_destroy', 'number', [
          'number',
        ]);
        var date_time_t_get_prop_second = Module.cwrap(
          'date_time_t_get_prop_second',
          'number',
          ['number']
        );
        var date_time_t_get_prop_minute = Module.cwrap(
          'date_time_t_get_prop_minute',
          'number',
          ['number']
        );
        var date_time_t_get_prop_hour = Module.cwrap(
          'date_time_t_get_prop_hour',
          'number',
          ['number']
        );
        var date_time_t_get_prop_day = Module.cwrap(
          'date_time_t_get_prop_day',
          'number',
          ['number']
        );
        var date_time_t_get_prop_wday = Module.cwrap(
          'date_time_t_get_prop_wday',
          'number',
          ['number']
        );
        var date_time_t_get_prop_month = Module.cwrap(
          'date_time_t_get_prop_month',
          'number',
          ['number']
        );
        var date_time_t_get_prop_year = Module.cwrap(
          'date_time_t_get_prop_year',
          'number',
          ['number']
        );
        var EASING_LINEAR = Module.cwrap('get_EASING_LINEAR', 'number', []);
        var EASING_QUADRATIC_IN = Module.cwrap(
          'get_EASING_QUADRATIC_IN',
          'number',
          []
        );
        var EASING_QUADRATIC_OUT = Module.cwrap(
          'get_EASING_QUADRATIC_OUT',
          'number',
          []
        );
        var EASING_QUADRATIC_INOUT = Module.cwrap(
          'get_EASING_QUADRATIC_INOUT',
          'number',
          []
        );
        var EASING_CUBIC_IN = Module.cwrap('get_EASING_CUBIC_IN', 'number', []);
        var EASING_CUBIC_OUT = Module.cwrap(
          'get_EASING_CUBIC_OUT',
          'number',
          []
        );
        var EASING_SIN_IN = Module.cwrap('get_EASING_SIN_IN', 'number', []);
        var EASING_SIN_OUT = Module.cwrap('get_EASING_SIN_OUT', 'number', []);
        var EASING_SIN_INOUT = Module.cwrap(
          'get_EASING_SIN_INOUT',
          'number',
          []
        );
        var EASING_POW_IN = Module.cwrap('get_EASING_POW_IN', 'number', []);
        var EASING_POW_OUT = Module.cwrap('get_EASING_POW_OUT', 'number', []);
        var EASING_POW_INOUT = Module.cwrap(
          'get_EASING_POW_INOUT',
          'number',
          []
        );
        var EASING_CIRCULAR_IN = Module.cwrap(
          'get_EASING_CIRCULAR_IN',
          'number',
          []
        );
        var EASING_CIRCULAR_OUT = Module.cwrap(
          'get_EASING_CIRCULAR_OUT',
          'number',
          []
        );
        var EASING_CIRCULAR_INOUT = Module.cwrap(
          'get_EASING_CIRCULAR_INOUT',
          'number',
          []
        );
        var EASING_ELASTIC_IN = Module.cwrap(
          'get_EASING_ELASTIC_IN',
          'number',
          []
        );
        var EASING_ELASTIC_OUT = Module.cwrap(
          'get_EASING_ELASTIC_OUT',
          'number',
          []
        );
        var EASING_ELASTIC_INOUT = Module.cwrap(
          'get_EASING_ELASTIC_INOUT',
          'number',
          []
        );
        var EASING_BACK_IN = Module.cwrap('get_EASING_BACK_IN', 'number', []);
        var EASING_BACK_OUT = Module.cwrap('get_EASING_BACK_OUT', 'number', []);
        var EASING_BACK_INOUT = Module.cwrap(
          'get_EASING_BACK_INOUT',
          'number',
          []
        );
        var EASING_BOUNCE_IN = Module.cwrap(
          'get_EASING_BOUNCE_IN',
          'number',
          []
        );
        var EASING_BOUNCE_OUT = Module.cwrap(
          'get_EASING_BOUNCE_OUT',
          'number',
          []
        );
        var EASING_BOUNCE_INOUT = Module.cwrap(
          'get_EASING_BOUNCE_INOUT',
          'number',
          []
        );
        var MIME_TYPE_APPLICATION_ENVOY = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_ENVOY',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_FRACTALS = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_FRACTALS',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_FUTURESPLASH = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_FUTURESPLASH',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_HTA = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_HTA',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_JSON = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_JSON',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_UBJSON = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_UBJSON',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_MAC_BINHEX40 = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_MAC_BINHEX40',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_MSWORD = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_MSWORD',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_OCTET_STREAM = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_OCTET_STREAM',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_ODA = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_ODA',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_OLESCRIPT = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_OLESCRIPT',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_PDF = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_PDF',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_PICS_RULES = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_PICS_RULES',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_PKCS10 = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_PKCS10',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_PKIX_CRL = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_PKIX_CRL',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_POSTSCRIPT = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_POSTSCRIPT',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_RTF = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_RTF',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_VND_MS_EXCEL = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_VND_MS_EXCEL',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_VND_MS_OUTLOOK = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_VND_MS_OUTLOOK',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_VND_MS_PKICERTSTORE = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_VND_MS_PKICERTSTORE',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_VND_MS_PKISECCAT = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_VND_MS_PKISECCAT',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_VND_MS_PKISTL = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_VND_MS_PKISTL',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_VND_MS_POWERPOINT = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_VND_MS_POWERPOINT',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_VND_MS_PROJECT = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_VND_MS_PROJECT',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_VND_MS_WORKS = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_VND_MS_WORKS',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_WINHLP = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_WINHLP',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_BCPIO = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_BCPIO',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_CDF = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_CDF',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_COMPRESS = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_COMPRESS',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_COMPRESSED = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_COMPRESSED',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_CPIO = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_CPIO',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_CSH = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_CSH',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_DIRECTOR = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_DIRECTOR',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_DVI = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_DVI',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_GTAR = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_GTAR',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_GZIP = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_GZIP',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_HDF = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_HDF',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_IPHONE = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_IPHONE',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_JAVASCRIPT = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_JAVASCRIPT',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_LATEX = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_LATEX',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSACCESS = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSACCESS',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSCARDFILE = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSCARDFILE',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSCLIP = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSCLIP',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSDOWNLOAD = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSDOWNLOAD',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSMEDIAVIEW = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSMEDIAVIEW',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSMETAFILE = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSMETAFILE',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSMONEY = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSMONEY',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSPUBLISHER = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSPUBLISHER',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSSCHEDULE = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSSCHEDULE',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSTERMINAL = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSTERMINAL',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_MSWRITE = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_MSWRITE',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_NETCDF = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_NETCDF',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_PERFMON = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_PERFMON',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_PKCS12 = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_PKCS12',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_SH = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_SH',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_SHAR = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_SHAR',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_SHOCKWAVE_FLASH = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_SHOCKWAVE_FLASH',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_STUFFIT = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_STUFFIT',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_SV4CPIO = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_SV4CPIO',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_SV4CRC = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_SV4CRC',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_TAR = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_TAR',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_TCL = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_TCL',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_TEX = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_TEX',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_TEXINFO = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_TEXINFO',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_TROFF = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_TROFF',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_X_USTAR = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_X_USTAR',
          'string',
          []
        );
        var MIME_TYPE_APPLICATION_ZIP = Module.cwrap(
          'get_MIME_TYPE_APPLICATION_ZIP',
          'string',
          []
        );
        var MIME_TYPE_AUDIO_BASIC = Module.cwrap(
          'get_MIME_TYPE_AUDIO_BASIC',
          'string',
          []
        );
        var MIME_TYPE_AUDIO_MID = Module.cwrap(
          'get_MIME_TYPE_AUDIO_MID',
          'string',
          []
        );
        var MIME_TYPE_AUDIO_MPEG = Module.cwrap(
          'get_MIME_TYPE_AUDIO_MPEG',
          'string',
          []
        );
        var MIME_TYPE_AUDIO_X_AIFF = Module.cwrap(
          'get_MIME_TYPE_AUDIO_X_AIFF',
          'string',
          []
        );
        var MIME_TYPE_AUDIO_X_MPEGURL = Module.cwrap(
          'get_MIME_TYPE_AUDIO_X_MPEGURL',
          'string',
          []
        );
        var MIME_TYPE_AUDIO_X_WAV = Module.cwrap(
          'get_MIME_TYPE_AUDIO_X_WAV',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_BMP = Module.cwrap(
          'get_MIME_TYPE_IMAGE_BMP',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_CIS_COD = Module.cwrap(
          'get_MIME_TYPE_IMAGE_CIS_COD',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_GIF = Module.cwrap(
          'get_MIME_TYPE_IMAGE_GIF',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_IEF = Module.cwrap(
          'get_MIME_TYPE_IMAGE_IEF',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_JPEG = Module.cwrap(
          'get_MIME_TYPE_IMAGE_JPEG',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_PIPEG = Module.cwrap(
          'get_MIME_TYPE_IMAGE_PIPEG',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_SVG_XML = Module.cwrap(
          'get_MIME_TYPE_IMAGE_SVG_XML',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_TIFF = Module.cwrap(
          'get_MIME_TYPE_IMAGE_TIFF',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_X_CMX = Module.cwrap(
          'get_MIME_TYPE_IMAGE_X_CMX',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_X_ICON = Module.cwrap(
          'get_MIME_TYPE_IMAGE_X_ICON',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_X_RGB = Module.cwrap(
          'get_MIME_TYPE_IMAGE_X_RGB',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_X_XBITMAP = Module.cwrap(
          'get_MIME_TYPE_IMAGE_X_XBITMAP',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_X_XPIXMAP = Module.cwrap(
          'get_MIME_TYPE_IMAGE_X_XPIXMAP',
          'string',
          []
        );
        var MIME_TYPE_IMAGE_X_XWINDOWDUMP = Module.cwrap(
          'get_MIME_TYPE_IMAGE_X_XWINDOWDUMP',
          'string',
          []
        );
        var MIME_TYPE_MESSAGE_RFC822 = Module.cwrap(
          'get_MIME_TYPE_MESSAGE_RFC822',
          'string',
          []
        );
        var MIME_TYPE_TEXT_CSS = Module.cwrap(
          'get_MIME_TYPE_TEXT_CSS',
          'string',
          []
        );
        var MIME_TYPE_TEXT_H323 = Module.cwrap(
          'get_MIME_TYPE_TEXT_H323',
          'string',
          []
        );
        var MIME_TYPE_TEXT_HTML = Module.cwrap(
          'get_MIME_TYPE_TEXT_HTML',
          'string',
          []
        );
        var MIME_TYPE_TEXT_IULS = Module.cwrap(
          'get_MIME_TYPE_TEXT_IULS',
          'string',
          []
        );
        var MIME_TYPE_TEXT_PLAIN = Module.cwrap(
          'get_MIME_TYPE_TEXT_PLAIN',
          'string',
          []
        );
        var MIME_TYPE_TEXT_RICHTEXT = Module.cwrap(
          'get_MIME_TYPE_TEXT_RICHTEXT',
          'string',
          []
        );
        var MIME_TYPE_TEXT_SCRIPTLET = Module.cwrap(
          'get_MIME_TYPE_TEXT_SCRIPTLET',
          'string',
          []
        );
        var MIME_TYPE_TEXT_WEBVIEWHTML = Module.cwrap(
          'get_MIME_TYPE_TEXT_WEBVIEWHTML',
          'string',
          []
        );
        var MIME_TYPE_TEXT_X_COMPONENT = Module.cwrap(
          'get_MIME_TYPE_TEXT_X_COMPONENT',
          'string',
          []
        );
        var MIME_TYPE_TEXT_X_SETEXT = Module.cwrap(
          'get_MIME_TYPE_TEXT_X_SETEXT',
          'string',
          []
        );
        var MIME_TYPE_TEXT_X_VCARD = Module.cwrap(
          'get_MIME_TYPE_TEXT_X_VCARD',
          'string',
          []
        );
        var MIME_TYPE_VIDEO_MPEG = Module.cwrap(
          'get_MIME_TYPE_VIDEO_MPEG',
          'string',
          []
        );
        var MIME_TYPE_VIDEO_QUICKTIME = Module.cwrap(
          'get_MIME_TYPE_VIDEO_QUICKTIME',
          'string',
          []
        );
        var MIME_TYPE_VIDEO_X_MSVIDEO = Module.cwrap(
          'get_MIME_TYPE_VIDEO_X_MSVIDEO',
          'string',
          []
        );
        var named_value_create = Module.cwrap(
          'named_value_create',
          'number',
          []
        );
        var named_value_cast = Module.cwrap('named_value_cast', 'number', [
          'number',
        ]);
        var named_value_set_name = Module.cwrap(
          'named_value_set_name',
          'number',
          ['number', 'string']
        );
        var named_value_set_value = Module.cwrap(
          'named_value_set_value',
          'number',
          ['number', 'number']
        );
        var named_value_get_value = Module.cwrap(
          'named_value_get_value',
          'number',
          ['number']
        );
        var named_value_destroy = Module.cwrap(
          'named_value_destroy',
          'number',
          ['number']
        );
        var named_value_t_get_prop_name = Module.cwrap(
          'named_value_t_get_prop_name',
          'string',
          ['number']
        );
        var OBJECT_CMD_SAVE = Module.cwrap('get_OBJECT_CMD_SAVE', 'string', []);
        var OBJECT_CMD_RELOAD = Module.cwrap(
          'get_OBJECT_CMD_RELOAD',
          'string',
          []
        );
        var OBJECT_CMD_MOVE_UP = Module.cwrap(
          'get_OBJECT_CMD_MOVE_UP',
          'string',
          []
        );
        var OBJECT_CMD_MOVE_DOWN = Module.cwrap(
          'get_OBJECT_CMD_MOVE_DOWN',
          'string',
          []
        );
        var OBJECT_CMD_REMOVE = Module.cwrap(
          'get_OBJECT_CMD_REMOVE',
          'string',
          []
        );
        var OBJECT_CMD_REMOVE_CHECKED = Module.cwrap(
          'get_OBJECT_CMD_REMOVE_CHECKED',
          'string',
          []
        );
        var OBJECT_CMD_CLEAR = Module.cwrap(
          'get_OBJECT_CMD_CLEAR',
          'string',
          []
        );
        var OBJECT_CMD_ADD = Module.cwrap('get_OBJECT_CMD_ADD', 'string', []);
        var OBJECT_CMD_DETAIL = Module.cwrap(
          'get_OBJECT_CMD_DETAIL',
          'string',
          []
        );
        var OBJECT_CMD_EDIT = Module.cwrap('get_OBJECT_CMD_EDIT', 'string', []);
        var OBJECT_PROP_SIZE = Module.cwrap(
          'get_OBJECT_PROP_SIZE',
          'string',
          []
        );
        var OBJECT_PROP_CHECKED = Module.cwrap(
          'get_OBJECT_PROP_CHECKED',
          'string',
          []
        );
        var rlog_create = Module.cwrap('rlog_create', 'number', [
          'string',
          'number',
          'number',
        ]);
        var rlog_write = Module.cwrap('rlog_write', 'number', [
          'number',
          'string',
        ]);
        var time_now_s = Module.cwrap('time_now_s', 'number', []);
        var time_now_ms = Module.cwrap('time_now_ms', 'number', []);
        var time_now_us = Module.cwrap('time_now_us', 'number', []);
        var RET_OK = Module.cwrap('get_RET_OK', 'number', []);
        var RET_OOM = Module.cwrap('get_RET_OOM', 'number', []);
        var RET_FAIL = Module.cwrap('get_RET_FAIL', 'number', []);
        var RET_NOT_IMPL = Module.cwrap('get_RET_NOT_IMPL', 'number', []);
        var RET_QUIT = Module.cwrap('get_RET_QUIT', 'number', []);
        var RET_FOUND = Module.cwrap('get_RET_FOUND', 'number', []);
        var RET_BUSY = Module.cwrap('get_RET_BUSY', 'number', []);
        var RET_REMOVE = Module.cwrap('get_RET_REMOVE', 'number', []);
        var RET_REPEAT = Module.cwrap('get_RET_REPEAT', 'number', []);
        var RET_NOT_FOUND = Module.cwrap('get_RET_NOT_FOUND', 'number', []);
        var RET_DONE = Module.cwrap('get_RET_DONE', 'number', []);
        var RET_STOP = Module.cwrap('get_RET_STOP', 'number', []);
        var RET_SKIP = Module.cwrap('get_RET_SKIP', 'number', []);
        var RET_CONTINUE = Module.cwrap('get_RET_CONTINUE', 'number', []);
        var RET_OBJECT_CHANGED = Module.cwrap(
          'get_RET_OBJECT_CHANGED',
          'number',
          []
        );
        var RET_ITEMS_CHANGED = Module.cwrap(
          'get_RET_ITEMS_CHANGED',
          'number',
          []
        );
        var RET_BAD_PARAMS = Module.cwrap('get_RET_BAD_PARAMS', 'number', []);
        var RET_TIMEOUT = Module.cwrap('get_RET_TIMEOUT', 'number', []);
        var RET_CRC = Module.cwrap('get_RET_CRC', 'number', []);
        var RET_IO = Module.cwrap('get_RET_IO', 'number', []);
        var RET_EOS = Module.cwrap('get_RET_EOS', 'number', []);
        var RET_NOT_MODIFIED = Module.cwrap(
          'get_RET_NOT_MODIFIED',
          'number',
          []
        );
        var VALUE_TYPE_INVALID = Module.cwrap(
          'get_VALUE_TYPE_INVALID',
          'number',
          []
        );
        var VALUE_TYPE_BOOL = Module.cwrap('get_VALUE_TYPE_BOOL', 'number', []);
        var VALUE_TYPE_INT8 = Module.cwrap('get_VALUE_TYPE_INT8', 'number', []);
        var VALUE_TYPE_UINT8 = Module.cwrap(
          'get_VALUE_TYPE_UINT8',
          'number',
          []
        );
        var VALUE_TYPE_INT16 = Module.cwrap(
          'get_VALUE_TYPE_INT16',
          'number',
          []
        );
        var VALUE_TYPE_UINT16 = Module.cwrap(
          'get_VALUE_TYPE_UINT16',
          'number',
          []
        );
        var VALUE_TYPE_INT32 = Module.cwrap(
          'get_VALUE_TYPE_INT32',
          'number',
          []
        );
        var VALUE_TYPE_UINT32 = Module.cwrap(
          'get_VALUE_TYPE_UINT32',
          'number',
          []
        );
        var VALUE_TYPE_INT64 = Module.cwrap(
          'get_VALUE_TYPE_INT64',
          'number',
          []
        );
        var VALUE_TYPE_UINT64 = Module.cwrap(
          'get_VALUE_TYPE_UINT64',
          'number',
          []
        );
        var VALUE_TYPE_POINTER = Module.cwrap(
          'get_VALUE_TYPE_POINTER',
          'number',
          []
        );
        var VALUE_TYPE_FLOAT = Module.cwrap(
          'get_VALUE_TYPE_FLOAT',
          'number',
          []
        );
        var VALUE_TYPE_FLOAT32 = Module.cwrap(
          'get_VALUE_TYPE_FLOAT32',
          'number',
          []
        );
        var VALUE_TYPE_DOUBLE = Module.cwrap(
          'get_VALUE_TYPE_DOUBLE',
          'number',
          []
        );
        var VALUE_TYPE_STRING = Module.cwrap(
          'get_VALUE_TYPE_STRING',
          'number',
          []
        );
        var VALUE_TYPE_WSTRING = Module.cwrap(
          'get_VALUE_TYPE_WSTRING',
          'number',
          []
        );
        var VALUE_TYPE_OBJECT = Module.cwrap(
          'get_VALUE_TYPE_OBJECT',
          'number',
          []
        );
        var VALUE_TYPE_SIZED_STRING = Module.cwrap(
          'get_VALUE_TYPE_SIZED_STRING',
          'number',
          []
        );
        var VALUE_TYPE_BINARY = Module.cwrap(
          'get_VALUE_TYPE_BINARY',
          'number',
          []
        );
        var VALUE_TYPE_UBJSON = Module.cwrap(
          'get_VALUE_TYPE_UBJSON',
          'number',
          []
        );
        var VALUE_TYPE_TOKEN = Module.cwrap(
          'get_VALUE_TYPE_TOKEN',
          'number',
          []
        );
        var assets_manager = Module.cwrap('assets_manager', 'number', []);
        var assets_manager_set_theme = Module.cwrap(
          'assets_manager_set_theme',
          'number',
          ['number', 'string']
        );
        var assets_manager_ref = Module.cwrap('assets_manager_ref', 'number', [
          'number',
          'number',
          'string',
        ]);
        var assets_manager_ref_ex = Module.cwrap(
          'assets_manager_ref_ex',
          'number',
          ['number', 'number', 'number', 'string']
        );
        var assets_manager_unref = Module.cwrap(
          'assets_manager_unref',
          'number',
          ['number', 'number']
        );
        var wheel_event_cast = Module.cwrap('wheel_event_cast', 'number', [
          'number',
        ]);
        var wheel_event_t_get_prop_dy = Module.cwrap(
          'wheel_event_t_get_prop_dy',
          'number',
          ['number']
        );
        var wheel_event_t_get_prop_alt = Module.cwrap(
          'wheel_event_t_get_prop_alt',
          'number',
          ['number']
        );
        var wheel_event_t_get_prop_ctrl = Module.cwrap(
          'wheel_event_t_get_prop_ctrl',
          'number',
          ['number']
        );
        var wheel_event_t_get_prop_shift = Module.cwrap(
          'wheel_event_t_get_prop_shift',
          'number',
          ['number']
        );
        var orientation_event_cast = Module.cwrap(
          'orientation_event_cast',
          'number',
          ['number']
        );
        var orientation_event_t_get_prop_orientation = Module.cwrap(
          'orientation_event_t_get_prop_orientation',
          'number',
          ['number']
        );
        var value_change_event_cast = Module.cwrap(
          'value_change_event_cast',
          'number',
          ['number']
        );
        var pointer_event_cast = Module.cwrap('pointer_event_cast', 'number', [
          'number',
        ]);
        var pointer_event_t_get_prop_x = Module.cwrap(
          'pointer_event_t_get_prop_x',
          'number',
          ['number']
        );
        var pointer_event_t_get_prop_y = Module.cwrap(
          'pointer_event_t_get_prop_y',
          'number',
          ['number']
        );
        var pointer_event_t_get_prop_button = Module.cwrap(
          'pointer_event_t_get_prop_button',
          'number',
          ['number']
        );
        var pointer_event_t_get_prop_pressed = Module.cwrap(
          'pointer_event_t_get_prop_pressed',
          'number',
          ['number']
        );
        var pointer_event_t_get_prop_alt = Module.cwrap(
          'pointer_event_t_get_prop_alt',
          'number',
          ['number']
        );
        var pointer_event_t_get_prop_ctrl = Module.cwrap(
          'pointer_event_t_get_prop_ctrl',
          'number',
          ['number']
        );
        var pointer_event_t_get_prop_cmd = Module.cwrap(
          'pointer_event_t_get_prop_cmd',
          'number',
          ['number']
        );
        var pointer_event_t_get_prop_menu = Module.cwrap(
          'pointer_event_t_get_prop_menu',
          'number',
          ['number']
        );
        var pointer_event_t_get_prop_shift = Module.cwrap(
          'pointer_event_t_get_prop_shift',
          'number',
          ['number']
        );
        var key_event_cast = Module.cwrap('key_event_cast', 'number', [
          'number',
        ]);
        var key_event_t_get_prop_key = Module.cwrap(
          'key_event_t_get_prop_key',
          'number',
          ['number']
        );
        var key_event_t_get_prop_alt = Module.cwrap(
          'key_event_t_get_prop_alt',
          'number',
          ['number']
        );
        var key_event_t_get_prop_lalt = Module.cwrap(
          'key_event_t_get_prop_lalt',
          'number',
          ['number']
        );
        var key_event_t_get_prop_ralt = Module.cwrap(
          'key_event_t_get_prop_ralt',
          'number',
          ['number']
        );
        var key_event_t_get_prop_ctrl = Module.cwrap(
          'key_event_t_get_prop_ctrl',
          'number',
          ['number']
        );
        var key_event_t_get_prop_lctrl = Module.cwrap(
          'key_event_t_get_prop_lctrl',
          'number',
          ['number']
        );
        var key_event_t_get_prop_rctrl = Module.cwrap(
          'key_event_t_get_prop_rctrl',
          'number',
          ['number']
        );
        var key_event_t_get_prop_shift = Module.cwrap(
          'key_event_t_get_prop_shift',
          'number',
          ['number']
        );
        var key_event_t_get_prop_lshift = Module.cwrap(
          'key_event_t_get_prop_lshift',
          'number',
          ['number']
        );
        var key_event_t_get_prop_rshift = Module.cwrap(
          'key_event_t_get_prop_rshift',
          'number',
          ['number']
        );
        var key_event_t_get_prop_cmd = Module.cwrap(
          'key_event_t_get_prop_cmd',
          'number',
          ['number']
        );
        var key_event_t_get_prop_menu = Module.cwrap(
          'key_event_t_get_prop_menu',
          'number',
          ['number']
        );
        var key_event_t_get_prop_capslock = Module.cwrap(
          'key_event_t_get_prop_capslock',
          'number',
          ['number']
        );
        var paint_event_cast = Module.cwrap('paint_event_cast', 'number', [
          'number',
        ]);
        var paint_event_t_get_prop_c = Module.cwrap(
          'paint_event_t_get_prop_c',
          'number',
          ['number']
        );
        var window_event_cast = Module.cwrap('window_event_cast', 'number', [
          'number',
        ]);
        var window_event_t_get_prop_window = Module.cwrap(
          'window_event_t_get_prop_window',
          'number',
          ['number']
        );
        var multi_gesture_event_cast = Module.cwrap(
          'multi_gesture_event_cast',
          'number',
          ['number']
        );
        var multi_gesture_event_t_get_prop_x = Module.cwrap(
          'multi_gesture_event_t_get_prop_x',
          'number',
          ['number']
        );
        var multi_gesture_event_t_get_prop_y = Module.cwrap(
          'multi_gesture_event_t_get_prop_y',
          'number',
          ['number']
        );
        var multi_gesture_event_t_get_prop_rotation = Module.cwrap(
          'multi_gesture_event_t_get_prop_rotation',
          'number',
          ['number']
        );
        var multi_gesture_event_t_get_prop_distance = Module.cwrap(
          'multi_gesture_event_t_get_prop_distance',
          'number',
          ['number']
        );
        var image_base_set_image = Module.cwrap(
          'image_base_set_image',
          'number',
          ['number', 'string']
        );
        var image_base_set_rotation = Module.cwrap(
          'image_base_set_rotation',
          'number',
          ['number', 'number']
        );
        var image_base_set_scale = Module.cwrap(
          'image_base_set_scale',
          'number',
          ['number', 'number', 'number']
        );
        var image_base_set_anchor = Module.cwrap(
          'image_base_set_anchor',
          'number',
          ['number', 'number', 'number']
        );
        var image_base_set_selected = Module.cwrap(
          'image_base_set_selected',
          'number',
          ['number', 'number']
        );
        var image_base_set_selectable = Module.cwrap(
          'image_base_set_selectable',
          'number',
          ['number', 'number']
        );
        var image_base_set_clickable = Module.cwrap(
          'image_base_set_clickable',
          'number',
          ['number', 'number']
        );
        var image_base_cast = Module.cwrap('image_base_cast', 'number', [
          'number',
        ]);
        var image_base_t_get_prop_image = Module.cwrap(
          'image_base_t_get_prop_image',
          'string',
          ['number']
        );
        var image_base_t_get_prop_anchor_x = Module.cwrap(
          'image_base_t_get_prop_anchor_x',
          'number',
          ['number']
        );
        var image_base_t_get_prop_anchor_y = Module.cwrap(
          'image_base_t_get_prop_anchor_y',
          'number',
          ['number']
        );
        var image_base_t_get_prop_scale_x = Module.cwrap(
          'image_base_t_get_prop_scale_x',
          'number',
          ['number']
        );
        var image_base_t_get_prop_scale_y = Module.cwrap(
          'image_base_t_get_prop_scale_y',
          'number',
          ['number']
        );
        var image_base_t_get_prop_rotation = Module.cwrap(
          'image_base_t_get_prop_rotation',
          'number',
          ['number']
        );
        var image_base_t_get_prop_clickable = Module.cwrap(
          'image_base_t_get_prop_clickable',
          'number',
          ['number']
        );
        var image_base_t_get_prop_selectable = Module.cwrap(
          'image_base_t_get_prop_selectable',
          'number',
          ['number']
        );
        var image_base_t_get_prop_selected = Module.cwrap(
          'image_base_t_get_prop_selected',
          'number',
          ['number']
        );
        var style_mutable_set_name = Module.cwrap(
          'style_mutable_set_name',
          'number',
          ['number', 'string']
        );
        var style_mutable_set_int = Module.cwrap(
          'style_mutable_set_int',
          'number',
          ['number', 'string', 'string', 'number']
        );
        var style_mutable_cast = Module.cwrap('style_mutable_cast', 'number', [
          'number',
        ]);
        var style_mutable_create = Module.cwrap(
          'style_mutable_create',
          'number',
          ['number']
        );
        var style_mutable_t_get_prop_name = Module.cwrap(
          'style_mutable_t_get_prop_name',
          'string',
          ['number']
        );
        var window_base_cast = Module.cwrap('window_base_cast', 'number', [
          'number',
        ]);
        var window_base_t_get_prop_theme = Module.cwrap(
          'window_base_t_get_prop_theme',
          'string',
          ['number']
        );
        var window_base_t_get_prop_design_w = Module.cwrap(
          'window_base_t_get_prop_design_w',
          'number',
          ['number']
        );
        var window_base_t_get_prop_design_h = Module.cwrap(
          'window_base_t_get_prop_design_h',
          'number',
          ['number']
        );
        var window_base_t_get_prop_auto_scale_children_x = Module.cwrap(
          'window_base_t_get_prop_auto_scale_children_x',
          'number',
          ['number']
        );
        var window_base_t_get_prop_auto_scale_children_y = Module.cwrap(
          'window_base_t_get_prop_auto_scale_children_y',
          'number',
          ['number']
        );
        var window_base_t_get_prop_auto_scale_children_w = Module.cwrap(
          'window_base_t_get_prop_auto_scale_children_w',
          'number',
          ['number']
        );
        var window_base_t_get_prop_auto_scale_children_h = Module.cwrap(
          'window_base_t_get_prop_auto_scale_children_h',
          'number',
          ['number']
        );
        var window_base_t_get_prop_disable_anim = Module.cwrap(
          'window_base_t_get_prop_disable_anim',
          'number',
          ['number']
        );
        var window_base_t_get_prop_closable = Module.cwrap(
          'window_base_t_get_prop_closable',
          'number',
          ['number']
        );
        var window_base_t_get_prop_open_anim_hint = Module.cwrap(
          'window_base_t_get_prop_open_anim_hint',
          'string',
          ['number']
        );
        var window_base_t_get_prop_close_anim_hint = Module.cwrap(
          'window_base_t_get_prop_close_anim_hint',
          'string',
          ['number']
        );
        var window_base_t_get_prop_move_focus_prev_key = Module.cwrap(
          'window_base_t_get_prop_move_focus_prev_key',
          'string',
          ['number']
        );
        var window_base_t_get_prop_move_focus_next_key = Module.cwrap(
          'window_base_t_get_prop_move_focus_next_key',
          'string',
          ['number']
        );
        var window_base_t_get_prop_move_focus_up_key = Module.cwrap(
          'window_base_t_get_prop_move_focus_up_key',
          'string',
          ['number']
        );
        var window_base_t_get_prop_move_focus_down_key = Module.cwrap(
          'window_base_t_get_prop_move_focus_down_key',
          'string',
          ['number']
        );
        var window_base_t_get_prop_move_focus_left_key = Module.cwrap(
          'window_base_t_get_prop_move_focus_left_key',
          'string',
          ['number']
        );
        var window_base_t_get_prop_move_focus_right_key = Module.cwrap(
          'window_base_t_get_prop_move_focus_right_key',
          'string',
          ['number']
        );
        var window_base_t_get_prop_single_instance = Module.cwrap(
          'window_base_t_get_prop_single_instance',
          'number',
          ['number']
        );
        var window_base_t_get_prop_strongly_focus = Module.cwrap(
          'window_base_t_get_prop_strongly_focus',
          'number',
          ['number']
        );
        var window_manager = Module.cwrap('window_manager', 'number', []);
        var window_manager_cast = Module.cwrap(
          'window_manager_cast',
          'number',
          ['number']
        );
        var window_manager_get_top_main_window = Module.cwrap(
          'window_manager_get_top_main_window',
          'number',
          ['number']
        );
        var window_manager_get_top_window = Module.cwrap(
          'window_manager_get_top_window',
          'number',
          ['number']
        );
        var window_manager_get_prev_window = Module.cwrap(
          'window_manager_get_prev_window',
          'number',
          ['number']
        );
        var window_manager_get_pointer_x = Module.cwrap(
          'window_manager_get_pointer_x',
          'number',
          ['number']
        );
        var window_manager_get_pointer_y = Module.cwrap(
          'window_manager_get_pointer_y',
          'number',
          ['number']
        );
        var window_manager_get_pointer_pressed = Module.cwrap(
          'window_manager_get_pointer_pressed',
          'number',
          ['number']
        );
        var window_manager_is_animating = Module.cwrap(
          'window_manager_is_animating',
          'number',
          ['number']
        );
        var window_manager_set_show_fps = Module.cwrap(
          'window_manager_set_show_fps',
          'number',
          ['number', 'number']
        );
        var window_manager_set_max_fps = Module.cwrap(
          'window_manager_set_max_fps',
          'number',
          ['number', 'number']
        );
        var window_manager_set_ignore_input_events = Module.cwrap(
          'window_manager_set_ignore_input_events',
          'number',
          ['number', 'number']
        );
        var window_manager_set_screen_saver_time = Module.cwrap(
          'window_manager_set_screen_saver_time',
          'number',
          ['number', 'number']
        );
        var window_manager_set_cursor = Module.cwrap(
          'window_manager_set_cursor',
          'number',
          ['number', 'string']
        );
        var window_manager_back = Module.cwrap(
          'window_manager_back',
          'number',
          ['number']
        );
        var window_manager_back_to_home = Module.cwrap(
          'window_manager_back_to_home',
          'number',
          ['number']
        );
        var window_manager_back_to = Module.cwrap(
          'window_manager_back_to',
          'number',
          ['number', 'string']
        );
        var window_manager_resize = Module.cwrap(
          'window_manager_resize',
          'number',
          ['number', 'number', 'number']
        );
        var window_manager_close_all = Module.cwrap(
          'window_manager_close_all',
          'number',
          ['number']
        );
        var canvas_widget_create = Module.cwrap(
          'canvas_widget_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var canvas_widget_cast = Module.cwrap('canvas_widget_cast', 'number', [
          'number',
        ]);
        var color_component_create = Module.cwrap(
          'color_component_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var color_component_cast = Module.cwrap(
          'color_component_cast',
          'number',
          ['number']
        );
        var color_picker_create = Module.cwrap(
          'color_picker_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var color_picker_set_color = Module.cwrap(
          'color_picker_set_color',
          'number',
          ['number', 'string']
        );
        var color_picker_cast = Module.cwrap('color_picker_cast', 'number', [
          'number',
        ]);
        var color_picker_t_get_prop_value = Module.cwrap(
          'color_picker_t_get_prop_value',
          'string',
          ['number']
        );
        var draggable_create = Module.cwrap('draggable_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var draggable_cast = Module.cwrap('draggable_cast', 'number', [
          'number',
        ]);
        var draggable_set_top = Module.cwrap('draggable_set_top', 'number', [
          'number',
          'number',
        ]);
        var draggable_set_bottom = Module.cwrap(
          'draggable_set_bottom',
          'number',
          ['number', 'number']
        );
        var draggable_set_left = Module.cwrap('draggable_set_left', 'number', [
          'number',
          'number',
        ]);
        var draggable_set_right = Module.cwrap(
          'draggable_set_right',
          'number',
          ['number', 'number']
        );
        var draggable_set_vertical_only = Module.cwrap(
          'draggable_set_vertical_only',
          'number',
          ['number', 'number']
        );
        var draggable_set_horizontal_only = Module.cwrap(
          'draggable_set_horizontal_only',
          'number',
          ['number', 'number']
        );
        var draggable_set_drag_window = Module.cwrap(
          'draggable_set_drag_window',
          'number',
          ['number', 'number']
        );
        var draggable_t_get_prop_top = Module.cwrap(
          'draggable_t_get_prop_top',
          'number',
          ['number']
        );
        var draggable_t_get_prop_bottom = Module.cwrap(
          'draggable_t_get_prop_bottom',
          'number',
          ['number']
        );
        var draggable_t_get_prop_left = Module.cwrap(
          'draggable_t_get_prop_left',
          'number',
          ['number']
        );
        var draggable_t_get_prop_right = Module.cwrap(
          'draggable_t_get_prop_right',
          'number',
          ['number']
        );
        var draggable_t_get_prop_vertical_only = Module.cwrap(
          'draggable_t_get_prop_vertical_only',
          'number',
          ['number']
        );
        var draggable_t_get_prop_horizontal_only = Module.cwrap(
          'draggable_t_get_prop_horizontal_only',
          'number',
          ['number']
        );
        var draggable_t_get_prop_drag_window = Module.cwrap(
          'draggable_t_get_prop_drag_window',
          'number',
          ['number']
        );
        var file_browser_view_create = Module.cwrap(
          'file_browser_view_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var file_browser_view_cast = Module.cwrap(
          'file_browser_view_cast',
          'number',
          ['number']
        );
        var file_browser_view_set_init_dir = Module.cwrap(
          'file_browser_view_set_init_dir',
          'number',
          ['number', 'string']
        );
        var file_browser_view_set_top_dir = Module.cwrap(
          'file_browser_view_set_top_dir',
          'number',
          ['number', 'string']
        );
        var file_browser_view_set_filter = Module.cwrap(
          'file_browser_view_set_filter',
          'number',
          ['number', 'string']
        );
        var file_browser_view_reload = Module.cwrap(
          'file_browser_view_reload',
          'number',
          ['number']
        );
        var file_browser_view_set_ignore_hidden_files = Module.cwrap(
          'file_browser_view_set_ignore_hidden_files',
          'number',
          ['number', 'number']
        );
        var file_browser_view_set_sort_ascending = Module.cwrap(
          'file_browser_view_set_sort_ascending',
          'number',
          ['number', 'number']
        );
        var file_browser_view_set_show_check_button = Module.cwrap(
          'file_browser_view_set_show_check_button',
          'number',
          ['number', 'number']
        );
        var file_browser_view_set_sort_by = Module.cwrap(
          'file_browser_view_set_sort_by',
          'number',
          ['number', 'string']
        );
        var file_browser_view_get_cwd = Module.cwrap(
          'file_browser_view_get_cwd',
          'string',
          ['number']
        );
        var file_browser_view_create_dir = Module.cwrap(
          'file_browser_view_create_dir',
          'number',
          ['number', 'string']
        );
        var file_browser_view_create_file = Module.cwrap(
          'file_browser_view_create_file',
          'number',
          ['number', 'string', 'string', 'number']
        );
        var file_browser_view_t_get_prop_init_dir = Module.cwrap(
          'file_browser_view_t_get_prop_init_dir',
          'string',
          ['number']
        );
        var file_browser_view_t_get_prop_top_dir = Module.cwrap(
          'file_browser_view_t_get_prop_top_dir',
          'string',
          ['number']
        );
        var file_browser_view_t_get_prop_filter = Module.cwrap(
          'file_browser_view_t_get_prop_filter',
          'string',
          ['number']
        );
        var file_browser_view_t_get_prop_ignore_hidden_files = Module.cwrap(
          'file_browser_view_t_get_prop_ignore_hidden_files',
          'number',
          ['number']
        );
        var file_browser_view_t_get_prop_sort_ascending = Module.cwrap(
          'file_browser_view_t_get_prop_sort_ascending',
          'number',
          ['number']
        );
        var file_browser_view_t_get_prop_show_check_button = Module.cwrap(
          'file_browser_view_t_get_prop_show_check_button',
          'number',
          ['number']
        );
        var file_browser_view_t_get_prop_sort_by = Module.cwrap(
          'file_browser_view_t_get_prop_sort_by',
          'string',
          ['number']
        );
        var file_chooser_create = Module.cwrap(
          'file_chooser_create',
          'number',
          []
        );
        var file_chooser_set_init_dir = Module.cwrap(
          'file_chooser_set_init_dir',
          'number',
          ['number', 'string']
        );
        var file_chooser_set_top_dir = Module.cwrap(
          'file_chooser_set_top_dir',
          'number',
          ['number', 'string']
        );
        var file_chooser_set_filter = Module.cwrap(
          'file_chooser_set_filter',
          'number',
          ['number', 'string']
        );
        var file_chooser_cast = Module.cwrap('file_chooser_cast', 'number', [
          'number',
        ]);
        var file_chooser_choose_file_for_save = Module.cwrap(
          'file_chooser_choose_file_for_save',
          'number',
          ['number']
        );
        var file_chooser_choose_file_for_open = Module.cwrap(
          'file_chooser_choose_file_for_open',
          'number',
          ['number']
        );
        var file_chooser_choose_folder = Module.cwrap(
          'file_chooser_choose_folder',
          'number',
          ['number']
        );
        var file_chooser_get_dir = Module.cwrap(
          'file_chooser_get_dir',
          'string',
          ['number']
        );
        var file_chooser_get_filename = Module.cwrap(
          'file_chooser_get_filename',
          'string',
          ['number']
        );
        var file_chooser_is_aborted = Module.cwrap(
          'file_chooser_is_aborted',
          'number',
          ['number']
        );
        var gauge_pointer_create = Module.cwrap(
          'gauge_pointer_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var gauge_pointer_cast = Module.cwrap('gauge_pointer_cast', 'number', [
          'number',
        ]);
        var gauge_pointer_set_angle = Module.cwrap(
          'gauge_pointer_set_angle',
          'number',
          ['number', 'number']
        );
        var gauge_pointer_set_image = Module.cwrap(
          'gauge_pointer_set_image',
          'number',
          ['number', 'string']
        );
        var gauge_pointer_set_anchor = Module.cwrap(
          'gauge_pointer_set_anchor',
          'number',
          ['number', 'string', 'string']
        );
        var gauge_pointer_t_get_prop_angle = Module.cwrap(
          'gauge_pointer_t_get_prop_angle',
          'number',
          ['number']
        );
        var gauge_pointer_t_get_prop_image = Module.cwrap(
          'gauge_pointer_t_get_prop_image',
          'string',
          ['number']
        );
        var gauge_pointer_t_get_prop_anchor_x = Module.cwrap(
          'gauge_pointer_t_get_prop_anchor_x',
          'string',
          ['number']
        );
        var gauge_pointer_t_get_prop_anchor_y = Module.cwrap(
          'gauge_pointer_t_get_prop_anchor_y',
          'string',
          ['number']
        );
        var gauge_create = Module.cwrap('gauge_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var gauge_cast = Module.cwrap('gauge_cast', 'number', ['number']);
        var gauge_set_image = Module.cwrap('gauge_set_image', 'number', [
          'number',
          'string',
        ]);
        var gauge_set_draw_type = Module.cwrap(
          'gauge_set_draw_type',
          'number',
          ['number', 'number']
        );
        var gauge_t_get_prop_image = Module.cwrap(
          'gauge_t_get_prop_image',
          'string',
          ['number']
        );
        var gauge_t_get_prop_draw_type = Module.cwrap(
          'gauge_t_get_prop_draw_type',
          'number',
          ['number']
        );
        var image_animation_create = Module.cwrap(
          'image_animation_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var image_animation_set_loop = Module.cwrap(
          'image_animation_set_loop',
          'number',
          ['number', 'number']
        );
        var image_animation_set_image = Module.cwrap(
          'image_animation_set_image',
          'number',
          ['number', 'string']
        );
        var image_animation_set_interval = Module.cwrap(
          'image_animation_set_interval',
          'number',
          ['number', 'number']
        );
        var image_animation_set_delay = Module.cwrap(
          'image_animation_set_delay',
          'number',
          ['number', 'number']
        );
        var image_animation_set_auto_play = Module.cwrap(
          'image_animation_set_auto_play',
          'number',
          ['number', 'number']
        );
        var image_animation_set_sequence = Module.cwrap(
          'image_animation_set_sequence',
          'number',
          ['number', 'string']
        );
        var image_animation_set_range_sequence = Module.cwrap(
          'image_animation_set_range_sequence',
          'number',
          ['number', 'number', 'number']
        );
        var image_animation_play = Module.cwrap(
          'image_animation_play',
          'number',
          ['number']
        );
        var image_animation_stop = Module.cwrap(
          'image_animation_stop',
          'number',
          ['number']
        );
        var image_animation_pause = Module.cwrap(
          'image_animation_pause',
          'number',
          ['number']
        );
        var image_animation_next = Module.cwrap(
          'image_animation_next',
          'number',
          ['number']
        );
        var image_animation_set_format = Module.cwrap(
          'image_animation_set_format',
          'number',
          ['number', 'string']
        );
        var image_animation_set_unload_after_paint = Module.cwrap(
          'image_animation_set_unload_after_paint',
          'number',
          ['number', 'number']
        );
        var image_animation_set_reverse = Module.cwrap(
          'image_animation_set_reverse',
          'number',
          ['number', 'number']
        );
        var image_animation_set_show_when_done = Module.cwrap(
          'image_animation_set_show_when_done',
          'number',
          ['number', 'number']
        );
        var image_animation_cast = Module.cwrap(
          'image_animation_cast',
          'number',
          ['number']
        );
        var image_animation_is_playing = Module.cwrap(
          'image_animation_is_playing',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_image = Module.cwrap(
          'image_animation_t_get_prop_image',
          'string',
          ['number']
        );
        var image_animation_t_get_prop_sequence = Module.cwrap(
          'image_animation_t_get_prop_sequence',
          'string',
          ['number']
        );
        var image_animation_t_get_prop_start_index = Module.cwrap(
          'image_animation_t_get_prop_start_index',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_end_index = Module.cwrap(
          'image_animation_t_get_prop_end_index',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_reverse = Module.cwrap(
          'image_animation_t_get_prop_reverse',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_loop = Module.cwrap(
          'image_animation_t_get_prop_loop',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_auto_play = Module.cwrap(
          'image_animation_t_get_prop_auto_play',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_unload_after_paint = Module.cwrap(
          'image_animation_t_get_prop_unload_after_paint',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_format = Module.cwrap(
          'image_animation_t_get_prop_format',
          'string',
          ['number']
        );
        var image_animation_t_get_prop_interval = Module.cwrap(
          'image_animation_t_get_prop_interval',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_delay = Module.cwrap(
          'image_animation_t_get_prop_delay',
          'number',
          ['number']
        );
        var image_animation_t_get_prop_show_when_done = Module.cwrap(
          'image_animation_t_get_prop_show_when_done',
          'number',
          ['number']
        );
        var image_value_create = Module.cwrap('image_value_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var image_value_set_image = Module.cwrap(
          'image_value_set_image',
          'number',
          ['number', 'string']
        );
        var image_value_set_format = Module.cwrap(
          'image_value_set_format',
          'number',
          ['number', 'string']
        );
        var image_value_set_click_add_delta = Module.cwrap(
          'image_value_set_click_add_delta',
          'number',
          ['number', 'number']
        );
        var image_value_set_value = Module.cwrap(
          'image_value_set_value',
          'number',
          ['number', 'number']
        );
        var image_value_set_min = Module.cwrap(
          'image_value_set_min',
          'number',
          ['number', 'number']
        );
        var image_value_set_max = Module.cwrap(
          'image_value_set_max',
          'number',
          ['number', 'number']
        );
        var image_value_cast = Module.cwrap('image_value_cast', 'number', [
          'number',
        ]);
        var image_value_t_get_prop_image = Module.cwrap(
          'image_value_t_get_prop_image',
          'string',
          ['number']
        );
        var image_value_t_get_prop_format = Module.cwrap(
          'image_value_t_get_prop_format',
          'string',
          ['number']
        );
        var image_value_t_get_prop_click_add_delta = Module.cwrap(
          'image_value_t_get_prop_click_add_delta',
          'number',
          ['number']
        );
        var image_value_t_get_prop_value = Module.cwrap(
          'image_value_t_get_prop_value',
          'number',
          ['number']
        );
        var image_value_t_get_prop_min = Module.cwrap(
          'image_value_t_get_prop_min',
          'number',
          ['number']
        );
        var image_value_t_get_prop_max = Module.cwrap(
          'image_value_t_get_prop_max',
          'number',
          ['number']
        );
        var candidates_create = Module.cwrap('candidates_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var candidates_cast = Module.cwrap('candidates_cast', 'number', [
          'number',
        ]);
        var candidates_set_pre = Module.cwrap('candidates_set_pre', 'number', [
          'number',
          'number',
        ]);
        var candidates_set_select_by_num = Module.cwrap(
          'candidates_set_select_by_num',
          'number',
          ['number', 'number']
        );
        var candidates_set_auto_hide = Module.cwrap(
          'candidates_set_auto_hide',
          'number',
          ['number', 'number']
        );
        var candidates_set_button_style = Module.cwrap(
          'candidates_set_button_style',
          'number',
          ['number', 'string']
        );
        var candidates_t_get_prop_pre = Module.cwrap(
          'candidates_t_get_prop_pre',
          'number',
          ['number']
        );
        var candidates_t_get_prop_select_by_num = Module.cwrap(
          'candidates_t_get_prop_select_by_num',
          'number',
          ['number']
        );
        var candidates_t_get_prop_auto_hide = Module.cwrap(
          'candidates_t_get_prop_auto_hide',
          'number',
          ['number']
        );
        var candidates_t_get_prop_button_style = Module.cwrap(
          'candidates_t_get_prop_button_style',
          'string',
          ['number']
        );
        var lang_indicator_create = Module.cwrap(
          'lang_indicator_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var lang_indicator_set_image = Module.cwrap(
          'lang_indicator_set_image',
          'number',
          ['number', 'string']
        );
        var lang_indicator_cast = Module.cwrap(
          'lang_indicator_cast',
          'number',
          ['number']
        );
        var lang_indicator_t_get_prop_image = Module.cwrap(
          'lang_indicator_t_get_prop_image',
          'string',
          ['number']
        );
        var line_number_create = Module.cwrap('line_number_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var line_number_set_top_margin = Module.cwrap(
          'line_number_set_top_margin',
          'number',
          ['number', 'number']
        );
        var line_number_set_bottom_margin = Module.cwrap(
          'line_number_set_bottom_margin',
          'number',
          ['number', 'number']
        );
        var line_number_set_line_height = Module.cwrap(
          'line_number_set_line_height',
          'number',
          ['number', 'number']
        );
        var line_number_set_yoffset = Module.cwrap(
          'line_number_set_yoffset',
          'number',
          ['number', 'number']
        );
        var line_number_cast = Module.cwrap('line_number_cast', 'number', [
          'number',
        ]);
        var mledit_create = Module.cwrap('mledit_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var mledit_set_readonly = Module.cwrap(
          'mledit_set_readonly',
          'number',
          ['number', 'number']
        );
        var mledit_set_cancelable = Module.cwrap(
          'mledit_set_cancelable',
          'number',
          ['number', 'number']
        );
        var mledit_set_focus = Module.cwrap('mledit_set_focus', 'number', [
          'number',
          'number',
        ]);
        var mledit_set_wrap_word = Module.cwrap(
          'mledit_set_wrap_word',
          'number',
          ['number', 'number']
        );
        var mledit_set_max_lines = Module.cwrap(
          'mledit_set_max_lines',
          'number',
          ['number', 'number']
        );
        var mledit_set_max_chars = Module.cwrap(
          'mledit_set_max_chars',
          'number',
          ['number', 'number']
        );
        var mledit_set_tips = Module.cwrap('mledit_set_tips', 'number', [
          'number',
          'string',
        ]);
        var mledit_set_tr_tips = Module.cwrap('mledit_set_tr_tips', 'number', [
          'number',
          'string',
        ]);
        var mledit_set_keyboard = Module.cwrap(
          'mledit_set_keyboard',
          'number',
          ['number', 'string']
        );
        var mledit_set_cursor = Module.cwrap('mledit_set_cursor', 'number', [
          'number',
          'number',
        ]);
        var mledit_get_cursor = Module.cwrap('mledit_get_cursor', 'number', [
          'number',
        ]);
        var mledit_set_scroll_line = Module.cwrap(
          'mledit_set_scroll_line',
          'number',
          ['number', 'number']
        );
        var mledit_scroll_to_offset = Module.cwrap(
          'mledit_scroll_to_offset',
          'number',
          ['number', 'number']
        );
        var mledit_set_open_im_when_focused = Module.cwrap(
          'mledit_set_open_im_when_focused',
          'number',
          ['number', 'number']
        );
        var mledit_set_close_im_when_blured = Module.cwrap(
          'mledit_set_close_im_when_blured',
          'number',
          ['number', 'number']
        );
        var mledit_set_select = Module.cwrap('mledit_set_select', 'number', [
          'number',
          'number',
          'number',
        ]);
        var mledit_get_selected_text = Module.cwrap(
          'mledit_get_selected_text',
          'string',
          ['number']
        );
        var mledit_cast = Module.cwrap('mledit_cast', 'number', ['number']);
        var mledit_t_get_prop_tips = Module.cwrap(
          'mledit_t_get_prop_tips',
          'string',
          ['number']
        );
        var mledit_t_get_prop_tr_tips = Module.cwrap(
          'mledit_t_get_prop_tr_tips',
          'string',
          ['number']
        );
        var mledit_t_get_prop_keyboard = Module.cwrap(
          'mledit_t_get_prop_keyboard',
          'string',
          ['number']
        );
        var mledit_t_get_prop_max_lines = Module.cwrap(
          'mledit_t_get_prop_max_lines',
          'number',
          ['number']
        );
        var mledit_t_get_prop_max_chars = Module.cwrap(
          'mledit_t_get_prop_max_chars',
          'number',
          ['number']
        );
        var mledit_t_get_prop_wrap_word = Module.cwrap(
          'mledit_t_get_prop_wrap_word',
          'number',
          ['number']
        );
        var mledit_t_get_prop_scroll_line = Module.cwrap(
          'mledit_t_get_prop_scroll_line',
          'number',
          ['number']
        );
        var mledit_t_get_prop_readonly = Module.cwrap(
          'mledit_t_get_prop_readonly',
          'number',
          ['number']
        );
        var mledit_t_get_prop_cancelable = Module.cwrap(
          'mledit_t_get_prop_cancelable',
          'number',
          ['number']
        );
        var mledit_t_get_prop_open_im_when_focused = Module.cwrap(
          'mledit_t_get_prop_open_im_when_focused',
          'number',
          ['number']
        );
        var mledit_t_get_prop_close_im_when_blured = Module.cwrap(
          'mledit_t_get_prop_close_im_when_blured',
          'number',
          ['number']
        );
        var progress_circle_create = Module.cwrap(
          'progress_circle_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var progress_circle_cast = Module.cwrap(
          'progress_circle_cast',
          'number',
          ['number']
        );
        var progress_circle_set_value = Module.cwrap(
          'progress_circle_set_value',
          'number',
          ['number', 'number']
        );
        var progress_circle_set_max = Module.cwrap(
          'progress_circle_set_max',
          'number',
          ['number', 'number']
        );
        var progress_circle_set_format = Module.cwrap(
          'progress_circle_set_format',
          'number',
          ['number', 'string']
        );
        var progress_circle_set_line_width = Module.cwrap(
          'progress_circle_set_line_width',
          'number',
          ['number', 'number']
        );
        var progress_circle_set_start_angle = Module.cwrap(
          'progress_circle_set_start_angle',
          'number',
          ['number', 'number']
        );
        var progress_circle_set_line_cap = Module.cwrap(
          'progress_circle_set_line_cap',
          'number',
          ['number', 'string']
        );
        var progress_circle_set_show_text = Module.cwrap(
          'progress_circle_set_show_text',
          'number',
          ['number', 'number']
        );
        var progress_circle_set_counter_clock_wise = Module.cwrap(
          'progress_circle_set_counter_clock_wise',
          'number',
          ['number', 'number']
        );
        var progress_circle_t_get_prop_value = Module.cwrap(
          'progress_circle_t_get_prop_value',
          'number',
          ['number']
        );
        var progress_circle_t_get_prop_max = Module.cwrap(
          'progress_circle_t_get_prop_max',
          'number',
          ['number']
        );
        var progress_circle_t_get_prop_format = Module.cwrap(
          'progress_circle_t_get_prop_format',
          'string',
          ['number']
        );
        var progress_circle_t_get_prop_start_angle = Module.cwrap(
          'progress_circle_t_get_prop_start_angle',
          'number',
          ['number']
        );
        var progress_circle_t_get_prop_line_width = Module.cwrap(
          'progress_circle_t_get_prop_line_width',
          'number',
          ['number']
        );
        var progress_circle_t_get_prop_line_cap = Module.cwrap(
          'progress_circle_t_get_prop_line_cap',
          'string',
          ['number']
        );
        var progress_circle_t_get_prop_counter_clock_wise = Module.cwrap(
          'progress_circle_t_get_prop_counter_clock_wise',
          'number',
          ['number']
        );
        var progress_circle_t_get_prop_show_text = Module.cwrap(
          'progress_circle_t_get_prop_show_text',
          'number',
          ['number']
        );
        var rich_text_view_create = Module.cwrap(
          'rich_text_view_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var rich_text_view_cast = Module.cwrap(
          'rich_text_view_cast',
          'number',
          ['number']
        );
        var rich_text_create = Module.cwrap('rich_text_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var rich_text_set_text = Module.cwrap('rich_text_set_text', 'number', [
          'number',
          'string',
        ]);
        var rich_text_set_yslidable = Module.cwrap(
          'rich_text_set_yslidable',
          'number',
          ['number', 'number']
        );
        var rich_text_cast = Module.cwrap('rich_text_cast', 'number', [
          'number',
        ]);
        var rich_text_t_get_prop_line_gap = Module.cwrap(
          'rich_text_t_get_prop_line_gap',
          'number',
          ['number']
        );
        var rich_text_t_get_prop_yslidable = Module.cwrap(
          'rich_text_t_get_prop_yslidable',
          'number',
          ['number']
        );
        var hscroll_label_create = Module.cwrap(
          'hscroll_label_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var hscroll_label_set_lull = Module.cwrap(
          'hscroll_label_set_lull',
          'number',
          ['number', 'number']
        );
        var hscroll_label_set_duration = Module.cwrap(
          'hscroll_label_set_duration',
          'number',
          ['number', 'number']
        );
        var hscroll_label_set_only_focus = Module.cwrap(
          'hscroll_label_set_only_focus',
          'number',
          ['number', 'number']
        );
        var hscroll_label_set_only_parent_focus = Module.cwrap(
          'hscroll_label_set_only_parent_focus',
          'number',
          ['number', 'number']
        );
        var hscroll_label_set_loop = Module.cwrap(
          'hscroll_label_set_loop',
          'number',
          ['number', 'number']
        );
        var hscroll_label_set_yoyo = Module.cwrap(
          'hscroll_label_set_yoyo',
          'number',
          ['number', 'number']
        );
        var hscroll_label_set_ellipses = Module.cwrap(
          'hscroll_label_set_ellipses',
          'number',
          ['number', 'number']
        );
        var hscroll_label_set_xoffset = Module.cwrap(
          'hscroll_label_set_xoffset',
          'number',
          ['number', 'number']
        );
        var hscroll_label_start = Module.cwrap(
          'hscroll_label_start',
          'number',
          ['number']
        );
        var hscroll_label_stop = Module.cwrap('hscroll_label_stop', 'number', [
          'number',
        ]);
        var hscroll_label_cast = Module.cwrap('hscroll_label_cast', 'number', [
          'number',
        ]);
        var hscroll_label_t_get_prop_only_focus = Module.cwrap(
          'hscroll_label_t_get_prop_only_focus',
          'number',
          ['number']
        );
        var hscroll_label_t_get_prop_only_parent_focus = Module.cwrap(
          'hscroll_label_t_get_prop_only_parent_focus',
          'number',
          ['number']
        );
        var hscroll_label_t_get_prop_loop = Module.cwrap(
          'hscroll_label_t_get_prop_loop',
          'number',
          ['number']
        );
        var hscroll_label_t_get_prop_yoyo = Module.cwrap(
          'hscroll_label_t_get_prop_yoyo',
          'number',
          ['number']
        );
        var hscroll_label_t_get_prop_ellipses = Module.cwrap(
          'hscroll_label_t_get_prop_ellipses',
          'number',
          ['number']
        );
        var hscroll_label_t_get_prop_lull = Module.cwrap(
          'hscroll_label_t_get_prop_lull',
          'number',
          ['number']
        );
        var hscroll_label_t_get_prop_duration = Module.cwrap(
          'hscroll_label_t_get_prop_duration',
          'number',
          ['number']
        );
        var hscroll_label_t_get_prop_xoffset = Module.cwrap(
          'hscroll_label_t_get_prop_xoffset',
          'number',
          ['number']
        );
        var hscroll_label_t_get_prop_text_w = Module.cwrap(
          'hscroll_label_t_get_prop_text_w',
          'number',
          ['number']
        );
        var list_item_create = Module.cwrap('list_item_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var list_item_cast = Module.cwrap('list_item_cast', 'number', [
          'number',
        ]);
        var list_view_h_create = Module.cwrap('list_view_h_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var list_view_h_set_item_width = Module.cwrap(
          'list_view_h_set_item_width',
          'number',
          ['number', 'number']
        );
        var list_view_h_set_spacing = Module.cwrap(
          'list_view_h_set_spacing',
          'number',
          ['number', 'number']
        );
        var list_view_h_cast = Module.cwrap('list_view_h_cast', 'number', [
          'number',
        ]);
        var list_view_h_t_get_prop_item_width = Module.cwrap(
          'list_view_h_t_get_prop_item_width',
          'number',
          ['number']
        );
        var list_view_h_t_get_prop_spacing = Module.cwrap(
          'list_view_h_t_get_prop_spacing',
          'number',
          ['number']
        );
        var list_view_create = Module.cwrap('list_view_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var list_view_set_item_height = Module.cwrap(
          'list_view_set_item_height',
          'number',
          ['number', 'number']
        );
        var list_view_set_default_item_height = Module.cwrap(
          'list_view_set_default_item_height',
          'number',
          ['number', 'number']
        );
        var list_view_set_auto_hide_scroll_bar = Module.cwrap(
          'list_view_set_auto_hide_scroll_bar',
          'number',
          ['number', 'number']
        );
        var list_view_set_floating_scroll_bar = Module.cwrap(
          'list_view_set_floating_scroll_bar',
          'number',
          ['number', 'number']
        );
        var list_view_cast = Module.cwrap('list_view_cast', 'number', [
          'number',
        ]);
        var list_view_reinit = Module.cwrap('list_view_reinit', 'number', [
          'number',
        ]);
        var list_view_t_get_prop_item_height = Module.cwrap(
          'list_view_t_get_prop_item_height',
          'number',
          ['number']
        );
        var list_view_t_get_prop_default_item_height = Module.cwrap(
          'list_view_t_get_prop_default_item_height',
          'number',
          ['number']
        );
        var list_view_t_get_prop_auto_hide_scroll_bar = Module.cwrap(
          'list_view_t_get_prop_auto_hide_scroll_bar',
          'number',
          ['number']
        );
        var list_view_t_get_prop_floating_scroll_bar = Module.cwrap(
          'list_view_t_get_prop_floating_scroll_bar',
          'number',
          ['number']
        );
        var scroll_bar_create = Module.cwrap('scroll_bar_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var scroll_bar_cast = Module.cwrap('scroll_bar_cast', 'number', [
          'number',
        ]);
        var scroll_bar_create_mobile = Module.cwrap(
          'scroll_bar_create_mobile',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var scroll_bar_create_desktop = Module.cwrap(
          'scroll_bar_create_desktop',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var scroll_bar_set_params = Module.cwrap(
          'scroll_bar_set_params',
          'number',
          ['number', 'number', 'number']
        );
        var scroll_bar_scroll_to = Module.cwrap(
          'scroll_bar_scroll_to',
          'number',
          ['number', 'number', 'number']
        );
        var scroll_bar_set_value = Module.cwrap(
          'scroll_bar_set_value',
          'number',
          ['number', 'number']
        );
        var scroll_bar_add_delta = Module.cwrap(
          'scroll_bar_add_delta',
          'number',
          ['number', 'number']
        );
        var scroll_bar_scroll_delta = Module.cwrap(
          'scroll_bar_scroll_delta',
          'number',
          ['number', 'number']
        );
        var scroll_bar_set_value_only = Module.cwrap(
          'scroll_bar_set_value_only',
          'number',
          ['number', 'number']
        );
        var scroll_bar_set_auto_hide = Module.cwrap(
          'scroll_bar_set_auto_hide',
          'number',
          ['number', 'number']
        );
        var scroll_bar_is_mobile = Module.cwrap(
          'scroll_bar_is_mobile',
          'number',
          ['number']
        );
        var scroll_bar_t_get_prop_virtual_size = Module.cwrap(
          'scroll_bar_t_get_prop_virtual_size',
          'number',
          ['number']
        );
        var scroll_bar_t_get_prop_value = Module.cwrap(
          'scroll_bar_t_get_prop_value',
          'number',
          ['number']
        );
        var scroll_bar_t_get_prop_row = Module.cwrap(
          'scroll_bar_t_get_prop_row',
          'number',
          ['number']
        );
        var scroll_bar_t_get_prop_animatable = Module.cwrap(
          'scroll_bar_t_get_prop_animatable',
          'number',
          ['number']
        );
        var scroll_bar_t_get_prop_auto_hide = Module.cwrap(
          'scroll_bar_t_get_prop_auto_hide',
          'number',
          ['number']
        );
        var scroll_view_create = Module.cwrap('scroll_view_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var scroll_view_cast = Module.cwrap('scroll_view_cast', 'number', [
          'number',
        ]);
        var scroll_view_set_virtual_w = Module.cwrap(
          'scroll_view_set_virtual_w',
          'number',
          ['number', 'number']
        );
        var scroll_view_set_virtual_h = Module.cwrap(
          'scroll_view_set_virtual_h',
          'number',
          ['number', 'number']
        );
        var scroll_view_set_xslidable = Module.cwrap(
          'scroll_view_set_xslidable',
          'number',
          ['number', 'number']
        );
        var scroll_view_set_yslidable = Module.cwrap(
          'scroll_view_set_yslidable',
          'number',
          ['number', 'number']
        );
        var scroll_view_set_snap_to_page = Module.cwrap(
          'scroll_view_set_snap_to_page',
          'number',
          ['number', 'number']
        );
        var scroll_view_set_move_to_page = Module.cwrap(
          'scroll_view_set_move_to_page',
          'number',
          ['number', 'number']
        );
        var scroll_view_set_recursive = Module.cwrap(
          'scroll_view_set_recursive',
          'number',
          ['number', 'number']
        );
        var scroll_view_set_recursive_only = Module.cwrap(
          'scroll_view_set_recursive_only',
          'number',
          ['number', 'number']
        );
        var scroll_view_set_offset = Module.cwrap(
          'scroll_view_set_offset',
          'number',
          ['number', 'number', 'number']
        );
        var scroll_view_set_speed_scale = Module.cwrap(
          'scroll_view_set_speed_scale',
          'number',
          ['number', 'number', 'number']
        );
        var scroll_view_scroll_to = Module.cwrap(
          'scroll_view_scroll_to',
          'number',
          ['number', 'number', 'number', 'number']
        );
        var scroll_view_scroll_delta_to = Module.cwrap(
          'scroll_view_scroll_delta_to',
          'number',
          ['number', 'number', 'number', 'number']
        );
        var scroll_view_t_get_prop_virtual_w = Module.cwrap(
          'scroll_view_t_get_prop_virtual_w',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_virtual_h = Module.cwrap(
          'scroll_view_t_get_prop_virtual_h',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_xoffset = Module.cwrap(
          'scroll_view_t_get_prop_xoffset',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_yoffset = Module.cwrap(
          'scroll_view_t_get_prop_yoffset',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_xspeed_scale = Module.cwrap(
          'scroll_view_t_get_prop_xspeed_scale',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_yspeed_scale = Module.cwrap(
          'scroll_view_t_get_prop_yspeed_scale',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_xslidable = Module.cwrap(
          'scroll_view_t_get_prop_xslidable',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_yslidable = Module.cwrap(
          'scroll_view_t_get_prop_yslidable',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_snap_to_page = Module.cwrap(
          'scroll_view_t_get_prop_snap_to_page',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_move_to_page = Module.cwrap(
          'scroll_view_t_get_prop_move_to_page',
          'number',
          ['number']
        );
        var scroll_view_t_get_prop_recursive = Module.cwrap(
          'scroll_view_t_get_prop_recursive',
          'number',
          ['number']
        );
        var slide_menu_create = Module.cwrap('slide_menu_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var slide_menu_cast = Module.cwrap('slide_menu_cast', 'number', [
          'number',
        ]);
        var slide_menu_set_value = Module.cwrap(
          'slide_menu_set_value',
          'number',
          ['number', 'number']
        );
        var slide_menu_set_align_v = Module.cwrap(
          'slide_menu_set_align_v',
          'number',
          ['number', 'number']
        );
        var slide_menu_set_min_scale = Module.cwrap(
          'slide_menu_set_min_scale',
          'number',
          ['number', 'number']
        );
        var slide_menu_t_get_prop_value = Module.cwrap(
          'slide_menu_t_get_prop_value',
          'number',
          ['number']
        );
        var slide_menu_t_get_prop_align_v = Module.cwrap(
          'slide_menu_t_get_prop_align_v',
          'number',
          ['number']
        );
        var slide_menu_t_get_prop_min_scale = Module.cwrap(
          'slide_menu_t_get_prop_min_scale',
          'number',
          ['number']
        );
        var slide_indicator_create = Module.cwrap(
          'slide_indicator_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var slide_indicator_create_linear = Module.cwrap(
          'slide_indicator_create_linear',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var slide_indicator_create_arc = Module.cwrap(
          'slide_indicator_create_arc',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var slide_indicator_cast = Module.cwrap(
          'slide_indicator_cast',
          'number',
          ['number']
        );
        var slide_indicator_set_value = Module.cwrap(
          'slide_indicator_set_value',
          'number',
          ['number', 'number']
        );
        var slide_indicator_set_max = Module.cwrap(
          'slide_indicator_set_max',
          'number',
          ['number', 'number']
        );
        var slide_indicator_set_default_paint = Module.cwrap(
          'slide_indicator_set_default_paint',
          'number',
          ['number', 'number']
        );
        var slide_indicator_set_auto_hide = Module.cwrap(
          'slide_indicator_set_auto_hide',
          'number',
          ['number', 'number']
        );
        var slide_indicator_set_margin = Module.cwrap(
          'slide_indicator_set_margin',
          'number',
          ['number', 'number']
        );
        var slide_indicator_set_spacing = Module.cwrap(
          'slide_indicator_set_spacing',
          'number',
          ['number', 'number']
        );
        var slide_indicator_set_size = Module.cwrap(
          'slide_indicator_set_size',
          'number',
          ['number', 'number']
        );
        var slide_indicator_set_anchor = Module.cwrap(
          'slide_indicator_set_anchor',
          'number',
          ['number', 'string', 'string']
        );
        var slide_indicator_set_indicated_target = Module.cwrap(
          'slide_indicator_set_indicated_target',
          'number',
          ['number', 'string']
        );
        var slide_indicator_t_get_prop_value = Module.cwrap(
          'slide_indicator_t_get_prop_value',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_max = Module.cwrap(
          'slide_indicator_t_get_prop_max',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_default_paint = Module.cwrap(
          'slide_indicator_t_get_prop_default_paint',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_auto_hide = Module.cwrap(
          'slide_indicator_t_get_prop_auto_hide',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_margin = Module.cwrap(
          'slide_indicator_t_get_prop_margin',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_spacing = Module.cwrap(
          'slide_indicator_t_get_prop_spacing',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_size = Module.cwrap(
          'slide_indicator_t_get_prop_size',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_anchor_x = Module.cwrap(
          'slide_indicator_t_get_prop_anchor_x',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_anchor_y = Module.cwrap(
          'slide_indicator_t_get_prop_anchor_y',
          'number',
          ['number']
        );
        var slide_indicator_t_get_prop_indicated_target = Module.cwrap(
          'slide_indicator_t_get_prop_indicated_target',
          'string',
          ['number']
        );
        var slide_view_create = Module.cwrap('slide_view_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var slide_view_cast = Module.cwrap('slide_view_cast', 'number', [
          'number',
        ]);
        var slide_view_set_auto_play = Module.cwrap(
          'slide_view_set_auto_play',
          'number',
          ['number', 'number']
        );
        var slide_view_set_active = Module.cwrap(
          'slide_view_set_active',
          'number',
          ['number', 'number']
        );
        var slide_view_set_active_ex = Module.cwrap(
          'slide_view_set_active_ex',
          'number',
          ['number', 'number', 'number']
        );
        var slide_view_set_vertical = Module.cwrap(
          'slide_view_set_vertical',
          'number',
          ['number', 'number']
        );
        var slide_view_set_anim_hint = Module.cwrap(
          'slide_view_set_anim_hint',
          'number',
          ['number', 'string']
        );
        var slide_view_set_loop = Module.cwrap(
          'slide_view_set_loop',
          'number',
          ['number', 'number']
        );
        var slide_view_remove_index = Module.cwrap(
          'slide_view_remove_index',
          'number',
          ['number', 'number']
        );
        var slide_view_t_get_prop_vertical = Module.cwrap(
          'slide_view_t_get_prop_vertical',
          'number',
          ['number']
        );
        var slide_view_t_get_prop_auto_play = Module.cwrap(
          'slide_view_t_get_prop_auto_play',
          'number',
          ['number']
        );
        var slide_view_t_get_prop_loop = Module.cwrap(
          'slide_view_t_get_prop_loop',
          'number',
          ['number']
        );
        var slide_view_t_get_prop_anim_hint = Module.cwrap(
          'slide_view_t_get_prop_anim_hint',
          'string',
          ['number']
        );
        var switch_create = Module.cwrap('switch_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var switch_set_value = Module.cwrap('switch_set_value', 'number', [
          'number',
          'number',
        ]);
        var switch_cast = Module.cwrap('switch_cast', 'number', ['number']);
        var switch_t_get_prop_value = Module.cwrap(
          'switch_t_get_prop_value',
          'number',
          ['number']
        );
        var switch_t_get_prop_max_xoffset_ratio = Module.cwrap(
          'switch_t_get_prop_max_xoffset_ratio',
          'number',
          ['number']
        );
        var text_selector_create = Module.cwrap(
          'text_selector_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var text_selector_cast = Module.cwrap('text_selector_cast', 'number', [
          'number',
        ]);
        var text_selector_reset_options = Module.cwrap(
          'text_selector_reset_options',
          'number',
          ['number']
        );
        var text_selector_count_options = Module.cwrap(
          'text_selector_count_options',
          'number',
          ['number']
        );
        var text_selector_append_option = Module.cwrap(
          'text_selector_append_option',
          'number',
          ['number', 'number', 'string']
        );
        var text_selector_set_options = Module.cwrap(
          'text_selector_set_options',
          'number',
          ['number', 'string']
        );
        var text_selector_set_range_options_ex = Module.cwrap(
          'text_selector_set_range_options_ex',
          'number',
          ['number', 'number', 'number', 'number', 'string']
        );
        var text_selector_set_range_options = Module.cwrap(
          'text_selector_set_range_options',
          'number',
          ['number', 'number', 'number', 'number']
        );
        var text_selector_get_value = Module.cwrap(
          'text_selector_get_value',
          'number',
          ['number']
        );
        var text_selector_set_value = Module.cwrap(
          'text_selector_set_value',
          'number',
          ['number', 'number']
        );
        var text_selector_get_text = Module.cwrap(
          'text_selector_get_text',
          'string',
          ['number']
        );
        var text_selector_set_text = Module.cwrap(
          'text_selector_set_text',
          'number',
          ['number', 'string']
        );
        var text_selector_set_selected_index = Module.cwrap(
          'text_selector_set_selected_index',
          'number',
          ['number', 'number']
        );
        var text_selector_set_visible_nr = Module.cwrap(
          'text_selector_set_visible_nr',
          'number',
          ['number', 'number']
        );
        var text_selector_set_localize_options = Module.cwrap(
          'text_selector_set_localize_options',
          'number',
          ['number', 'number']
        );
        var text_selector_set_loop_options = Module.cwrap(
          'text_selector_set_loop_options',
          'number',
          ['number', 'number']
        );
        var text_selector_set_yspeed_scale = Module.cwrap(
          'text_selector_set_yspeed_scale',
          'number',
          ['number', 'number']
        );
        var text_selector_set_animating_time = Module.cwrap(
          'text_selector_set_animating_time',
          'number',
          ['number', 'number']
        );
        var text_selector_set_enable_value_animator = Module.cwrap(
          'text_selector_set_enable_value_animator',
          'number',
          ['number', 'number']
        );
        var text_selector_t_get_prop_visible_nr = Module.cwrap(
          'text_selector_t_get_prop_visible_nr',
          'number',
          ['number']
        );
        var text_selector_t_get_prop_selected_index = Module.cwrap(
          'text_selector_t_get_prop_selected_index',
          'number',
          ['number']
        );
        var text_selector_t_get_prop_options = Module.cwrap(
          'text_selector_t_get_prop_options',
          'string',
          ['number']
        );
        var text_selector_t_get_prop_yspeed_scale = Module.cwrap(
          'text_selector_t_get_prop_yspeed_scale',
          'number',
          ['number']
        );
        var text_selector_t_get_prop_animating_time = Module.cwrap(
          'text_selector_t_get_prop_animating_time',
          'number',
          ['number']
        );
        var text_selector_t_get_prop_localize_options = Module.cwrap(
          'text_selector_t_get_prop_localize_options',
          'number',
          ['number']
        );
        var text_selector_t_get_prop_loop_options = Module.cwrap(
          'text_selector_t_get_prop_loop_options',
          'number',
          ['number']
        );
        var text_selector_t_get_prop_enable_value_animator = Module.cwrap(
          'text_selector_t_get_prop_enable_value_animator',
          'number',
          ['number']
        );
        var time_clock_create = Module.cwrap('time_clock_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var time_clock_cast = Module.cwrap('time_clock_cast', 'number', [
          'number',
        ]);
        var time_clock_set_hour = Module.cwrap(
          'time_clock_set_hour',
          'number',
          ['number', 'number']
        );
        var time_clock_set_minute = Module.cwrap(
          'time_clock_set_minute',
          'number',
          ['number', 'number']
        );
        var time_clock_set_second = Module.cwrap(
          'time_clock_set_second',
          'number',
          ['number', 'number']
        );
        var time_clock_set_hour_image = Module.cwrap(
          'time_clock_set_hour_image',
          'number',
          ['number', 'string']
        );
        var time_clock_set_minute_image = Module.cwrap(
          'time_clock_set_minute_image',
          'number',
          ['number', 'string']
        );
        var time_clock_set_second_image = Module.cwrap(
          'time_clock_set_second_image',
          'number',
          ['number', 'string']
        );
        var time_clock_set_bg_image = Module.cwrap(
          'time_clock_set_bg_image',
          'number',
          ['number', 'string']
        );
        var time_clock_set_image = Module.cwrap(
          'time_clock_set_image',
          'number',
          ['number', 'string']
        );
        var time_clock_set_hour_anchor = Module.cwrap(
          'time_clock_set_hour_anchor',
          'number',
          ['number', 'string', 'string']
        );
        var time_clock_set_minute_anchor = Module.cwrap(
          'time_clock_set_minute_anchor',
          'number',
          ['number', 'string', 'string']
        );
        var time_clock_set_second_anchor = Module.cwrap(
          'time_clock_set_second_anchor',
          'number',
          ['number', 'string', 'string']
        );
        var time_clock_t_get_prop_hour = Module.cwrap(
          'time_clock_t_get_prop_hour',
          'number',
          ['number']
        );
        var time_clock_t_get_prop_minute = Module.cwrap(
          'time_clock_t_get_prop_minute',
          'number',
          ['number']
        );
        var time_clock_t_get_prop_second = Module.cwrap(
          'time_clock_t_get_prop_second',
          'number',
          ['number']
        );
        var time_clock_t_get_prop_image = Module.cwrap(
          'time_clock_t_get_prop_image',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_bg_image = Module.cwrap(
          'time_clock_t_get_prop_bg_image',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_hour_image = Module.cwrap(
          'time_clock_t_get_prop_hour_image',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_minute_image = Module.cwrap(
          'time_clock_t_get_prop_minute_image',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_second_image = Module.cwrap(
          'time_clock_t_get_prop_second_image',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_hour_anchor_x = Module.cwrap(
          'time_clock_t_get_prop_hour_anchor_x',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_hour_anchor_y = Module.cwrap(
          'time_clock_t_get_prop_hour_anchor_y',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_minute_anchor_x = Module.cwrap(
          'time_clock_t_get_prop_minute_anchor_x',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_minute_anchor_y = Module.cwrap(
          'time_clock_t_get_prop_minute_anchor_y',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_second_anchor_x = Module.cwrap(
          'time_clock_t_get_prop_second_anchor_x',
          'string',
          ['number']
        );
        var time_clock_t_get_prop_second_anchor_y = Module.cwrap(
          'time_clock_t_get_prop_second_anchor_y',
          'string',
          ['number']
        );
        var vpage_create = Module.cwrap('vpage_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var vpage_cast = Module.cwrap('vpage_cast', 'number', ['number']);
        var vpage_set_ui_asset = Module.cwrap('vpage_set_ui_asset', 'number', [
          'number',
          'string',
        ]);
        var vpage_set_anim_hint = Module.cwrap(
          'vpage_set_anim_hint',
          'number',
          ['number', 'string']
        );
        var vpage_t_get_prop_ui_asset = Module.cwrap(
          'vpage_t_get_prop_ui_asset',
          'string',
          ['number']
        );
        var vpage_t_get_prop_anim_hint = Module.cwrap(
          'vpage_t_get_prop_anim_hint',
          'string',
          ['number']
        );
        var prop_change_event_cast = Module.cwrap(
          'prop_change_event_cast',
          'number',
          ['number']
        );
        var prop_change_event_t_get_prop_name = Module.cwrap(
          'prop_change_event_t_get_prop_name',
          'string',
          ['number']
        );
        var prop_change_event_t_get_prop_value = Module.cwrap(
          'prop_change_event_t_get_prop_value',
          'number',
          ['number']
        );
        var progress_event_cast = Module.cwrap(
          'progress_event_cast',
          'number',
          ['number']
        );
        var progress_event_t_get_prop_percent = Module.cwrap(
          'progress_event_t_get_prop_percent',
          'number',
          ['number']
        );
        var done_event_cast = Module.cwrap('done_event_cast', 'number', [
          'number',
        ]);
        var done_event_t_get_prop_result = Module.cwrap(
          'done_event_t_get_prop_result',
          'number',
          ['number']
        );
        var error_event_cast = Module.cwrap('error_event_cast', 'number', [
          'number',
        ]);
        var error_event_t_get_prop_code = Module.cwrap(
          'error_event_t_get_prop_code',
          'number',
          ['number']
        );
        var error_event_t_get_prop_message = Module.cwrap(
          'error_event_t_get_prop_message',
          'string',
          ['number']
        );
        var cmd_exec_event_cast = Module.cwrap(
          'cmd_exec_event_cast',
          'number',
          ['number']
        );
        var cmd_exec_event_t_get_prop_name = Module.cwrap(
          'cmd_exec_event_t_get_prop_name',
          'string',
          ['number']
        );
        var cmd_exec_event_t_get_prop_args = Module.cwrap(
          'cmd_exec_event_t_get_prop_args',
          'string',
          ['number']
        );
        var cmd_exec_event_t_get_prop_result = Module.cwrap(
          'cmd_exec_event_t_get_prop_result',
          'number',
          ['number']
        );
        var cmd_exec_event_t_get_prop_can_exec = Module.cwrap(
          'cmd_exec_event_t_get_prop_can_exec',
          'number',
          ['number']
        );
        var app_bar_create = Module.cwrap('app_bar_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var app_bar_cast = Module.cwrap('app_bar_cast', 'number', ['number']);
        var button_group_create = Module.cwrap(
          'button_group_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var button_group_cast = Module.cwrap('button_group_cast', 'number', [
          'number',
        ]);
        var button_create = Module.cwrap('button_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var button_cast = Module.cwrap('button_cast', 'number', ['number']);
        var button_set_repeat = Module.cwrap('button_set_repeat', 'number', [
          'number',
          'number',
        ]);
        var button_set_long_press_time = Module.cwrap(
          'button_set_long_press_time',
          'number',
          ['number', 'number']
        );
        var button_set_enable_long_press = Module.cwrap(
          'button_set_enable_long_press',
          'number',
          ['number', 'number']
        );
        var button_t_get_prop_repeat = Module.cwrap(
          'button_t_get_prop_repeat',
          'number',
          ['number']
        );
        var button_t_get_prop_enable_long_press = Module.cwrap(
          'button_t_get_prop_enable_long_press',
          'number',
          ['number']
        );
        var button_t_get_prop_long_press_time = Module.cwrap(
          'button_t_get_prop_long_press_time',
          'number',
          ['number']
        );
        var check_button_create = Module.cwrap(
          'check_button_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var check_button_create_radio = Module.cwrap(
          'check_button_create_radio',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var check_button_set_value = Module.cwrap(
          'check_button_set_value',
          'number',
          ['number', 'number']
        );
        var check_button_cast = Module.cwrap('check_button_cast', 'number', [
          'number',
        ]);
        var check_button_t_get_prop_value = Module.cwrap(
          'check_button_t_get_prop_value',
          'number',
          ['number']
        );
        var clip_view_create = Module.cwrap('clip_view_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var clip_view_cast = Module.cwrap('clip_view_cast', 'number', [
          'number',
        ]);
        var color_tile_create = Module.cwrap('color_tile_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var color_tile_cast = Module.cwrap('color_tile_cast', 'number', [
          'number',
        ]);
        var color_tile_set_bg_color = Module.cwrap(
          'color_tile_set_bg_color',
          'number',
          ['number', 'string']
        );
        var color_tile_get_bg_color = Module.cwrap(
          'color_tile_get_bg_color',
          'string',
          ['number']
        );
        var color_tile_get_border_color = Module.cwrap(
          'color_tile_get_border_color',
          'string',
          ['number']
        );
        var color_tile_t_get_prop_bg_color = Module.cwrap(
          'color_tile_t_get_prop_bg_color',
          'string',
          ['number']
        );
        var color_tile_t_get_prop_border_color = Module.cwrap(
          'color_tile_t_get_prop_border_color',
          'string',
          ['number']
        );
        var column_create = Module.cwrap('column_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var column_cast = Module.cwrap('column_cast', 'number', ['number']);
        var combo_box_item_create = Module.cwrap(
          'combo_box_item_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var combo_box_item_cast = Module.cwrap(
          'combo_box_item_cast',
          'number',
          ['number']
        );
        var combo_box_item_set_checked = Module.cwrap(
          'combo_box_item_set_checked',
          'number',
          ['number', 'number']
        );
        var combo_box_item_set_value = Module.cwrap(
          'combo_box_item_set_value',
          'number',
          ['number', 'number']
        );
        var combo_box_item_t_get_prop_value = Module.cwrap(
          'combo_box_item_t_get_prop_value',
          'number',
          ['number']
        );
        var combo_box_item_t_get_prop_checked = Module.cwrap(
          'combo_box_item_t_get_prop_checked',
          'number',
          ['number']
        );
        var dialog_client_create = Module.cwrap(
          'dialog_client_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var dialog_client_cast = Module.cwrap('dialog_client_cast', 'number', [
          'number',
        ]);
        var dialog_title_create = Module.cwrap(
          'dialog_title_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var dialog_title_cast = Module.cwrap('dialog_title_cast', 'number', [
          'number',
        ]);
        var digit_clock_create = Module.cwrap('digit_clock_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var digit_clock_cast = Module.cwrap('digit_clock_cast', 'number', [
          'number',
        ]);
        var digit_clock_set_format = Module.cwrap(
          'digit_clock_set_format',
          'number',
          ['number', 'string']
        );
        var digit_clock_t_get_prop_format = Module.cwrap(
          'digit_clock_t_get_prop_format',
          'string',
          ['number']
        );
        var dragger_create = Module.cwrap('dragger_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var dragger_cast = Module.cwrap('dragger_cast', 'number', ['number']);
        var dragger_set_range = Module.cwrap('dragger_set_range', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var dragger_t_get_prop_x_min = Module.cwrap(
          'dragger_t_get_prop_x_min',
          'number',
          ['number']
        );
        var dragger_t_get_prop_y_min = Module.cwrap(
          'dragger_t_get_prop_y_min',
          'number',
          ['number']
        );
        var dragger_t_get_prop_x_max = Module.cwrap(
          'dragger_t_get_prop_x_max',
          'number',
          ['number']
        );
        var dragger_t_get_prop_y_max = Module.cwrap(
          'dragger_t_get_prop_y_max',
          'number',
          ['number']
        );
        var edit_create = Module.cwrap('edit_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var edit_cast = Module.cwrap('edit_cast', 'number', ['number']);
        var edit_get_int = Module.cwrap('edit_get_int', 'number', ['number']);
        var edit_get_double = Module.cwrap('edit_get_double', 'number', [
          'number',
        ]);
        var edit_set_int = Module.cwrap('edit_set_int', 'number', [
          'number',
          'number',
        ]);
        var edit_set_double = Module.cwrap('edit_set_double', 'number', [
          'number',
          'number',
        ]);
        var edit_set_text_limit = Module.cwrap(
          'edit_set_text_limit',
          'number',
          ['number', 'number', 'number']
        );
        var edit_set_int_limit = Module.cwrap('edit_set_int_limit', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var edit_set_float_limit = Module.cwrap(
          'edit_set_float_limit',
          'number',
          ['number', 'number', 'number', 'number']
        );
        var edit_set_readonly = Module.cwrap('edit_set_readonly', 'number', [
          'number',
          'number',
        ]);
        var edit_set_cancelable = Module.cwrap(
          'edit_set_cancelable',
          'number',
          ['number', 'number']
        );
        var edit_set_auto_fix = Module.cwrap('edit_set_auto_fix', 'number', [
          'number',
          'number',
        ]);
        var edit_set_select_none_when_focused = Module.cwrap(
          'edit_set_select_none_when_focused',
          'number',
          ['number', 'number']
        );
        var edit_set_open_im_when_focused = Module.cwrap(
          'edit_set_open_im_when_focused',
          'number',
          ['number', 'number']
        );
        var edit_set_close_im_when_blured = Module.cwrap(
          'edit_set_close_im_when_blured',
          'number',
          ['number', 'number']
        );
        var edit_set_input_type = Module.cwrap(
          'edit_set_input_type',
          'number',
          ['number', 'number']
        );
        var edit_set_action_text = Module.cwrap(
          'edit_set_action_text',
          'number',
          ['number', 'string']
        );
        var edit_set_tips = Module.cwrap('edit_set_tips', 'number', [
          'number',
          'string',
        ]);
        var edit_set_tr_tips = Module.cwrap('edit_set_tr_tips', 'number', [
          'number',
          'string',
        ]);
        var edit_set_keyboard = Module.cwrap('edit_set_keyboard', 'number', [
          'number',
          'string',
        ]);
        var edit_set_password_visible = Module.cwrap(
          'edit_set_password_visible',
          'number',
          ['number', 'number']
        );
        var edit_set_focus = Module.cwrap('edit_set_focus', 'number', [
          'number',
          'number',
        ]);
        var edit_set_cursor = Module.cwrap('edit_set_cursor', 'number', [
          'number',
          'number',
        ]);
        var edit_get_cursor = Module.cwrap('edit_get_cursor', 'number', [
          'number',
        ]);
        var edit_set_select = Module.cwrap('edit_set_select', 'number', [
          'number',
          'number',
          'number',
        ]);
        var edit_get_selected_text = Module.cwrap(
          'edit_get_selected_text',
          'string',
          ['number']
        );
        var edit_t_get_prop_tips = Module.cwrap(
          'edit_t_get_prop_tips',
          'string',
          ['number']
        );
        var edit_t_get_prop_tr_tips = Module.cwrap(
          'edit_t_get_prop_tr_tips',
          'string',
          ['number']
        );
        var edit_t_get_prop_action_text = Module.cwrap(
          'edit_t_get_prop_action_text',
          'string',
          ['number']
        );
        var edit_t_get_prop_keyboard = Module.cwrap(
          'edit_t_get_prop_keyboard',
          'string',
          ['number']
        );
        var edit_t_get_prop_min = Module.cwrap(
          'edit_t_get_prop_min',
          'number',
          ['number']
        );
        var edit_t_get_prop_max = Module.cwrap(
          'edit_t_get_prop_max',
          'number',
          ['number']
        );
        var edit_t_get_prop_step = Module.cwrap(
          'edit_t_get_prop_step',
          'number',
          ['number']
        );
        var edit_t_get_prop_input_type = Module.cwrap(
          'edit_t_get_prop_input_type',
          'number',
          ['number']
        );
        var edit_t_get_prop_readonly = Module.cwrap(
          'edit_t_get_prop_readonly',
          'number',
          ['number']
        );
        var edit_t_get_prop_password_visible = Module.cwrap(
          'edit_t_get_prop_password_visible',
          'number',
          ['number']
        );
        var edit_t_get_prop_auto_fix = Module.cwrap(
          'edit_t_get_prop_auto_fix',
          'number',
          ['number']
        );
        var edit_t_get_prop_select_none_when_focused = Module.cwrap(
          'edit_t_get_prop_select_none_when_focused',
          'number',
          ['number']
        );
        var edit_t_get_prop_open_im_when_focused = Module.cwrap(
          'edit_t_get_prop_open_im_when_focused',
          'number',
          ['number']
        );
        var edit_t_get_prop_close_im_when_blured = Module.cwrap(
          'edit_t_get_prop_close_im_when_blured',
          'number',
          ['number']
        );
        var edit_t_get_prop_cancelable = Module.cwrap(
          'edit_t_get_prop_cancelable',
          'number',
          ['number']
        );
        var grid_item_create = Module.cwrap('grid_item_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var grid_item_cast = Module.cwrap('grid_item_cast', 'number', [
          'number',
        ]);
        var grid_create = Module.cwrap('grid_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var grid_cast = Module.cwrap('grid_cast', 'number', ['number']);
        var group_box_create = Module.cwrap('group_box_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var group_box_cast = Module.cwrap('group_box_cast', 'number', [
          'number',
        ]);
        var label_create = Module.cwrap('label_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var label_set_length = Module.cwrap('label_set_length', 'number', [
          'number',
          'number',
        ]);
        var label_set_max_w = Module.cwrap('label_set_max_w', 'number', [
          'number',
          'number',
        ]);
        var label_set_line_wrap = Module.cwrap(
          'label_set_line_wrap',
          'number',
          ['number', 'number']
        );
        var label_set_word_wrap = Module.cwrap(
          'label_set_word_wrap',
          'number',
          ['number', 'number']
        );
        var label_resize_to_content = Module.cwrap(
          'label_resize_to_content',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var label_cast = Module.cwrap('label_cast', 'number', ['number']);
        var label_t_get_prop_length = Module.cwrap(
          'label_t_get_prop_length',
          'number',
          ['number']
        );
        var label_t_get_prop_line_wrap = Module.cwrap(
          'label_t_get_prop_line_wrap',
          'number',
          ['number']
        );
        var label_t_get_prop_word_wrap = Module.cwrap(
          'label_t_get_prop_word_wrap',
          'number',
          ['number']
        );
        var label_t_get_prop_max_w = Module.cwrap(
          'label_t_get_prop_max_w',
          'number',
          ['number']
        );
        var pages_create = Module.cwrap('pages_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var pages_cast = Module.cwrap('pages_cast', 'number', ['number']);
        var pages_set_active = Module.cwrap('pages_set_active', 'number', [
          'number',
          'number',
        ]);
        var pages_set_active_by_name = Module.cwrap(
          'pages_set_active_by_name',
          'number',
          ['number', 'string']
        );
        var pages_t_get_prop_active = Module.cwrap(
          'pages_t_get_prop_active',
          'number',
          ['number']
        );
        var progress_bar_create = Module.cwrap(
          'progress_bar_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var progress_bar_cast = Module.cwrap('progress_bar_cast', 'number', [
          'number',
        ]);
        var progress_bar_set_value = Module.cwrap(
          'progress_bar_set_value',
          'number',
          ['number', 'number']
        );
        var progress_bar_set_max = Module.cwrap(
          'progress_bar_set_max',
          'number',
          ['number', 'number']
        );
        var progress_bar_set_format = Module.cwrap(
          'progress_bar_set_format',
          'number',
          ['number', 'string']
        );
        var progress_bar_set_vertical = Module.cwrap(
          'progress_bar_set_vertical',
          'number',
          ['number', 'number']
        );
        var progress_bar_set_show_text = Module.cwrap(
          'progress_bar_set_show_text',
          'number',
          ['number', 'number']
        );
        var progress_bar_set_reverse = Module.cwrap(
          'progress_bar_set_reverse',
          'number',
          ['number', 'number']
        );
        var progress_bar_get_percent = Module.cwrap(
          'progress_bar_get_percent',
          'number',
          ['number']
        );
        var progress_bar_t_get_prop_value = Module.cwrap(
          'progress_bar_t_get_prop_value',
          'number',
          ['number']
        );
        var progress_bar_t_get_prop_max = Module.cwrap(
          'progress_bar_t_get_prop_max',
          'number',
          ['number']
        );
        var progress_bar_t_get_prop_format = Module.cwrap(
          'progress_bar_t_get_prop_format',
          'string',
          ['number']
        );
        var progress_bar_t_get_prop_vertical = Module.cwrap(
          'progress_bar_t_get_prop_vertical',
          'number',
          ['number']
        );
        var progress_bar_t_get_prop_show_text = Module.cwrap(
          'progress_bar_t_get_prop_show_text',
          'number',
          ['number']
        );
        var progress_bar_t_get_prop_reverse = Module.cwrap(
          'progress_bar_t_get_prop_reverse',
          'number',
          ['number']
        );
        var row_create = Module.cwrap('row_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var row_cast = Module.cwrap('row_cast', 'number', ['number']);
        var slider_create = Module.cwrap('slider_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var slider_cast = Module.cwrap('slider_cast', 'number', ['number']);
        var slider_set_value = Module.cwrap('slider_set_value', 'number', [
          'number',
          'number',
        ]);
        var slider_set_min = Module.cwrap('slider_set_min', 'number', [
          'number',
          'number',
        ]);
        var slider_set_max = Module.cwrap('slider_set_max', 'number', [
          'number',
          'number',
        ]);
        var slider_set_step = Module.cwrap('slider_set_step', 'number', [
          'number',
          'number',
        ]);
        var slider_set_bar_size = Module.cwrap(
          'slider_set_bar_size',
          'number',
          ['number', 'number']
        );
        var slider_set_vertical = Module.cwrap(
          'slider_set_vertical',
          'number',
          ['number', 'number']
        );
        var slider_t_get_prop_value = Module.cwrap(
          'slider_t_get_prop_value',
          'number',
          ['number']
        );
        var slider_t_get_prop_min = Module.cwrap(
          'slider_t_get_prop_min',
          'number',
          ['number']
        );
        var slider_t_get_prop_max = Module.cwrap(
          'slider_t_get_prop_max',
          'number',
          ['number']
        );
        var slider_t_get_prop_step = Module.cwrap(
          'slider_t_get_prop_step',
          'number',
          ['number']
        );
        var slider_t_get_prop_vertical = Module.cwrap(
          'slider_t_get_prop_vertical',
          'number',
          ['number']
        );
        var slider_t_get_prop_bar_size = Module.cwrap(
          'slider_t_get_prop_bar_size',
          'number',
          ['number']
        );
        var slider_t_get_prop_dragger_size = Module.cwrap(
          'slider_t_get_prop_dragger_size',
          'number',
          ['number']
        );
        var slider_t_get_prop_dragger_adapt_to_icon = Module.cwrap(
          'slider_t_get_prop_dragger_adapt_to_icon',
          'number',
          ['number']
        );
        var slider_t_get_prop_slide_with_bar = Module.cwrap(
          'slider_t_get_prop_slide_with_bar',
          'number',
          ['number']
        );
        var tab_button_group_create = Module.cwrap(
          'tab_button_group_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var tab_button_group_set_compact = Module.cwrap(
          'tab_button_group_set_compact',
          'number',
          ['number', 'number']
        );
        var tab_button_group_set_scrollable = Module.cwrap(
          'tab_button_group_set_scrollable',
          'number',
          ['number', 'number']
        );
        var tab_button_group_cast = Module.cwrap(
          'tab_button_group_cast',
          'number',
          ['number']
        );
        var tab_button_group_t_get_prop_compact = Module.cwrap(
          'tab_button_group_t_get_prop_compact',
          'number',
          ['number']
        );
        var tab_button_group_t_get_prop_scrollable = Module.cwrap(
          'tab_button_group_t_get_prop_scrollable',
          'number',
          ['number']
        );
        var tab_button_create = Module.cwrap('tab_button_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var tab_button_cast = Module.cwrap('tab_button_cast', 'number', [
          'number',
        ]);
        var tab_button_set_value = Module.cwrap(
          'tab_button_set_value',
          'number',
          ['number', 'number']
        );
        var tab_button_set_icon = Module.cwrap(
          'tab_button_set_icon',
          'number',
          ['number', 'string']
        );
        var tab_button_set_active_icon = Module.cwrap(
          'tab_button_set_active_icon',
          'number',
          ['number', 'string']
        );
        var tab_button_set_load_ui = Module.cwrap(
          'tab_button_set_load_ui',
          'number',
          ['number', 'string']
        );
        var tab_button_t_get_prop_value = Module.cwrap(
          'tab_button_t_get_prop_value',
          'number',
          ['number']
        );
        var tab_button_t_get_prop_load_ui = Module.cwrap(
          'tab_button_t_get_prop_load_ui',
          'string',
          ['number']
        );
        var tab_button_t_get_prop_active_icon = Module.cwrap(
          'tab_button_t_get_prop_active_icon',
          'string',
          ['number']
        );
        var tab_button_t_get_prop_icon = Module.cwrap(
          'tab_button_t_get_prop_icon',
          'string',
          ['number']
        );
        var tab_control_create = Module.cwrap('tab_control_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var tab_control_cast = Module.cwrap('tab_control_cast', 'number', [
          'number',
        ]);
        var view_create = Module.cwrap('view_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var view_set_default_focused_child = Module.cwrap(
          'view_set_default_focused_child',
          'number',
          ['number', 'string']
        );
        var view_cast = Module.cwrap('view_cast', 'number', ['number']);
        var view_t_get_prop_default_focused_child = Module.cwrap(
          'view_t_get_prop_default_focused_child',
          'string',
          ['number']
        );
        var dialog_create = Module.cwrap('dialog_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var dialog_create_simple = Module.cwrap(
          'dialog_create_simple',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var dialog_cast = Module.cwrap('dialog_cast', 'number', ['number']);
        var dialog_get_title = Module.cwrap('dialog_get_title', 'number', [
          'number',
        ]);
        var dialog_get_client = Module.cwrap('dialog_get_client', 'number', [
          'number',
        ]);
        var dialog_open = Module.cwrap('dialog_open', 'number', ['string']);
        var dialog_set_title = Module.cwrap('dialog_set_title', 'number', [
          'number',
          'string',
        ]);
        var dialog_modal = Module.cwrap('dialog_modal', 'number', ['number']);
        var dialog_quit = Module.cwrap('dialog_quit', 'number', [
          'number',
          'number',
        ]);
        var dialog_is_quited = Module.cwrap('dialog_is_quited', 'number', [
          'number',
        ]);
        var dialog_is_modal = Module.cwrap('dialog_is_modal', 'number', [
          'number',
        ]);
        var dialog_toast = Module.cwrap('dialog_toast', 'number', [
          'string',
          'number',
        ]);
        var dialog_info = Module.cwrap('dialog_info', 'number', [
          'string',
          'string',
        ]);
        var dialog_warn = Module.cwrap('dialog_warn', 'number', [
          'string',
          'string',
        ]);
        var dialog_confirm = Module.cwrap('dialog_confirm', 'number', [
          'string',
          'string',
        ]);
        var dialog_t_get_prop_highlight = Module.cwrap(
          'dialog_t_get_prop_highlight',
          'string',
          ['number']
        );
        var native_window_move = Module.cwrap('native_window_move', 'number', [
          'number',
          'number',
          'number',
          'number',
        ]);
        var native_window_resize = Module.cwrap(
          'native_window_resize',
          'number',
          ['number', 'number', 'number', 'number']
        );
        var native_window_minimize = Module.cwrap(
          'native_window_minimize',
          'number',
          ['number']
        );
        var native_window_maximize = Module.cwrap(
          'native_window_maximize',
          'number',
          ['number']
        );
        var native_window_restore = Module.cwrap(
          'native_window_restore',
          'number',
          ['number']
        );
        var native_window_center = Module.cwrap(
          'native_window_center',
          'number',
          ['number']
        );
        var native_window_show_border = Module.cwrap(
          'native_window_show_border',
          'number',
          ['number', 'number']
        );
        var native_window_set_fullscreen = Module.cwrap(
          'native_window_set_fullscreen',
          'number',
          ['number', 'number']
        );
        var native_window_set_cursor = Module.cwrap(
          'native_window_set_cursor',
          'number',
          ['number', 'string', 'number']
        );
        var window_create = Module.cwrap('window_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var window_create_default = Module.cwrap(
          'window_create_default',
          'number',
          []
        );
        var window_set_fullscreen = Module.cwrap(
          'window_set_fullscreen',
          'number',
          ['number', 'number']
        );
        var window_set_auto_scale_children = Module.cwrap(
          'window_set_auto_scale_children',
          'number',
          ['number', 'number', 'number']
        );
        var window_open = Module.cwrap('window_open', 'number', ['string']);
        var window_open_and_close = Module.cwrap(
          'window_open_and_close',
          'number',
          ['string', 'number']
        );
        var window_close = Module.cwrap('window_close', 'number', ['number']);
        var window_close_force = Module.cwrap('window_close_force', 'number', [
          'number',
        ]);
        var window_cast = Module.cwrap('window_cast', 'number', ['number']);
        var window_t_get_prop_fullscreen = Module.cwrap(
          'window_t_get_prop_fullscreen',
          'number',
          ['number']
        );
        var gif_image_create = Module.cwrap('gif_image_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var gif_image_play = Module.cwrap('gif_image_play', 'number', [
          'number',
        ]);
        var gif_image_stop = Module.cwrap('gif_image_stop', 'number', [
          'number',
        ]);
        var gif_image_pause = Module.cwrap('gif_image_pause', 'number', [
          'number',
        ]);
        var gif_image_cast = Module.cwrap('gif_image_cast', 'number', [
          'number',
        ]);
        var keyboard_create = Module.cwrap('keyboard_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var keyboard_cast = Module.cwrap('keyboard_cast', 'number', ['number']);
        var mutable_image_create = Module.cwrap(
          'mutable_image_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var svg_image_create = Module.cwrap('svg_image_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var svg_image_set_image = Module.cwrap(
          'svg_image_set_image',
          'number',
          ['number', 'string']
        );
        var svg_image_cast = Module.cwrap('svg_image_cast', 'number', [
          'number',
        ]);
        var idle_info_cast = Module.cwrap('idle_info_cast', 'number', [
          'number',
        ]);
        var idle_info_t_get_prop_ctx = Module.cwrap(
          'idle_info_t_get_prop_ctx',
          'number',
          ['number']
        );
        var idle_info_t_get_prop_extra_ctx = Module.cwrap(
          'idle_info_t_get_prop_extra_ctx',
          'number',
          ['number']
        );
        var idle_info_t_get_prop_id = Module.cwrap(
          'idle_info_t_get_prop_id',
          'number',
          ['number']
        );
        var object_array_create = Module.cwrap(
          'object_array_create',
          'number',
          []
        );
        var object_array_unref = Module.cwrap('object_array_unref', 'number', [
          'number',
        ]);
        var object_array_clear_props = Module.cwrap(
          'object_array_clear_props',
          'number',
          ['number']
        );
        var object_array_insert = Module.cwrap(
          'object_array_insert',
          'number',
          ['number', 'number', 'number']
        );
        var object_array_push = Module.cwrap('object_array_push', 'number', [
          'number',
          'number',
        ]);
        var object_array_index_of = Module.cwrap(
          'object_array_index_of',
          'number',
          ['number', 'number']
        );
        var object_array_last_index_of = Module.cwrap(
          'object_array_last_index_of',
          'number',
          ['number', 'number']
        );
        var object_array_remove = Module.cwrap(
          'object_array_remove',
          'number',
          ['number', 'number']
        );
        var object_array_get_and_remove = Module.cwrap(
          'object_array_get_and_remove',
          'number',
          ['number', 'number', 'number']
        );
        var object_array_t_get_prop_size = Module.cwrap(
          'object_array_t_get_prop_size',
          'number',
          ['number']
        );
        var object_default_create = Module.cwrap(
          'object_default_create',
          'number',
          []
        );
        var object_default_unref = Module.cwrap(
          'object_default_unref',
          'number',
          ['number']
        );
        var object_default_clear_props = Module.cwrap(
          'object_default_clear_props',
          'number',
          ['number']
        );
        var object_default_t_get_prop_props_size = Module.cwrap(
          'object_default_t_get_prop_props_size',
          'number',
          ['number']
        );
        var timer_info_cast = Module.cwrap('timer_info_cast', 'number', [
          'number',
        ]);
        var timer_info_t_get_prop_ctx = Module.cwrap(
          'timer_info_t_get_prop_ctx',
          'number',
          ['number']
        );
        var timer_info_t_get_prop_extra_ctx = Module.cwrap(
          'timer_info_t_get_prop_extra_ctx',
          'number',
          ['number']
        );
        var timer_info_t_get_prop_id = Module.cwrap(
          'timer_info_t_get_prop_id',
          'number',
          ['number']
        );
        var timer_info_t_get_prop_now = Module.cwrap(
          'timer_info_t_get_prop_now',
          'number',
          ['number']
        );
        var calibration_win_create = Module.cwrap(
          'calibration_win_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        var calibration_win_cast = Module.cwrap(
          'calibration_win_cast',
          'number',
          ['number']
        );
        var combo_box_create = Module.cwrap('combo_box_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var combo_box_cast = Module.cwrap('combo_box_cast', 'number', [
          'number',
        ]);
        var combo_box_set_open_window = Module.cwrap(
          'combo_box_set_open_window',
          'number',
          ['number', 'string']
        );
        var combo_box_reset_options = Module.cwrap(
          'combo_box_reset_options',
          'number',
          ['number']
        );
        var combo_box_count_options = Module.cwrap(
          'combo_box_count_options',
          'number',
          ['number']
        );
        var combo_box_set_selected_index = Module.cwrap(
          'combo_box_set_selected_index',
          'number',
          ['number', 'number']
        );
        var combo_box_set_localize_options = Module.cwrap(
          'combo_box_set_localize_options',
          'number',
          ['number', 'number']
        );
        var combo_box_set_value = Module.cwrap(
          'combo_box_set_value',
          'number',
          ['number', 'number']
        );
        var combo_box_set_item_height = Module.cwrap(
          'combo_box_set_item_height',
          'number',
          ['number', 'number']
        );
        var combo_box_append_option = Module.cwrap(
          'combo_box_append_option',
          'number',
          ['number', 'number', 'string']
        );
        var combo_box_remove_option = Module.cwrap(
          'combo_box_remove_option',
          'number',
          ['number', 'number']
        );
        var combo_box_set_options = Module.cwrap(
          'combo_box_set_options',
          'number',
          ['number', 'string']
        );
        var combo_box_get_value = Module.cwrap(
          'combo_box_get_value',
          'number',
          ['number']
        );
        var combo_box_get_text = Module.cwrap('combo_box_get_text', 'string', [
          'number',
        ]);
        var combo_box_t_get_prop_open_window = Module.cwrap(
          'combo_box_t_get_prop_open_window',
          'string',
          ['number']
        );
        var combo_box_t_get_prop_selected_index = Module.cwrap(
          'combo_box_t_get_prop_selected_index',
          'number',
          ['number']
        );
        var combo_box_t_get_prop_value = Module.cwrap(
          'combo_box_t_get_prop_value',
          'number',
          ['number']
        );
        var combo_box_t_get_prop_localize_options = Module.cwrap(
          'combo_box_t_get_prop_localize_options',
          'number',
          ['number']
        );
        var combo_box_t_get_prop_options = Module.cwrap(
          'combo_box_t_get_prop_options',
          'string',
          ['number']
        );
        var combo_box_t_get_prop_item_height = Module.cwrap(
          'combo_box_t_get_prop_item_height',
          'number',
          ['number']
        );
        var image_create = Module.cwrap('image_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var image_set_draw_type = Module.cwrap(
          'image_set_draw_type',
          'number',
          ['number', 'number']
        );
        var image_cast = Module.cwrap('image_cast', 'number', ['number']);
        var image_t_get_prop_draw_type = Module.cwrap(
          'image_t_get_prop_draw_type',
          'number',
          ['number']
        );
        var overlay_create = Module.cwrap('overlay_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var overlay_set_click_through = Module.cwrap(
          'overlay_set_click_through',
          'number',
          ['number', 'number']
        );
        var overlay_set_always_on_top = Module.cwrap(
          'overlay_set_always_on_top',
          'number',
          ['number', 'number']
        );
        var overlay_cast = Module.cwrap('overlay_cast', 'number', ['number']);
        var overlay_t_get_prop_click_through = Module.cwrap(
          'overlay_t_get_prop_click_through',
          'number',
          ['number']
        );
        var overlay_t_get_prop_always_on_top = Module.cwrap(
          'overlay_t_get_prop_always_on_top',
          'number',
          ['number']
        );
        var popup_create = Module.cwrap('popup_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var popup_cast = Module.cwrap('popup_cast', 'number', ['number']);
        var popup_set_close_when_click = Module.cwrap(
          'popup_set_close_when_click',
          'number',
          ['number', 'number']
        );
        var popup_set_close_when_click_outside = Module.cwrap(
          'popup_set_close_when_click_outside',
          'number',
          ['number', 'number']
        );
        var popup_set_close_when_timeout = Module.cwrap(
          'popup_set_close_when_timeout',
          'number',
          ['number', 'number']
        );
        var popup_t_get_prop_close_when_click = Module.cwrap(
          'popup_t_get_prop_close_when_click',
          'number',
          ['number']
        );
        var popup_t_get_prop_close_when_click_outside = Module.cwrap(
          'popup_t_get_prop_close_when_click_outside',
          'number',
          ['number']
        );
        var popup_t_get_prop_close_when_timeout = Module.cwrap(
          'popup_t_get_prop_close_when_timeout',
          'number',
          ['number']
        );
        var spin_box_create = Module.cwrap('spin_box_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var spin_box_cast = Module.cwrap('spin_box_cast', 'number', ['number']);
        var system_bar_create = Module.cwrap('system_bar_create', 'number', [
          'number',
          'number',
          'number',
          'number',
          'number',
        ]);
        var system_bar_cast = Module.cwrap('system_bar_cast', 'number', [
          'number',
        ]);
        var combo_box_ex_create = Module.cwrap(
          'combo_box_ex_create',
          'number',
          ['number', 'number', 'number', 'number', 'number']
        );
        /**
         * 事件分发器, 用于实现观察者模式。
         *
         */
        var TEmitter = /** @class */ (function() {
          function TEmitter(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 创建emitter对象。
           *
           *
           * @returns 对象。
           */
          TEmitter.create = function() {
            return new TEmitter(emitter_create());
          };
          /**
           * 分发事件。如果当前分发的回调函数返回RET_REMOVE，该回调函数将被移出。
           *禁用状态下，本函数不做任何事情。
           *
           * @param e 事件对象。
           *
           * @returns 如果当前分发的回调函数返回RET_STOP，dispatch中断分发，并返回RET_STOP，否则返回RET_OK。
           */
          TEmitter.prototype.dispatch = function(e) {
            return emitter_dispatch(
              this != null ? this.nativeObj || this : null,
              e != null ? e.nativeObj || e : null
            );
          };
          /**
           * 分发事件。
           *> 对emitter_dispatch的包装，分发一个简单的事件。
           *如果当前分发的回调函数返回RET_STOP，dispatch中断分发，并返回RET_STOP，否则返回RET_OK。
           *
           * @param type 事件类型。
           *
           * @returns
           */
          TEmitter.prototype.dispatchSimpleEvent = function(type) {
            return emitter_dispatch_simple_event(
              this != null ? this.nativeObj || this : null,
              type
            );
          };
          /**
           * 注册指定事件的处理函数。
           *
           * @param etype 事件类型。
           * @param handler 事件处理函数。
           * @param ctx 事件处理函数上下文。
           *
           * @returns 返回id，用于emitter_off。
           */
          TEmitter.prototype.on = function(etype, handler, ctx) {
            return emitter_on(
              this != null ? this.nativeObj || this : null,
              etype,
              TBrowser.addFunction(wrap_on_event(handler), 'iii'),
              ctx
            );
          };
          /**
           * 注销指定事件的处理函数。
           *
           * @param id emitter_on返回的ID。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEmitter.prototype.off = function(id) {
            return emitter_off(
              this != null ? this.nativeObj || this : null,
              id
            );
          };
          /**
           * 启用。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEmitter.prototype.enable = function() {
            return emitter_enable(this != null ? this.nativeObj || this : null);
          };
          /**
           * 禁用。
           *
           *禁用后emitter_dispatch无效，但可以注册和注销。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEmitter.prototype.disable = function() {
            return emitter_disable(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 销毁。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEmitter.prototype.destroy = function() {
            return emitter_destroy(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 转换为emitter对象(供脚本语言使用)。
           *
           *主要给脚本语言使用。
           *
           * @param emitter emitter对象。
           *
           * @returns 对象。
           */
          TEmitter.cast = function(emitter) {
            return new TEmitter(
              emitter_cast(
                emitter != null ? emitter.nativeObj || emitter : null
              )
            );
          };
          return TEmitter;
        })();
        exports.TEmitter = TEmitter;
        /**
         * 点。包括一个x坐标和一个y坐标。
         *
         */
        var TPoint = /** @class */ (function() {
          function TPoint(nativeObj) {
            this.nativeObj = nativeObj;
          }
          return TPoint;
        })();
        exports.TPoint = TPoint;
        /**
         * 点(浮点数)。包括一个x坐标和一个y坐标。
         *
         */
        var TPointf = /** @class */ (function() {
          function TPointf(nativeObj) {
            this.nativeObj = nativeObj;
          }
          return TPointf;
        })();
        exports.TPointf = TPointf;
        /**
         * 矩形。包括一个x坐标、y坐标、宽度和高度。
         *
         */
        var TRectf = /** @class */ (function() {
          function TRectf(nativeObj) {
            this.nativeObj = nativeObj;
          }
          Object.defineProperty(TRectf.prototype, 'x', {
            /**
             * x坐标。
             *
             */
            get: function() {
              return rectf_t_get_prop_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TRectf.prototype, 'y', {
            /**
             * y坐标。
             *
             */
            get: function() {
              return rectf_t_get_prop_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TRectf.prototype, 'w', {
            /**
             * 宽度。
             *
             */
            get: function() {
              return rectf_t_get_prop_w(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TRectf.prototype, 'h', {
            /**
             * 高度。
             *
             */
            get: function() {
              return rectf_t_get_prop_h(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TRectf;
        })();
        exports.TRectf = TRectf;
        /**
         * 矩形。包括一个x坐标、y坐标、宽度和高度。
         *
         */
        var TRect = /** @class */ (function() {
          function TRect(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 创建rect对象。
           *
           *> 主要供脚本语言使用。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           *
           * @returns rect对象。
           */
          TRect.create = function(x, y, w, h) {
            return new TRect(rect_create(x, y, w, h));
          };
          /**
           * 设置rect对象的xywh。
           *
           *> 主要供脚本语言使用。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           *
           * @returns rect对象。
           */
          TRect.prototype.set = function(x, y, w, h) {
            return new TRect(
              rect_set(this != null ? this.nativeObj || this : null, x, y, w, h)
            );
          };
          /**
           * 转换为rect对象。
           *
           *> 供脚本语言使用。
           *
           * @param rect rect对象。
           *
           * @returns rect对象。
           */
          TRect.cast = function(rect) {
            return new TRect(
              rect_cast(rect != null ? rect.nativeObj || rect : null)
            );
          };
          /**
           * 销毁rect对象。
           *
           *> 主要供脚本语言使用。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TRect.prototype.destroy = function() {
            return rect_destroy(this != null ? this.nativeObj || this : null);
          };
          Object.defineProperty(TRect.prototype, 'x', {
            /**
             * x坐标。
             *
             */
            get: function() {
              return rect_t_get_prop_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TRect.prototype, 'y', {
            /**
             * y坐标。
             *
             */
            get: function() {
              return rect_t_get_prop_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TRect.prototype, 'w', {
            /**
             * 宽度。
             *
             */
            get: function() {
              return rect_t_get_prop_w(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TRect.prototype, 'h', {
            /**
             * 高度。
             *
             */
            get: function() {
              return rect_t_get_prop_h(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TRect;
        })();
        exports.TRect = TRect;
        /**
         * 位图。
         *
         */
        var TBitmap = /** @class */ (function() {
          function TBitmap(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 创建图片对象(一般供脚本语言中使用)。
           *
           *
           * @returns 返回bitmap对象。
           */
          TBitmap.create = function() {
            return new TBitmap(bitmap_create());
          };
          /**
           * 创建图片对象。
           *
           * @param w 宽度。
           * @param h 高度。
           * @param line_length line_length。
           * @param format 格式。
           *
           * @returns 返回bitmap对象。
           */
          TBitmap.createEx = function(w, h, line_length, format) {
            return new TBitmap(bitmap_create_ex(w, h, line_length, format));
          };
          /**
           * 获取图片一个像素占用的字节数。
           *
           *
           * @returns 返回一个像素占用的字节数。
           */
          TBitmap.prototype.getBpp = function() {
            return bitmap_get_bpp(this != null ? this.nativeObj || this : null);
          };
          /**
           * 销毁图片(for script only)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TBitmap.prototype.destroy = function() {
            return bitmap_destroy_with_self(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取位图格式对应的颜色位数。
           *
           * @param format 位图格式。
           *
           * @returns 成功返回颜色位数，失败返回0。
           */
          TBitmap.getBppOfFormat = function(format) {
            return bitmap_get_bpp_of_format(format);
          };
          Object.defineProperty(TBitmap.prototype, 'w', {
            /**
             * 宽度。
             *
             */
            get: function() {
              return bitmap_t_get_prop_w(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TBitmap.prototype, 'h', {
            /**
             * 高度。
             *
             */
            get: function() {
              return bitmap_t_get_prop_h(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TBitmap.prototype, 'lineLength', {
            /**
             * 每一行实际占用的内存(也称为stride或pitch)，一般情况下为w*bpp。
             *
             */
            get: function() {
              return bitmap_t_get_prop_line_length(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TBitmap.prototype, 'flags', {
            /**
             * 标志。请参考{bitmap_flag_t}。
             *
             */
            get: function() {
              return bitmap_t_get_prop_flags(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TBitmap.prototype, 'format', {
            /**
             * 格式。请参考{bitmap_format_t}。
             *
             */
            get: function() {
              return bitmap_t_get_prop_format(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TBitmap.prototype, 'name', {
            /**
             * 名称。
             *
             */
            get: function() {
              return bitmap_t_get_prop_name(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TBitmap;
        })();
        exports.TBitmap = TBitmap;
        /**
         * 对象接口。
         *
         */
        var TObject = /** @class */ (function(_super) {
          __extends(TObject, _super);
          function TObject(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 引用计数减1。引用计数为0时，销毁对象。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.unref = function() {
            return object_unref(this != null ? this.nativeObj || this : null);
          };
          /**
           * 引用计数加1。
           *
           * @param obj object对象。
           *
           * @returns 返回object对象。
           */
          TObject.ref = function(obj) {
            return new TObject(
              object_ref(obj != null ? obj.nativeObj || obj : null)
            );
          };
          /**
           * 获取对象的类型名称。
           *
           *
           * @returns 返回对象的类型名称。
           */
          TObject.prototype.getType = function() {
            return object_get_type(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取对象的描述信息。
           *
           *
           * @returns 返回对象的描述信息。
           */
          TObject.prototype.getDesc = function() {
            return object_get_desc(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取对象占用内存的大小。
           *
           *
           * @returns 返回对象占用内存的大小。
           */
          TObject.prototype.getSize = function() {
            return object_get_size(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 判断对象是否是集合。
           *
           *
           * @returns 返回TRUE表示是集合，否则不是。
           */
          TObject.prototype.isCollection = function() {
            return object_is_collection(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置对象的名称。
           *
           * @param name 对象的名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setName = function(name) {
            return object_set_name(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 比较两个对象。
           *
           * @param other 比较的object对象。
           *
           * @returns 返回比较结果。
           */
          TObject.prototype.compare = function(other) {
            return object_compare(
              this != null ? this.nativeObj || this : null,
              other != null ? other.nativeObj || other : null
            );
          };
          /**
           * 获取指定属性的值。
           *
           * @param name 属性的名称。
           * @param v 返回属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.getProp = function(name, v) {
            return object_get_prop(
              this != null ? this.nativeObj || this : null,
              name,
              v != null ? v.nativeObj || v : null
            );
          };
          /**
           * 获取指定属性的字符串类型的值。
           *
           * @param name 属性的名称。
           *
           * @returns 返回指定属性的字符串类型的值。
           */
          TObject.prototype.getPropStr = function(name) {
            return object_get_prop_str(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 获取指定属性的指针类型的值。
           *
           * @param name 属性的名称。
           *
           * @returns 返回指定属性的指针类型的值。
           */
          TObject.prototype.getPropPointer = function(name) {
            return object_get_prop_pointer(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 获取指定属性的object类型的值。
           *
           * @param name 属性的名称。
           *
           * @returns 返回指定属性的object类型的值。
           */
          TObject.prototype.getPropObject = function(name) {
            return new TObject(
              object_get_prop_object(
                this != null ? this.nativeObj || this : null,
                name
              )
            );
          };
          /**
           * 获取指定属性的整数类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的整数类型的值。
           */
          TObject.prototype.getPropInt = function(name, defval) {
            return object_get_prop_int(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 获取指定属性的bool类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的bool类型的值。
           */
          TObject.prototype.getPropBool = function(name, defval) {
            return object_get_prop_bool(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 获取指定属性的浮点数类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的浮点数类型的值。
           */
          TObject.prototype.getPropFloat = function(name, defval) {
            return object_get_prop_float(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 获取指定属性的浮点数类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的浮点数类型的值。
           */
          TObject.prototype.getPropDouble = function(name, defval) {
            return object_get_prop_double(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 删除指定属性。
           *
           * @param name 属性的名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.removeProp = function(name) {
            return object_remove_prop(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置指定属性的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setProp = function(name, value) {
            return object_set_prop(
              this != null ? this.nativeObj || this : null,
              name,
              value != null ? value.nativeObj || value : null
            );
          };
          /**
           * 设置指定属性的字符串类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropStr = function(name, value) {
            return object_set_prop_str(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 设置指定属性的object类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropObject = function(name, value) {
            return object_set_prop_object(
              this != null ? this.nativeObj || this : null,
              name,
              value != null ? value.nativeObj || value : null
            );
          };
          /**
           * 设置指定属性的整数类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropInt = function(name, value) {
            return object_set_prop_int(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 设置指定属性的bool类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropBool = function(name, value) {
            return object_set_prop_bool(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 设置指定属性的浮点数类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropFloat = function(name, value) {
            return object_set_prop_float(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 设置指定属性的浮点数类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropDouble = function(name, value) {
            return object_set_prop_double(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 拷贝指定的属性。
           *
           * @param src 源对象。
           * @param name 属性的名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.copyProp = function(src, name) {
            return object_copy_prop(
              this != null ? this.nativeObj || this : null,
              src != null ? src.nativeObj || src : null,
              name
            );
          };
          /**
           * 检查是否存在指定的属性。
           *
           * @param name 属性的名称。
           *
           * @returns 返回TRUE表示存在，否则表示不存在。
           */
          TObject.prototype.hasProp = function(name) {
            return object_has_prop(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 计算一个表达式，表达式中引用的变量从prop中获取。
           *
           * @param expr 表达式。
           * @param v 返回计算结果。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.eval = function(expr, v) {
            return object_eval(
              this != null ? this.nativeObj || this : null,
              expr,
              v != null ? v.nativeObj || v : null
            );
          };
          /**
           * 检查是否可以执行指定的命令。
           *
           * @param name 命令的名称。
           * @param args 命令的参数。
           *
           * @returns 返回TRUE表示可以执行，否则表示不可以执行。
           */
          TObject.prototype.canExec = function(name, args) {
            return object_can_exec(
              this != null ? this.nativeObj || this : null,
              name,
              args
            );
          };
          /**
           * 执行指定的命令。
           *
           * @param name 命令的名称。
           * @param args 命令的参数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.execute = function(name, args) {
            return object_exec(
              this != null ? this.nativeObj || this : null,
              name,
              args
            );
          };
          /**
           * 触发EVT_PROPS_CHANGED事件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.notifyChanged = function() {
            return object_notify_changed(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查是否存在指定的属性。
           *
           * @param path 属性的path，各级之间用.分隔。
           *
           * @returns 返回TRUE表示存在，否则表示不存在。
           */
          TObject.prototype.hasPropByPath = function(path) {
            return object_has_prop_by_path(
              this != null ? this.nativeObj || this : null,
              path
            );
          };
          /**
           * 获取指定属性的字符串类型的值。
           *
           * @param path 属性的path。
           *
           * @returns 返回指定属性的字符串类型的值。
           */
          TObject.prototype.getPropStrByPath = function(path) {
            return object_get_prop_str_by_path(
              this != null ? this.nativeObj || this : null,
              path
            );
          };
          /**
           * 获取指定属性的指针类型的值。
           *
           * @param path 属性的path。
           *
           * @returns 返回指定属性的指针类型的值。
           */
          TObject.prototype.getPropPointerByPath = function(path) {
            return object_get_prop_pointer_by_path(
              this != null ? this.nativeObj || this : null,
              path
            );
          };
          /**
           * 获取指定属性的object类型的值。
           *
           * @param path 属性的path。
           *
           * @returns 返回指定属性的object类型的值。
           */
          TObject.prototype.getPropObjectByPath = function(path) {
            return new TObject(
              object_get_prop_object_by_path(
                this != null ? this.nativeObj || this : null,
                path
              )
            );
          };
          /**
           * 获取指定属性的整数类型的值。
           *
           * @param path 属性的path。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的整数类型的值。
           */
          TObject.prototype.getPropIntByPath = function(path, defval) {
            return object_get_prop_int_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              defval
            );
          };
          /**
           * 获取指定属性的bool类型的值。
           *
           * @param path 属性的path。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的bool类型的值。
           */
          TObject.prototype.getPropBoolByPath = function(path, defval) {
            return object_get_prop_bool_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              defval
            );
          };
          /**
           * 获取指定属性的浮点数类型的值。
           *
           *e
           *
           * @param path 属性的path。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的浮点数类型的值。
           */
          TObject.prototype.getPropFloatByPath = function(path, defval) {
            return object_get_prop_float_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              defval
            );
          };
          /**
           * 设置指定属性的值。
           *
           * @param path 属性的path。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropByPath = function(path, value) {
            return object_set_prop_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              value != null ? value.nativeObj || value : null
            );
          };
          /**
           * 设置指定属性的字符串类型的值。
           *
           * @param path 属性的path。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropStrByPath = function(path, value) {
            return object_set_prop_str_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              value
            );
          };
          /**
           * 设置指定属性的object类型的值。
           *
           * @param path 属性的path。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropObjectByPath = function(path, value) {
            return object_set_prop_object_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              value != null ? value.nativeObj || value : null
            );
          };
          /**
           * 设置指定属性的整数类型的值。
           *
           * @param path 属性的path。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropIntByPath = function(path, value) {
            return object_set_prop_int_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              value
            );
          };
          /**
           * 设置指定属性的bool类型的值。
           *
           * @param path 属性的path。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropBoolByPath = function(path, value) {
            return object_set_prop_bool_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              value
            );
          };
          /**
           * 设置指定属性的浮点数类型的值。
           *
           * @param path 属性的path。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropFloatByPath = function(path, value) {
            return object_set_prop_float_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              value
            );
          };
          /**
           * 检查是否可以执行指定的命令。
           *
           * @param path 命令的path。
           * @param args 命令的参数。
           *
           * @returns 返回TRUE表示可以执行，否则表示不可以执行。
           */
          TObject.prototype.canExecByPath = function(path, args) {
            return object_can_exec_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              args
            );
          };
          /**
           * 执行指定的命令。
           *
           * @param path 命令的path。
           * @param args 命令的参数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.executeByPath = function(path, args) {
            return object_exec_by_path(
              this != null ? this.nativeObj || this : null,
              path,
              args
            );
          };
          /**
           * 获取指定属性的int8类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的int8类型的值。
           */
          TObject.prototype.getPropInt8 = function(name, defval) {
            return object_get_prop_int8(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定属性的int8类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropInt8 = function(name, value) {
            return object_set_prop_int8(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 获取指定属性的uint8类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的uint8类型的值。
           */
          TObject.prototype.getPropUint8 = function(name, defval) {
            return object_get_prop_uint8(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定属性的uint8类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropUint8 = function(name, value) {
            return object_set_prop_uint8(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 获取指定属性的int16类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的int16类型的值。
           */
          TObject.prototype.getPropInt16 = function(name, defval) {
            return object_get_prop_int16(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定属性的int16类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropInt16 = function(name, value) {
            return object_set_prop_int16(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 获取指定属性的uint16类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的uint16类型的值。
           */
          TObject.prototype.getPropUint16 = function(name, defval) {
            return object_get_prop_uint16(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定属性的uint16类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropUint16 = function(name, value) {
            return object_set_prop_uint16(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 获取指定属性的int32类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的int32类型的值。
           */
          TObject.prototype.getPropInt32 = function(name, defval) {
            return object_get_prop_int32(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定属性的int32类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropInt32 = function(name, value) {
            return object_set_prop_int32(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 获取指定属性的uint32类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的uint32类型的值。
           */
          TObject.prototype.getPropUint32 = function(name, defval) {
            return object_get_prop_uint32(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定属性的uint32类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropUint32 = function(name, value) {
            return object_set_prop_uint32(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 获取指定属性的int64类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的int64类型的值。
           */
          TObject.prototype.getPropInt64 = function(name, defval) {
            return object_get_prop_int64(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定属性的int64类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropInt64 = function(name, value) {
            return object_set_prop_int64(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          /**
           * 获取指定属性的uint64类型的值。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回指定属性的uint64类型的值。
           */
          TObject.prototype.getPropUint64 = function(name, defval) {
            return object_get_prop_uint64(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定属性的uint64类型的值。
           *
           * @param name 属性的名称。
           * @param value 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObject.prototype.setPropUint64 = function(name, value) {
            return object_set_prop_uint64(
              this != null ? this.nativeObj || this : null,
              name,
              value
            );
          };
          Object.defineProperty(TObject.prototype, 'refCount', {
            /**
             * 引用计数。
             *
             */
            get: function() {
              return object_t_get_prop_ref_count(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TObject.prototype, 'name', {
            /**
             * 对象的名称。
             *
             */
            get: function() {
              return object_t_get_prop_name(this.nativeObj);
            },
            set: function(v) {
              this.setName(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TObject;
        })(TEmitter);
        exports.TObject = TObject;
        /**
         * 一个通用数据类型，用来存放整数、浮点数、字符串和其它对象。
         *
         *在C/C++中，一般不需动态创建对象，直接声明并初始化即可。如：
         *
         *
         *> 在脚本语言中，需要动态创建对象。
         *
         */
        var TValue = /** @class */ (function() {
          function TValue(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 设置类型为bool的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setBool = function(value) {
            return new TValue(
              value_set_bool(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为bool的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.bool = function() {
            return value_bool(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为int8的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setInt8 = function(value) {
            return new TValue(
              value_set_int8(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为int8的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.int8 = function() {
            return value_int8(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为uint8的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setUint8 = function(value) {
            return new TValue(
              value_set_uint8(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为uint8的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.uint8 = function() {
            return value_uint8(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为int16的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setInt16 = function(value) {
            return new TValue(
              value_set_int16(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为int16的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.int16 = function() {
            return value_int16(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为uint16的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setUint16 = function(value) {
            return new TValue(
              value_set_uint16(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为uint16的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.uint16 = function() {
            return value_uint16(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为int32的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setInt32 = function(value) {
            return new TValue(
              value_set_int32(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为int32的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.int32 = function() {
            return value_int32(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为uint32的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setUint32 = function(value) {
            return new TValue(
              value_set_uint32(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 设置类型为int64的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setInt64 = function(value) {
            return new TValue(
              value_set_int64(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为int64的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.int64 = function() {
            return value_int64(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为uint64的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setUint64 = function(value) {
            return new TValue(
              value_set_uint64(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为uint64的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.uint64 = function() {
            return value_uint64(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为float\_t的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setFloat = function(value) {
            return new TValue(
              value_set_float(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为float的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.float32 = function() {
            return value_float32(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为double的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setFloat64 = function(value) {
            return new TValue(
              value_set_double(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取类型为double的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.float64 = function() {
            return value_double(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为字符串的值(并拷贝字符串)。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setStr = function(value) {
            return new TValue(
              value_dup_str(this != null ? this.nativeObj || this : null, value)
            );
          };
          /**
           * 获取类型为字符串的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.str = function() {
            return value_str(this != null ? this.nativeObj || this : null);
          };
          /**
           * 获取类型为字符串的值。
           *
           * @param buff 用于格式转换的缓冲区。
           * @param size 缓冲区大小。
           *
           * @returns 值。
           */
          TValue.prototype.strEx = function(buff, size) {
            return value_str_ex(
              this != null ? this.nativeObj || this : null,
              buff,
              size
            );
          };
          /**
           * 判断value是否为空值。
           *
           *
           * @returns 为空值返回TRUE，否则返回FALSE。
           */
          TValue.prototype.isNull = function() {
            return value_is_null(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置类型为int的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setInt = function(value) {
            return new TValue(
              value_set_int(this != null ? this.nativeObj || this : null, value)
            );
          };
          /**
           * 设置类型为object的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setObject = function(value) {
            return new TValue(
              value_set_object(
                this != null ? this.nativeObj || this : null,
                value != null ? value.nativeObj || value : null
              )
            );
          };
          /**
           * 转换为object的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.object = function() {
            return new TObject(
              value_object(this != null ? this.nativeObj || this : null)
            );
          };
          /**
           * 设置类型为token的值。
           *
           * @param value 待设置的值。
           *
           * @returns value对象本身。
           */
          TValue.prototype.setToken = function(value) {
            return new TValue(
              value_set_token(
                this != null ? this.nativeObj || this : null,
                value
              )
            );
          };
          /**
           * 获取token的值。
           *
           *
           * @returns 值。
           */
          TValue.prototype.token = function() {
            return value_token(this != null ? this.nativeObj || this : null);
          };
          /**
           * 创建value对象。
           *
           *
           * @returns 对象。
           */
          TValue.create = function() {
            return new TValue(value_create());
          };
          /**
           * 销毁value对象。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TValue.prototype.destroy = function() {
            return value_destroy(this != null ? this.nativeObj || this : null);
          };
          /**
           * 重置value对象。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TValue.prototype.reset = function() {
            return value_reset(this != null ? this.nativeObj || this : null);
          };
          /**
           * 转换为value对象。
           *
           *> 供脚本语言使用
           *
           * @param value value对象。
           *
           * @returns 对象。
           */
          TValue.cast = function(value) {
            return new TValue(
              value_cast(value != null ? value.nativeObj || value : null)
            );
          };
          return TValue;
        })();
        exports.TValue = TValue;
        /**
         * TK全局对象。
         *
         */
        var TGlobal = /** @class */ (function() {
          function TGlobal() {}
          /**
           * 初始化TK。
           *
           * @param w LCD宽度。
           * @param h LCD高度。
           * @param app_type 应用程序的类型。
           * @param app_name 应用程序的名称(必须为常量字符串)。
           * @param app_root 应用程序的根目录，用于定位资源文件(必须为常量字符串)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGlobal.init = function(w, h, app_type, app_name, app_root) {
            return tk_init(w, h, app_type, app_name, app_root);
          };
          /**
           * 进入TK事件主循环。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGlobal.run = function() {
            return tk_run();
          };
          /**
           * 退出TK事件主循环。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGlobal.quit = function() {
            return tk_quit();
          };
          /**
           * 获取全局指针的X坐标。
           *
           *
           * @returns 返回全局指针的X坐标。
           */
          TGlobal.getPointerX = function() {
            return tk_get_pointer_x();
          };
          /**
           * 获取全局指针的Y坐标。
           *
           *
           * @returns 返回全局指针的X坐标。
           */
          TGlobal.getPointerY = function() {
            return tk_get_pointer_y();
          };
          /**
           * 获取全局指针是否按下。
           *
           *
           * @returns 返回全局指针是否按下。
           */
          TGlobal.isPointerPressed = function() {
            return tk_is_pointer_pressed();
          };
          return TGlobal;
        })();
        exports.TGlobal = TGlobal;
        /**
         * bidi 类型常量定义。
         *
         */
        var TBidiType;
        (function(TBidiType) {
          /**
           * 自动检查。
           *
           */
          TBidiType[(TBidiType['AUTO'] = BIDI_TYPE_AUTO())] = 'AUTO';
          /**
           * Left-To-Right letter。
           *
           */
          TBidiType[(TBidiType['LTR'] = BIDI_TYPE_LTR())] = 'LTR';
          /**
           * Right-To-Left letter。
           *
           */
          TBidiType[(TBidiType['RTL'] = BIDI_TYPE_RTL())] = 'RTL';
          /**
           * Left-To-Right letter Override。
           *
           */
          TBidiType[(TBidiType['LRO'] = BIDI_TYPE_LRO())] = 'LRO';
          /**
           * Right-To-Left letter Override。
           *
           */
          TBidiType[(TBidiType['RLO'] = BIDI_TYPE_RLO())] = 'RLO';
          /**
           * Weak Left To Right paragraph。
           *
           */
          TBidiType[(TBidiType['WLTR'] = BIDI_TYPE_WLTR())] = 'WLTR';
          /**
           * Weak Right To Left paragraph。
           *
           */
          TBidiType[(TBidiType['WRTL'] = BIDI_TYPE_WRTL())] = 'WRTL';
        })((TBidiType = exports.TBidiType || (exports.TBidiType = {})));
        /**
         * 图片绘制方法常量定义。
         *
         */
        var TImageDrawType;
        (function(TImageDrawType) {
          /**
           * 缺省显示。将图片按原大小显示在目标矩形的左上角。
           *
           */
          TImageDrawType[(TImageDrawType['DEFAULT'] = IMAGE_DRAW_DEFAULT())] =
            'DEFAULT';
          /**
           * 居中显示。将图片按原大小显示在目标矩形的中央。
           *
           */
          TImageDrawType[(TImageDrawType['CENTER'] = IMAGE_DRAW_CENTER())] =
            'CENTER';
          /**
           * 图标显示。同居中显示，但会根据屏幕密度调整大小。
           *
           */
          TImageDrawType[(TImageDrawType['ICON'] = IMAGE_DRAW_ICON())] = 'ICON';
          /**
           * 缩放显示。将图片缩放至目标矩形的大小(不保证宽高成比例)。
           *
           */
          TImageDrawType[(TImageDrawType['SCALE'] = IMAGE_DRAW_SCALE())] =
            'SCALE';
          /**
           * 自动缩放显示。将图片缩放至目标矩形的宽度或高度(选取最小的比例)，并居中显示。
           *
           */
          TImageDrawType[
            (TImageDrawType['SCALE_AUTO'] = IMAGE_DRAW_SCALE_AUTO())
          ] = 'SCALE_AUTO';
          /**
           * 如果图片比目标矩形大，自动缩小显示，否则居中显示。
           *
           */
          TImageDrawType[
            (TImageDrawType['SCALE_DOWN'] = IMAGE_DRAW_SCALE_DOWN())
          ] = 'SCALE_DOWN';
          /**
           * 宽度缩放显示。 将图片缩放至目标矩形的宽度，高度按此比例进行缩放，超出不部分不显示。
           *
           */
          TImageDrawType[(TImageDrawType['SCALE_W'] = IMAGE_DRAW_SCALE_W())] =
            'SCALE_W';
          /**
           * 高度缩放显示。将图片缩放至目标矩形的高度，宽度按此比例进行缩放，超出不部分不显示。
           *
           */
          TImageDrawType[(TImageDrawType['SCALE_H'] = IMAGE_DRAW_SCALE_H())] =
            'SCALE_H';
          /**
           * 平铺显示。
           *
           */
          TImageDrawType[(TImageDrawType['REPEAT'] = IMAGE_DRAW_REPEAT())] =
            'REPEAT';
          /**
           * 水平方向平铺显示，垂直方向缩放。
           *
           */
          TImageDrawType[(TImageDrawType['REPEAT_X'] = IMAGE_DRAW_REPEAT_X())] =
            'REPEAT_X';
          /**
           * 垂直方向平铺显示，水平方向缩放。
           *
           */
          TImageDrawType[(TImageDrawType['REPEAT_Y'] = IMAGE_DRAW_REPEAT_Y())] =
            'REPEAT_Y';
          /**
           * 垂直方向平铺显示，水平方向缩放(从底部到顶部)。
           *
           */
          TImageDrawType[
            (TImageDrawType['REPEAT_Y_INVERSE'] = IMAGE_DRAW_REPEAT_Y_INVERSE())
          ] = 'REPEAT_Y_INVERSE';
          /**
           * 9宫格显示。
           *将图片分成等大小的9块，4个角按原大小显示在目标矩形的4个角，左右上下和中间5块分别缩放显示在对应的目标区域。
           *
           */
          TImageDrawType[(TImageDrawType['PATCH9'] = IMAGE_DRAW_PATCH9())] =
            'PATCH9';
          /**
           * 水平方向3宫格显示，垂直方向居中显示。
           *将图片在水平方向上分成等大小的3块，左右两块按原大小显示在目标矩形的左右，中间一块缩放显示在目标区域中间剩余部分。
           *
           */
          TImageDrawType[(TImageDrawType['PATCH3_X'] = IMAGE_DRAW_PATCH3_X())] =
            'PATCH3_X';
          /**
           * 垂直方向3宫格显示，水平方向居中显示。
           *将图片在垂直方向上分成等大小的3块，上下两块按原大小显示在目标矩形的上下，中间一块缩放显示在目标区域中间剩余部分。
           *
           */
          TImageDrawType[(TImageDrawType['PATCH3_Y'] = IMAGE_DRAW_PATCH3_Y())] =
            'PATCH3_Y';
          /**
           * 水平方向3宫格显示，垂直方向缩放显示。
           *将图片在水平方向上分成等大小的3块，左右两块按原大小显示在目标矩形的左右，中间一块缩放显示在目标区域中间剩余部分。
           *
           */
          TImageDrawType[
            (TImageDrawType['PATCH3_X_SCALE_Y'] = IMAGE_DRAW_PATCH3_X_SCALE_Y())
          ] = 'PATCH3_X_SCALE_Y';
          /**
           * 垂直方向3宫格显示，水平方向缩放显示。
           *将图片在垂直方向上分成等大小的3块，上下两块按原大小显示在目标矩形的上下，中间一块缩放显示在目标区域中间剩余部分。
           *
           */
          TImageDrawType[
            (TImageDrawType['PATCH3_Y_SCALE_X'] = IMAGE_DRAW_PATCH3_Y_SCALE_X())
          ] = 'PATCH3_Y_SCALE_X';
          /**
           * 平铺9宫格显示。
           *将图片分成4个角和5块平铺块，4个角按原大小显示在目标矩形的4个角，其余5块会平铺对应的目标区域。
           *切割方法为（如下图）：
           *如果图片宽度为奇数，则中间一块为一列数据，如果图片宽度为偶数，则中间一块为二列数据，其他数据分为左右块
           *如果图片高度为奇数，则中间一块为一行数据，如果图片高度为偶数，则中间一块为二行数据，其他数据分为上下块
           *中间一块数据根据上面两条规则组成4中情况，分别是一列一行数据，一列两行数据，两列一行数据和两行两列数据
           *
           */
          TImageDrawType[(TImageDrawType['REPEAT9'] = IMAGE_DRAW_REPEAT9())] =
            'REPEAT9';
          /**
           * 水平方向3宫格显示，垂直方向居中显示。
           *将图片在水平方向上分成左右相等两块和中间一块，如果图片宽度为奇数，则中间一块为一列数据，如果图片宽度为偶数，则中间一块为二列数据，其他数据分为左右块。
           *左右两块按原大小显示在目标矩形的左右，中间一列像素点平铺显示在目标区域中间剩余部分。
           *
           */
          TImageDrawType[
            (TImageDrawType['REPEAT3_X'] = IMAGE_DRAW_REPEAT3_X())
          ] = 'REPEAT3_X';
          /**
           * 垂直方向3宫格显示，水平方向居中显示。
           *将图片在垂直方向上分成上下相等两块和中间一块，如果图片高度为奇数，则中间一块为一行数据，如果图片高度为偶数，则中间一块为二行数据，其他数据分为上下块
           *上下两块按原大小显示在目标矩形的上下，中间一块平铺显示在目标区域中间剩余部分。
           *
           */
          TImageDrawType[
            (TImageDrawType['REPEAT3_Y'] = IMAGE_DRAW_REPEAT3_Y())
          ] = 'REPEAT3_Y';
        })(
          (TImageDrawType =
            exports.TImageDrawType || (exports.TImageDrawType = {}))
        );
        /**
         * 离线画布 canvas。
         *
         */
        var TCanvasOffline = /** @class */ (function() {
          function TCanvasOffline(nativeObj) {
            this.nativeObj = nativeObj;
          }
          return TCanvasOffline;
        })();
        exports.TCanvasOffline = TCanvasOffline;
        /**
         * 提供基本的绘图功能和状态管理。
         *
         */
        var TCanvas = /** @class */ (function() {
          function TCanvas(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 获取画布的宽度。
           *
           *
           * @returns 返回画布的宽度。
           */
          TCanvas.prototype.getWidth = function() {
            return canvas_get_width(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取画布的高度。
           *
           *
           * @returns 返回画布的高度。
           */
          TCanvas.prototype.getHeight = function() {
            return canvas_get_height(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取裁剪区。
           *
           * @param r rect对象。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.getClipRect = function(r) {
            return canvas_get_clip_rect(
              this != null ? this.nativeObj || this : null,
              r != null ? r.nativeObj || r : null
            );
          };
          /**
           * 设置裁剪区。
           *
           * @param r rect对象。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.setClipRect = function(r) {
            return canvas_set_clip_rect(
              this != null ? this.nativeObj || this : null,
              r != null ? r.nativeObj || r : null
            );
          };
          /**
           * 设置裁剪区。
           *
           * @param r rect对象。
           * @param translate 是否将裁剪区的位置加上canvas当前的偏移。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.setClipRectEx = function(r, translate) {
            return canvas_set_clip_rect_ex(
              this != null ? this.nativeObj || this : null,
              r != null ? r.nativeObj || r : null,
              translate
            );
          };
          /**
           * 设置填充颜色。
           *
           *> 供脚本语言使用。
           *
           * @param color 颜色。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.setFillColor = function(color) {
            return canvas_set_fill_color_str(
              this != null ? this.nativeObj || this : null,
              color
            );
          };
          /**
           * 设置文本颜色。
           *
           *> 供脚本语言使用。
           *
           * @param color 颜色。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.setTextColor = function(color) {
            return canvas_set_text_color_str(
              this != null ? this.nativeObj || this : null,
              color
            );
          };
          /**
           * 设置线条颜色。
           *
           *> 供脚本语言使用。
           *
           * @param color 颜色。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.setStrokeColor = function(color) {
            return canvas_set_stroke_color_str(
              this != null ? this.nativeObj || this : null,
              color
            );
          };
          /**
           * 设置全局alpha值。
           *
           * @param alpha alpha值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.setGlobalAlpha = function(alpha) {
            return canvas_set_global_alpha(
              this != null ? this.nativeObj || this : null,
              alpha
            );
          };
          /**
           * 平移原点坐标。
           *
           * @param dx x偏移。
           * @param dy y偏移。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.translate = function(dx, dy) {
            return canvas_translate(
              this != null ? this.nativeObj || this : null,
              dx,
              dy
            );
          };
          /**
           * 反向平移原点坐标。
           *
           * @param dx x偏移。
           * @param dy y偏移。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.untranslate = function(dx, dy) {
            return canvas_untranslate(
              this != null ? this.nativeObj || this : null,
              dx,
              dy
            );
          };
          /**
           * 画垂直线。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param h 高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.drawVline = function(x, y, h) {
            return canvas_draw_vline(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              h
            );
          };
          /**
           * 画水平线。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.drawHline = function(x, y, w) {
            return canvas_draw_hline(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w
            );
          };
          /**
           * 绘制矩形。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.fillRect = function(x, y, w, h) {
            return canvas_fill_rect(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h
            );
          };
          /**
           * 用填充颜色填充指定矩形。
           *
           *> 如果lcd的颜色格式带alpha通道，连同alpha的值一起修改。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.clearRect = function(x, y, w, h) {
            return canvas_clear_rect(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h
            );
          };
          /**
           * 绘制矩形。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.strokeRect = function(x, y, w, h) {
            return canvas_stroke_rect(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h
            );
          };
          /**
           * 设置字体。
           *
           * @param name 字体名称。
           * @param size 字体大小。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.setFont = function(name, size) {
            return canvas_set_font(
              this != null ? this.nativeObj || this : null,
              name,
              size
            );
          };
          /**
           * 计算文本所占的宽度。
           *
           *> 供脚本语言使用。
           *
           * @param str 字符串。
           *
           * @returns 返回文本所占的宽度。
           */
          TCanvas.prototype.measureText = function(str) {
            return canvas_measure_utf8(
              this != null ? this.nativeObj || this : null,
              str
            );
          };
          /**
           * 绘制文本。
           *
           *> 供脚本语言使用。
           *
           * @param str 字符串。
           * @param x x坐标。
           * @param y y坐标。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.drawText = function(str, x, y) {
            return canvas_draw_utf8(
              this != null ? this.nativeObj || this : null,
              str,
              x,
              y
            );
          };
          /**
           * 绘制文本。
           *
           *> 供脚本语言使用。
           *
           * @param str 字符串。
           * @param r 矩形区域。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.drawTextInRect = function(str, r) {
            return canvas_draw_utf8_in_rect(
              this != null ? this.nativeObj || this : null,
              str,
              r != null ? r.nativeObj || r : null
            );
          };
          /**
           * 绘制图标。
           *
           * @param img 图片对象。
           * @param cx 中心点x坐标。
           * @param cy 中心点y坐标。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.drawIcon = function(img, cx, cy) {
            return canvas_draw_icon(
              this != null ? this.nativeObj || this : null,
              img != null ? img.nativeObj || img : null,
              cx,
              cy
            );
          };
          /**
           * 绘制图片。
           *
           * @param img 图片对象。
           * @param src 源区域。
           * @param dst 目的区域。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.drawImage = function(img, src, dst) {
            return canvas_draw_image(
              this != null ? this.nativeObj || this : null,
              img != null ? img.nativeObj || img : null,
              src != null ? src.nativeObj || src : null,
              dst != null ? dst.nativeObj || dst : null
            );
          };
          /**
           * 绘制图片。
           *
           * @param img 图片对象。
           * @param draw_type 绘制类型。
           * @param dst 目的区域。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.drawImageEx = function(img, draw_type, dst) {
            return canvas_draw_image_ex(
              this != null ? this.nativeObj || this : null,
              img != null ? img.nativeObj || img : null,
              draw_type,
              dst != null ? dst.nativeObj || dst : null
            );
          };
          /**
           * 绘制图片。
           *
           * @param img 图片对象。
           * @param draw_type 绘制类型。
           * @param src 源区域。
           * @param dst 目的区域。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.drawImageEx2 = function(img, draw_type, src, dst) {
            return canvas_draw_image_ex2(
              this != null ? this.nativeObj || this : null,
              img != null ? img.nativeObj || img : null,
              draw_type,
              src != null ? src.nativeObj || src : null,
              dst != null ? dst.nativeObj || dst : null
            );
          };
          /**
           * 获取vgcanvas对象。
           *
           *
           * @returns 返回vgcanvas对象。
           */
          TCanvas.prototype.getVgcanvas = function() {
            return new TVgcanvas(
              canvas_get_vgcanvas(this != null ? this.nativeObj || this : null)
            );
          };
          /**
           * 转换为canvas对象(供脚本语言使用)。
           *
           * @param c canvas对象。
           *
           * @returns canvas对象。
           */
          TCanvas.cast = function(c) {
            return new TCanvas(
              canvas_cast(c != null ? c.nativeObj || c : null)
            );
          };
          /**
           * 释放相关资源。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCanvas.prototype.reset = function() {
            return canvas_reset(this != null ? this.nativeObj || this : null);
          };
          Object.defineProperty(TCanvas.prototype, 'ox', {
            /**
             * x坐标偏移。
             *
             */
            get: function() {
              return canvas_t_get_prop_ox(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCanvas.prototype, 'oy', {
            /**
             * y坐标偏移。
             *
             */
            get: function() {
              return canvas_t_get_prop_oy(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCanvas.prototype, 'fontName', {
            /**
             * 当前字体名称。
             *
             */
            get: function() {
              return canvas_t_get_prop_font_name(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCanvas.prototype, 'fontSize', {
            /**
             * 当前字体大小。
             *
             */
            get: function() {
              return canvas_t_get_prop_font_size(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCanvas.prototype, 'globalAlpha', {
            /**
             * 当前全局alpha。
             *
             */
            get: function() {
              return canvas_t_get_prop_global_alpha(this.nativeObj);
            },
            set: function(v) {
              this.setGlobalAlpha(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TCanvas;
        })();
        exports.TCanvas = TCanvas;
        /**
         * 剪切板数据类型定义。
         *
         */
        var TClipBoardDataType;
        (function(TClipBoardDataType) {
          /**
           * 无数据。
           *
           */
          TClipBoardDataType[
            (TClipBoardDataType['NONE'] = CLIP_BOARD_DATA_TYPE_NONE())
          ] = 'NONE';
          /**
           * UTF8文本。
           *
           */
          TClipBoardDataType[
            (TClipBoardDataType['TEXT'] = CLIP_BOARD_DATA_TYPE_TEXT())
          ] = 'TEXT';
        })(
          (TClipBoardDataType =
            exports.TClipBoardDataType || (exports.TClipBoardDataType = {}))
        );
        /**
         * 剪切板接口。
         *
         */
        var TClipBoard = /** @class */ (function() {
          function TClipBoard(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 设置文本(UTF8)数据到剪切板。
           *
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TClipBoard.setText = function(text) {
            return clip_board_set_text(text);
          };
          /**
           * 从剪切板中获取文本(UTF8)数据。
           *
           *
           * @returns 返回文本数据。
           */
          TClipBoard.getText = function() {
            return clip_board_get_text();
          };
          return TClipBoard;
        })();
        exports.TClipBoard = TClipBoard;
        /**
         * 对话框退出码。
         *
         *> 一般用作dialog_quit函数的参数。
         *
         */
        var TDialogQuitCode;
        (function(TDialogQuitCode) {
          /**
           * 对话框被强行关闭或不关心关闭原因。
           *
           */
          TDialogQuitCode[(TDialogQuitCode['NONE'] = DIALOG_QUIT_NONE())] =
            'NONE';
          /**
           * 点击“OK”按钮关闭。
           *
           */
          TDialogQuitCode[(TDialogQuitCode['OK'] = DIALOG_QUIT_OK())] = 'OK';
          /**
           * 点击“YES”按钮关闭。
           *
           */
          TDialogQuitCode[(TDialogQuitCode['YES'] = DIALOG_QUIT_YES())] = 'YES';
          /**
           * 点击“CANCEL”按钮关闭。
           *
           */
          TDialogQuitCode[(TDialogQuitCode['CANCEL'] = DIALOG_QUIT_CANCEL())] =
            'CANCEL';
          /**
           * 点击“NO”按钮关闭。
           *
           */
          TDialogQuitCode[(TDialogQuitCode['NO'] = DIALOG_QUIT_NO())] = 'NO';
          /**
           * 点击其它按钮关闭。
           *
           */
          TDialogQuitCode[(TDialogQuitCode['OTHER'] = DIALOG_QUIT_OTHER())] =
            'OTHER';
        })(
          (TDialogQuitCode =
            exports.TDialogQuitCode || (exports.TDialogQuitCode = {}))
        );
        /**
         * 类型常量定义。
         *
         */
        var TEventType;
        (function(TEventType) {
          /**
           * 指针按下事件名(pointer_event_t)。
           *
           */
          TEventType[(TEventType['POINTER_DOWN'] = EVT_POINTER_DOWN())] =
            'POINTER_DOWN';
          /**
           * 指针按下事件名，在子控件处理之前触发(pointer_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'POINTER_DOWN_BEFORE_CHILDREN'
            ] = EVT_POINTER_DOWN_BEFORE_CHILDREN())
          ] = 'POINTER_DOWN_BEFORE_CHILDREN';
          /**
           * 指针移动事件名(pointer_event_t)。
           *
           */
          TEventType[(TEventType['POINTER_MOVE'] = EVT_POINTER_MOVE())] =
            'POINTER_MOVE';
          /**
           * 指针移动事件名，在子控件处理之前触发(pointer_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'POINTER_MOVE_BEFORE_CHILDREN'
            ] = EVT_POINTER_MOVE_BEFORE_CHILDREN())
          ] = 'POINTER_MOVE_BEFORE_CHILDREN';
          /**
           * 指针抬起事件名(pointer_event_t)。
           *
           */
          TEventType[(TEventType['POINTER_UP'] = EVT_POINTER_UP())] =
            'POINTER_UP';
          /**
           * 指针抬起事件名，在子控件处理之前触发(pointer_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'POINTER_UP_BEFORE_CHILDREN'
            ] = EVT_POINTER_UP_BEFORE_CHILDREN())
          ] = 'POINTER_UP_BEFORE_CHILDREN';
          /**
           * 滚轮事件名(wheel_event_t)。
           *
           */
          TEventType[(TEventType['WHEEL'] = EVT_WHEEL())] = 'WHEEL';
          /**
           * 鼠标滚轮事件名，在子控件处理之前触发(wheel_event_t)。
           *
           */
          TEventType[
            (TEventType['WHEEL_BEFORE_CHILDREN'] = EVT_WHEEL_BEFORE_CHILDREN())
          ] = 'WHEEL_BEFORE_CHILDREN';
          /**
           * 取消前一个指针按下事件名(pointer_event_t)。
           *
           */
          TEventType[
            (TEventType['POINTER_DOWN_ABORT'] = EVT_POINTER_DOWN_ABORT())
          ] = 'POINTER_DOWN_ABORT';
          /**
           * 右键/长按弹出上下文菜单的事件名(pointer_event_t)。
           *
           */
          TEventType[(TEventType['CONTEXT_MENU'] = EVT_CONTEXT_MENU())] =
            'CONTEXT_MENU';
          /**
           * 指针进入事件名(pointer_event_t)。
           *
           */
          TEventType[(TEventType['POINTER_ENTER'] = EVT_POINTER_ENTER())] =
            'POINTER_ENTER';
          /**
           * 指针离开事件名(pointer_event_t)。
           *
           */
          TEventType[(TEventType['POINTER_LEAVE'] = EVT_POINTER_LEAVE())] =
            'POINTER_LEAVE';
          /**
           * 长按事件名(pointer_event_t)。
           *
           */
          TEventType[(TEventType['LONG_PRESS'] = EVT_LONG_PRESS())] =
            'LONG_PRESS';
          /**
           * 点击事件名(pointer_event_t)。
           *
           */
          TEventType[(TEventType['CLICK'] = EVT_CLICK())] = 'CLICK';
          /**
           * 得到焦点事件名(event_t)。
           *
           */
          TEventType[(TEventType['FOCUS'] = EVT_FOCUS())] = 'FOCUS';
          /**
           * 失去焦点事件名(event_t)。
           *
           */
          TEventType[(TEventType['BLUR'] = EVT_BLUR())] = 'BLUR';
          /**
           * 键按下事件名(key_event_t)。
           *
           */
          TEventType[(TEventType['KEY_DOWN'] = EVT_KEY_DOWN())] = 'KEY_DOWN';
          /**
           * 键长按事件名(key_event_t)。
           *
           */
          TEventType[(TEventType['KEY_LONG_PRESS'] = EVT_KEY_LONG_PRESS())] =
            'KEY_LONG_PRESS';
          /**
           * 键按下事件名，在子控件处理之前触发(key_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'KEY_DOWN_BEFORE_CHILDREN'
            ] = EVT_KEY_DOWN_BEFORE_CHILDREN())
          ] = 'KEY_DOWN_BEFORE_CHILDREN';
          /**
           * 按键repeat事件名(key_event_t)。
           *
           */
          TEventType[(TEventType['KEY_REPEAT'] = EVT_KEY_REPEAT())] =
            'KEY_REPEAT';
          /**
           * 键抬起事件名(key_event_t)。
           *
           */
          TEventType[(TEventType['KEY_UP'] = EVT_KEY_UP())] = 'KEY_UP';
          /**
           * 键抬起事件名，在子控件处理之前触发(key_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'KEY_UP_BEFORE_CHILDREN'
            ] = EVT_KEY_UP_BEFORE_CHILDREN())
          ] = 'KEY_UP_BEFORE_CHILDREN';
          /**
           * 即将移动Widget的事件名(event_t)。
           *
           */
          TEventType[(TEventType['WILL_MOVE'] = EVT_WILL_MOVE())] = 'WILL_MOVE';
          /**
           * 移动Widget的事件名(event_t)。
           *
           */
          TEventType[(TEventType['MOVE'] = EVT_MOVE())] = 'MOVE';
          /**
           * 即将调整Widget大小的事件名(event_t)。
           *
           */
          TEventType[(TEventType['WILL_RESIZE'] = EVT_WILL_RESIZE())] =
            'WILL_RESIZE';
          /**
           * 调整Widget大小的事件名(event_t)。
           *
           */
          TEventType[(TEventType['RESIZE'] = EVT_RESIZE())] = 'RESIZE';
          /**
           * 即将调整Widget大小/位置的事件名(event_t)。
           *
           */
          TEventType[
            (TEventType['WILL_MOVE_RESIZE'] = EVT_WILL_MOVE_RESIZE())
          ] = 'WILL_MOVE_RESIZE';
          /**
           * 调整Widget大小/位置的事件名(event_t)。
           *
           */
          TEventType[(TEventType['MOVE_RESIZE'] = EVT_MOVE_RESIZE())] =
            'MOVE_RESIZE';
          /**
           * 控件的值即将改变的事件名(value_change_event_t)。
           *
           */
          TEventType[
            (TEventType['VALUE_WILL_CHANGE'] = EVT_VALUE_WILL_CHANGE())
          ] = 'VALUE_WILL_CHANGE';
          /**
           * 控件的值改变的事件名(value_change_event_t)。
           *
           */
          TEventType[(TEventType['VALUE_CHANGED'] = EVT_VALUE_CHANGED())] =
            'VALUE_CHANGED';
          /**
           * 控件的值持续改变(如编辑器正在编辑)的事件名(value_change_event_t)。
           *
           */
          TEventType[(TEventType['VALUE_CHANGING'] = EVT_VALUE_CHANGING())] =
            'VALUE_CHANGING';
          /**
           * 绘制的事件名(paint_event_t)。
           *
           */
          TEventType[(TEventType['PAINT'] = EVT_PAINT())] = 'PAINT';
          /**
           * 即将绘制的事件名(paint_event_t)。
           *
           */
          TEventType[(TEventType['BEFORE_PAINT'] = EVT_BEFORE_PAINT())] =
            'BEFORE_PAINT';
          /**
           * 绘制完成的事件名(paint_event_t)。
           *
           */
          TEventType[(TEventType['AFTER_PAINT'] = EVT_AFTER_PAINT())] =
            'AFTER_PAINT';
          /**
           * 绘制完成(canvas状态已经恢复)的事件名(paint_event_t)。
           *
           */
          TEventType[(TEventType['PAINT_DONE'] = EVT_PAINT_DONE())] =
            'PAINT_DONE';
          /**
           * locale改变的事件(event_t)。
           *
           */
          TEventType[(TEventType['LOCALE_CHANGED'] = EVT_LOCALE_CHANGED())] =
            'LOCALE_CHANGED';
          /**
           * 控件动画开始事件(event_t)。
           *
           */
          TEventType[(TEventType['ANIM_START'] = EVT_ANIM_START())] =
            'ANIM_START';
          /**
           * 控件动画被主动停止的事件(event_t)。
           *
           */
          TEventType[(TEventType['ANIM_STOP'] = EVT_ANIM_STOP())] = 'ANIM_STOP';
          /**
           * 控件动画被暂停的事件(event_t)。
           *
           */
          TEventType[(TEventType['ANIM_PAUSE'] = EVT_ANIM_PAUSE())] =
            'ANIM_PAUSE';
          /**
           * 控件动画yoyo/repeat时，完成一次的事件(event_t)。
           *
           */
          TEventType[(TEventType['ANIM_ONCE'] = EVT_ANIM_ONCE())] = 'ANIM_ONCE';
          /**
           * 控件动画完成事件(event_t)。
           *
           */
          TEventType[(TEventType['ANIM_END'] = EVT_ANIM_END())] = 'ANIM_END';
          /**
           * 窗口加载完成事件(event_t)。
           *
           */
          TEventType[(TEventType['WINDOW_LOAD'] = EVT_WINDOW_LOAD())] =
            'WINDOW_LOAD';
          /**
           * 控件加载完成事件(event_t)。
           *
           */
          TEventType[(TEventType['WIDGET_LOAD'] = EVT_WIDGET_LOAD())] =
            'WIDGET_LOAD';
          /**
           * 窗口即将打开事件(event_t)。
           *如果有窗口动画，在窗口动画开始前触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。
           *
           */
          TEventType[
            (TEventType['WINDOW_WILL_OPEN'] = EVT_WINDOW_WILL_OPEN())
          ] = 'WINDOW_WILL_OPEN';
          /**
           * 窗口打开事件(event_t)。
           *如果有窗口动画，在窗口动画完成时触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。
           *
           */
          TEventType[(TEventType['WINDOW_OPEN'] = EVT_WINDOW_OPEN())] =
            'WINDOW_OPEN';
          /**
           * 窗口被切换到后台事件(event_t)。
           *打开新窗口时，当前窗口被切换到后台时，对当前窗口触发本事件。
           *
           */
          TEventType[
            (TEventType['WINDOW_TO_BACKGROUND'] = EVT_WINDOW_TO_BACKGROUND())
          ] = 'WINDOW_TO_BACKGROUND';
          /**
           * 窗口被切换到前台事件(event_t)。
           *关闭当前窗口时，前一个窗口被切换到前台时，对前一个窗口触发本事件。
           *
           */
          TEventType[
            (TEventType['WINDOW_TO_FOREGROUND'] = EVT_WINDOW_TO_FOREGROUND())
          ] = 'WINDOW_TO_FOREGROUND';
          /**
           * 窗口关闭事件。
           *
           */
          TEventType[(TEventType['WINDOW_CLOSE'] = EVT_WINDOW_CLOSE())] =
            'WINDOW_CLOSE';
          /**
           * 请求关闭窗口的事件(event_t)。
           *
           */
          TEventType[
            (TEventType['REQUEST_CLOSE_WINDOW'] = EVT_REQUEST_CLOSE_WINDOW())
          ] = 'REQUEST_CLOSE_WINDOW';
          /**
           * 顶层窗口改变的事件(window_event_t)。
           *
           */
          TEventType[
            (TEventType['TOP_WINDOW_CHANGED'] = EVT_TOP_WINDOW_CHANGED())
          ] = 'TOP_WINDOW_CHANGED';
          /**
           * 输入法启动(event_t)。
           *
           */
          TEventType[(TEventType['IM_START'] = EVT_IM_START())] = 'IM_START';
          /**
           * 输入法停止(event_t)。
           *
           */
          TEventType[(TEventType['IM_STOP'] = EVT_IM_STOP())] = 'IM_STOP';
          /**
           * 输入法提交输入的文本事件(im_commit_event_t)。
           *
           */
          TEventType[(TEventType['IM_COMMIT'] = EVT_IM_COMMIT())] = 'IM_COMMIT';
          /**
           * 清除编辑器内容(event_t)。
           *
           */
          TEventType[(TEventType['IM_CLEAR'] = EVT_IM_CLEAR())] = 'IM_CLEAR';
          /**
           * 取消编辑，恢复之前的内容(event_t)。
           *
           */
          TEventType[(TEventType['IM_CANCEL'] = EVT_IM_CANCEL())] = 'IM_CANCEL';
          /**
           * 进入预编辑状态(event_t)。
           *
           */
          TEventType[(TEventType['IM_PREEDIT'] = EVT_IM_PREEDIT())] =
            'IM_PREEDIT';
          /**
           * 确认预编辑内容，退出预编辑状态(event_t)。
           *
           */
          TEventType[
            (TEventType['IM_PREEDIT_CONFIRM'] = EVT_IM_PREEDIT_CONFIRM())
          ] = 'IM_PREEDIT_CONFIRM';
          /**
           * 删除预编辑内容，退出预编辑状态event_t)。
           *
           */
          TEventType[
            (TEventType['IM_PREEDIT_ABORT'] = EVT_IM_PREEDIT_ABORT())
          ] = 'IM_PREEDIT_ABORT';
          /**
           * 输入法请求显示候选字事件(im_candidates_event_t)。
           *
           */
          TEventType[
            (TEventType['IM_SHOW_CANDIDATES'] = EVT_IM_SHOW_CANDIDATES())
          ] = 'IM_SHOW_CANDIDATES';
          /**
           * 输入法请求显示预候选字事件(im_candidates_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'IM_SHOW_PRE_CANDIDATES'
            ] = EVT_IM_SHOW_PRE_CANDIDATES())
          ] = 'IM_SHOW_PRE_CANDIDATES';
          /**
           * 输入法语言改变事件(event_t)。
           *
           */
          TEventType[(TEventType['IM_LANG_CHANGED'] = EVT_IM_LANG_CHANGED())] =
            'IM_LANG_CHANGED';
          /**
           * 软键盘Action点击事件(event_t)。
           *
           */
          TEventType[(TEventType['IM_ACTION'] = EVT_IM_ACTION())] = 'IM_ACTION';
          /**
           * 请求更新软键盘上的Action按钮的信息(im_action_button_info_event_t)。
           *
           */
          TEventType[(TEventType['IM_ACTION_INFO'] = EVT_IM_ACTION_INFO())] =
            'IM_ACTION_INFO';
          /**
           * 开始拖动(event_t)。
           *
           */
          TEventType[(TEventType['DRAG_START'] = EVT_DRAG_START())] =
            'DRAG_START';
          /**
           * 拖动(event_t)。
           *
           */
          TEventType[(TEventType['DRAG'] = EVT_DRAG())] = 'DRAG';
          /**
           * 结束拖动(event_t)。
           *
           */
          TEventType[(TEventType['DRAG_END'] = EVT_DRAG_END())] = 'DRAG_END';
          /**
           * Reset(event_t)。
           *
           */
          TEventType[(TEventType['RESET'] = EVT_RESET())] = 'RESET';
          /**
           * 在指定的时间内(WITH_SCREEN_SAVER_TIME)，没有用户输入事件，由窗口管理器触发。
           *
           */
          TEventType[(TEventType['SCREEN_SAVER'] = EVT_SCREEN_SAVER())] =
            'SCREEN_SAVER';
          /**
           * 内存不足(event_t)。
           *
           */
          TEventType[(TEventType['LOW_MEMORY'] = EVT_LOW_MEMORY())] =
            'LOW_MEMORY';
          /**
           * 内存耗尽(event_t)。
           *
           */
          TEventType[(TEventType['OUT_OF_MEMORY'] = EVT_OUT_OF_MEMORY())] =
            'OUT_OF_MEMORY';
          /**
           * 屏幕即将旋转(event_t)。
           *
           */
          TEventType[
            (TEventType[
              'ORIENTATION_WILL_CHANGED'
            ] = EVT_ORIENTATION_WILL_CHANGED())
          ] = 'ORIENTATION_WILL_CHANGED';
          /**
           * 屏幕旋转(event_t)。
           *
           */
          TEventType[
            (TEventType['ORIENTATION_CHANGED'] = EVT_ORIENTATION_CHANGED())
          ] = 'ORIENTATION_CHANGED';
          /**
           * 控件创建事件(event_t)。
           *
           */
          TEventType[(TEventType['WIDGET_CREATED'] = EVT_WIDGET_CREATED())] =
            'WIDGET_CREATED';
          /**
           * 请求退出应用程序事件。
           *点击原生窗口关闭按钮时，通过窗口管理器触发，注册该事件并返回RET_STOP，可以阻止窗口关闭。
           *
           */
          TEventType[
            (TEventType['REQUEST_QUIT_APP'] = EVT_REQUEST_QUIT_APP())
          ] = 'REQUEST_QUIT_APP';
          /**
           * 主题变化(event_t)。
           *
           */
          TEventType[(TEventType['THEME_CHANGED'] = EVT_THEME_CHANGED())] =
            'THEME_CHANGED';
          /**
           * 控件加载新的子控件(event_t)。
           *
           */
          TEventType[
            (TEventType['WIDGET_ADD_CHILD'] = EVT_WIDGET_ADD_CHILD())
          ] = 'WIDGET_ADD_CHILD';
          /**
           * 控件移除子控件(event_t)。
           *
           */
          TEventType[
            (TEventType['WIDGET_REMOVE_CHILD'] = EVT_WIDGET_REMOVE_CHILD())
          ] = 'WIDGET_REMOVE_CHILD';
          /**
           * scroll view开始滚动(event_t)。
           *
           */
          TEventType[(TEventType['SCROLL_START'] = EVT_SCROLL_START())] =
            'SCROLL_START';
          /**
           * scroll view滚动(event_t)。
           *
           */
          TEventType[(TEventType['SCROLL'] = EVT_SCROLL())] = 'SCROLL';
          /**
           * scroll view结束滚动(event_t)。
           *
           */
          TEventType[(TEventType['SCROLL_END'] = EVT_SCROLL_END())] =
            'SCROLL_END';
          /**
           * 多点触摸手势(multi_gesture_event_t)。
           *
           */
          TEventType[(TEventType['MULTI_GESTURE'] = EVT_MULTI_GESTURE())] =
            'MULTI_GESTURE';
          /**
           * 页面改变了(event_t)。
           *
           */
          TEventType[(TEventType['PAGE_CHANGED'] = EVT_PAGE_CHANGED())] =
            'PAGE_CHANGED';
          /**
           * 资源管理加载某个资源(assets_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'ASSET_MANAGER_LOAD_ASSET'
            ] = EVT_ASSET_MANAGER_LOAD_ASSET())
          ] = 'ASSET_MANAGER_LOAD_ASSET';
          /**
           * 资源管理卸载某个资源(assets_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'ASSET_MANAGER_UNLOAD_ASSET'
            ] = EVT_ASSET_MANAGER_UNLOAD_ASSET())
          ] = 'ASSET_MANAGER_UNLOAD_ASSET';
          /**
           * 资源管理移除同种资源缓存(assets_event_t)。
           *
           */
          TEventType[
            (TEventType[
              'ASSET_MANAGER_CLEAR_CACHE'
            ] = EVT_ASSET_MANAGER_CLEAR_CACHE())
          ] = 'ASSET_MANAGER_CLEAR_CACHE';
          /**
           * 定时器(event_t)。
           *
           */
          TEventType[(TEventType['TIMER'] = EVT_TIMER())] = 'TIMER';
          /**
           * event queue其它请求编号起始值。
           *
           */
          TEventType[(TEventType['REQ_START'] = EVT_REQ_START())] = 'REQ_START';
          /**
           * 用户定义事件起始值。
           *
           */
          TEventType[(TEventType['USER_START'] = EVT_USER_START())] =
            'USER_START';
          /**
           * 无效事件名称。
           *
           */
          TEventType[(TEventType['NONE'] = EVT_NONE())] = 'NONE';
          /**
           * 对象的属性即将改变的事件名(prop_change_event_t)。
           *
           */
          TEventType[
            (TEventType['PROP_WILL_CHANGE'] = EVT_PROP_WILL_CHANGE())
          ] = 'PROP_WILL_CHANGE';
          /**
           * 对象的属性改变的事件名(prop_change_event_t)。
           *
           */
          TEventType[(TEventType['PROP_CHANGED'] = EVT_PROP_CHANGED())] =
            'PROP_CHANGED';
          /**
           * 对象即将执行命令(cmd_exec_event_t)。
           *
           */
          TEventType[(TEventType['CMD_WILL_EXEC'] = EVT_CMD_WILL_EXEC())] =
            'CMD_WILL_EXEC';
          /**
           * 对象完成执行命令(cmd_exec_event_t)。
           *
           */
          TEventType[(TEventType['CMD_EXECED'] = EVT_CMD_EXECED())] =
            'CMD_EXECED';
          /**
           * 对象命令是否能执行指定的命令(cmd_exec_event_t)。
           *
           */
          TEventType[(TEventType['CMD_CAN_EXEC'] = EVT_CMD_CAN_EXEC())] =
            'CMD_CAN_EXEC';
          /**
           * 即将增加和删除集合中的项目(event_t)。
           *
           */
          TEventType[
            (TEventType['ITEMS_WILL_CHANGE'] = EVT_ITEMS_WILL_CHANGE())
          ] = 'ITEMS_WILL_CHANGE';
          /**
           * 完成增加和删除集合中的项目(event_t)。
           *
           */
          TEventType[(TEventType['ITEMS_CHANGED'] = EVT_ITEMS_CHANGED())] =
            'ITEMS_CHANGED';
          /**
           * 对象的属性改变的事件名(props_event_t)。
           *
           */
          TEventType[(TEventType['PROPS_CHANGED'] = EVT_PROPS_CHANGED())] =
            'PROPS_CHANGED';
          /**
           * 进度状态(progress_event_t)。
           *
           */
          TEventType[(TEventType['PROGRESS'] = EVT_PROGRESS())] = 'PROGRESS';
          /**
           * 完成(done_event_t)。
           *
           */
          TEventType[(TEventType['DONE'] = EVT_DONE())] = 'DONE';
          /**
           * 错误(error_event_t)。
           *
           */
          TEventType[(TEventType['ERROR'] = EVT_ERROR())] = 'ERROR';
          /**
           * 对象销毁事件名(event_t)。
           *
           */
          TEventType[(TEventType['DESTROY'] = EVT_DESTROY())] = 'DESTROY';
        })((TEventType = exports.TEventType || (exports.TEventType = {})));
        /**
         * 事件基类。
         *
         */
        var TEvent = /** @class */ (function() {
          function TEvent(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 将事件名转换成事件的值。
           *
           * @param name 事件名。
           *
           * @returns 返回事件的值。
           */
          TEvent.fromName = function(name) {
            return event_from_name(name);
          };
          /**
           * 转换为event对象。
           *
           *> 供脚本语言使用
           *
           * @param event event对象。
           *
           * @returns event对象。
           */
          TEvent.cast = function(event) {
            return new TEvent(
              event_cast(event != null ? event.nativeObj || event : null)
            );
          };
          /**
           * 获取event类型。
           *
           *
           * @returns 返回event类型。
           */
          TEvent.prototype.getType = function() {
            return event_get_type(this != null ? this.nativeObj || this : null);
          };
          /**
           * 创建event对象。
           *
           *主要给脚本语言使用。
           *
           * @param type 事件类型。
           *
           * @returns 返回事件对象。
           */
          TEvent.create = function(type) {
            return new TEvent(event_create(type));
          };
          /**
           * 销毁事件对象。
           *
           *主要给脚本语言使用。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEvent.prototype.destroy = function() {
            return event_destroy(this != null ? this.nativeObj || this : null);
          };
          Object.defineProperty(TEvent.prototype, 'type', {
            /**
             * 类型。
             *
             */
            get: function() {
              return event_t_get_prop_type(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEvent.prototype, 'size', {
            /**
             * 结构体的大小。
             *
             */
            get: function() {
              return event_t_get_prop_size(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEvent.prototype, 'time', {
            /**
             * 事件发生的时间。
             *
             */
            get: function() {
              return event_t_get_prop_time(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEvent.prototype, 'target', {
            /**
             * 事件发生的目标对象。
             *
             */
            get: function() {
              return event_t_get_prop_target(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TEvent;
        })();
        exports.TEvent = TEvent;
        /**
         * 字体管理器，负责字体的加载和缓存管理。
         *(如果使用nanovg，字体由nanovg内部管理)
         *
         */
        var TFontManager = /** @class */ (function() {
          function TFontManager(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 卸载指定的字体。
           *
           * @param name 字体名，为NULL时使用缺省字体。
           * @param size 字体的大小(矢量字体指定为0即可)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFontManager.prototype.unloadFont = function(name, size) {
            return font_manager_unload_font(
              this != null ? this.nativeObj || this : null,
              name,
              size
            );
          };
          /**
           * 清除最久没有被使用的缓冲字模。
           *
           * @param cache_size 每种字体保留缓存字模的个数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFontManager.prototype.shrinkCache = function(cache_size) {
            return font_manager_shrink_cache(
              this != null ? this.nativeObj || this : null,
              cache_size
            );
          };
          /**
           * 卸载全部字体。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFontManager.prototype.unloadAll = function() {
            return font_manager_unload_all(
              this != null ? this.nativeObj || this : null
            );
          };
          return TFontManager;
        })();
        exports.TFontManager = TFontManager;
        /**
         * 字模格式常量定义。
         *
         */
        var TGlyphFormat;
        (function(TGlyphFormat) {
          /**
           * 每个像素占用1个字节(缺省)。
           *
           */
          TGlyphFormat[(TGlyphFormat['ALPHA'] = GLYPH_FMT_ALPHA())] = 'ALPHA';
          /**
           * 每个像素占用1个比特。
           *
           */
          TGlyphFormat[(TGlyphFormat['MONO'] = GLYPH_FMT_MONO())] = 'MONO';
          /**
           * 每个像素占用4个字节。
           *
           */
          TGlyphFormat[(TGlyphFormat['RGBA'] = GLYPH_FMT_RGBA())] = 'RGBA';
        })(
          (TGlyphFormat = exports.TGlyphFormat || (exports.TGlyphFormat = {}))
        );
        /**
         * idle可以看作是duration为0的定时器。
         *
         *> idle可以用来实现一些异步处理。
         *
         *示例：
         *
         *
         *> 在非GUI线程请用idle\_queue。
         *
         */
        var TIdle = /** @class */ (function() {
          function TIdle() {}
          /**
           * 增加一个idle。
           *
           * @param on_idle idle回调函数，回调函数返回RET_REPEAT，则下次继续执行，否则自动移出。
           * @param ctx idle回调函数的上下文。
           *
           * @returns 返回idle的ID，0表示失败。
           */
          TIdle.add = function(on_idle, ctx) {
            return idle_add(TBrowser.addFunction(on_idle, 'ii'), ctx);
          };
          /**
           * 删除指定的idle。
           *
           * @param idle_id idleID。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TIdle.remove = function(idle_id) {
            return idle_remove(idle_id);
          };
          /**
           * 根据上下文删除所有对应的idle。
           *
           * @param ctx idle回调函数的上下文
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TIdle.removeAllByCtx = function(ctx) {
            return idle_remove_all_by_ctx(ctx);
          };
          return TIdle;
        })();
        exports.TIdle = TIdle;
        /**
         * 图片管理器。负责加载，解码和缓存图片。
         *
         */
        var TImageManager = /** @class */ (function() {
          function TImageManager(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 获取缺省的图片管理器。
           *
           *
           * @returns 返回图片管理器对象。
           */
          TImageManager.instance = function() {
            return new TImageManager(image_manager());
          };
          /**
           * 获取指定的图片。
           *先从缓存查找，如果没找到，再加载并缓存。
           *
           * @param name 图片名称。
           * @param image 用于返回图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageManager.prototype.getBitmap = function(name, image) {
            return image_manager_get_bitmap(
              this != null ? this.nativeObj || this : null,
              name,
              image != null ? image.nativeObj || image : null
            );
          };
          /**
           * 预加载指定的图片。
           *
           * @param name 图片名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageManager.prototype.preload = function(name) {
            return image_manager_preload(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          return TImageManager;
        })();
        exports.TImageManager = TImageManager;
        /**
         * 输入类型常量定义。
         *
         */
        var TInputType;
        (function(TInputType) {
          /**
           * 文本。字符串属性值：text
           *
           */
          TInputType[(TInputType['TEXT'] = INPUT_TEXT())] = 'TEXT';
          /**
           * 整数。字符串属性值：int
           *
           */
          TInputType[(TInputType['INT'] = INPUT_INT())] = 'INT';
          /**
           * 非负整数。字符串属性值：uint
           *
           */
          TInputType[(TInputType['UINT'] = INPUT_UINT())] = 'UINT';
          /**
           * 16进制整数。字符串属性值：hex
           *
           */
          TInputType[(TInputType['HEX'] = INPUT_HEX())] = 'HEX';
          /**
           * 浮点数。字符串属性值：float
           *
           */
          TInputType[(TInputType['FLOAT'] = INPUT_FLOAT())] = 'FLOAT';
          /**
           * 非负浮点数。字符串属性值：ufloat
           *
           */
          TInputType[(TInputType['UFLOAT'] = INPUT_UFLOAT())] = 'UFLOAT';
          /**
           * 邮件地址。字符串属性值：email
           *
           */
          TInputType[(TInputType['EMAIL'] = INPUT_EMAIL())] = 'EMAIL';
          /**
           * 密码。字符串属性值：password
           *
           */
          TInputType[(TInputType['PASSWORD'] = INPUT_PASSWORD())] = 'PASSWORD';
          /**
           * 电话号码。字符串属性值：phone
           *
           */
          TInputType[(TInputType['PHONE'] = INPUT_PHONE())] = 'PHONE';
          /**
           * IP Addr V4(如：192.168.1.1)。字符串属性值：ipv4
           *
           */
          TInputType[(TInputType['IPV4'] = INPUT_IPV4())] = 'IPV4';
          /**
           * 日期(如：2020/02/20)。字符串属性值：date
           *
           */
          TInputType[(TInputType['DATE'] = INPUT_DATE())] = 'DATE';
          /**
           * 时间(时分，如：12:00)。字符串属性值：time
           *
           */
          TInputType[(TInputType['TIME'] = INPUT_TIME())] = 'TIME';
          /**
           * 时间(时分秒，如：12:00:00)。字符串属性值：time_full
           *
           */
          TInputType[(TInputType['TIME_FULL'] = INPUT_TIME_FULL())] =
            'TIME_FULL';
          /**
           * 使用自定义的软键盘(如计算器等应用不希望弹出系统软键盘)。字符串属性值：custom
           *
           */
          TInputType[(TInputType['CUSTOM'] = INPUT_CUSTOM())] = 'CUSTOM';
          /**
           * 使用自定义的密码软键盘。字符串属性值：custom_password
           *
           */
          TInputType[
            (TInputType['CUSTOM_PASSWORD'] = INPUT_CUSTOM_PASSWORD())
          ] = 'CUSTOM_PASSWORD';
          /**
           * 纯英文文本。字符串属性值：ascii
           *
           */
          TInputType[(TInputType['ASCII'] = INPUT_ASCII())] = 'ASCII';
        })((TInputType = exports.TInputType || (exports.TInputType = {})));
        /**
         * 输入法接口。
         *
         *常见的实现方式有以下几种：
         *
         ** 空实现。用于不需要输入法的嵌入式平台。
         *
         ** 缺省实现。用于需要输入法的嵌入式平台。
         *
         ** 基于SDL实现的平台原生输入法。用于桌面系统和手机系统。
         *
         *
         *
         *> 输入类型请参考：[input\_type](input_type_t.md)
         *
         */
        var TInputMethod = /** @class */ (function() {
          function TInputMethod(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 提交输入文本。
           *
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TInputMethod.prototype.commitText = function(text) {
            return input_method_commit_text(
              this != null ? this.nativeObj || this : null,
              text
            );
          };
          /**
           * 设置语言。
           *
           *> 有时在同一种语言环境下，也需要输入多种文字，典型的情况是同时输入中文和英文。
           *> 比如T9输入法，可以同时支持中文和英文输入，配合软键盘随时切换输入的语言。
           *> 数字、小写字母、大写字母和符合也可以视为输入的语言。
           *> 主要用于提示输入法引擎选择适当的输入方法。
           *
           * @param lang 语言。格式为语言+国家/地区码。如：zh_cn和en_us等。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TInputMethod.prototype.setLang = function(lang) {
            return input_method_set_lang(
              this != null ? this.nativeObj || this : null,
              lang
            );
          };
          /**
           * 获取语言。
           *
           *
           * @returns 返回语言。
           */
          TInputMethod.prototype.getLang = function() {
            return input_method_get_lang(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 提交按键。
           *
           * @param key 键值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TInputMethod.prototype.dispatchKey = function(key) {
            return input_method_dispatch_key(
              this != null ? this.nativeObj || this : null,
              key
            );
          };
          /**
           * 提交按键。
           *
           * @param key 键值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TInputMethod.prototype.dispatchKeys = function(key) {
            return input_method_dispatch_keys(
              this != null ? this.nativeObj || this : null,
              key
            );
          };
          /**
           * 分发进入预编辑状态的事件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TInputMethod.prototype.dispatchPreedit = function() {
            return input_method_dispatch_preedit(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 分发确认预编辑状态的事件(提交预编辑内容，退出预编辑状态)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TInputMethod.prototype.dispatchPreeditConfirm = function() {
            return input_method_dispatch_preedit_confirm(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 分发取消预编辑状态的事件(提交预编辑内容，退出预编辑状态)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TInputMethod.prototype.dispatchPreeditAbort = function() {
            return input_method_dispatch_preedit_abort(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取全局输入法对象。
           *
           *
           * @returns 成功返回输入法对象，失败返回NULL。
           */
          TInputMethod.instance = function() {
            return new TInputMethod(input_method());
          };
          return TInputMethod;
        })();
        exports.TInputMethod = TInputMethod;
        /**
         * key code。
         *
         */
        var TKeyCode;
        (function(TKeyCode) {
          /**
           * TK_KEY_RETURN
           *
           */
          TKeyCode[(TKeyCode['KEY_RETURN'] = TK_KEY_RETURN())] = 'KEY_RETURN';
          /**
           * TK_KEY_ESCAPE
           *
           */
          TKeyCode[(TKeyCode['KEY_ESCAPE'] = TK_KEY_ESCAPE())] = 'KEY_ESCAPE';
          /**
           * TK_KEY_BACKSPACE
           *
           */
          TKeyCode[(TKeyCode['KEY_BACKSPACE'] = TK_KEY_BACKSPACE())] =
            'KEY_BACKSPACE';
          /**
           * TK_KEY_TAB
           *
           */
          TKeyCode[(TKeyCode['KEY_TAB'] = TK_KEY_TAB())] = 'KEY_TAB';
          /**
           * TK_KEY_SPACE
           *
           */
          TKeyCode[(TKeyCode['KEY_SPACE'] = TK_KEY_SPACE())] = 'KEY_SPACE';
          /**
           * TK_KEY_EXCLAIM
           *
           */
          TKeyCode[(TKeyCode['KEY_EXCLAIM'] = TK_KEY_EXCLAIM())] =
            'KEY_EXCLAIM';
          /**
           * TK_KEY_QUOTEDBL
           *
           */
          TKeyCode[(TKeyCode['KEY_QUOTEDBL'] = TK_KEY_QUOTEDBL())] =
            'KEY_QUOTEDBL';
          /**
           * TK_KEY_HASH
           *
           */
          TKeyCode[(TKeyCode['KEY_HASH'] = TK_KEY_HASH())] = 'KEY_HASH';
          /**
           * TK_KEY_PERCENT
           *
           */
          TKeyCode[(TKeyCode['KEY_PERCENT'] = TK_KEY_PERCENT())] =
            'KEY_PERCENT';
          /**
           * TK_KEY_DOLLAR
           *
           */
          TKeyCode[(TKeyCode['KEY_DOLLAR'] = TK_KEY_DOLLAR())] = 'KEY_DOLLAR';
          /**
           * TK_KEY_AMPERSAND
           *
           */
          TKeyCode[(TKeyCode['KEY_AMPERSAND'] = TK_KEY_AMPERSAND())] =
            'KEY_AMPERSAND';
          /**
           * TK_KEY_QUOTE
           *
           */
          TKeyCode[(TKeyCode['KEY_QUOTE'] = TK_KEY_QUOTE())] = 'KEY_QUOTE';
          /**
           * TK_KEY_LEFTPAREN
           *
           */
          TKeyCode[(TKeyCode['KEY_LEFTPAREN'] = TK_KEY_LEFTPAREN())] =
            'KEY_LEFTPAREN';
          /**
           * TK_KEY_RIGHTPAREN
           *
           */
          TKeyCode[(TKeyCode['KEY_RIGHTPAREN'] = TK_KEY_RIGHTPAREN())] =
            'KEY_RIGHTPAREN';
          /**
           * TK_KEY_ASTERISK
           *
           */
          TKeyCode[(TKeyCode['KEY_ASTERISK'] = TK_KEY_ASTERISK())] =
            'KEY_ASTERISK';
          /**
           * TK_KEY_PLUS
           *
           */
          TKeyCode[(TKeyCode['KEY_PLUS'] = TK_KEY_PLUS())] = 'KEY_PLUS';
          /**
           * TK_KEY_COMMA
           *
           */
          TKeyCode[(TKeyCode['KEY_COMMA'] = TK_KEY_COMMA())] = 'KEY_COMMA';
          /**
           * TK_KEY_MINUS
           *
           */
          TKeyCode[(TKeyCode['KEY_MINUS'] = TK_KEY_MINUS())] = 'KEY_MINUS';
          /**
           * TK_KEY_PERIOD
           *
           */
          TKeyCode[(TKeyCode['KEY_PERIOD'] = TK_KEY_PERIOD())] = 'KEY_PERIOD';
          /**
           * TK_KEY_SLASH
           *
           */
          TKeyCode[(TKeyCode['KEY_SLASH'] = TK_KEY_SLASH())] = 'KEY_SLASH';
          /**
           * TK_KEY_0
           *
           */
          TKeyCode[(TKeyCode['KEY_0'] = TK_KEY_0())] = 'KEY_0';
          /**
           * TK_KEY_1
           *
           */
          TKeyCode[(TKeyCode['KEY_1'] = TK_KEY_1())] = 'KEY_1';
          /**
           * TK_KEY_2
           *
           */
          TKeyCode[(TKeyCode['KEY_2'] = TK_KEY_2())] = 'KEY_2';
          /**
           * TK_KEY_3
           *
           */
          TKeyCode[(TKeyCode['KEY_3'] = TK_KEY_3())] = 'KEY_3';
          /**
           * TK_KEY_4
           *
           */
          TKeyCode[(TKeyCode['KEY_4'] = TK_KEY_4())] = 'KEY_4';
          /**
           * TK_KEY_5
           *
           */
          TKeyCode[(TKeyCode['KEY_5'] = TK_KEY_5())] = 'KEY_5';
          /**
           * TK_KEY_6
           *
           */
          TKeyCode[(TKeyCode['KEY_6'] = TK_KEY_6())] = 'KEY_6';
          /**
           * TK_KEY_7
           *
           */
          TKeyCode[(TKeyCode['KEY_7'] = TK_KEY_7())] = 'KEY_7';
          /**
           * TK_KEY_8
           *
           */
          TKeyCode[(TKeyCode['KEY_8'] = TK_KEY_8())] = 'KEY_8';
          /**
           * TK_KEY_9
           *
           */
          TKeyCode[(TKeyCode['KEY_9'] = TK_KEY_9())] = 'KEY_9';
          /**
           * TK_KEY_COLON
           *
           */
          TKeyCode[(TKeyCode['KEY_COLON'] = TK_KEY_COLON())] = 'KEY_COLON';
          /**
           * TK_KEY_SEMICOLON
           *
           */
          TKeyCode[(TKeyCode['KEY_SEMICOLON'] = TK_KEY_SEMICOLON())] =
            'KEY_SEMICOLON';
          /**
           * TK_KEY_LESS
           *
           */
          TKeyCode[(TKeyCode['KEY_LESS'] = TK_KEY_LESS())] = 'KEY_LESS';
          /**
           * TK_KEY_EQUAL
           *
           */
          TKeyCode[(TKeyCode['KEY_EQUAL'] = TK_KEY_EQUAL())] = 'KEY_EQUAL';
          /**
           * TK_KEY_GREATER
           *
           */
          TKeyCode[(TKeyCode['KEY_GREATER'] = TK_KEY_GREATER())] =
            'KEY_GREATER';
          /**
           * TK_KEY_QUESTION
           *
           */
          TKeyCode[(TKeyCode['KEY_QUESTION'] = TK_KEY_QUESTION())] =
            'KEY_QUESTION';
          /**
           * TK_KEY_AT
           *
           */
          TKeyCode[(TKeyCode['KEY_AT'] = TK_KEY_AT())] = 'KEY_AT';
          /**
           * TK_KEY_LEFTBRACKET
           *
           */
          TKeyCode[(TKeyCode['KEY_LEFTBRACKET'] = TK_KEY_LEFTBRACKET())] =
            'KEY_LEFTBRACKET';
          /**
           * TK_KEY_BACKSLASH
           *
           */
          TKeyCode[(TKeyCode['KEY_BACKSLASH'] = TK_KEY_BACKSLASH())] =
            'KEY_BACKSLASH';
          /**
           * TK_KEY_RIGHTBRACKET
           *
           */
          TKeyCode[(TKeyCode['KEY_RIGHTBRACKET'] = TK_KEY_RIGHTBRACKET())] =
            'KEY_RIGHTBRACKET';
          /**
           * TK_KEY_CARET
           *
           */
          TKeyCode[(TKeyCode['KEY_CARET'] = TK_KEY_CARET())] = 'KEY_CARET';
          /**
           * TK_KEY_UNDERSCORE
           *
           */
          TKeyCode[(TKeyCode['KEY_UNDERSCORE'] = TK_KEY_UNDERSCORE())] =
            'KEY_UNDERSCORE';
          /**
           * TK_KEY_BACKQUOTE
           *
           */
          TKeyCode[(TKeyCode['KEY_BACKQUOTE'] = TK_KEY_BACKQUOTE())] =
            'KEY_BACKQUOTE';
          /**
           * TK_KEY_a
           *
           */
          TKeyCode[(TKeyCode['KEY_a'] = TK_KEY_a())] = 'KEY_a';
          /**
           * TK_KEY_b
           *
           */
          TKeyCode[(TKeyCode['KEY_b'] = TK_KEY_b())] = 'KEY_b';
          /**
           * TK_KEY_c
           *
           */
          TKeyCode[(TKeyCode['KEY_c'] = TK_KEY_c())] = 'KEY_c';
          /**
           * TK_KEY_d
           *
           */
          TKeyCode[(TKeyCode['KEY_d'] = TK_KEY_d())] = 'KEY_d';
          /**
           * TK_KEY_e
           *
           */
          TKeyCode[(TKeyCode['KEY_e'] = TK_KEY_e())] = 'KEY_e';
          /**
           * TK_KEY_f
           *
           */
          TKeyCode[(TKeyCode['KEY_f'] = TK_KEY_f())] = 'KEY_f';
          /**
           * TK_KEY_g
           *
           */
          TKeyCode[(TKeyCode['KEY_g'] = TK_KEY_g())] = 'KEY_g';
          /**
           * TK_KEY_h
           *
           */
          TKeyCode[(TKeyCode['KEY_h'] = TK_KEY_h())] = 'KEY_h';
          /**
           * TK_KEY_i
           *
           */
          TKeyCode[(TKeyCode['KEY_i'] = TK_KEY_i())] = 'KEY_i';
          /**
           * TK_KEY_j
           *
           */
          TKeyCode[(TKeyCode['KEY_j'] = TK_KEY_j())] = 'KEY_j';
          /**
           * TK_KEY_k
           *
           */
          TKeyCode[(TKeyCode['KEY_k'] = TK_KEY_k())] = 'KEY_k';
          /**
           * TK_KEY_l
           *
           */
          TKeyCode[(TKeyCode['KEY_l'] = TK_KEY_l())] = 'KEY_l';
          /**
           * TK_KEY_m
           *
           */
          TKeyCode[(TKeyCode['KEY_m'] = TK_KEY_m())] = 'KEY_m';
          /**
           * TK_KEY_n
           *
           */
          TKeyCode[(TKeyCode['KEY_n'] = TK_KEY_n())] = 'KEY_n';
          /**
           * TK_KEY_o
           *
           */
          TKeyCode[(TKeyCode['KEY_o'] = TK_KEY_o())] = 'KEY_o';
          /**
           * TK_KEY_p
           *
           */
          TKeyCode[(TKeyCode['KEY_p'] = TK_KEY_p())] = 'KEY_p';
          /**
           * TK_KEY_q
           *
           */
          TKeyCode[(TKeyCode['KEY_q'] = TK_KEY_q())] = 'KEY_q';
          /**
           * TK_KEY_r
           *
           */
          TKeyCode[(TKeyCode['KEY_r'] = TK_KEY_r())] = 'KEY_r';
          /**
           * TK_KEY_s
           *
           */
          TKeyCode[(TKeyCode['KEY_s'] = TK_KEY_s())] = 'KEY_s';
          /**
           * TK_KEY_t
           *
           */
          TKeyCode[(TKeyCode['KEY_t'] = TK_KEY_t())] = 'KEY_t';
          /**
           * TK_KEY_u
           *
           */
          TKeyCode[(TKeyCode['KEY_u'] = TK_KEY_u())] = 'KEY_u';
          /**
           * TK_KEY_v
           *
           */
          TKeyCode[(TKeyCode['KEY_v'] = TK_KEY_v())] = 'KEY_v';
          /**
           * TK_KEY_w
           *
           */
          TKeyCode[(TKeyCode['KEY_w'] = TK_KEY_w())] = 'KEY_w';
          /**
           * TK_KEY_x
           *
           */
          TKeyCode[(TKeyCode['KEY_x'] = TK_KEY_x())] = 'KEY_x';
          /**
           * TK_KEY_y
           *
           */
          TKeyCode[(TKeyCode['KEY_y'] = TK_KEY_y())] = 'KEY_y';
          /**
           * TK_KEY_z
           *
           */
          TKeyCode[(TKeyCode['KEY_z'] = TK_KEY_z())] = 'KEY_z';
          /**
           * TK_KEY_A
           *
           */
          TKeyCode[(TKeyCode['KEY_A'] = TK_KEY_A())] = 'KEY_A';
          /**
           * TK_KEY_B
           *
           */
          TKeyCode[(TKeyCode['KEY_B'] = TK_KEY_B())] = 'KEY_B';
          /**
           * TK_KEY_C
           *
           */
          TKeyCode[(TKeyCode['KEY_C'] = TK_KEY_C())] = 'KEY_C';
          /**
           * TK_KEY_D
           *
           */
          TKeyCode[(TKeyCode['KEY_D'] = TK_KEY_D())] = 'KEY_D';
          /**
           * TK_KEY_E
           *
           */
          TKeyCode[(TKeyCode['KEY_E'] = TK_KEY_E())] = 'KEY_E';
          /**
           * TK_KEY_F
           *
           */
          TKeyCode[(TKeyCode['KEY_F'] = TK_KEY_F())] = 'KEY_F';
          /**
           * TK_KEY_G
           *
           */
          TKeyCode[(TKeyCode['KEY_G'] = TK_KEY_G())] = 'KEY_G';
          /**
           * TK_KEY_H
           *
           */
          TKeyCode[(TKeyCode['KEY_H'] = TK_KEY_H())] = 'KEY_H';
          /**
           * TK_KEY_I
           *
           */
          TKeyCode[(TKeyCode['KEY_I'] = TK_KEY_I())] = 'KEY_I';
          /**
           * TK_KEY_J
           *
           */
          TKeyCode[(TKeyCode['KEY_J'] = TK_KEY_J())] = 'KEY_J';
          /**
           * TK_KEY_K
           *
           */
          TKeyCode[(TKeyCode['KEY_K'] = TK_KEY_K())] = 'KEY_K';
          /**
           * TK_KEY_L
           *
           */
          TKeyCode[(TKeyCode['KEY_L'] = TK_KEY_L())] = 'KEY_L';
          /**
           * TK_KEY_M
           *
           */
          TKeyCode[(TKeyCode['KEY_M'] = TK_KEY_M())] = 'KEY_M';
          /**
           * TK_KEY_N
           *
           */
          TKeyCode[(TKeyCode['KEY_N'] = TK_KEY_N())] = 'KEY_N';
          /**
           * TK_KEY_O
           *
           */
          TKeyCode[(TKeyCode['KEY_O'] = TK_KEY_O())] = 'KEY_O';
          /**
           * TK_KEY_P
           *
           */
          TKeyCode[(TKeyCode['KEY_P'] = TK_KEY_P())] = 'KEY_P';
          /**
           * TK_KEY_Q
           *
           */
          TKeyCode[(TKeyCode['KEY_Q'] = TK_KEY_Q())] = 'KEY_Q';
          /**
           * TK_KEY_R
           *
           */
          TKeyCode[(TKeyCode['KEY_R'] = TK_KEY_R())] = 'KEY_R';
          /**
           * TK_KEY_S
           *
           */
          TKeyCode[(TKeyCode['KEY_S'] = TK_KEY_S())] = 'KEY_S';
          /**
           * TK_KEY_T
           *
           */
          TKeyCode[(TKeyCode['KEY_T'] = TK_KEY_T())] = 'KEY_T';
          /**
           * TK_KEY_U
           *
           */
          TKeyCode[(TKeyCode['KEY_U'] = TK_KEY_U())] = 'KEY_U';
          /**
           * TK_KEY_V
           *
           */
          TKeyCode[(TKeyCode['KEY_V'] = TK_KEY_V())] = 'KEY_V';
          /**
           * TK_KEY_W
           *
           */
          TKeyCode[(TKeyCode['KEY_W'] = TK_KEY_W())] = 'KEY_W';
          /**
           * TK_KEY_X
           *
           */
          TKeyCode[(TKeyCode['KEY_X'] = TK_KEY_X())] = 'KEY_X';
          /**
           * TK_KEY_Y
           *
           */
          TKeyCode[(TKeyCode['KEY_Y'] = TK_KEY_Y())] = 'KEY_Y';
          /**
           * TK_KEY_Z
           *
           */
          TKeyCode[(TKeyCode['KEY_Z'] = TK_KEY_Z())] = 'KEY_Z';
          /**
           * TK_KEY_DOT
           *
           */
          TKeyCode[(TKeyCode['KEY_DOT'] = TK_KEY_DOT())] = 'KEY_DOT';
          /**
           * TK_KEY_DELETE
           *
           */
          TKeyCode[(TKeyCode['KEY_DELETE'] = TK_KEY_DELETE())] = 'KEY_DELETE';
          /**
           * TK_KEY_LEFTBRACE
           *
           */
          TKeyCode[(TKeyCode['KEY_LEFTBRACE'] = TK_KEY_LEFTBRACE())] =
            'KEY_LEFTBRACE';
          /**
           * TK_KEY_RIGHTBRACE
           *
           */
          TKeyCode[(TKeyCode['KEY_RIGHTBRACE'] = TK_KEY_RIGHTBRACE())] =
            'KEY_RIGHTBRACE';
          /**
           * TK_KEY_LSHIFT
           *
           */
          TKeyCode[(TKeyCode['KEY_LSHIFT'] = TK_KEY_LSHIFT())] = 'KEY_LSHIFT';
          /**
           * TK_KEY_RSHIFT
           *
           */
          TKeyCode[(TKeyCode['KEY_RSHIFT'] = TK_KEY_RSHIFT())] = 'KEY_RSHIFT';
          /**
           * TK_KEY_LCTRL
           *
           */
          TKeyCode[(TKeyCode['KEY_LCTRL'] = TK_KEY_LCTRL())] = 'KEY_LCTRL';
          /**
           * TK_KEY_RCTRL
           *
           */
          TKeyCode[(TKeyCode['KEY_RCTRL'] = TK_KEY_RCTRL())] = 'KEY_RCTRL';
          /**
           * TK_KEY_LALT
           *
           */
          TKeyCode[(TKeyCode['KEY_LALT'] = TK_KEY_LALT())] = 'KEY_LALT';
          /**
           * TK_KEY_RALT
           *
           */
          TKeyCode[(TKeyCode['KEY_RALT'] = TK_KEY_RALT())] = 'KEY_RALT';
          /**
           * TK_KEY_CAPSLOCK
           *
           */
          TKeyCode[(TKeyCode['KEY_CAPSLOCK'] = TK_KEY_CAPSLOCK())] =
            'KEY_CAPSLOCK';
          /**
           * TK_KEY_HOME
           *
           */
          TKeyCode[(TKeyCode['KEY_HOME'] = TK_KEY_HOME())] = 'KEY_HOME';
          /**
           * TK_KEY_END
           *
           */
          TKeyCode[(TKeyCode['KEY_END'] = TK_KEY_END())] = 'KEY_END';
          /**
           * TK_KEY_INSERT
           *
           */
          TKeyCode[(TKeyCode['KEY_INSERT'] = TK_KEY_INSERT())] = 'KEY_INSERT';
          /**
           * TK_KEY_UP
           *
           */
          TKeyCode[(TKeyCode['KEY_UP'] = TK_KEY_UP())] = 'KEY_UP';
          /**
           * TK_KEY_DOWN
           *
           */
          TKeyCode[(TKeyCode['KEY_DOWN'] = TK_KEY_DOWN())] = 'KEY_DOWN';
          /**
           * TK_KEY_LEFT
           *
           */
          TKeyCode[(TKeyCode['KEY_LEFT'] = TK_KEY_LEFT())] = 'KEY_LEFT';
          /**
           * TK_KEY_RIGHT
           *
           */
          TKeyCode[(TKeyCode['KEY_RIGHT'] = TK_KEY_RIGHT())] = 'KEY_RIGHT';
          /**
           * TK_KEY_PAGEUP
           *
           */
          TKeyCode[(TKeyCode['KEY_PAGEUP'] = TK_KEY_PAGEUP())] = 'KEY_PAGEUP';
          /**
           * TK_KEY_PAGEDOWN
           *
           */
          TKeyCode[(TKeyCode['KEY_PAGEDOWN'] = TK_KEY_PAGEDOWN())] =
            'KEY_PAGEDOWN';
          /**
           * TK_KEY_F1
           *
           */
          TKeyCode[(TKeyCode['KEY_F1'] = TK_KEY_F1())] = 'KEY_F1';
          /**
           * TK_KEY_F2
           *
           */
          TKeyCode[(TKeyCode['KEY_F2'] = TK_KEY_F2())] = 'KEY_F2';
          /**
           * TK_KEY_F3
           *
           */
          TKeyCode[(TKeyCode['KEY_F3'] = TK_KEY_F3())] = 'KEY_F3';
          /**
           * TK_KEY_F4
           *
           */
          TKeyCode[(TKeyCode['KEY_F4'] = TK_KEY_F4())] = 'KEY_F4';
          /**
           * TK_KEY_F5
           *
           */
          TKeyCode[(TKeyCode['KEY_F5'] = TK_KEY_F5())] = 'KEY_F5';
          /**
           * TK_KEY_F6
           *
           */
          TKeyCode[(TKeyCode['KEY_F6'] = TK_KEY_F6())] = 'KEY_F6';
          /**
           * TK_KEY_F7
           *
           */
          TKeyCode[(TKeyCode['KEY_F7'] = TK_KEY_F7())] = 'KEY_F7';
          /**
           * TK_KEY_F8
           *
           */
          TKeyCode[(TKeyCode['KEY_F8'] = TK_KEY_F8())] = 'KEY_F8';
          /**
           * TK_KEY_F9
           *
           */
          TKeyCode[(TKeyCode['KEY_F9'] = TK_KEY_F9())] = 'KEY_F9';
          /**
           * TK_KEY_F10
           *
           */
          TKeyCode[(TKeyCode['KEY_F10'] = TK_KEY_F10())] = 'KEY_F10';
          /**
           * TK_KEY_F11
           *
           */
          TKeyCode[(TKeyCode['KEY_F11'] = TK_KEY_F11())] = 'KEY_F11';
          /**
           * TK_KEY_F12
           *
           */
          TKeyCode[(TKeyCode['KEY_F12'] = TK_KEY_F12())] = 'KEY_F12';
          /**
           * TK_KEY_MENU
           *
           */
          TKeyCode[(TKeyCode['KEY_MENU'] = TK_KEY_MENU())] = 'KEY_MENU';
          /**
           * TK_KEY_COMMAND
           *
           */
          TKeyCode[(TKeyCode['KEY_COMMAND'] = TK_KEY_COMMAND())] =
            'KEY_COMMAND';
          /**
           * TK_KEY_BACK
           *
           */
          TKeyCode[(TKeyCode['KEY_BACK'] = TK_KEY_BACK())] = 'KEY_BACK';
          /**
           * TK_KEY_CANCEL
           *
           */
          TKeyCode[(TKeyCode['KEY_CANCEL'] = TK_KEY_CANCEL())] = 'KEY_CANCEL';
          /**
           * TK_KEY_WHEEL
           *
           */
          TKeyCode[(TKeyCode['KEY_WHEEL'] = TK_KEY_WHEEL())] = 'KEY_WHEEL';
        })((TKeyCode = exports.TKeyCode || (exports.TKeyCode = {})));
        /**
         * 本地化信息。提供字符串翻译数据管理，当前语言改变的事件通知等等。
         *
         */
        var TLocaleInfo = /** @class */ (function() {
          function TLocaleInfo(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 获取缺省locale_info。
           *
           *
           * @returns 返回locale_info对象。
           */
          TLocaleInfo.instance = function() {
            return new TLocaleInfo(locale_info());
          };
          /**
           * 翻译字符串。
           *
           * @param text 待翻译的文本。
           *
           * @returns 返回翻译之后的字符串。
           */
          TLocaleInfo.prototype.tr = function(text) {
            return locale_info_tr(
              this != null ? this.nativeObj || this : null,
              text
            );
          };
          /**
           * 设置当前的国家和语言。
           *
           * @param language 语言。
           * @param country 国家或地区。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLocaleInfo.prototype.change = function(language, country) {
            return locale_info_change(
              this != null ? this.nativeObj || this : null,
              language,
              country
            );
          };
          /**
           * 注销指定事件的处理函数。
           *
           * @param id locale_info_on返回的ID。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLocaleInfo.prototype.off = function(id) {
            return locale_info_off(
              this != null ? this.nativeObj || this : null,
              id
            );
          };
          return TLocaleInfo;
        })();
        exports.TLocaleInfo = TLocaleInfo;
        /**
         * style常量定义。
         *
         */
        var TStyleId;
        (function(TStyleId) {
          /**
           * 背景颜色。
           *
           */
          TStyleId[(TStyleId['BG_COLOR'] = STYLE_ID_BG_COLOR())] = 'BG_COLOR';
          /**
           * 前景颜色。
           *
           */
          TStyleId[(TStyleId['FG_COLOR'] = STYLE_ID_FG_COLOR())] = 'FG_COLOR';
          /**
           * 蒙版颜色。
           *
           */
          TStyleId[(TStyleId['MASK_COLOR'] = STYLE_ID_MASK_COLOR())] =
            'MASK_COLOR';
          /**
           * 字体名称。
           *
           */
          TStyleId[(TStyleId['FONT_NAME'] = STYLE_ID_FONT_NAME())] =
            'FONT_NAME';
          /**
           * 字体大小。
           *
           */
          TStyleId[(TStyleId['FONT_SIZE'] = STYLE_ID_FONT_SIZE())] =
            'FONT_SIZE';
          /**
           * 字体风格(粗体、斜体等)。
           *
           */
          TStyleId[(TStyleId['FONT_STYLE'] = STYLE_ID_FONT_STYLE())] =
            'FONT_STYLE';
          /**
           * 文本颜色。
           *
           */
          TStyleId[(TStyleId['TEXT_COLOR'] = STYLE_ID_TEXT_COLOR())] =
            'TEXT_COLOR';
          /**
           * 高亮文本的字体名称。
           *
           */
          TStyleId[
            (TStyleId['HIGHLIGHT_FONT_NAME'] = STYLE_ID_HIGHLIGHT_FONT_NAME())
          ] = 'HIGHLIGHT_FONT_NAME';
          /**
           * 高亮文本的字体大小。
           *
           */
          TStyleId[
            (TStyleId['HIGHLIGHT_FONT_SIZE'] = STYLE_ID_HIGHLIGHT_FONT_SIZE())
          ] = 'HIGHLIGHT_FONT_SIZE';
          /**
           * 高亮文本的文本颜色。
           *
           */
          TStyleId[
            (TStyleId['HIGHLIGHT_TEXT_COLOR'] = STYLE_ID_HIGHLIGHT_TEXT_COLOR())
          ] = 'HIGHLIGHT_TEXT_COLOR';
          /**
           * 提示文本颜色。
           *
           */
          TStyleId[(TStyleId['TIPS_TEXT_COLOR'] = STYLE_ID_TIPS_TEXT_COLOR())] =
            'TIPS_TEXT_COLOR';
          /**
           * 文本水平对齐的方式。
           *
           */
          TStyleId[(TStyleId['TEXT_ALIGN_H'] = STYLE_ID_TEXT_ALIGN_H())] =
            'TEXT_ALIGN_H';
          /**
           * 文本垂直对齐的方式。
           *
           */
          TStyleId[(TStyleId['TEXT_ALIGN_V'] = STYLE_ID_TEXT_ALIGN_V())] =
            'TEXT_ALIGN_V';
          /**
           * 边框颜色。
           *
           */
          TStyleId[(TStyleId['BORDER_COLOR'] = STYLE_ID_BORDER_COLOR())] =
            'BORDER_COLOR';
          /**
           * 边框线宽。
           *
           */
          TStyleId[(TStyleId['BORDER_WIDTH'] = STYLE_ID_BORDER_WIDTH())] =
            'BORDER_WIDTH';
          /**
           * 边框类型。
           *
           */
          TStyleId[(TStyleId['BORDER'] = STYLE_ID_BORDER())] = 'BORDER';
          /**
           * 图片的名称。
           *
           */
          TStyleId[(TStyleId['BG_IMAGE'] = STYLE_ID_BG_IMAGE())] = 'BG_IMAGE';
          /**
           * 图片的显示方式。
           *
           */
          TStyleId[
            (TStyleId['BG_IMAGE_DRAW_TYPE'] = STYLE_ID_BG_IMAGE_DRAW_TYPE())
          ] = 'BG_IMAGE_DRAW_TYPE';
          /**
           * 图标的名称。
           *
           */
          TStyleId[(TStyleId['ICON'] = STYLE_ID_ICON())] = 'ICON';
          /**
           * 图片的名称。
           *
           */
          TStyleId[(TStyleId['FG_IMAGE'] = STYLE_ID_FG_IMAGE())] = 'FG_IMAGE';
          /**
           * 图片的显示方式。
           *
           */
          TStyleId[
            (TStyleId['FG_IMAGE_DRAW_TYPE'] = STYLE_ID_FG_IMAGE_DRAW_TYPE())
          ] = 'FG_IMAGE_DRAW_TYPE';
          /**
           * 间距。
           *
           */
          TStyleId[(TStyleId['SPACER'] = STYLE_ID_SPACER())] = 'SPACER';
          /**
           * 边距。
           *
           */
          TStyleId[(TStyleId['MARGIN'] = STYLE_ID_MARGIN())] = 'MARGIN';
          /**
           * 左边距。
           *
           */
          TStyleId[(TStyleId['MARGIN_LEFT'] = STYLE_ID_MARGIN_LEFT())] =
            'MARGIN_LEFT';
          /**
           * 右边距。
           *
           */
          TStyleId[(TStyleId['MARGIN_RIGHT'] = STYLE_ID_MARGIN_RIGHT())] =
            'MARGIN_RIGHT';
          /**
           * 顶边距。
           *
           */
          TStyleId[(TStyleId['MARGIN_TOP'] = STYLE_ID_MARGIN_TOP())] =
            'MARGIN_TOP';
          /**
           * 底边距。
           *
           */
          TStyleId[(TStyleId['MARGIN_BOTTOM'] = STYLE_ID_MARGIN_BOTTOM())] =
            'MARGIN_BOTTOM';
          /**
           * 图标的位置。
           *
           */
          TStyleId[(TStyleId['ICON_AT'] = STYLE_ID_ICON_AT())] = 'ICON_AT';
          /**
           * Active图标的名称。
           *
           */
          TStyleId[(TStyleId['ACTIVE_ICON'] = STYLE_ID_ACTIVE_ICON())] =
            'ACTIVE_ICON';
          /**
           * X方向的偏移，方便实现按下的效果。
           *
           */
          TStyleId[(TStyleId['X_OFFSET'] = STYLE_ID_X_OFFSET())] = 'X_OFFSET';
          /**
           * Y方向的偏移，方便实现按下的效果。
           *
           */
          TStyleId[(TStyleId['Y_OFFSET'] = STYLE_ID_Y_OFFSET())] = 'Y_OFFSET';
          /**
           * 编辑器中选中区域的背景颜色。
           *
           */
          TStyleId[
            (TStyleId['SELECTED_BG_COLOR'] = STYLE_ID_SELECTED_BG_COLOR())
          ] = 'SELECTED_BG_COLOR';
          /**
           * 编辑器中选中区域的前景颜色。
           *
           */
          TStyleId[
            (TStyleId['SELECTED_FG_COLOR'] = STYLE_ID_SELECTED_FG_COLOR())
          ] = 'SELECTED_FG_COLOR';
          /**
           * 编辑器中选中区域的文本颜色。
           *
           */
          TStyleId[
            (TStyleId['SELECTED_TEXT_COLOR'] = STYLE_ID_SELECTED_TEXT_COLOR())
          ] = 'SELECTED_TEXT_COLOR';
          /**
           * 圆角半径(仅在WITH_VGCANVAS定义时生效)。
           *
           */
          TStyleId[(TStyleId['ROUND_RADIUS'] = STYLE_ID_ROUND_RADIUS())] =
            'ROUND_RADIUS';
          /**
           * 左上角圆角半径(仅在WITH_VGCANVAS定义时生效)。
           *
           */
          TStyleId[
            (TStyleId[
              'ROUND_RADIUS_TOP_LETF'
            ] = STYLE_ID_ROUND_RADIUS_TOP_LETF())
          ] = 'ROUND_RADIUS_TOP_LETF';
          /**
           * 右上角圆角半径(仅在WITH_VGCANVAS定义时生效)。
           *
           */
          TStyleId[
            (TStyleId[
              'ROUND_RADIUS_TOP_RIGHT'
            ] = STYLE_ID_ROUND_RADIUS_TOP_RIGHT())
          ] = 'ROUND_RADIUS_TOP_RIGHT';
          /**
           * 左下角圆角半径(仅在WITH_VGCANVAS定义时生效)。
           *
           */
          TStyleId[
            (TStyleId[
              'ROUND_RADIUS_BOTTOM_LETF'
            ] = STYLE_ID_ROUND_RADIUS_BOTTOM_LETF())
          ] = 'ROUND_RADIUS_BOTTOM_LETF';
          /**
           * 右下角圆角半径(仅在WITH_VGCANVAS定义时生效)。
           *
           */
          TStyleId[
            (TStyleId[
              'ROUND_RADIUS_BOTTOM_RIGHT'
            ] = STYLE_ID_ROUND_RADIUS_BOTTOM_RIGHT())
          ] = 'ROUND_RADIUS_BOTTOM_RIGHT';
          /**
           * 子控件布局参数。
           *
           */
          TStyleId[(TStyleId['CHILDREN_LAYOUT'] = STYLE_ID_CHILDREN_LAYOUT())] =
            'CHILDREN_LAYOUT';
          /**
           * 控件布局参数。
           *
           */
          TStyleId[(TStyleId['SELF_LAYOUT'] = STYLE_ID_SELF_LAYOUT())] =
            'SELF_LAYOUT';
          /**
           * 是否支持焦点停留。
           *
           */
          TStyleId[(TStyleId['FOCUSABLE'] = STYLE_ID_FOCUSABLE())] =
            'FOCUSABLE';
          /**
           * 是否启用按键音、触屏音和震动等反馈。
           *
           */
          TStyleId[(TStyleId['FEEDBACK'] = STYLE_ID_FEEDBACK())] = 'FEEDBACK';
        })((TStyleId = exports.TStyleId || (exports.TStyleId = {})));
        /**
         * 控件风格。
         *
         *widget从style对象中，获取诸如字体、颜色和图片相关的参数，根据这些参数来绘制界面。
         *
         *
         *属性名称的请参考[style\_id](style_id_t.md)
         *
         */
        var TStyle = /** @class */ (function() {
          function TStyle(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * widget状态改变时，通知style更新数据。
           *
           * @param widget 控件对象。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TStyle.prototype.notifyWidgetStateChanged = function(widget) {
            return style_notify_widget_state_changed(
              this != null ? this.nativeObj || this : null,
              widget != null ? widget.nativeObj || widget : null
            );
          };
          /**
           * 检查style对象是否有效
           *
           *
           * @returns 返回是否有效。
           */
          TStyle.prototype.isValid = function() {
            return style_is_valid(this != null ? this.nativeObj || this : null);
          };
          /**
           * 获取指定name的整数格式的值。
           *
           * @param name 属性名。
           * @param defval 缺省值。
           *
           * @returns 返回整数格式的值。
           */
          TStyle.prototype.getInt = function(name, defval) {
            return style_get_int(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 获取指定name的无符号整数格式的值。
           *
           * @param name 属性名。
           * @param defval 缺省值。
           *
           * @returns 返回无符号整数格式的值。
           */
          TStyle.prototype.getUint = function(name, defval) {
            return style_get_uint(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 获取指定name的字符串格式的值。
           *
           * @param name 属性名。
           * @param defval 缺省值。
           *
           * @returns 返回字符串格式的值。
           */
          TStyle.prototype.getStr = function(name, defval) {
            return style_get_str(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指定状态的指定属性的值(仅仅对mutable的style有效)。
           *
           * @param state 状态。
           * @param name 属性名。
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TStyle.prototype.set = function(state, name, value) {
            return style_set(
              this != null ? this.nativeObj || this : null,
              state,
              name,
              value != null ? value.nativeObj || value : null
            );
          };
          /**
           * 更新风格对象的状态以及对应的数据
           *备注：根据 widget_type 和 style_name 以及 widget_state 在 theme 对象中查找对应的数据并且更新到 style 对象中
           *
           * @param theme theme对象。
           * @param widget_type 控件的类型名。
           * @param style_name style的名称。
           * @param widget_state 控件的状态。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TStyle.prototype.updateState = function(
            theme,
            widget_type,
            style_name,
            widget_state
          ) {
            return style_update_state(
              this != null ? this.nativeObj || this : null,
              theme != null ? theme.nativeObj || theme : null,
              widget_type,
              style_name,
              widget_state
            );
          };
          /**
           * 获取风格对象的风格状态
           *
           *
           * @returns 返回风格状态。
           */
          TStyle.prototype.getStyleState = function() {
            return style_get_style_state(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查style是否是mutable的。
           *
           *
           * @returns 返回TRUE表示是，否则表示不是。
           */
          TStyle.prototype.isMutable = function() {
            return style_is_mutable(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取 style 的风格类型。
           *
           *
           * @returns 返回风格类型。
           */
          TStyle.prototype.getStyleType = function() {
            return style_get_style_type(
              this != null ? this.nativeObj || this : null
            );
          };
          return TStyle;
        })();
        exports.TStyle = TStyle;
        /**
         * 窗体样式。
         *
         *负责管理缺省的窗体样式数据，方便实现style\_const。
         *
         */
        var TTheme = /** @class */ (function() {
          function TTheme(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 获取缺省的窗体样式对象。
           *
           *
           * @returns 返回窗体样式对象。
           */
          TTheme.instance = function() {
            return new TTheme(theme());
          };
          return TTheme;
        })();
        exports.TTheme = TTheme;
        /**
         * 定时器系统。
         *
         *> 本定时器精度较低，最高精度为1000/FPS，如果需要高精度的定时器，请用OS提供的定时器。
         *
         *示例：
         *
         *> 在非GUI线程请用timer\_queue。
         *
         */
        var TTimer = /** @class */ (function() {
          function TTimer() {}
          /**
           * 增加一个timer。
           *
           * @param on_timer timer回调函数。
           * @param ctx timer回调函数的上下文。
           * @param duration 时间。
           *
           * @returns 返回timer的ID，TK_INVALID_ID表示失败。
           */
          TTimer.add = function(on_timer, ctx, duration) {
            return timer_add(
              TBrowser.addFunction(on_timer, 'ii'),
              ctx,
              duration
            );
          };
          /**
           * 删除指定的timer。
           *
           * @param timer_id timerID。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimer.remove = function(timer_id) {
            return timer_remove(timer_id);
          };
          /**
           * 根据上下文删除所有对应的timer。
           *
           * @param ctx timer回调函数的上下文。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimer.removeAllByCtx = function(ctx) {
            return timer_remove_all_by_ctx(ctx);
          };
          /**
           * 重置指定的timer，重置之后定时器重新开始计时。
           *
           * @param timer_id timerID。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimer.reset = function(timer_id) {
            return timer_reset(timer_id);
          };
          /**
           * 挂起指定的timer，一般用于不断循环触发的计时器。
           *
           * @param timer_id timerID。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimer.suspend = function(timer_id) {
            return timer_suspend(timer_id);
          };
          /**
           * 唤醒挂起指定的timer，并且重置定时器重新开始计时
           *
           * @param timer_id timerID。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimer.resume = function(timer_id) {
            return timer_resume(timer_id);
          };
          /**
           * 修改指定的timer的duration，修改之后定时器重新开始计时。
           *
           * @param timer_id timerID。
           * @param duration 新的时间。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimer.modify = function(timer_id, duration) {
            return timer_modify(timer_id, duration);
          };
          return TTimer;
        })();
        exports.TTimer = TTimer;
        /**
         * 垂直对齐的常量定义。
         *
         */
        var TAlignV;
        (function(TAlignV) {
          /**
           * 无效对齐方式。
           *
           */
          TAlignV[(TAlignV['NONE'] = ALIGN_V_NONE())] = 'NONE';
          /**
           * 居中对齐。
           *
           */
          TAlignV[(TAlignV['MIDDLE'] = ALIGN_V_MIDDLE())] = 'MIDDLE';
          /**
           * 顶部对齐。
           *
           */
          TAlignV[(TAlignV['TOP'] = ALIGN_V_TOP())] = 'TOP';
          /**
           * 底部对齐。
           *
           */
          TAlignV[(TAlignV['BOTTOM'] = ALIGN_V_BOTTOM())] = 'BOTTOM';
        })((TAlignV = exports.TAlignV || (exports.TAlignV = {})));
        /**
         * 水平对齐的常量定义。
         *
         */
        var TAlignH;
        (function(TAlignH) {
          /**
           * 无效对齐方式。
           *
           */
          TAlignH[(TAlignH['NONE'] = ALIGN_H_NONE())] = 'NONE';
          /**
           * 居中对齐。
           *
           */
          TAlignH[(TAlignH['CENTER'] = ALIGN_H_CENTER())] = 'CENTER';
          /**
           * 左边对齐。
           *
           */
          TAlignH[(TAlignH['LEFT'] = ALIGN_H_LEFT())] = 'LEFT';
          /**
           * 右边对齐。
           *
           */
          TAlignH[(TAlignH['RIGHT'] = ALIGN_H_RIGHT())] = 'RIGHT';
        })((TAlignH = exports.TAlignH || (exports.TAlignH = {})));
        /**
         * 应用程序类型。
         *
         */
        var TAppType;
        (function(TAppType) {
          /**
           * 嵌入式或移动APP
           *
           */
          TAppType[(TAppType['MOBILE'] = APP_MOBILE())] = 'MOBILE';
          /**
           * 模拟器。
           *
           */
          TAppType[(TAppType['SIMULATOR'] = APP_SIMULATOR())] = 'SIMULATOR';
          /**
           * 桌面应用程序。
           *
           */
          TAppType[(TAppType['DESKTOP'] = APP_DESKTOP())] = 'DESKTOP';
        })((TAppType = exports.TAppType || (exports.TAppType = {})));
        /**
         * 位图格式常量定义。
         *
         */
        var TBitmapFormat;
        (function(TBitmapFormat) {
          /**
           * 无效格式。
           *
           */
          TBitmapFormat[(TBitmapFormat['NONE'] = BITMAP_FMT_NONE())] = 'NONE';
          /**
           * 一个像素占用4个字节，RGBA占一个字节，按内存地址递增。
           *
           */
          TBitmapFormat[(TBitmapFormat['RGBA8888'] = BITMAP_FMT_RGBA8888())] =
            'RGBA8888';
          /**
           * 一个像素占用4个字节，ABGR占一个字节，按内存地址递增。
           *
           */
          TBitmapFormat[(TBitmapFormat['ABGR8888'] = BITMAP_FMT_ABGR8888())] =
            'ABGR8888';
          /**
           * 一个像素占用4个字节，BGRA占一个字节，按内存地址递增。
           *
           */
          TBitmapFormat[(TBitmapFormat['BGRA8888'] = BITMAP_FMT_BGRA8888())] =
            'BGRA8888';
          /**
           * 一个像素占用4个字节，ARGB占一个字节，按内存地址递增。
           *
           */
          TBitmapFormat[(TBitmapFormat['ARGB8888'] = BITMAP_FMT_ARGB8888())] =
            'ARGB8888';
          /**
           * 一个像素占用2个字节，RGB分别占用5,6,5位, 按内存地址递增。
           *
           */
          TBitmapFormat[(TBitmapFormat['RGB565'] = BITMAP_FMT_RGB565())] =
            'RGB565';
          /**
           * 一个像素占用2个字节，BGR分别占用5,6,5位, 按内存地址递增。
           *
           */
          TBitmapFormat[(TBitmapFormat['BGR565'] = BITMAP_FMT_BGR565())] =
            'BGR565';
          /**
           * 一个像素占用3个字节，RGB占一个字节，按内存地址递增。
           *
           */
          TBitmapFormat[(TBitmapFormat['RGB888'] = BITMAP_FMT_RGB888())] =
            'RGB888';
          /**
           * 一个像素占用3个字节，RGB占一个字节，按内存地址递增。
           *
           */
          TBitmapFormat[(TBitmapFormat['BGR888'] = BITMAP_FMT_BGR888())] =
            'BGR888';
          /**
           * 一个像素占用1个字节。
           *
           */
          TBitmapFormat[(TBitmapFormat['GRAY'] = BITMAP_FMT_GRAY())] = 'GRAY';
          /**
           * 一个像素占用1比特。
           *
           */
          TBitmapFormat[(TBitmapFormat['MONO'] = BITMAP_FMT_MONO())] = 'MONO';
        })(
          (TBitmapFormat =
            exports.TBitmapFormat || (exports.TBitmapFormat = {}))
        );
        /**
         * 位图标志常量定义。
         *
         */
        var TBitmapFlag;
        (function(TBitmapFlag) {
          /**
           * 无特殊标志。
           *
           */
          TBitmapFlag[(TBitmapFlag['NONE'] = BITMAP_FLAG_NONE())] = 'NONE';
          /**
           * 不透明图片。
           *
           */
          TBitmapFlag[(TBitmapFlag['OPAQUE'] = BITMAP_FLAG_OPAQUE())] =
            'OPAQUE';
          /**
           * 图片内容不会变化。
           *
           */
          TBitmapFlag[(TBitmapFlag['IMMUTABLE'] = BITMAP_FLAG_IMMUTABLE())] =
            'IMMUTABLE';
          /**
           * OpenGL Texture, bitmap的id是有效的texture id。
           *
           */
          TBitmapFlag[(TBitmapFlag['TEXTURE'] = BITMAP_FLAG_TEXTURE())] =
            'TEXTURE';
          /**
           * 如果是MUTABLE的图片，更新时需要设置此标志，底层可能会做特殊处理，比如更新图片到GPU。
           *
           */
          TBitmapFlag[(TBitmapFlag['CHANGED'] = BITMAP_FLAG_CHANGED())] =
            'CHANGED';
          /**
           * 预乘alpha。
           *
           */
          TBitmapFlag[
            (TBitmapFlag['PREMULTI_ALPHA'] = BITMAP_FLAG_PREMULTI_ALPHA())
          ] = 'PREMULTI_ALPHA';
        })((TBitmapFlag = exports.TBitmapFlag || (exports.TBitmapFlag = {})));
        /**
         * 矢量图画布抽象基类。
         *
         *具体实现时可以使用agg，nanovg, cairo和skia等方式。
         *
         *cairo和skia体积太大，不适合嵌入式平台，但在PC平台也是一种选择。
         *
         *目前我们只提供了基于nanovg的实现，支持软件渲染和硬件渲染。
         *
         *我们对nanovg进行了一些改进:
         *
         ** 可以用agg/agge实现软件渲染(暂时不支持文本绘制)。
         *
         ** 可以用bgfx使用DirectX(Windows平台)和Metal(iOS)平台硬件加速。
         *
         *
         *
         *示例：
         *
         *
         *>请参考：https://www.w3schools.com/tags/ref_canvas.asp
         *
         */
        var TVgcanvas = /** @class */ (function() {
          function TVgcanvas(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 转换为vgcanvas对象(供脚本语言使用)。
           *
           * @param vg vgcanvas对象。
           *
           * @returns vgcanvas对象。
           */
          TVgcanvas.cast = function(vg) {
            return new TVgcanvas(
              vgcanvas_cast(vg != null ? vg.nativeObj || vg : null)
            );
          };
          /**
           * flush
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.flush = function() {
            return vgcanvas_flush(this != null ? this.nativeObj || this : null);
          };
          /**
           * 清除之前的路径，并重新开始一条路径。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.beginPath = function() {
            return vgcanvas_begin_path(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 移动当前点到指定点。
           *
           * @param x x坐标。
           * @param y y坐标。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.moveTo = function(x, y) {
            return vgcanvas_move_to(
              this != null ? this.nativeObj || this : null,
              x,
              y
            );
          };
          /**
           * 生成一条线段(从当前点到目标点)。
           *
           * @param x x坐标。
           * @param y y坐标。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.lineTo = function(x, y) {
            return vgcanvas_line_to(
              this != null ? this.nativeObj || this : null,
              x,
              y
            );
          };
          /**
           * 生成一条二次贝塞尔曲线。
           *
           * @param cpx 控制点x坐标。
           * @param cpy 控制点y坐标。
           * @param x x坐标。
           * @param y y坐标。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.quadTo = function(cpx, cpy, x, y) {
            return vgcanvas_quad_to(
              this != null ? this.nativeObj || this : null,
              cpx,
              cpy,
              x,
              y
            );
          };
          /**
           * 生成一条三次贝塞尔曲线。
           *
           * @param cp1x 控制点1x坐标。
           * @param cp1y 控制点1y坐标。
           * @param cp2x 控制点2x坐标。
           * @param cp2y 控制点3y坐标。
           * @param x x坐标。
           * @param y y坐标。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.bezierTo = function(
            cp1x,
            cp1y,
            cp2x,
            cp2y,
            x,
            y
          ) {
            return vgcanvas_bezier_to(
              this != null ? this.nativeObj || this : null,
              cp1x,
              cp1y,
              cp2x,
              cp2y,
              x,
              y
            );
          };
          /**
           * 生成一条圆弧路径到指定点。
           *
           * @param x1 起始点x坐标。
           * @param y1 起始点y坐标。
           * @param x2 结束点x坐标。
           * @param y2 结束点y坐标。
           * @param r 半径。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.arcTo = function(x1, y1, x2, y2, r) {
            return vgcanvas_arc_to(
              this != null ? this.nativeObj || this : null,
              x1,
              y1,
              x2,
              y2,
              r
            );
          };
          /**
           * 生成一条圆弧。
           *
           * @param x 原点x坐标。
           * @param y 原点y坐标。
           * @param r 半径。
           * @param start_angle 起始角度。
           * @param end_angle 结束角度。
           * @param ccw 是否逆时针。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.arc = function(
            x,
            y,
            r,
            start_angle,
            end_angle,
            ccw
          ) {
            return vgcanvas_arc(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              r,
              start_angle,
              end_angle,
              ccw
            );
          };
          /**
           * 检查点是否在当前路径中。
           *
           * @param x x坐标。
           * @param y y坐标。
           *
           * @returns 返回TRUE表示在，否则表示不在。
           */
          TVgcanvas.prototype.isPointInPath = function(x, y) {
            return vgcanvas_is_point_in_path(
              this != null ? this.nativeObj || this : null,
              x,
              y
            );
          };
          /**
           * 生成一个矩形路径。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.rect = function(x, y, w, h) {
            return vgcanvas_rect(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h
            );
          };
          /**
           * 生成一个圆角矩形路径。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           * @param r 圆角半径。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.roundedRect = function(x, y, w, h, r) {
            return vgcanvas_rounded_rect(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h,
              r
            );
          };
          /**
           * 生成一个椭圆路径。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param rx 圆角半径。
           * @param ry 圆角半径。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.ellipse = function(x, y, rx, ry) {
            return vgcanvas_ellipse(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              rx,
              ry
            );
          };
          /**
           * 闭合路径。
           *
           *>闭合路径是指把起点和终点连接起来，形成一个封闭的多边形。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.closePath = function() {
            return vgcanvas_close_path(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置路径填充实心与否。
           *
           *>CCW(1)为实心，CW(2)为镂空，设置其他则默认根据非零环绕规则判断(nonzero)。
           *
           * @param dir 填充方法。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.pathWinding = function(dir) {
            return vgcanvas_path_winding(
              this != null ? this.nativeObj || this : null,
              dir
            );
          };
          /**
           * 旋转。
           *
           * @param rad 角度
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.rotate = function(rad) {
            return vgcanvas_rotate(
              this != null ? this.nativeObj || this : null,
              rad
            );
          };
          /**
           * 缩放。
           *
           * @param x x方向缩放比例。
           * @param y y方向缩放比例。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.scale = function(x, y) {
            return vgcanvas_scale(
              this != null ? this.nativeObj || this : null,
              x,
              y
            );
          };
          /**
           * 平移。
           *
           * @param x x方向偏移。
           * @param y y方向偏移。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.translate = function(x, y) {
            return vgcanvas_translate(
              this != null ? this.nativeObj || this : null,
              x,
              y
            );
          };
          /**
           * 变换矩阵。
           *
           * @param a a
           * @param b b
           * @param c c
           * @param d d
           * @param e e
           * @param f f
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.transform = function(a, b, c, d, e, f) {
            return vgcanvas_transform(
              this != null ? this.nativeObj || this : null,
              a,
              b,
              c,
              d,
              e,
              f
            );
          };
          /**
           * 设置变换矩阵。
           *
           * @param a a
           * @param b b
           * @param c c
           * @param d d
           * @param e e
           * @param f f
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setTransform = function(a, b, c, d, e, f) {
            return vgcanvas_set_transform(
              this != null ? this.nativeObj || this : null,
              a,
              b,
              c,
              d,
              e,
              f
            );
          };
          /**
           * 使用当前的path裁剪。
           *>目前只有部分backend支持(如cairo)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.clipPath = function() {
            return vgcanvas_clip_path(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 矩形裁剪。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.clipRect = function(x, y, w, h) {
            return vgcanvas_clip_rect(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h
            );
          };
          /**
           * 设置一个与前一个裁剪区做交集的矩形裁剪区。
           *如果下面这种情况，则不能直接调用 rect_intersect 函数来做矩形交集和 vgcanvas_clip_rect 函数设置裁剪区，而采用本函数做交集。
           *由于缩放和旋转以及平移会导致 vg 的坐标系和上一个裁剪区的坐标系不同，
           *导致直接使用做交集的话，裁剪区会出错。
           *
           *```
           *vgcanvas_clip_rect(vg, old_r.x, old_r.y, old_r.w, old_r.h);
           *vgcanvas_save(vg);
           *vgcanvas_scale(vg, scale_x, scale_y);
           *vgcanvas_rotate(vg, TK_D2R(15));
           *vgcanvas_intersect_clip_rect(vg, r.x, r.y, r.w, r.h);
           *..................
           *vgcanvas_restore(vg);
           *```
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param w 宽度。
           * @param h 高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.intersectClipRect = function(x, y, w, h) {
            return vgcanvas_intersect_clip_rect(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h
            );
          };
          /**
           * 填充多边形。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.fill = function() {
            return vgcanvas_fill(this != null ? this.nativeObj || this : null);
          };
          /**
           * 画线。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.stroke = function() {
            return vgcanvas_stroke(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 用图片填充/画多边形(可能存在可移植性问题，除非必要请勿使用)。
           *多边形的顶点必须在图片范围内，可以通过矩阵变化画到不同的位置。
           *
           * @param stroke TRUE表示画线FALSE表示填充。
           * @param img 图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.paint = function(stroke, img) {
            return vgcanvas_paint(
              this != null ? this.nativeObj || this : null,
              stroke,
              img != null ? img.nativeObj || img : null
            );
          };
          /**
           * 设置字体的名称。
           *
           * @param font 字体名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setFont = function(font) {
            return vgcanvas_set_font(
              this != null ? this.nativeObj || this : null,
              font
            );
          };
          /**
           * 设置字体的大小。
           *
           * @param font 字体大小。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setFontSize = function(font) {
            return vgcanvas_set_font_size(
              this != null ? this.nativeObj || this : null,
              font
            );
          };
          /**
           * 设置文本水平对齐的方式。
           *
           * @param value 取值：left|center|right，必须为常量字符串。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setTextAlign = function(value) {
            return vgcanvas_set_text_align(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置文本垂直对齐的方式。
           *
           * @param value 取值：top|middle|bottom，必须为常量字符串。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setTextBaseline = function(value) {
            return vgcanvas_set_text_baseline(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 绘制文本。
           *
           * @param text text
           * @param x x坐标。
           * @param y y坐标。
           * @param max_width 最大宽度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.fillText = function(text, x, y, max_width) {
            return vgcanvas_fill_text(
              this != null ? this.nativeObj || this : null,
              text,
              x,
              y,
              max_width
            );
          };
          /**
           * 测量文本的宽度。
           *
           * @param text text
           *
           * @returns 返回text的宽度。
           */
          TVgcanvas.prototype.measureText = function(text) {
            return vgcanvas_measure_text(
              this != null ? this.nativeObj || this : null,
              text
            );
          };
          /**
           * 绘制图片。
           *
           * @param img 图片。
           * @param sx sx
           * @param sy sy
           * @param sw sw
           * @param sh sh
           * @param dx dx
           * @param dy dy
           * @param dw dw
           * @param dh dh
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.drawImage = function(
            img,
            sx,
            sy,
            sw,
            sh,
            dx,
            dy,
            dw,
            dh
          ) {
            return vgcanvas_draw_image(
              this != null ? this.nativeObj || this : null,
              img != null ? img.nativeObj || img : null,
              sx,
              sy,
              sw,
              sh,
              dx,
              dy,
              dw,
              dh
            );
          };
          /**
           * 绘制图标。
           *
           *绘制图标时会根据屏幕密度进行自动缩放，而绘制普通图片时不会。
           *
           * @param img 图片。
           * @param sx sx
           * @param sy sy
           * @param sw sw
           * @param sh sh
           * @param dx dx
           * @param dy dy
           * @param dw dw
           * @param dh dh
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.drawIcon = function(
            img,
            sx,
            sy,
            sw,
            sh,
            dx,
            dy,
            dw,
            dh
          ) {
            return vgcanvas_draw_icon(
              this != null ? this.nativeObj || this : null,
              img != null ? img.nativeObj || img : null,
              sx,
              sy,
              sw,
              sh,
              dx,
              dy,
              dw,
              dh
            );
          };
          /**
           * 设置是否启用反走样。
           *
           * @param value 是否启用反走样。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setAntialias = function(value) {
            return vgcanvas_set_antialias(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置全局透明度。
           *
           * @param alpha global alpha。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setGlobalAlpha = function(alpha) {
            return vgcanvas_set_global_alpha(
              this != null ? this.nativeObj || this : null,
              alpha
            );
          };
          /**
           * 设置线条的宽度。
           *
           * @param value 线宽。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setLineWidth = function(value) {
            return vgcanvas_set_line_width(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置填充颜色。
           *
           * @param color 颜色。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setFillColor = function(color) {
            return vgcanvas_set_fill_color_str(
              this != null ? this.nativeObj || this : null,
              color
            );
          };
          /**
           * 设置线条颜色。
           *
           * @param color 颜色。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setStrokeColor = function(color) {
            return vgcanvas_set_stroke_color_str(
              this != null ? this.nativeObj || this : null,
              color
            );
          };
          /**
           * 设置line cap。
           *
           * @param value 取值：butt|round|square，必须为常量字符串。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setLineCap = function(value) {
            return vgcanvas_set_line_cap(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置line join。
           *
           * @param value 取值：bevel|round|miter，必须为常量字符串。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setLineJoin = function(value) {
            return vgcanvas_set_line_join(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置miter limit。
           *
           * @param value miter limit
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.setMiterLimit = function(value) {
            return vgcanvas_set_miter_limit(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 保存当前的状态。如颜色和矩阵等信息。
           *
           *> save/restore必须配套使用，否则可能导致状态混乱。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.save = function() {
            return vgcanvas_save(this != null ? this.nativeObj || this : null);
          };
          /**
           * 恢复上次save的状态。
           *
           *> save/restore必须配套使用，否则可能导致状态混乱。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVgcanvas.prototype.restore = function() {
            return vgcanvas_restore(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TVgcanvas.prototype, 'w', {
            /**
             * canvas的宽度
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_w(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'h', {
            /**
             * canvas的高度
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_h(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'stride', {
            /**
             * 一行占的字节
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_stride(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'ratio', {
            /**
             * 显示比例。
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_ratio(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'antiAlias', {
            /**
             * 是否启用反走样功能。
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_anti_alias(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'lineWidth', {
            /**
             * 线宽。
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_line_width(this.nativeObj);
            },
            set: function(v) {
              this.setLineWidth(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'globalAlpha', {
            /**
             * 全局alpha。
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_global_alpha(this.nativeObj);
            },
            set: function(v) {
              this.setGlobalAlpha(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'miterLimit', {
            /**
             * miter\_limit。
             *@see http://www.w3school.com.cn/tags/canvas_miterlimit.asp
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_miter_limit(this.nativeObj);
            },
            set: function(v) {
              this.setMiterLimit(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'lineCap', {
            /**
             * line\_cap。
             *@see http://www.w3school.com.cn/tags/canvas_linecap.asp
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_line_cap(this.nativeObj);
            },
            set: function(v) {
              this.setLineCap(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'lineJoin', {
            /**
             * line\_join。
             *@see http://www.w3school.com.cn/tags/canvas_linejoin.asp
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_line_join(this.nativeObj);
            },
            set: function(v) {
              this.setLineJoin(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'font', {
            /**
             * 字体。
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_font(this.nativeObj);
            },
            set: function(v) {
              this.setFont(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'fontSize', {
            /**
             * 字体大小。
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_font_size(this.nativeObj);
            },
            set: function(v) {
              this.setFontSize(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'textAlign', {
            /**
             * 文本对齐方式。
             *
             *@see http://www.w3school.com.cn/tags/canvas_textalign.asp
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_text_align(this.nativeObj);
            },
            set: function(v) {
              this.setTextAlign(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVgcanvas.prototype, 'textBaseline', {
            /**
             * 文本基线。
             *
             *@see http://www.w3school.com.cn/tags/canvas_textbaseline.asp
             *
             */
            get: function() {
              return vgcanvas_t_get_prop_text_baseline(this.nativeObj);
            },
            set: function(v) {
              this.setTextBaseline(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TVgcanvas;
        })();
        exports.TVgcanvas = TVgcanvas;
        /**
         * 线帽类型。
         *
         */
        var TVgcanvasLineCap;
        (function(TVgcanvasLineCap) {
          /**
           * 圆头。
           *
           */
          TVgcanvasLineCap[
            (TVgcanvasLineCap['ROUND'] = VGCANVAS_LINE_CAP_ROUND())
          ] = 'ROUND';
          /**
           * 方头。
           *
           */
          TVgcanvasLineCap[
            (TVgcanvasLineCap['SQUARE'] = VGCANVAS_LINE_CAP_SQUARE())
          ] = 'SQUARE';
          /**
           * 平头。
           *
           */
          TVgcanvasLineCap[
            (TVgcanvasLineCap['BUTT'] = VGCANVAS_LINE_CAP_BUTT())
          ] = 'BUTT';
        })(
          (TVgcanvasLineCap =
            exports.TVgcanvasLineCap || (exports.TVgcanvasLineCap = {}))
        );
        /**
         * 线条连接类型。
         *
         */
        var TVgcanvasLineJoin;
        (function(TVgcanvasLineJoin) {
          /**
           * round。
           *
           */
          TVgcanvasLineJoin[
            (TVgcanvasLineJoin['ROUND'] = VGCANVAS_LINE_JOIN_ROUND())
          ] = 'ROUND';
          /**
           * bevel。
           *
           */
          TVgcanvasLineJoin[
            (TVgcanvasLineJoin['BEVEL'] = VGCANVAS_LINE_JOIN_BEVEL())
          ] = 'BEVEL';
          /**
           * mitter。
           *
           */
          TVgcanvasLineJoin[
            (TVgcanvasLineJoin['MITTER'] = VGCANVAS_LINE_JOIN_MITTER())
          ] = 'MITTER';
        })(
          (TVgcanvasLineJoin =
            exports.TVgcanvasLineJoin || (exports.TVgcanvasLineJoin = {}))
        );
        /**
         * 控件的属性。
         *
         */
        var TWidgetProp;
        (function(TWidgetProp) {
          /**
           * 用于执行某些特殊的命令（比如控制动画的启停），主要是方便MVVM通过属性来控制动画。
           *
           */
          TWidgetProp[(TWidgetProp['EXEC'] = WIDGET_PROP_EXEC())] = 'EXEC';
          /**
           * X坐标。
           *
           */
          TWidgetProp[(TWidgetProp['X'] = WIDGET_PROP_X())] = 'X';
          /**
           * Y坐标。
           *
           */
          TWidgetProp[(TWidgetProp['Y'] = WIDGET_PROP_Y())] = 'Y';
          /**
           * 宽度。
           *
           */
          TWidgetProp[(TWidgetProp['W'] = WIDGET_PROP_W())] = 'W';
          /**
           * 高度。
           *
           */
          TWidgetProp[(TWidgetProp['H'] = WIDGET_PROP_H())] = 'H';
          /**
           * 最大高度。
           *
           */
          TWidgetProp[(TWidgetProp['MAX_H'] = WIDGET_PROP_MAX_H())] = 'MAX_H';
          /**
           * 窗口设计时宽度。
           *
           */
          TWidgetProp[(TWidgetProp['DESIGN_W'] = WIDGET_PROP_DESIGN_W())] =
            'DESIGN_W';
          /**
           * 窗口设计时宽度。
           *
           */
          TWidgetProp[(TWidgetProp['DESIGN_H'] = WIDGET_PROP_DESIGN_H())] =
            'DESIGN_H';
          /**
           * 窗口大小与设计时大小不同时，是否自动调整子控件的x坐标。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'AUTO_SCALE_CHILDREN_X'
            ] = WIDGET_PROP_AUTO_SCALE_CHILDREN_X())
          ] = 'AUTO_SCALE_CHILDREN_X';
          /**
           * 窗口大小与设计时大小不同时，是否自动调整子控件的y坐标。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'AUTO_SCALE_CHILDREN_Y'
            ] = WIDGET_PROP_AUTO_SCALE_CHILDREN_Y())
          ] = 'AUTO_SCALE_CHILDREN_Y';
          /**
           * 窗口大小与设计时大小不同时，是否自动调整子控件的宽度。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'AUTO_SCALE_CHILDREN_W'
            ] = WIDGET_PROP_AUTO_SCALE_CHILDREN_W())
          ] = 'AUTO_SCALE_CHILDREN_W';
          /**
           * 窗口大小与设计时大小不同时，是否自动调整子控件的高度。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'AUTO_SCALE_CHILDREN_H'
            ] = WIDGET_PROP_AUTO_SCALE_CHILDREN_H())
          ] = 'AUTO_SCALE_CHILDREN_H';
          /**
           * inputing。
           *
           */
          TWidgetProp[(TWidgetProp['INPUTING'] = WIDGET_PROP_INPUTING())] =
            'INPUTING';
          /**
           * always on top。
           *
           */
          TWidgetProp[
            (TWidgetProp['ALWAYS_ON_TOP'] = WIDGET_PROP_ALWAYS_ON_TOP())
          ] = 'ALWAYS_ON_TOP';
          /**
           * caret x。
           *
           */
          TWidgetProp[(TWidgetProp['CARET_X'] = WIDGET_PROP_CARET_X())] =
            'CARET_X';
          /**
           * caret y。
           *
           */
          TWidgetProp[(TWidgetProp['CARET_Y'] = WIDGET_PROP_CARET_Y())] =
            'CARET_Y';
          /**
           * 脏矩形超出控件本身大小的最大范围。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'DIRTY_RECT_TOLERANCE'
            ] = WIDGET_PROP_DIRTY_RECT_TOLERANCE())
          ] = 'DIRTY_RECT_TOLERANCE';
          /**
           * bidi type(rtl,ltr,auto,wrtl,wltr,lro,rlo)。
           *
           */
          TWidgetProp[(TWidgetProp['BIDI'] = WIDGET_PROP_BIDI())] = 'BIDI';
          /**
           * Canvas。
           *
           */
          TWidgetProp[(TWidgetProp['CANVAS'] = WIDGET_PROP_CANVAS())] =
            'CANVAS';
          /**
           * Canvas。
           *
           */
          TWidgetProp[
            (TWidgetProp['LOCALIZE_OPTIONS'] = WIDGET_PROP_LOCALIZE_OPTIONS())
          ] = 'LOCALIZE_OPTIONS';
          /**
           * Native Window。
           *
           */
          TWidgetProp[
            (TWidgetProp['NATIVE_WINDOW'] = WIDGET_PROP_NATIVE_WINDOW())
          ] = 'NATIVE_WINDOW';
          /**
           * dialog highlight。
           *
           */
          TWidgetProp[(TWidgetProp['HIGHLIGHT'] = WIDGET_PROP_HIGHLIGHT())] =
            'HIGHLIGHT';
          /**
           * slider中的bar的的宽度或高度。
           *
           */
          TWidgetProp[(TWidgetProp['BAR_SIZE'] = WIDGET_PROP_BAR_SIZE())] =
            'BAR_SIZE';
          /**
           * 不透明度。
           *
           */
          TWidgetProp[(TWidgetProp['OPACITY'] = WIDGET_PROP_OPACITY())] =
            'OPACITY';
          /**
           * 最小宽度。
           *
           */
          TWidgetProp[(TWidgetProp['MIN_W'] = WIDGET_PROP_MIN_W())] = 'MIN_W';
          /**
           * 最大宽度。
           *
           */
          TWidgetProp[(TWidgetProp['MAX_W'] = WIDGET_PROP_MAX_W())] = 'MAX_W';
          /**
           * 根据子控件和文本自动调整大小。
           *
           */
          TWidgetProp[
            (TWidgetProp['AUTO_ADJUST_SIZE'] = WIDGET_PROP_AUTO_ADJUST_SIZE())
          ] = 'AUTO_ADJUST_SIZE';
          /**
           * 窗口是否保持单例。
           *
           */
          TWidgetProp[
            (TWidgetProp['SINGLE_INSTANCE'] = WIDGET_PROP_SINGLE_INSTANCE())
          ] = 'SINGLE_INSTANCE';
          /**
           * 点击非focusable控件时，是否让当前焦点控件失去焦点。比如点击窗口空白区域，是否让编辑器失去焦点。
           *
           */
          TWidgetProp[
            (TWidgetProp['STRONGLY_FOCUS'] = WIDGET_PROP_STRONGLY_FOCUS())
          ] = 'STRONGLY_FOCUS';
          /**
           * 子控件布局参数。
           *
           */
          TWidgetProp[
            (TWidgetProp['CHILDREN_LAYOUT'] = WIDGET_PROP_CHILDREN_LAYOUT())
          ] = 'CHILDREN_LAYOUT';
          /**
           * 子控件布局参数(过时)。
           *
           */
          TWidgetProp[(TWidgetProp['LAYOUT'] = WIDGET_PROP_LAYOUT())] =
            'LAYOUT';
          /**
           * 控件布局参数。
           *
           */
          TWidgetProp[
            (TWidgetProp['SELF_LAYOUT'] = WIDGET_PROP_SELF_LAYOUT())
          ] = 'SELF_LAYOUT';
          /**
           * layout宽度。
           *
           */
          TWidgetProp[(TWidgetProp['LAYOUT_W'] = WIDGET_PROP_LAYOUT_W())] =
            'LAYOUT_W';
          /**
           * layout高度。
           *
           */
          TWidgetProp[(TWidgetProp['LAYOUT_H'] = WIDGET_PROP_LAYOUT_H())] =
            'LAYOUT_H';
          /**
           * 虚拟宽度。
           *
           */
          TWidgetProp[(TWidgetProp['VIRTUAL_W'] = WIDGET_PROP_VIRTUAL_W())] =
            'VIRTUAL_W';
          /**
           * 虚拟高度。
           *
           */
          TWidgetProp[(TWidgetProp['VIRTUAL_H'] = WIDGET_PROP_VIRTUAL_H())] =
            'VIRTUAL_H';
          /**
           * 名称。
           *
           */
          TWidgetProp[(TWidgetProp['NAME'] = WIDGET_PROP_NAME())] = 'NAME';
          /**
           * 类型。
           *
           */
          TWidgetProp[(TWidgetProp['TYPE'] = WIDGET_PROP_TYPE())] = 'TYPE';
          /**
           * 是否可以关闭。
           *
           */
          TWidgetProp[(TWidgetProp['CLOSABLE'] = WIDGET_PROP_CLOSABLE())] =
            'CLOSABLE';
          /**
           * 鼠标指针。
           *
           */
          TWidgetProp[
            (TWidgetProp['POINTER_CURSOR'] = WIDGET_PROP_POINTER_CURSOR())
          ] = 'POINTER_CURSOR';
          /**
           * 值。
           *
           */
          TWidgetProp[(TWidgetProp['VALUE'] = WIDGET_PROP_VALUE())] = 'VALUE';
          /**
           * CheckButton是否单选。
           *
           */
          TWidgetProp[(TWidgetProp['RADIO'] = WIDGET_PROP_RADIO())] = 'RADIO';
          /**
           * 进度条反向显示。
           *
           */
          TWidgetProp[(TWidgetProp['REVERSE'] = WIDGET_PROP_REVERSE())] =
            'REVERSE';
          /**
           * 长度。
           *
           */
          TWidgetProp[(TWidgetProp['LENGTH'] = WIDGET_PROP_LENGTH())] =
            'LENGTH';
          /**
           * 自动换行。
           *
           */
          TWidgetProp[(TWidgetProp['LINE_WRAP'] = WIDGET_PROP_LINE_WRAP())] =
            'LINE_WRAP';
          /**
           * 是否允许单词中换行。
           *
           */
          TWidgetProp[(TWidgetProp['WORD_WRAP'] = WIDGET_PROP_WORD_WRAP())] =
            'WORD_WRAP';
          /**
           * 文本。
           *
           */
          TWidgetProp[(TWidgetProp['TEXT'] = WIDGET_PROP_TEXT())] = 'TEXT';
          /**
           * 待翻译文本。
           *
           */
          TWidgetProp[(TWidgetProp['TR_TEXT'] = WIDGET_PROP_TR_TEXT())] =
            'TR_TEXT';
          /**
           * style。
           *
           */
          TWidgetProp[(TWidgetProp['STYLE'] = WIDGET_PROP_STYLE())] = 'STYLE';
          /**
           * 是否启用。
           *
           */
          TWidgetProp[(TWidgetProp['ENABLE'] = WIDGET_PROP_ENABLE())] =
            'ENABLE';
          /**
           * 是否启用按键音等反馈。
           *
           */
          TWidgetProp[(TWidgetProp['FEEDBACK'] = WIDGET_PROP_FEEDBACK())] =
            'FEEDBACK';
          /**
           * 是否启用floating布局。
           *
           */
          TWidgetProp[(TWidgetProp['FLOATING'] = WIDGET_PROP_FLOATING())] =
            'FLOATING';
          /**
           * 边距。
           *
           */
          TWidgetProp[(TWidgetProp['MARGIN'] = WIDGET_PROP_MARGIN())] =
            'MARGIN';
          /**
           * 间距。
           *
           */
          TWidgetProp[(TWidgetProp['SPACING'] = WIDGET_PROP_SPACING())] =
            'SPACING';
          /**
           * 左边距。
           *
           */
          TWidgetProp[
            (TWidgetProp['LEFT_MARGIN'] = WIDGET_PROP_LEFT_MARGIN())
          ] = 'LEFT_MARGIN';
          /**
           * 右边距。
           *
           */
          TWidgetProp[
            (TWidgetProp['RIGHT_MARGIN'] = WIDGET_PROP_RIGHT_MARGIN())
          ] = 'RIGHT_MARGIN';
          /**
           * 顶边距。
           *
           */
          TWidgetProp[(TWidgetProp['TOP_MARGIN'] = WIDGET_PROP_TOP_MARGIN())] =
            'TOP_MARGIN';
          /**
           * 底边距。
           *
           */
          TWidgetProp[
            (TWidgetProp['BOTTOM_MARGIN'] = WIDGET_PROP_BOTTOM_MARGIN())
          ] = 'BOTTOM_MARGIN';
          /**
           * 步长。
           *
           */
          TWidgetProp[(TWidgetProp['STEP'] = WIDGET_PROP_STEP())] = 'STEP';
          /**
           * 是否可见。
           *
           */
          TWidgetProp[(TWidgetProp['VISIBLE'] = WIDGET_PROP_VISIBLE())] =
            'VISIBLE';
          /**
           * 是否接受用户事件。
           *
           */
          TWidgetProp[(TWidgetProp['SENSITIVE'] = WIDGET_PROP_SENSITIVE())] =
            'SENSITIVE';
          /**
           * 控件动画。
           *
           */
          TWidgetProp[(TWidgetProp['ANIMATION'] = WIDGET_PROP_ANIMATION())] =
            'ANIMATION';
          /**
           * 窗口动画。
           *
           */
          TWidgetProp[(TWidgetProp['ANIM_HINT'] = WIDGET_PROP_ANIM_HINT())] =
            'ANIM_HINT';
          /**
           * 窗口设置为全部大小。
           *
           */
          TWidgetProp[(TWidgetProp['FULLSCREEN'] = WIDGET_PROP_FULLSCREEN())] =
            'FULLSCREEN';
          /**
           * 禁用窗口动画。
           *
           */
          TWidgetProp[
            (TWidgetProp['DISABLE_ANIM'] = WIDGET_PROP_DISABLE_ANIM())
          ] = 'DISABLE_ANIM';
          /**
           * 打开窗口时的动画。
           *
           */
          TWidgetProp[
            (TWidgetProp['OPEN_ANIM_HINT'] = WIDGET_PROP_OPEN_ANIM_HINT())
          ] = 'OPEN_ANIM_HINT';
          /**
           * 关闭窗口时的动画。
           *
           */
          TWidgetProp[
            (TWidgetProp['CLOSE_ANIM_HINT'] = WIDGET_PROP_CLOSE_ANIM_HINT())
          ] = 'CLOSE_ANIM_HINT';
          /**
           * 最小值。
           *
           */
          TWidgetProp[(TWidgetProp['MIN'] = WIDGET_PROP_MIN())] = 'MIN';
          /**
           * 软键盘上action按钮的文本。
           *
           */
          TWidgetProp[
            (TWidgetProp['ACTION_TEXT'] = WIDGET_PROP_ACTION_TEXT())
          ] = 'ACTION_TEXT';
          /**
           * 提示信息。
           *
           */
          TWidgetProp[(TWidgetProp['TIPS'] = WIDGET_PROP_TIPS())] = 'TIPS';
          /**
           * 需要翻译的提示信息。
           *
           */
          TWidgetProp[(TWidgetProp['TR_TIPS'] = WIDGET_PROP_TR_TIPS())] =
            'TR_TIPS';
          /**
           * 输入类型。
           *
           */
          TWidgetProp[(TWidgetProp['INPUT_TYPE'] = WIDGET_PROP_INPUT_TYPE())] =
            'INPUT_TYPE';
          /**
           * 自定义软键盘资源名称。
           *
           */
          TWidgetProp[(TWidgetProp['KEYBOARD'] = WIDGET_PROP_KEYBOARD())] =
            'KEYBOARD';
          /**
           * 缺省获得焦点的子控件(可用控件名或类型)。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'DEFAULT_FOCUSED_CHILD'
            ] = WIDGET_PROP_DEFAULT_FOCUSED_CHILD())
          ] = 'DEFAULT_FOCUSED_CHILD';
          /**
           * 只读模式。
           *
           */
          TWidgetProp[(TWidgetProp['READONLY'] = WIDGET_PROP_READONLY())] =
            'READONLY';
          /**
           * 是否可取消。
           *
           */
          TWidgetProp[(TWidgetProp['CANCELABLE'] = WIDGET_PROP_CANCELABLE())] =
            'CANCELABLE';
          /**
           * 密码是否可见。
           *
           */
          TWidgetProp[
            (TWidgetProp['PASSWORD_VISIBLE'] = WIDGET_PROP_PASSWORD_VISIBLE())
          ] = 'PASSWORD_VISIBLE';
          /**
           * 是否处于active状态。
           *
           */
          TWidgetProp[(TWidgetProp['ACTIVE'] = WIDGET_PROP_ACTIVE())] =
            'ACTIVE';
          /**
           * 当前页。
           *
           */
          TWidgetProp[(TWidgetProp['CURR_PAGE'] = WIDGET_PROP_CURR_PAGE())] =
            'CURR_PAGE';
          /**
           * 页面最大个数。
           *
           */
          TWidgetProp[
            (TWidgetProp['PAGE_MAX_NUMBER'] = WIDGET_PROP_PAGE_MAX_NUMBER())
          ] = 'PAGE_MAX_NUMBER';
          /**
           * 是否为垂直模式。
           *
           */
          TWidgetProp[(TWidgetProp['VERTICAL'] = WIDGET_PROP_VERTICAL())] =
            'VERTICAL';
          /**
           * 是否显示文本。
           *
           */
          TWidgetProp[(TWidgetProp['SHOW_TEXT'] = WIDGET_PROP_SHOW_TEXT())] =
            'SHOW_TEXT';
          /**
           * X方向的偏移。
           *
           */
          TWidgetProp[(TWidgetProp['XOFFSET'] = WIDGET_PROP_XOFFSET())] =
            'XOFFSET';
          /**
           * Y方向的偏移。
           *
           */
          TWidgetProp[(TWidgetProp['YOFFSET'] = WIDGET_PROP_YOFFSET())] =
            'YOFFSET';
          /**
           * 垂直对齐模式。
           *
           */
          TWidgetProp[(TWidgetProp['ALIGN_V'] = WIDGET_PROP_ALIGN_V())] =
            'ALIGN_V';
          /**
           * 水平对齐模式。
           *
           */
          TWidgetProp[(TWidgetProp['ALIGN_H'] = WIDGET_PROP_ALIGN_H())] =
            'ALIGN_H';
          /**
           * 是否自动播放或指定播放的时间。
           *
           */
          TWidgetProp[(TWidgetProp['AUTO_PLAY'] = WIDGET_PROP_AUTO_PLAY())] =
            'AUTO_PLAY';
          /**
           * 是否循环播放或循环播放的次数。
           *
           */
          TWidgetProp[(TWidgetProp['LOOP'] = WIDGET_PROP_LOOP())] = 'LOOP';
          /**
           * 是否启用自动更正功能。
           *
           */
          TWidgetProp[(TWidgetProp['AUTO_FIX'] = WIDGET_PROP_AUTO_FIX())] =
            'AUTO_FIX';
          /**
           * 编辑器在获得焦点时是否不选中文本。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'SELECT_NONE_WHEN_FOCUSED'
            ] = WIDGET_PROP_SELECT_NONE_WHEN_FOCUSED())
          ] = 'SELECT_NONE_WHEN_FOCUSED';
          /**
           * 编辑器在获得焦点时是否打开输入法。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'OPEN_IM_WHEN_FOCUSED'
            ] = WIDGET_PROP_OPEN_IM_WHEN_FOCUSED())
          ] = 'OPEN_IM_WHEN_FOCUSED';
          /**
           * 编辑器在失去焦点时是否关闭输入法。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'CLOSE_IM_WHEN_BLURED'
            ] = WIDGET_PROP_CLOSE_IM_WHEN_BLURED())
          ] = 'CLOSE_IM_WHEN_BLURED';
          /**
           * X最小值。
           *
           */
          TWidgetProp[(TWidgetProp['X_MIN'] = WIDGET_PROP_X_MIN())] = 'X_MIN';
          /**
           * X最大值。
           *
           */
          TWidgetProp[(TWidgetProp['X_MAX'] = WIDGET_PROP_X_MAX())] = 'X_MAX';
          /**
           * Y最小值。
           *
           */
          TWidgetProp[(TWidgetProp['Y_MIN'] = WIDGET_PROP_Y_MIN())] = 'Y_MIN';
          /**
           * Y最大值。
           *
           */
          TWidgetProp[(TWidgetProp['Y_MAX'] = WIDGET_PROP_Y_MAX())] = 'Y_MAX';
          /**
           * 最大值。
           *
           */
          TWidgetProp[(TWidgetProp['MAX'] = WIDGET_PROP_MAX())] = 'MAX';
          /**
           * 让窗口管理器直接把按键发给自己。
           *
           */
          TWidgetProp[(TWidgetProp['GRAB_KEYS'] = WIDGET_PROP_GRAB_KEYS())] =
            'GRAB_KEYS';
          /**
           * 行数或每行的高度。
           *
           */
          TWidgetProp[(TWidgetProp['ROW'] = WIDGET_PROP_ROW())] = 'ROW';
          /**
           * 控件状态。
           *
           */
          TWidgetProp[
            (TWidgetProp['STATE_FOR_STYLE'] = WIDGET_PROP_STATE_FOR_STYLE())
          ] = 'STATE_FOR_STYLE';
          /**
           * 窗体样式名称。
           *
           */
          TWidgetProp[(TWidgetProp['THEME'] = WIDGET_PROP_THEME())] = 'THEME';
          /**
           * window stage
           *
           */
          TWidgetProp[(TWidgetProp['STAGE'] = WIDGET_PROP_STAGE())] = 'STAGE';
          /**
           * 图片管理器。
           *
           */
          TWidgetProp[
            (TWidgetProp['IMAGE_MANAGER'] = WIDGET_PROP_IMAGE_MANAGER())
          ] = 'IMAGE_MANAGER';
          /**
           * 资源管理器。
           *
           */
          TWidgetProp[
            (TWidgetProp['ASSETS_MANAGER'] = WIDGET_PROP_ASSETS_MANAGER())
          ] = 'ASSETS_MANAGER';
          /**
           * locale_info。
           *
           */
          TWidgetProp[
            (TWidgetProp['LOCALE_INFO'] = WIDGET_PROP_LOCALE_INFO())
          ] = 'LOCALE_INFO';
          /**
           * 字体管理器。
           *
           */
          TWidgetProp[
            (TWidgetProp['FONT_MANAGER'] = WIDGET_PROP_FONT_MANAGER())
          ] = 'FONT_MANAGER';
          /**
           * 窗口的窗体样式对象。
           *
           */
          TWidgetProp[(TWidgetProp['THEME_OBJ'] = WIDGET_PROP_THEME_OBJ())] =
            'THEME_OBJ';
          /**
           * 缺省的窗体样式对象。
           *
           */
          TWidgetProp[
            (TWidgetProp['DEFAULT_THEME_OBJ'] = WIDGET_PROP_DEFAULT_THEME_OBJ())
          ] = 'DEFAULT_THEME_OBJ';
          /**
           * 项的宽度。
           *
           */
          TWidgetProp[(TWidgetProp['ITEM_WIDTH'] = WIDGET_PROP_ITEM_WIDTH())] =
            'ITEM_WIDTH';
          /**
           * 项的高度。
           *
           */
          TWidgetProp[
            (TWidgetProp['ITEM_HEIGHT'] = WIDGET_PROP_ITEM_HEIGHT())
          ] = 'ITEM_HEIGHT';
          /**
           * 项的缺省高度。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'DEFAULT_ITEM_HEIGHT'
            ] = WIDGET_PROP_DEFAULT_ITEM_HEIGHT())
          ] = 'DEFAULT_ITEM_HEIGHT';
          /**
           * X方向是否可拖动。
           *
           */
          TWidgetProp[(TWidgetProp['XSLIDABLE'] = WIDGET_PROP_XSLIDABLE())] =
            'XSLIDABLE';
          /**
           * Y方向是否可拖动。
           *
           */
          TWidgetProp[(TWidgetProp['YSLIDABLE'] = WIDGET_PROP_YSLIDABLE())] =
            'YSLIDABLE';
          /**
           * 重复次数。
           *
           */
          TWidgetProp[(TWidgetProp['REPEAT'] = WIDGET_PROP_REPEAT())] =
            'REPEAT';
          /**
           * 触发长按事件的时间(ms)。
           *
           */
          TWidgetProp[
            (TWidgetProp['LONG_PRESS_TIME'] = WIDGET_PROP_LONG_PRESS_TIME())
          ] = 'LONG_PRESS_TIME';
          /**
           * 是否启用长按。
           *
           */
          TWidgetProp[
            (TWidgetProp['ENABLE_LONG_PRESS'] = WIDGET_PROP_ENABLE_LONG_PRESS())
          ] = 'ENABLE_LONG_PRESS';
          /**
           * 是否启用点击穿透。
           *
           */
          TWidgetProp[
            (TWidgetProp['CLICK_THROUGH'] = WIDGET_PROP_CLICK_THROUGH())
          ] = 'CLICK_THROUGH';
          /**
           * 是否启用动画。
           *
           */
          TWidgetProp[(TWidgetProp['ANIMATABLE'] = WIDGET_PROP_ANIMATABLE())] =
            'ANIMATABLE';
          /**
           * 是否自动隐藏。
           *
           */
          TWidgetProp[(TWidgetProp['AUTO_HIDE'] = WIDGET_PROP_AUTO_HIDE())] =
            'AUTO_HIDE';
          /**
           * 是否自动隐藏滚动条。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'AUTO_HIDE_SCROLL_BAR'
            ] = WIDGET_PROP_AUTO_HIDE_SCROLL_BAR())
          ] = 'AUTO_HIDE_SCROLL_BAR';
          /**
           * 图片名称。
           *
           */
          TWidgetProp[(TWidgetProp['IMAGE'] = WIDGET_PROP_IMAGE())] = 'IMAGE';
          /**
           * 显示格式。
           *
           */
          TWidgetProp[(TWidgetProp['FORMAT'] = WIDGET_PROP_FORMAT())] =
            'FORMAT';
          /**
           * 图片绘制类型。
           *
           */
          TWidgetProp[(TWidgetProp['DRAW_TYPE'] = WIDGET_PROP_DRAW_TYPE())] =
            'DRAW_TYPE';
          /**
           * 是否可选择。
           *
           */
          TWidgetProp[(TWidgetProp['SELECTABLE'] = WIDGET_PROP_SELECTABLE())] =
            'SELECTABLE';
          /**
           * 是否可点击。
           *
           */
          TWidgetProp[(TWidgetProp['CLICKABLE'] = WIDGET_PROP_CLICKABLE())] =
            'CLICKABLE';
          /**
           * X方向缩放比例。
           *
           */
          TWidgetProp[(TWidgetProp['SCALE_X'] = WIDGET_PROP_SCALE_X())] =
            'SCALE_X';
          /**
           * Y方向缩放比例。
           *
           */
          TWidgetProp[(TWidgetProp['SCALE_Y'] = WIDGET_PROP_SCALE_Y())] =
            'SCALE_Y';
          /**
           * x锚点。
           *
           */
          TWidgetProp[(TWidgetProp['ANCHOR_X'] = WIDGET_PROP_ANCHOR_X())] =
            'ANCHOR_X';
          /**
           * y锚点。
           *
           */
          TWidgetProp[(TWidgetProp['ANCHOR_Y'] = WIDGET_PROP_ANCHOR_Y())] =
            'ANCHOR_Y';
          /**
           * 选中角度(幅度)
           *
           */
          TWidgetProp[(TWidgetProp['ROTATION'] = WIDGET_PROP_ROTATION())] =
            'ROTATION';
          /**
           * 紧凑模式。
           *
           */
          TWidgetProp[(TWidgetProp['COMPACT'] = WIDGET_PROP_COMPACT())] =
            'COMPACT';
          /**
           * 是否支持滚动。
           *
           */
          TWidgetProp[(TWidgetProp['SCROLLABLE'] = WIDGET_PROP_SCROLLABLE())] =
            'SCROLLABLE';
          /**
           * 图标名称。
           *
           */
          TWidgetProp[(TWidgetProp['ICON'] = WIDGET_PROP_ICON())] = 'ICON';
          /**
           * 选项集合。
           *
           */
          TWidgetProp[(TWidgetProp['OPTIONS'] = WIDGET_PROP_OPTIONS())] =
            'OPTIONS';
          /**
           * 是否被选中。
           *
           */
          TWidgetProp[(TWidgetProp['SELECTED'] = WIDGET_PROP_SELECTED())] =
            'SELECTED';
          /**
           * 是否被勾选。
           *
           */
          TWidgetProp[(TWidgetProp['CHECKED'] = WIDGET_PROP_CHECKED())] =
            'CHECKED';
          /**
           * active状态下的图标。
           *
           */
          TWidgetProp[
            (TWidgetProp['ACTIVE_ICON'] = WIDGET_PROP_ACTIVE_ICON())
          ] = 'ACTIVE_ICON';
          /**
           * 动态加载UI名字。
           *
           */
          TWidgetProp[(TWidgetProp['LOAD_UI'] = WIDGET_PROP_LOAD_UI())] =
            'LOAD_UI';
          /**
           * 要打开窗口的名称。
           *
           */
          TWidgetProp[
            (TWidgetProp['OPEN_WINDOW'] = WIDGET_PROP_OPEN_WINDOW())
          ] = 'OPEN_WINDOW';
          /**
           * 被选中项的索引。
           *
           */
          TWidgetProp[
            (TWidgetProp['SELECTED_INDEX'] = WIDGET_PROP_SELECTED_INDEX())
          ] = 'SELECTED_INDEX';
          /**
           * 点击窗口时关闭窗口。
           *
           */
          TWidgetProp[
            (TWidgetProp['CLOSE_WHEN_CLICK'] = WIDGET_PROP_CLOSE_WHEN_CLICK())
          ] = 'CLOSE_WHEN_CLICK';
          /**
           * 点击窗口外部时关闭窗口。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'CLOSE_WHEN_CLICK_OUTSIDE'
            ] = WIDGET_PROP_CLOSE_WHEN_CLICK_OUTSIDE())
          ] = 'CLOSE_WHEN_CLICK_OUTSIDE';
          /**
           * 超时后关闭窗口。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'CLOSE_WHEN_TIMEOUT'
            ] = WIDGET_PROP_CLOSE_WHEN_TIMEOUT())
          ] = 'CLOSE_WHEN_TIMEOUT';
          /**
           * 行间距。
           *
           */
          TWidgetProp[(TWidgetProp['LINE_GAP'] = WIDGET_PROP_LINE_GAP())] =
            'LINE_GAP';
          /**
           * 背景颜色(仅仅使用于color tile)。
           *
           */
          TWidgetProp[(TWidgetProp['BG_COLOR'] = WIDGET_PROP_BG_COLOR())] =
            'BG_COLOR';
          /**
           * 边框颜色(仅仅使用于color tile)。
           *
           */
          TWidgetProp[
            (TWidgetProp['BORDER_COLOR'] = WIDGET_PROP_BORDER_COLOR())
          ] = 'BORDER_COLOR';
          /**
           * 延迟时间(毫秒)
           *
           */
          TWidgetProp[(TWidgetProp['DELAY'] = WIDGET_PROP_DELAY())] = 'DELAY';
          /**
           * 是否为键盘。
           *
           */
          TWidgetProp[
            (TWidgetProp['IS_KEYBOARD'] = WIDGET_PROP_IS_KEYBOARD())
          ] = 'IS_KEYBOARD';
          /**
           * 是否为焦点控件。
           *
           */
          TWidgetProp[(TWidgetProp['FOCUSED'] = WIDGET_PROP_FOCUSED())] =
            'FOCUSED';
          /**
           * (过时请用focused)。
           *
           */
          TWidgetProp[(TWidgetProp['FOCUS'] = WIDGET_PROP_FOCUS())] = 'FOCUS';
          /**
           * 是否支持焦点停留。
           *
           */
          TWidgetProp[(TWidgetProp['FOCUSABLE'] = WIDGET_PROP_FOCUSABLE())] =
            'FOCUSABLE';
          /**
           * 是否支持焦点状态(如果希望style支持焦点状态，但又不希望焦点停留，可用本属性)。
           *
           */
          TWidgetProp[
            (TWidgetProp['WITH_FOCUS_STATE'] = WIDGET_PROP_WITH_FOCUS_STATE())
          ] = 'WITH_FOCUS_STATE';
          /**
           * 将焦点移到前一个的键值。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'MOVE_FOCUS_PREV_KEY'
            ] = WIDGET_PROP_MOVE_FOCUS_PREV_KEY())
          ] = 'MOVE_FOCUS_PREV_KEY';
          /**
           * 将焦点移到后一个的键值。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'MOVE_FOCUS_NEXT_KEY'
            ] = WIDGET_PROP_MOVE_FOCUS_NEXT_KEY())
          ] = 'MOVE_FOCUS_NEXT_KEY';
          /**
           * 将焦点向上移动的键值。
           *
           */
          TWidgetProp[
            (TWidgetProp['MOVE_FOCUS_UP_KEY'] = WIDGET_PROP_MOVE_FOCUS_UP_KEY())
          ] = 'MOVE_FOCUS_UP_KEY';
          /**
           * 将焦点向下移动的键值。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'MOVE_FOCUS_DOWN_KEY'
            ] = WIDGET_PROP_MOVE_FOCUS_DOWN_KEY())
          ] = 'MOVE_FOCUS_DOWN_KEY';
          /**
           * 将焦点向左移动的键值。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'MOVE_FOCUS_LEFT_KEY'
            ] = WIDGET_PROP_MOVE_FOCUS_LEFT_KEY())
          ] = 'MOVE_FOCUS_LEFT_KEY';
          /**
           * 将焦点向右移动的键值。
           *
           */
          TWidgetProp[
            (TWidgetProp[
              'MOVE_FOCUS_RIGHT_KEY'
            ] = WIDGET_PROP_MOVE_FOCUS_RIGHT_KEY())
          ] = 'MOVE_FOCUS_RIGHT_KEY';
        })((TWidgetProp = exports.TWidgetProp || (exports.TWidgetProp = {})));
        /**
         * 控件的类型。
         *
         */
        var TWidgetType;
        (function(TWidgetType) {
          /**
           * 无特殊类型。
           *
           */
          TWidgetType[(TWidgetType['NONE'] = WIDGET_TYPE_NONE())] = 'NONE';
          /**
           * 窗口管理器。
           *
           */
          TWidgetType[
            (TWidgetType['WINDOW_MANAGER'] = WIDGET_TYPE_WINDOW_MANAGER())
          ] = 'WINDOW_MANAGER';
          /**
           * 普通窗口。
           *
           */
          TWidgetType[
            (TWidgetType['NORMAL_WINDOW'] = WIDGET_TYPE_NORMAL_WINDOW())
          ] = 'NORMAL_WINDOW';
          /**
           * overlay窗口。
           *
           */
          TWidgetType[(TWidgetType['OVERLAY'] = WIDGET_TYPE_OVERLAY())] =
            'OVERLAY';
          /**
           * 工具条。
           *
           */
          TWidgetType[(TWidgetType['TOOL_BAR'] = WIDGET_TYPE_TOOL_BAR())] =
            'TOOL_BAR';
          /**
           * 对话框。
           *
           */
          TWidgetType[(TWidgetType['DIALOG'] = WIDGET_TYPE_DIALOG())] =
            'DIALOG';
          /**
           * 弹出窗口。
           *
           */
          TWidgetType[(TWidgetType['POPUP'] = WIDGET_TYPE_POPUP())] = 'POPUP';
          /**
           * system bar window
           *
           */
          TWidgetType[(TWidgetType['SYSTEM_BAR'] = WIDGET_TYPE_SYSTEM_BAR())] =
            'SYSTEM_BAR';
          /**
           * system bar window ato bottom
           *
           */
          TWidgetType[
            (TWidgetType['SYSTEM_BAR_BOTTOM'] = WIDGET_TYPE_SYSTEM_BAR_BOTTOM())
          ] = 'SYSTEM_BAR_BOTTOM';
          /**
           * 精灵窗口。
           *
           */
          TWidgetType[(TWidgetType['SPRITE'] = WIDGET_TYPE_SPRITE())] =
            'SPRITE';
          /**
           * 键盘窗口。
           *
           */
          TWidgetType[(TWidgetType['KEYBOARD'] = WIDGET_TYPE_KEYBOARD())] =
            'KEYBOARD';
          /**
           * 拖放状态窗口。
           *
           */
          TWidgetType[(TWidgetType['DND'] = WIDGET_TYPE_DND())] = 'DND';
          /**
           * 文本控件。
           *
           */
          TWidgetType[(TWidgetType['LABEL'] = WIDGET_TYPE_LABEL())] = 'LABEL';
          /**
           * 按钮控件。
           *
           */
          TWidgetType[(TWidgetType['BUTTON'] = WIDGET_TYPE_BUTTON())] =
            'BUTTON';
          /**
           * 图片控件。
           *
           */
          TWidgetType[(TWidgetType['IMAGE'] = WIDGET_TYPE_IMAGE())] = 'IMAGE';
          /**
           * 文本编辑控件。
           *
           */
          TWidgetType[(TWidgetType['EDIT'] = WIDGET_TYPE_EDIT())] = 'EDIT';
          /**
           * 进度条控件。
           *
           */
          TWidgetType[
            (TWidgetType['PROGRESS_BAR'] = WIDGET_TYPE_PROGRESS_BAR())
          ] = 'PROGRESS_BAR';
          /**
           * 分组控件。
           *
           */
          TWidgetType[(TWidgetType['GROUP_BOX'] = WIDGET_TYPE_GROUP_BOX())] =
            'GROUP_BOX';
          /**
           * 多选按钮控件。
           *
           */
          TWidgetType[
            (TWidgetType['CHECK_BUTTON'] = WIDGET_TYPE_CHECK_BUTTON())
          ] = 'CHECK_BUTTON';
          /**
           * 单选按钮控件。
           *
           */
          TWidgetType[
            (TWidgetType['RADIO_BUTTON'] = WIDGET_TYPE_RADIO_BUTTON())
          ] = 'RADIO_BUTTON';
          /**
           * 对话框标题。
           *
           */
          TWidgetType[
            (TWidgetType['DIALOG_TITLE'] = WIDGET_TYPE_DIALOG_TITLE())
          ] = 'DIALOG_TITLE';
          /**
           * 对话框客户区域。
           *
           */
          TWidgetType[
            (TWidgetType['DIALOG_CLIENT'] = WIDGET_TYPE_DIALOG_CLIENT())
          ] = 'DIALOG_CLIENT';
          /**
           * 滑块控件。
           *
           */
          TWidgetType[(TWidgetType['SLIDER'] = WIDGET_TYPE_SLIDER())] =
            'SLIDER';
          /**
           * 视图控件。
           *
           */
          TWidgetType[(TWidgetType['VIEW'] = WIDGET_TYPE_VIEW())] = 'VIEW';
          /**
           * 下拉选择框控件。
           *
           */
          TWidgetType[(TWidgetType['COMBO_BOX'] = WIDGET_TYPE_COMBO_BOX())] =
            'COMBO_BOX';
          /**
           * 下拉选择框的列表项控件。
           *
           */
          TWidgetType[
            (TWidgetType['COMBO_BOX_ITEM'] = WIDGET_TYPE_COMBO_BOX_ITEM())
          ] = 'COMBO_BOX_ITEM';
          /**
           * 滑动视图控件。
           *
           */
          TWidgetType[(TWidgetType['SLIDE_VIEW'] = WIDGET_TYPE_SLIDE_VIEW())] =
            'SLIDE_VIEW';
          /**
           * 滑动视图的指示器控件。
           *
           */
          TWidgetType[
            (TWidgetType['SLIDE_INDICATOR'] = WIDGET_TYPE_SLIDE_INDICATOR())
          ] = 'SLIDE_INDICATOR';
          /**
           * 滑动视图的指示器控件（圆弧显示）。
           *
           */
          TWidgetType[
            (TWidgetType[
              'SLIDE_INDICATOR_ARC'
            ] = WIDGET_TYPE_SLIDE_INDICATOR_ARC())
          ] = 'SLIDE_INDICATOR_ARC';
          /**
           * 多页控件。
           *
           */
          TWidgetType[(TWidgetType['PAGES'] = WIDGET_TYPE_PAGES())] = 'PAGES';
          /**
           * 标签按钮控件。
           *
           */
          TWidgetType[(TWidgetType['TAB_BUTTON'] = WIDGET_TYPE_TAB_BUTTON())] =
            'TAB_BUTTON';
          /**
           * 标签控件。
           *
           */
          TWidgetType[
            (TWidgetType['TAB_CONTROL'] = WIDGET_TYPE_TAB_CONTROL())
          ] = 'TAB_CONTROL';
          /**
           * 标签按钮分组控件。
           *
           */
          TWidgetType[
            (TWidgetType['TAB_BUTTON_GROUP'] = WIDGET_TYPE_TAB_BUTTON_GROUP())
          ] = 'TAB_BUTTON_GROUP';
          /**
           * 按钮分组控件。
           *
           */
          TWidgetType[
            (TWidgetType['BUTTON_GROUP'] = WIDGET_TYPE_BUTTON_GROUP())
          ] = 'BUTTON_GROUP';
          /**
           * 候选字控件。
           *
           */
          TWidgetType[(TWidgetType['CANDIDATES'] = WIDGET_TYPE_CANDIDATES())] =
            'CANDIDATES';
          /**
           * 数值编辑控件。
           *
           */
          TWidgetType[(TWidgetType['SPIN_BOX'] = WIDGET_TYPE_SPIN_BOX())] =
            'SPIN_BOX';
          /**
           * 拖动块控件。
           *
           */
          TWidgetType[(TWidgetType['DRAGGER'] = WIDGET_TYPE_DRAGGER())] =
            'DRAGGER';
          /**
           * 滚动条控件。
           *
           */
          TWidgetType[(TWidgetType['SCROLL_BAR'] = WIDGET_TYPE_SCROLL_BAR())] =
            'SCROLL_BAR';
          /**
           * 桌面版滚动条控件。
           *
           */
          TWidgetType[
            (TWidgetType[
              'SCROLL_BAR_DESKTOP'
            ] = WIDGET_TYPE_SCROLL_BAR_DESKTOP())
          ] = 'SCROLL_BAR_DESKTOP';
          /**
           * 移动版滚动条控件。
           *
           */
          TWidgetType[
            (TWidgetType['SCROLL_BAR_MOBILE'] = WIDGET_TYPE_SCROLL_BAR_MOBILE())
          ] = 'SCROLL_BAR_MOBILE';
          /**
           * 滚动视图控件。
           *
           */
          TWidgetType[
            (TWidgetType['SCROLL_VIEW'] = WIDGET_TYPE_SCROLL_VIEW())
          ] = 'SCROLL_VIEW';
          /**
           * 列表视图控件。
           *
           */
          TWidgetType[(TWidgetType['LIST_VIEW'] = WIDGET_TYPE_LIST_VIEW())] =
            'LIST_VIEW';
          /**
           * 水平列表视图控件。
           *
           */
          TWidgetType[
            (TWidgetType['LIST_VIEW_H'] = WIDGET_TYPE_LIST_VIEW_H())
          ] = 'LIST_VIEW_H';
          /**
           * 列表项控件。
           *
           */
          TWidgetType[(TWidgetType['LIST_ITEM'] = WIDGET_TYPE_LIST_ITEM())] =
            'LIST_ITEM';
          /**
           * 颜色选择器控件。
           *
           */
          TWidgetType[
            (TWidgetType['COLOR_PICKER'] = WIDGET_TYPE_COLOR_PICKER())
          ] = 'COLOR_PICKER';
          /**
           * 颜色选择器组件控件。
           *
           */
          TWidgetType[
            (TWidgetType['COLOR_COMPONENT'] = WIDGET_TYPE_COLOR_COMPONENT())
          ] = 'COLOR_COMPONENT';
          /**
           * 颜色块控件。
           *
           */
          TWidgetType[(TWidgetType['COLOR_TILE'] = WIDGET_TYPE_COLOR_TILE())] =
            'COLOR_TILE';
          /**
           * 裁剪控件。
           *
           */
          TWidgetType[(TWidgetType['CLIP_VIEW'] = WIDGET_TYPE_CLIP_VIEW())] =
            'CLIP_VIEW';
          /**
           * 富文本控件。
           *
           */
          TWidgetType[(TWidgetType['RICH_TEXT'] = WIDGET_TYPE_RICH_TEXT())] =
            'RICH_TEXT';
          /**
           * AppBar控件。
           *
           */
          TWidgetType[(TWidgetType['APP_BAR'] = WIDGET_TYPE_APP_BAR())] =
            'APP_BAR';
          /**
           * 网格控件。
           *
           */
          TWidgetType[(TWidgetType['GRID'] = WIDGET_TYPE_GRID())] = 'GRID';
          /**
           * 网格项目控件。
           *
           */
          TWidgetType[(TWidgetType['GRID_ITEM'] = WIDGET_TYPE_GRID_ITEM())] =
            'GRID_ITEM';
          /**
           * 行控件。
           *
           */
          TWidgetType[(TWidgetType['ROW'] = WIDGET_TYPE_ROW())] = 'ROW';
          /**
           * 列控件。
           *
           */
          TWidgetType[(TWidgetType['COLUMN'] = WIDGET_TYPE_COLUMN())] =
            'COLUMN';
          /**
           * 电阻屏校准窗口。
           *
           */
          TWidgetType[
            (TWidgetType['CALIBRATION_WIN'] = WIDGET_TYPE_CALIBRATION_WIN())
          ] = 'CALIBRATION_WIN';
        })((TWidgetType = exports.TWidgetType || (exports.TWidgetType = {})));
        /**
         * 窗口的生命周期常量定义。
         *
         */
        var TWindowStage;
        (function(TWindowStage) {
          /**
           * 初始状态。
           *
           */
          TWindowStage[(TWindowStage['NONE'] = WINDOW_STAGE_NONE())] = 'NONE';
          /**
           * 从UI资源加载完成。
           *
           */
          TWindowStage[(TWindowStage['LOADED'] = WINDOW_STAGE_LOADED())] =
            'LOADED';
          /**
           * 创建完成。
           *
           */
          TWindowStage[(TWindowStage['CREATED'] = WINDOW_STAGE_CREATED())] =
            'CREATED';
          /**
           * 窗口已经打开(窗口打开动画完成后)
           *
           */
          TWindowStage[(TWindowStage['OPENED'] = WINDOW_STAGE_OPENED())] =
            'OPENED';
          /**
           * 窗口已关闭。
           *
           */
          TWindowStage[(TWindowStage['CLOSED'] = WINDOW_STAGE_CLOSED())] =
            'CLOSED';
          /**
           * 窗口挂起状态。
           *
           */
          TWindowStage[(TWindowStage['SUSPEND'] = WINDOW_STAGE_SUSPEND())] =
            'SUSPEND';
        })(
          (TWindowStage = exports.TWindowStage || (exports.TWindowStage = {}))
        );
        /**
         * 窗口的closable常量定义。
         *
         */
        var TWindowClosable;
        (function(TWindowClosable) {
          /**
           * 窗口可关闭。
           *
           */
          TWindowClosable[(TWindowClosable['YES'] = WINDOW_CLOSABLE_YES())] =
            'YES';
          /**
           * 窗口不可关闭。
           *
           */
          TWindowClosable[(TWindowClosable['NO'] = WINDOW_CLOSABLE_NO())] =
            'NO';
          /**
           * 窗口需要确认后才能关闭。
           *
           */
          TWindowClosable[
            (TWindowClosable['CONFIRM'] = WINDOW_CLOSABLE_CONFIRM())
          ] = 'CONFIRM';
        })(
          (TWindowClosable =
            exports.TWindowClosable || (exports.TWindowClosable = {}))
        );
        /**
         * 控件状态常量定义。
         *
         *这里指定常用的状态值，扩展控件可以在自己的头文件中定义私有的状态。
         *
         */
        var TWidgetState;
        (function(TWidgetState) {
          /**
           * 无效状态。
           *
           */
          TWidgetState[(TWidgetState['NONE'] = WIDGET_STATE_NONE())] = 'NONE';
          /**
           * 正常状态。
           *
           */
          TWidgetState[(TWidgetState['NORMAL'] = WIDGET_STATE_NORMAL())] =
            'NORMAL';
          /**
           * 内容被修改的状态。
           *
           */
          TWidgetState[(TWidgetState['CHANGED'] = WIDGET_STATE_CHANGED())] =
            'CHANGED';
          /**
           * 指针按下状态。
           *
           */
          TWidgetState[(TWidgetState['PRESSED'] = WIDGET_STATE_PRESSED())] =
            'PRESSED';
          /**
           * 指针悬浮状态。
           *
           */
          TWidgetState[(TWidgetState['OVER'] = WIDGET_STATE_OVER())] = 'OVER';
          /**
           * 禁用状态。
           *
           */
          TWidgetState[(TWidgetState['DISABLE'] = WIDGET_STATE_DISABLE())] =
            'DISABLE';
          /**
           * 聚焦状态。
           *
           */
          TWidgetState[(TWidgetState['FOCUSED'] = WIDGET_STATE_FOCUSED())] =
            'FOCUSED';
          /**
           * 勾选状态。
           *
           */
          TWidgetState[(TWidgetState['CHECKED'] = WIDGET_STATE_CHECKED())] =
            'CHECKED';
          /**
           * 没勾选状态。
           *
           */
          TWidgetState[(TWidgetState['UNCHECKED'] = WIDGET_STATE_UNCHECKED())] =
            'UNCHECKED';
          /**
           * 编辑器无内容状态。
           *
           */
          TWidgetState[(TWidgetState['EMPTY'] = WIDGET_STATE_EMPTY())] =
            'EMPTY';
          /**
           * 编辑器无内容同时聚焦的状态。
           *
           */
          TWidgetState[
            (TWidgetState['EMPTY_FOCUS'] = WIDGET_STATE_EMPTY_FOCUS())
          ] = 'EMPTY_FOCUS';
          /**
           * 输入错误状态。
           *
           */
          TWidgetState[(TWidgetState['ERROR'] = WIDGET_STATE_ERROR())] =
            'ERROR';
          /**
           * 选中状态。
           *
           */
          TWidgetState[(TWidgetState['SELECTED'] = WIDGET_STATE_SELECTED())] =
            'SELECTED';
          /**
           * 正常状态(选中项)。
           *
           */
          TWidgetState[
            (TWidgetState[
              'NORMAL_OF_CHECKED'
            ] = WIDGET_STATE_NORMAL_OF_CHECKED())
          ] = 'NORMAL_OF_CHECKED';
          /**
           * 指针按下状态(选中项)。
           *
           */
          TWidgetState[
            (TWidgetState[
              'PRESSED_OF_CHECKED'
            ] = WIDGET_STATE_PRESSED_OF_CHECKED())
          ] = 'PRESSED_OF_CHECKED';
          /**
           * 指针悬浮状态(选中项)。
           *
           */
          TWidgetState[
            (TWidgetState['OVER_OF_CHECKED'] = WIDGET_STATE_OVER_OF_CHECKED())
          ] = 'OVER_OF_CHECKED';
          /**
           * 禁用状态(选中项)。
           *
           */
          TWidgetState[
            (TWidgetState[
              'DISABLE_OF_CHECKED'
            ] = WIDGET_STATE_DISABLE_OF_CHECKED())
          ] = 'DISABLE_OF_CHECKED';
          /**
           * 焦点状态(选中项)。
           *
           */
          TWidgetState[
            (TWidgetState[
              'FOCUSED_OF_CHECKED'
            ] = WIDGET_STATE_FOCUSED_OF_CHECKED())
          ] = 'FOCUSED_OF_CHECKED';
          /**
           * 正常状态(当前项)。
           *
           */
          TWidgetState[
            (TWidgetState['NORMAL_OF_ACTIVE'] = WIDGET_STATE_NORMAL_OF_ACTIVE())
          ] = 'NORMAL_OF_ACTIVE';
          /**
           * 指针按下状态(当前项)。
           *
           */
          TWidgetState[
            (TWidgetState[
              'PRESSED_OF_ACTIVE'
            ] = WIDGET_STATE_PRESSED_OF_ACTIVE())
          ] = 'PRESSED_OF_ACTIVE';
          /**
           * 指针悬浮状态(当前项)。
           *
           */
          TWidgetState[
            (TWidgetState['OVER_OF_ACTIVE'] = WIDGET_STATE_OVER_OF_ACTIVE())
          ] = 'OVER_OF_ACTIVE';
          /**
           * 禁用状态(当前项)。
           *
           */
          TWidgetState[
            (TWidgetState[
              'DISABLE_OF_ACTIVE'
            ] = WIDGET_STATE_DISABLE_OF_ACTIVE())
          ] = 'DISABLE_OF_ACTIVE';
          /**
           * 焦点状态(当前项)。
           *
           */
          TWidgetState[
            (TWidgetState[
              'FOCUSED_OF_ACTIVE'
            ] = WIDGET_STATE_FOCUSED_OF_ACTIVE())
          ] = 'FOCUSED_OF_ACTIVE';
        })(
          (TWidgetState = exports.TWidgetState || (exports.TWidgetState = {}))
        );
        /**
         * 控件鼠标光标常量定义。
         *
         */
        var TWidgetCursor;
        (function(TWidgetCursor) {
          /**
           * 默认光标。
           *
           */
          TWidgetCursor[
            (TWidgetCursor['CURSOR_DEFAULT'] = WIDGET_CURSOR_DEFAULT())
          ] = 'CURSOR_DEFAULT';
          /**
           * 文本选择光标。
           *
           */
          TWidgetCursor[(TWidgetCursor['CURSOR_EDIT'] = WIDGET_CURSOR_EDIT())] =
            'CURSOR_EDIT';
          /**
           * 手指光标。
           *
           */
          TWidgetCursor[(TWidgetCursor['CURSOR_HAND'] = WIDGET_CURSOR_HAND())] =
            'CURSOR_HAND';
          /**
           * 等待光标。
           *
           */
          TWidgetCursor[(TWidgetCursor['CURSOR_WAIT'] = WIDGET_CURSOR_WAIT())] =
            'CURSOR_WAIT';
          /**
           * 叉光标。
           *
           */
          TWidgetCursor[
            (TWidgetCursor['CURSOR_CROSS'] = WIDGET_CURSOR_CROSS())
          ] = 'CURSOR_CROSS';
          /**
           * Slashed circle or crossbones。
           *
           */
          TWidgetCursor[(TWidgetCursor['CURSOR_NO'] = WIDGET_CURSOR_NO())] =
            'CURSOR_NO';
          /**
           * Double arrow pointing northwest and southeast。
           *
           */
          TWidgetCursor[
            (TWidgetCursor['CURSOR_SIZENWSE'] = WIDGET_CURSOR_SIZENWSE())
          ] = 'CURSOR_SIZENWSE';
          /**
           * Double arrow pointing northeast and southwest。
           *
           */
          TWidgetCursor[
            (TWidgetCursor['CURSOR_SIZENESW'] = WIDGET_CURSOR_SIZENESW())
          ] = 'CURSOR_SIZENESW';
          /**
           * Double arrow pointing west and east。
           *
           */
          TWidgetCursor[
            (TWidgetCursor['CURSOR_SIZEWE'] = WIDGET_CURSOR_SIZEWE())
          ] = 'CURSOR_SIZEWE';
          /**
           * Double arrow pointing north and south。
           *
           */
          TWidgetCursor[
            (TWidgetCursor['CURSOR_SIZENS'] = WIDGET_CURSOR_SIZENS())
          ] = 'CURSOR_SIZENS';
          /**
           * Four pointed arrow pointing north, south, east, and west。
           *
           */
          TWidgetCursor[
            (TWidgetCursor['CURSOR_SIZEALL'] = WIDGET_CURSOR_SIZEALL())
          ] = 'CURSOR_SIZEALL';
        })(
          (TWidgetCursor =
            exports.TWidgetCursor || (exports.TWidgetCursor = {}))
        );
        /**
         * widget_t* button = button_create(win, 10, 10, 128, 30);
         *widget_set_text(button, L"OK");
         *widget_on(button, EVT_CLICK, on_click, NULL);
         *```
         *
         */
        var TWidget = /** @class */ (function() {
          function TWidget(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 获取子控件的个数。
           *
           *
           * @returns 子控件的个数。
           */
          TWidget.prototype.countChildren = function() {
            return widget_count_children(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取指定索引的子控件。
           *
           * @param index 索引。
           *
           * @returns 子控件。
           */
          TWidget.prototype.getChild = function(index) {
            return new TWidget(
              widget_get_child(
                this != null ? this.nativeObj || this : null,
                index
              )
            );
          };
          /**
           * 获取当前窗口中的焦点控件。
           *
           *
           * @returns 焦点控件。
           */
          TWidget.prototype.getFocusedWidget = function() {
            return new TWidget(
              widget_get_focused_widget(
                this != null ? this.nativeObj || this : null
              )
            );
          };
          /**
           * 获取原生窗口对象。
           *
           *
           * @returns 原生窗口对象。
           */
          TWidget.prototype.getNativeWindow = function() {
            return new TNativeWindow(
              widget_get_native_window(
                this != null ? this.nativeObj || this : null
              )
            );
          };
          /**
           * 获取控件在父控件中的索引编号。
           *
           *
           * @returns 在父控件中的索引编号。
           */
          TWidget.prototype.indexOf = function() {
            return widget_index_of(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 关闭控件所在的窗口。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.closeWindow = function() {
            return widget_close_window(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 关闭控件所在的窗口。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.closeWindowForce = function() {
            return widget_close_window_force(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 请求返回到前一个窗口。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.back = function() {
            return widget_back(this != null ? this.nativeObj || this : null);
          };
          /**
           * 请求返回到home窗口。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.backToHome = function() {
            return widget_back_to_home(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 移动控件。
           *
           * @param x x坐标
           * @param y y坐标
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.move = function(x, y) {
            return widget_move(
              this != null ? this.nativeObj || this : null,
              x,
              y
            );
          };
          /**
           * 调整控件的大小。
           *
           * @param w 宽度
           * @param h 高度
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.resize = function(w, h) {
            return widget_resize(
              this != null ? this.nativeObj || this : null,
              w,
              h
            );
          };
          /**
           * 移动控件并调整控件的大小。
           *
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.moveResize = function(x, y, w, h) {
            return widget_move_resize(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h
            );
          };
          /**
           * 设置控件的值。
           *只是对widget\_set\_prop的包装，值的意义由子类控件决定。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setValue = function(value) {
            return widget_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置控件的值(以动画形式变化到指定的值)。
           *只是对widget\_set\_prop的包装，值的意义由子类控件决定。
           *
           * @param value 值。
           * @param duration 动画持续时间(毫秒)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.animateValueTo = function(value, duration) {
            return widget_animate_value_to(
              this != null ? this.nativeObj || this : null,
              value,
              duration
            );
          };
          /**
           * 增加控件的值。
           *只是对widget\_set\_prop的包装，值的意义由子类控件决定。
           *
           * @param delta 增量。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.addValue = function(delta) {
            return widget_add_value(
              this != null ? this.nativeObj || this : null,
              delta
            );
          };
          /**
           * 查询指定的style是否存在。
           *
           * @param style_name style的名称（如果为 NULL，则默认为 default）。
           * @param state_name state的名称（如果为 NULL，则默认为 normal）。
           *
           * @returns 存在返回 TRUE，不存在返回 FALSE。
           */
          TWidget.prototype.isStyleExist = function(style_name, state_name) {
            return widget_is_style_exist(
              this != null ? this.nativeObj || this : null,
              style_name,
              state_name
            );
          };
          /**
           * 启用指定的style。
           *
           * @param style style的名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.useStyle = function(style) {
            return widget_use_style(
              this != null ? this.nativeObj || this : null,
              style
            );
          };
          /**
           * 设置控件的文本。
           *只是对widget\_set\_prop的包装，文本的意义由子类控件决定。
           *
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setText = function(text) {
            return widget_set_text_utf8(
              this != null ? this.nativeObj || this : null,
              text
            );
          };
          /**
           * 设置子控件的文本。
           *只是对widget\_set\_prop的包装，文本的意义由子类控件决定。
           *
           * @param name 子控件的名称。
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setChildText = function(name, text) {
            return widget_set_child_text_utf8(
              this != null ? this.nativeObj || this : null,
              name,
              text
            );
          };
          /**
           * 用一个浮点数去设置子控件的文本。
           *只是对widget\_set\_prop的包装，文本的意义由子类控件决定。
           *
           * @param name 子控件的名称。
           * @param format 格式字符串(如："%2.2lf")。
           * @param value 浮点数值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setChildTextWithDouble = function(
            name,
            format,
            value
          ) {
            return widget_set_child_text_with_double(
              this != null ? this.nativeObj || this : null,
              name,
              format,
              value
            );
          };
          /**
           * 用一个整数去设置子控件的文本。
           *只是对widget\_set\_prop的包装，文本的意义由子类控件决定。
           *
           * @param name 子控件的名称。
           * @param format 格式字符串(如："%d")。
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setChildTextWithInt = function(
            name,
            format,
            value
          ) {
            return widget_set_child_text_with_int(
              this != null ? this.nativeObj || this : null,
              name,
              format,
              value
            );
          };
          /**
           * 获取翻译之后的文本，然后调用widget_set_text。
           *
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setTrText = function(text) {
            return widget_set_tr_text(
              this != null ? this.nativeObj || this : null,
              text
            );
          };
          /**
           * 获取控件的值。只是对widget\_get\_prop的包装，值的意义由子类控件决定。
           *
           *
           * @returns 返回值。
           */
          TWidget.prototype.getValue = function() {
            return widget_get_value(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取控件enable属性值。
           *
           *
           * @returns 返回enable。
           */
          TWidget.prototype.getEnable = function() {
            return widget_get_enable(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取控件floating属性值。
           *
           *
           * @returns 返回floating。
           */
          TWidget.prototype.getFloating = function() {
            return widget_get_floating(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取控件auto_adjust_size属性值。
           *
           *
           * @returns 返回auto_adjust_size。
           */
          TWidget.prototype.getAutoAdjustSize = function() {
            return widget_get_auto_adjust_size(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取控件with_focus_state属性值。
           *
           *
           * @returns 返回with_focus_state。
           */
          TWidget.prototype.getWithFocusState = function() {
            return widget_get_with_focus_state(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取控件focusable属性值。
           *
           *
           * @returns 返回focusable。
           */
          TWidget.prototype.getFocusable = function() {
            return widget_get_focusable(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取控件sensitive属性值。
           *
           *
           * @returns 返回sensitive。
           */
          TWidget.prototype.getSensitive = function() {
            return widget_get_sensitive(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取控件visible属性值。
           *
           *
           * @returns 返回visible。
           */
          TWidget.prototype.getVisible = function() {
            return widget_get_visible(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取控件feedback属性值。
           *
           *
           * @returns 返回feedback。
           */
          TWidget.prototype.getFeedback = function() {
            return widget_get_feedback(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * str_t str;
           *str_init(&str, 0);
           *str_from_wstr(&str, widget_get_text(target));
           *log_debug("%s: %s\n", target->name, str.str);
           *str_reset(&str);
           *```
           *
           *
           * @returns 返回文本。
           */
          TWidget.prototype.getText = function() {
            return widget_get_text(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置控件的名称。
           *
           * @param name 名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setName = function(name) {
            return widget_set_name(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置theme的名称，用于动态切换主题。名称与当前主题名称相同，则重新加载全部资源。
           *
           *> 目前只支持带有文件系统的平台。
           *
           * @param name 主题的名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setTheme = function(name) {
            return widget_set_theme(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置鼠标指针的图片名。
           *
           * @param cursor 图片名称(无扩展名)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setPointerCursor = function(cursor) {
            return widget_set_pointer_cursor(
              this != null ? this.nativeObj || this : null,
              cursor
            );
          };
          /**
           * 设置控件的动画参数(仅用于在UI文件使用)。
           *请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)
           *
           * @param animation 动画参数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setAnimation = function(animation) {
            return widget_set_animation(
              this != null ? this.nativeObj || this : null,
              animation
            );
          };
          /**
           * 创建动画。
           *请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)
           *
           ** 除非指定auto_start=false，动画创建后自动启动。
           ** 除非指定auto_destroy=false，动画播放完成后自动销毁。
           *
           * @param animation 动画参数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.createAnimator = function(animation) {
            return widget_create_animator(
              this != null ? this.nativeObj || this : null,
              animation
            );
          };
          /**
           * 播放动画。
           *请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)
           *
           ** 1.widget为NULL时，播放所有名称为name的动画。
           ** 2.name为NULL时，播放所有widget相关的动画。
           ** 3.widget和name均为NULL，播放所有动画。
           *
           * @param name 动画名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.startAnimator = function(name) {
            return widget_start_animator(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置动画的时间倍率，<0: 时间倒退，<1: 时间变慢，>1 时间变快。
           *请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)
           *
           ** 1.widget为NULL时，设置所有名称为name的动画的时间倍率。
           ** 2.name为NULL时，设置所有widget相关的动画的时间倍率。
           ** 3.widget和name均为NULL，设置所有动画的时间倍率。
           *
           * @param name 动画名称。
           * @param time_scale 时间倍率。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setAnimatorTimeScale = function(name, time_scale) {
            return widget_set_animator_time_scale(
              this != null ? this.nativeObj || this : null,
              name,
              time_scale
            );
          };
          /**
           * 暂停动画。
           *请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)
           *
           ** 1.widget为NULL时，暂停所有名称为name的动画。
           ** 2.name为NULL时，暂停所有widget相关的动画。
           ** 3.widget和name均为NULL，暂停所有动画。
           *
           * @param name 动画名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.pauseAnimator = function(name) {
            return widget_pause_animator(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 停止动画(控件的相应属性回归原位)。
           *请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)
           *
           ** 1.widget为NULL时，停止所有名称为name的动画。
           ** 2.name为NULL时，停止所有widget相关的动画。
           ** 3.widget和name均为NULL，停止所有动画。
           *
           * @param name 动画名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.stopAnimator = function(name) {
            return widget_stop_animator(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 销毁动画。
           *请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)
           *
           ** 1.widget为NULL时，销毁所有名称为name的动画。
           ** 2.name为NULL时，销毁所有widget相关的动画。
           ** 3.widget和name均为NULL，销毁所有动画。
           *
           * @param name 动画名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.destroyAnimator = function(name) {
            return widget_destroy_animator(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置控件的可用性。
           *
           * @param enable 是否可用性。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setEnable = function(enable) {
            return widget_set_enable(
              this != null ? this.nativeObj || this : null,
              enable
            );
          };
          /**
           * 设置控件是否启用反馈。
           *
           * @param feedback 是否启用反馈。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setFeedback = function(feedback) {
            return widget_set_feedback(
              this != null ? this.nativeObj || this : null,
              feedback
            );
          };
          /**
           * 设置控件是否根据子控件和文本自动调整控件自身大小。
           *
           * @param auto_adjust_size 是否根据子控件和文本自动调整控件自身大小。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setAutoAdjustSize = function(auto_adjust_size) {
            return widget_set_auto_adjust_size(
              this != null ? this.nativeObj || this : null,
              auto_adjust_size
            );
          };
          /**
           * 设置控件的floating标志。
           *> floating的控件不受父控件的子控件布局参数的影响。
           *
           * @param floating 是否启用floating布局。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setFloating = function(floating) {
            return widget_set_floating(
              this != null ? this.nativeObj || this : null,
              floating
            );
          };
          /**
           * 设置控件是否获得焦点。
           *
           * @param focused 是否获得焦点。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setFocused = function(focused) {
            return widget_set_focused(
              this != null ? this.nativeObj || this : null,
              focused
            );
          };
          /**
           * 设置控件是否可获得焦点。
           *
           * @param focusable 是否可获得焦点。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setFocusable = function(focusable) {
            return widget_set_focusable(
              this != null ? this.nativeObj || this : null,
              focusable
            );
          };
          /**
           * 设置控件的状态。
           *
           * @param state 状态(必须为真正的常量字符串，在widget的整个生命周期有效)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setState = function(state) {
            return widget_set_state(
              this != null ? this.nativeObj || this : null,
              state
            );
          };
          /**
           * 设置控件的不透明度。
           *
           *>在嵌入式平台，半透明效果会使性能大幅下降，请谨慎使用。
           *
           * @param opacity 不透明度(取值0-255，0表示完全透明，255表示完全不透明)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setOpacity = function(opacity) {
            return widget_set_opacity(
              this != null ? this.nativeObj || this : null,
              opacity
            );
          };
          /**
           * 设置控件脏矩形超出控件本身大小的最大范围(一般不用指定)。
           *
           * @param dirty_rect_tolerance 控件脏脏矩形超出控件本身大小的最大范。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setDirtyRectTolerance = function(
            dirty_rect_tolerance
          ) {
            return widget_set_dirty_rect_tolerance(
              this != null ? this.nativeObj || this : null,
              dirty_rect_tolerance
            );
          };
          /**
           * 销毁全部子控件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.destroyChildren = function() {
            return widget_destroy_children(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 加入一个子控件。
           *
           * @param child 子控件对象。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.addChild = function(child) {
            return widget_add_child(
              this != null ? this.nativeObj || this : null,
              child != null ? child.nativeObj || child : null
            );
          };
          /**
           * 移出指定的子控件(并不销毁)。
           *
           * @param child 子控件对象。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.removeChild = function(child) {
            return widget_remove_child(
              this != null ? this.nativeObj || this : null,
              child != null ? child.nativeObj || child : null
            );
          };
          /**
           * 插入子控件到指定的位置。
           *
           * @param index 位置序数(大于等于总个数，则放到最后)。
           * @param child 子控件对象。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.insertChild = function(index, child) {
            return widget_insert_child(
              this != null ? this.nativeObj || this : null,
              index,
              child != null ? child.nativeObj || child : null
            );
          };
          /**
           * 调整控件在父控件中的位置序数。
           *
           * @param index 位置序数(大于等于总个数，则放到最后)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.restack = function(index) {
            return widget_restack(
              this != null ? this.nativeObj || this : null,
              index
            );
          };
          /**
           * 查找指定名称的子控件(同widget_lookup(widget, name, FALSE))。
           *
           * @param name 子控件的名称。
           *
           * @returns 子控件或NULL。
           */
          TWidget.prototype.child = function(name) {
            return new TWidget(
              widget_child(this != null ? this.nativeObj || this : null, name)
            );
          };
          /**
           * 查找指定名称的子控件(返回第一个)。
           *
           * @param name 子控件的名称。
           * @param recursive 是否递归查找全部子控件。
           *
           * @returns 子控件或NULL。
           */
          TWidget.prototype.lookup = function(name, recursive) {
            return new TWidget(
              widget_lookup(
                this != null ? this.nativeObj || this : null,
                name,
                recursive
              )
            );
          };
          /**
           * 查找指定类型的子控件(返回第一个)。
           *
           * @param type 子控件的名称。
           * @param recursive 是否递归查找全部子控件。
           *
           * @returns 子控件或NULL。
           */
          TWidget.prototype.lookupByType = function(type, recursive) {
            return new TWidget(
              widget_lookup_by_type(
                this != null ? this.nativeObj || this : null,
                type,
                recursive
              )
            );
          };
          /**
           * 设置控件的可见性。
           *
           * @param visible 是否可见。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setVisible = function(visible) {
            return widget_set_visible(
              this != null ? this.nativeObj || this : null,
              visible
            );
          };
          /**
           * 设置控件的可见性(不触发repaint和relayout)。
           *
           * @param visible 是否可见。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setVisibleOnly = function(visible) {
            return widget_set_visible_only(
              this != null ? this.nativeObj || this : null,
              visible
            );
          };
          /**
           * 设置控件是否接受用户事件。
           *
           * @param sensitive 是否接受用户事件。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setSensitive = function(sensitive) {
            return widget_set_sensitive(
              this != null ? this.nativeObj || this : null,
              sensitive
            );
          };
          /**
           * widget_t* ok = button_create(win, 10, 10, 80, 30);
           *widget_on(ok, EVT_CLICK, on_click, NULL);
           *
           *```
           *
           * @param type 事件类型。
           * @param on_event 事件处理函数。
           * @param ctx 事件处理函数上下文。
           *
           * @returns 返回id，用于widget_off。
           */
          TWidget.prototype.on = function(type, on_event, ctx) {
            return widget_on(
              this != null ? this.nativeObj || this : null,
              type,
              TBrowser.addFunction(wrap_on_event(on_event), 'iii'),
              ctx
            );
          };
          /**
           * 注销指定事件的处理函数。
           *
           * @param id widget_on返回的ID。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.off = function(id) {
            return widget_off(this != null ? this.nativeObj || this : null, id);
          };
          /**
           * 请求强制重绘控件。
           *
           * @param r 矩形对象(widget本地坐标)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.invalidateForce = function(r) {
            return widget_invalidate_force(
              this != null ? this.nativeObj || this : null,
              r != null ? r.nativeObj || r : null
            );
          };
          /**
           * 设置字符串格式的属性。
           *
           * @param name 属性的名称。
           * @param v 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setPropStr = function(name, v) {
            return widget_set_prop_str(
              this != null ? this.nativeObj || this : null,
              name,
              v
            );
          };
          /**
           * 获取字符串格式的属性。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回属性的值。
           */
          TWidget.prototype.getPropStr = function(name, defval) {
            return widget_get_prop_str(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置指针格式的属性。
           *
           * @param name 属性的名称。
           * @param v 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setPropPointer = function(name, v) {
            return widget_set_prop_pointer(
              this != null ? this.nativeObj || this : null,
              name,
              v
            );
          };
          /**
           * 获取指针格式的属性。
           *
           * @param name 属性的名称。
           *
           * @returns 返回属性的值。
           */
          TWidget.prototype.getPropPointer = function(name) {
            return widget_get_prop_pointer(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置整数格式的属性。
           *
           * @param name 属性的名称。
           * @param v 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setPropInt = function(name, v) {
            return widget_set_prop_int(
              this != null ? this.nativeObj || this : null,
              name,
              v
            );
          };
          /**
           * 获取整数格式的属性。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回属性的值。
           */
          TWidget.prototype.getPropInt = function(name, defval) {
            return widget_get_prop_int(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 设置布尔格式的属性。
           *
           * @param name 属性的名称。
           * @param v 属性的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setPropBool = function(name, v) {
            return widget_set_prop_bool(
              this != null ? this.nativeObj || this : null,
              name,
              v
            );
          };
          /**
           * 获取布尔格式的属性。
           *
           * @param name 属性的名称。
           * @param defval 缺省值。
           *
           * @returns 返回属性的值。
           */
          TWidget.prototype.getPropBool = function(name, defval) {
            return widget_get_prop_bool(
              this != null ? this.nativeObj || this : null,
              name,
              defval
            );
          };
          /**
           * 判断当前控件所在的窗口是否已经打开。
           *
           *
           * @returns 返回当前控件所在的窗口是否已经打开。
           */
          TWidget.prototype.isWindowOpened = function() {
            return widget_is_window_opened(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 判断窗口及子控件创建或加载是否完成。
           *
           *
           * @returns 返回创建或加载是否完成。
           */
          TWidget.prototype.isWindowCreated = function() {
            return widget_is_window_created(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 判断当前控件是否是指定控件的父控件(包括非直系)。
           *
           * @param child 控件对象。
           *
           * @returns 返回TRUE表示是，否则表示不是。
           */
          TWidget.prototype.isParentOf = function(child) {
            return widget_is_parent_of(
              this != null ? this.nativeObj || this : null,
              child != null ? child.nativeObj || child : null
            );
          };
          /**
           * 判断当前控件是否是指定控件的直系父控件。
           *
           * @param child 控件对象。
           *
           * @returns 返回TRUE表示是，否则表示不是。
           */
          TWidget.prototype.isDirectParentOf = function(child) {
            return widget_is_direct_parent_of(
              this != null ? this.nativeObj || this : null,
              child != null ? child.nativeObj || child : null
            );
          };
          /**
           * 判断当前控件是否是窗口。
           *
           *
           * @returns 返回当前控件是否是窗口。
           */
          TWidget.prototype.isWindow = function() {
            return widget_is_window(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查控件是否是system bar类型。
           *
           *
           * @returns 返回FALSE表示不是，否则表示是。
           */
          TWidget.prototype.isSystemBar = function() {
            return widget_is_system_bar(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查控件是否是普通窗口类型。
           *
           *
           * @returns 返回FALSE表示不是，否则表示是。
           */
          TWidget.prototype.isNormalWindow = function() {
            return widget_is_normal_window(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查控件是否是对话框类型。
           *
           *
           * @returns 返回FALSE表示不是，否则表示是。
           */
          TWidget.prototype.isDialog = function() {
            return widget_is_dialog(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查控件是否是弹出窗口类型。
           *
           *
           * @returns 返回FALSE表示不是，否则表示是。
           */
          TWidget.prototype.isPopup = function() {
            return widget_is_popup(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查控件是否是overlay窗口类型。
           *
           *
           * @returns 返回FALSE表示不是，否则表示是。
           */
          TWidget.prototype.isOverlay = function() {
            return widget_is_overlay(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查控件弹出对话框控件是否已经打开了（而非挂起状态）。
           *
           *
           * @returns 返回FALSE表示不是，否则表示是。
           */
          TWidget.prototype.isOpenedDialog = function() {
            return widget_is_opened_dialog(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查控件弹出窗口控件是否已经打开了（而非挂起状态）。
           *
           *
           * @returns 返回FALSE表示不是，否则表示是。
           */
          TWidget.prototype.isOpenedPopup = function() {
            return widget_is_opened_popup(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * widget_set_prop_bool(group, WIDGET_PROP_IS_KEYBOARD, TRUE);
           *```
           *
           *
           * @returns 返回FALSE表示不是，否则表示是。
           */
          TWidget.prototype.isKeyboard = function() {
            return widget_is_keyboard(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 判断当前控件是否是设计窗口。
           *
           *
           * @returns 返回当前控件是否是设计窗口。
           */
          TWidget.prototype.isDesigningWindow = function() {
            return widget_is_designing_window(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 判断当前控件是否是窗口管理器。
           *
           *
           * @returns 返回当前控件是否是窗口管理器。
           */
          TWidget.prototype.isWindowManager = function() {
            return widget_is_window_manager(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 遍历当前控件及子控件。
           *
           * @param visit 遍历的回调函数。
           * @param ctx 回调函数的上下文。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.foreach = function(visit, ctx) {
            return widget_foreach(
              this != null ? this.nativeObj || this : null,
              TBrowser.addFunction(wrap_on_visit(visit), 'iii'),
              ctx
            );
          };
          /**
           * 获取当前控件所在的窗口。
           *
           *
           * @returns 窗口对象。
           */
          TWidget.prototype.getWindow = function() {
            return new TWidget(
              widget_get_window(this != null ? this.nativeObj || this : null)
            );
          };
          /**
           * 获取当前的窗口管理器。
           *
           *
           * @returns 窗口管理器对象。
           */
          TWidget.prototype.getWindowManager = function() {
            return new TWidget(
              widget_get_window_manager(
                this != null ? this.nativeObj || this : null
              )
            );
          };
          /**
           * 获取当前控件的类型名称。
           *
           *
           * @returns 返回类型名。
           */
          TWidget.prototype.getType = function() {
            return widget_get_type(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * clone。
           *
           * @param parent clone新控件的parent对象。
           *
           * @returns 返回clone的对象。
           */
          TWidget.prototype.clone = function(parent) {
            return new TWidget(
              widget_clone(
                this != null ? this.nativeObj || this : null,
                parent != null ? parent.nativeObj || parent : null
              )
            );
          };
          /**
           * 判断两个widget是否相同。
           *
           * @param other 要比较的控件对象。
           *
           * @returns 返回TRUE表示相同，否则表示不同。
           */
          TWidget.prototype.equal = function(other) {
            return widget_equal(
              this != null ? this.nativeObj || this : null,
              other != null ? other.nativeObj || other : null
            );
          };
          /**
           * 转换为widget对象(供脚本语言使用)。
           *
           * @param widget widget对象。
           *
           * @returns widget对象。
           */
          TWidget.cast = function(widget) {
            return new TWidget(
              widget_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 从父控件中移除控件，并调用unref函数销毁控件。
           *
           *> 一般无需直接调用，关闭窗口时，自动销毁相关控件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.destroy = function() {
            return widget_destroy(this != null ? this.nativeObj || this : null);
          };
          /**
           * 从父控件中移除控件，并调用unref函数销毁控件。
           *
           *> 一般无需直接调用，关闭窗口时，自动销毁相关控件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.destroyAsync = function() {
            return widget_destroy_async(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 减少控件的引用计数。引用计数为0时销毁控件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.unref = function() {
            return widget_unref(this != null ? this.nativeObj || this : null);
          };
          /**
           * 根据控件的style绘制边框矩形。
           *
           * @param c 画布对象。
           * @param r 矩形区域。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.strokeBorderRect = function(c, r) {
            return widget_stroke_border_rect(
              this != null ? this.nativeObj || this : null,
              c != null ? c.nativeObj || c : null,
              r != null ? r.nativeObj || r : null
            );
          };
          /**
           * 根据控件的style绘制背景矩形。
           *
           * @param c 画布对象。
           * @param r 矩形区域。
           * @param draw_type 图片缺省绘制方式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.fillBgRect = function(c, r, draw_type) {
            return widget_fill_bg_rect(
              this != null ? this.nativeObj || this : null,
              c != null ? c.nativeObj || c : null,
              r != null ? r.nativeObj || r : null,
              draw_type
            );
          };
          /**
           * 根据控件的style绘制前景矩形。
           *
           * @param c 画布对象。
           * @param r 矩形区域。
           * @param draw_type 图片缺省绘制方式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.fillFgRect = function(c, r, draw_type) {
            return widget_fill_fg_rect(
              this != null ? this.nativeObj || this : null,
              c != null ? c.nativeObj || c : null,
              r != null ? r.nativeObj || r : null,
              draw_type
            );
          };
          /**
           * 递归的分发一个事件到所有target子控件。
           *
           * @param e 事件。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.dispatchToTarget = function(e) {
            return widget_dispatch_to_target(
              this != null ? this.nativeObj || this : null,
              e != null ? e.nativeObj || e : null
            );
          };
          /**
           * 递归的分发一个事件到所有key_target子控件。
           *
           * @param e 事件。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.dispatchToKeyTarget = function(e) {
            return widget_dispatch_to_key_target(
              this != null ? this.nativeObj || this : null,
              e != null ? e.nativeObj || e : null
            );
          };
          /**
           * 获取 widget 对应风格类型
           *
           *
           * @returns 返回 widget 的对应风格类型。
           */
          TWidget.prototype.getStyleType = function() {
            return widget_get_style_type(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 让控件根据自己当前状态更新style。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.updateStyle = function() {
            return widget_update_style(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 让控件及子控件根据自己当前状态更新style。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.updateStyleRecursive = function() {
            return widget_update_style_recursive(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 递归的把父控件的key_target设置为自己。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setAsKeyTarget = function() {
            return widget_set_as_key_target(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 把焦点移动下一个控件。
           *
           *>widget必须是当前焦点控件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.focusNext = function() {
            return widget_focus_next(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 把焦点移动前一个控件。
           *
           *>widget必须是当前焦点控件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.focusPrev = function() {
            return widget_focus_prev(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 把控件的状态转成获取style选要的状态，一般只在子类中使用。
           *
           * @param active 控件是否为当前项。
           * @param checked 控件是否为选中项。
           *
           * @returns 返回状态值。
           */
          TWidget.prototype.getStateForStyle = function(active, checked) {
            return widget_get_state_for_style(
              this != null ? this.nativeObj || this : null,
              active,
              checked
            );
          };
          /**
           * 布局当前控件及子控件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.layout = function() {
            return widget_layout(this != null ? this.nativeObj || this : null);
          };
          /**
           * 设置控件自己的布局参数。
           *
           * @param params 布局参数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setSelfLayout = function(params) {
            return widget_set_self_layout(
              this != null ? this.nativeObj || this : null,
              params
            );
          };
          /**
           * 设置子控件的布局参数。
           *
           * @param params 布局参数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setChildrenLayout = function(params) {
            return widget_set_children_layout(
              this != null ? this.nativeObj || this : null,
              params
            );
          };
          /**
           * 设置控件自己的布局(缺省布局器)参数(过时，请用widget\_set\_self\_layout)。
           *
           * @param x x参数。
           * @param y y参数。
           * @param w w参数。
           * @param h h参数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setSelfLayoutParams = function(x, y, w, h) {
            return widget_set_self_layout_params(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              w,
              h
            );
          };
          /**
           * 设置整数类型的style。
           *
           *> * [state 的取值](https://github.com/zlgopen/awtk/blob/master/docs/manual/widget_state_t.md)
           *> * [name 的取值](https://github.com/zlgopen/awtk/blob/master/docs/theme.md)
           *
           * @param state_and_name 状态和名字，用英文的冒号分隔。
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setStyleInt = function(state_and_name, value) {
            return widget_set_style_int(
              this != null ? this.nativeObj || this : null,
              state_and_name,
              value
            );
          };
          /**
           * 设置字符串类型的style。
           *
           *> * [state 的取值](https://github.com/zlgopen/awtk/blob/master/docs/manual/widget_state_t.md)
           *> * [name 的取值](https://github.com/zlgopen/awtk/blob/master/docs/theme.md)
           *
           * @param state_and_name 状态和名字，用英文的冒号分隔。
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setStyleStr = function(state_and_name, value) {
            return widget_set_style_str(
              this != null ? this.nativeObj || this : null,
              state_and_name,
              value
            );
          };
          /**
           * widget_set_style_color(label, "normal:bg_color", 0xFF332211);
           *```
           *
           * @param state_and_name 状态和名字，用英文的冒号分隔。
           * @param value 值。颜色值一般用十六进制表示，每两个数字表示一个颜色通道，从高位到低位，依次是ABGR。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWidget.prototype.setStyleColor = function(state_and_name, value) {
            return widget_set_style_color(
              this != null ? this.nativeObj || this : null,
              state_and_name,
              value
            );
          };
          Object.defineProperty(TWidget.prototype, 'x', {
            /**
             * x坐标(相对于父控件的x坐标)。
             *
             */
            get: function() {
              return widget_t_get_prop_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'y', {
            /**
             * y坐标(相对于父控件的y坐标)。
             *
             */
            get: function() {
              return widget_t_get_prop_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'w', {
            /**
             * 宽度。
             *
             */
            get: function() {
              return widget_t_get_prop_w(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'h', {
            /**
             * 高度。
             *
             */
            get: function() {
              return widget_t_get_prop_h(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'name', {
            /**
             * 控件名字。
             *
             */
            get: function() {
              return widget_t_get_prop_name(this.nativeObj);
            },
            set: function(v) {
              this.setName(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'pointerCursor', {
            /**
             * 鼠标光标图片名称。
             *
             */
            get: function() {
              return widget_t_get_prop_pointer_cursor(this.nativeObj);
            },
            set: function(v) {
              this.setPointerCursor(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'trText', {
            /**
             * 保存用于翻译的字符串。
             *
             */
            get: function() {
              return widget_t_get_prop_tr_text(this.nativeObj);
            },
            set: function(v) {
              this.setTrText(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'style', {
            /**
             * style的名称。
             *
             */
            get: function() {
              return widget_t_get_prop_style(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'animation', {
            /**
             * 动画参数。请参考[控件动画](https://github.com/zlgopen/awtk/blob/master/docs/widget_animator.md)
             *
             */
            get: function() {
              return widget_t_get_prop_animation(this.nativeObj);
            },
            set: function(v) {
              this.setAnimation(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'enable', {
            /**
             * 启用/禁用状态。
             *
             */
            get: function() {
              return widget_t_get_prop_enable(this.nativeObj);
            },
            set: function(v) {
              this.setEnable(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'feedback', {
            /**
             * 是否启用按键音、触屏音和震动等反馈。
             *
             */
            get: function() {
              return widget_t_get_prop_feedback(this.nativeObj);
            },
            set: function(v) {
              this.setFeedback(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'visible', {
            /**
             * 是否可见。
             *
             */
            get: function() {
              return widget_t_get_prop_visible(this.nativeObj);
            },
            set: function(v) {
              this.setVisible(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'sensitive', {
            /**
             * 是否接受用户事件。
             *
             */
            get: function() {
              return widget_t_get_prop_sensitive(this.nativeObj);
            },
            set: function(v) {
              this.setSensitive(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'focusable', {
            /**
             * 是否支持焦点停留。
             *
             */
            get: function() {
              return widget_t_get_prop_focusable(this.nativeObj);
            },
            set: function(v) {
              this.setFocusable(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'withFocusState', {
            /**
             * 是否支持焦点状态。
             *> 如果希望style支持焦点状态，但又不希望焦点停留，可用本属性。
             *
             */
            get: function() {
              return widget_t_get_prop_with_focus_state(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'autoAdjustSize', {
            /**
             * 是否根据子控件和文本自动调整控件自身大小。
             *
             *> 为true时，最好不要使用child_layout，否则可能有冲突。
             *> 注意：只是调整控件的本身的宽高，不会修改控件本身的位置。
             *
             */
            get: function() {
              return widget_t_get_prop_auto_adjust_size(this.nativeObj);
            },
            set: function(v) {
              this.setAutoAdjustSize(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'floating', {
            /**
             * 标识控件是否启用浮动布局，不受父控件的children_layout的控制。
             *
             */
            get: function() {
              return widget_t_get_prop_floating(this.nativeObj);
            },
            set: function(v) {
              this.setFloating(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'dirtyRectTolerance', {
            /**
             * 脏矩形超出控件本身大小的最大范围(一般不用指定)。
             *
             *> 如果 border 太粗或 offset 太大等原因，导致脏矩形超出控件本身大小太多（大于缺省值）时，才需要指定。
             *
             */
            get: function() {
              return widget_t_get_prop_dirty_rect_tolerance(this.nativeObj);
            },
            set: function(v) {
              this.setDirtyRectTolerance(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWidget.prototype, 'parent', {
            /**
             * 父控件
             *
             */
            get: function() {
              return new TWidget(widget_t_get_prop_parent(this.nativeObj));
            },
            enumerable: false,
            configurable: true,
          });
          return TWidget;
        })();
        exports.TWidget = TWidget;
        /**
         * #include "conf_io/app_conf.h"
         *```
         *
         */
        var TAppConf = /** @class */ (function() {
          function TAppConf() {}
          /**
           * 持久保存配置。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.save = function() {
            return app_conf_save();
          };
          /**
           * 重新加载配置(内存中的配置丢失)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.reload = function() {
            return app_conf_reload();
          };
          /**
           * 释放conf对象。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.deinit = function() {
            return app_conf_deinit();
          };
          /**
           * 检查配置项是否存在。
           *
           * @param key 配置项的名称。
           *
           * @returns 返回TRUE表示存在，FALSE表示不存在。
           */
          TAppConf.exist = function(key) {
            return app_conf_exist(key);
          };
          /**
           * 设置整数类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param v 配置项的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.setInt = function(key, v) {
            return app_conf_set_int(key, v);
          };
          /**
           * 设置64位整数类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param v 配置项的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.setInt64 = function(key, v) {
            return app_conf_set_int64(key, v);
          };
          /**
           * 设置bool类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param v 配置项的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.setBool = function(key, v) {
            return app_conf_set_bool(key, v);
          };
          /**
           * 设置双精度类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param v 配置项的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.setDouble = function(key, v) {
            return app_conf_set_double(key, v);
          };
          /**
           * 设置字符串类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param v 配置项的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.setStr = function(key, v) {
            return app_conf_set_str(key, v);
          };
          /**
           * 获取整数类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param defval 缺省值。
           *
           * @returns 返回配置项的值（如果不存在返回缺省值）。
           */
          TAppConf.getInt = function(key, defval) {
            return app_conf_get_int(key, defval);
          };
          /**
           * 获取64位整数类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param defval 缺省值。
           *
           * @returns 返回配置项的值（如果不存在返回缺省值）。
           */
          TAppConf.getInt64 = function(key, defval) {
            return app_conf_get_int64(key, defval);
          };
          /**
           * 获取bool类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param defval 缺省值。
           *
           * @returns 返回配置项的值（如果不存在返回缺省值）。
           */
          TAppConf.getBool = function(key, defval) {
            return app_conf_get_bool(key, defval);
          };
          /**
           * 获取单精度浮点数类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param defval 缺省值。
           *
           * @returns 返回配置项的值（如果不存在返回缺省值）。
           */
          TAppConf.getDouble = function(key, defval) {
            return app_conf_get_double(key, defval);
          };
          /**
           * 获取字符串类型配置项的值。
           *
           * @param key 配置项的名称。
           * @param defval 缺省值。
           *
           * @returns 返回配置项的值（如果不存在返回缺省值）。
           */
          TAppConf.getStr = function(key, defval) {
            return app_conf_get_str(key, defval);
          };
          /**
           * 删除配置项。
           *
           * @param key 配置项的名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAppConf.remove = function(key) {
            return app_conf_remove(key);
          };
          return TAppConf;
        })();
        exports.TAppConf = TAppConf;
        /**
         * 扩展控件。
         *
         */
        var TExtWidgets = /** @class */ (function() {
          function TExtWidgets() {}
          /**
           * 初始化AWTK扩展控件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TExtWidgets.init = function() {
            return tk_ext_widgets_init();
          };
          return TExtWidgets;
        })();
        exports.TExtWidgets = TExtWidgets;
        /**
         * 指示器默认绘制的类型。
         *
         */
        var TIndicatorDefaultPaint;
        (function(TIndicatorDefaultPaint) {
          /**
           * 自动选择。
           *
           */
          TIndicatorDefaultPaint[
            (TIndicatorDefaultPaint['AUTO'] = INDICATOR_DEFAULT_PAINT_AUTO())
          ] = 'AUTO';
          /**
           * 实心圆点指示器，当前项填充selected_fg_color，其他填充fg_color。
           *
           */
          TIndicatorDefaultPaint[
            (TIndicatorDefaultPaint[
              'FILL_DOT'
            ] = INDICATOR_DEFAULT_PAINT_FILL_DOT())
          ] = 'FILL_DOT';
          /**
           * 镂空圆点指示器，当前项填充selected_fg_color，其他镂空fg_color。
           *
           */
          TIndicatorDefaultPaint[
            (TIndicatorDefaultPaint[
              'STROKE_DOT'
            ] = INDICATOR_DEFAULT_PAINT_STROKE_DOT())
          ] = 'STROKE_DOT';
          /**
           * 实心矩形指示器，当前项填充selected_fg_color，其他填充fg_color。
           *
           */
          TIndicatorDefaultPaint[
            (TIndicatorDefaultPaint[
              'FILL_RECT'
            ] = INDICATOR_DEFAULT_PAINT_FILL_RECT())
          ] = 'FILL_RECT';
          /**
           * 镂空矩形指示器，当前项填充selected_fg_color，其他镂空fg_color。
           *
           */
          TIndicatorDefaultPaint[
            (TIndicatorDefaultPaint[
              'STROKE_RECT'
            ] = INDICATOR_DEFAULT_PAINT_STROKE_RECT())
          ] = 'STROKE_RECT';
        })(
          (TIndicatorDefaultPaint =
            exports.TIndicatorDefaultPaint ||
            (exports.TIndicatorDefaultPaint = {}))
        );
        /**
         * 虚拟页面的事件。
         *
         */
        var TVpageEvent;
        (function(TVpageEvent) {
          /**
           * 页面即将打开(动画前)。
           *
           */
          TVpageEvent[
            (TVpageEvent['VPAGE_WILL_OPEN'] = EVT_VPAGE_WILL_OPEN())
          ] = 'VPAGE_WILL_OPEN';
          /**
           * 页面打开完成(动画后)。
           *
           */
          TVpageEvent[(TVpageEvent['VPAGE_OPEN'] = EVT_VPAGE_OPEN())] =
            'VPAGE_OPEN';
          /**
           * 页面已经关闭(动画后)。
           *
           */
          TVpageEvent[(TVpageEvent['VPAGE_CLOSE'] = EVT_VPAGE_CLOSE())] =
            'VPAGE_CLOSE';
        })((TVpageEvent = exports.TVpageEvent || (exports.TVpageEvent = {})));
        /**
         * 资源类型常量定义。
         *
         */
        var TAssetType;
        (function(TAssetType) {
          /**
           * 无效资源。
           *
           */
          TAssetType[(TAssetType['NONE'] = ASSET_TYPE_NONE())] = 'NONE';
          /**
           * 字体资源。
           *
           */
          TAssetType[(TAssetType['FONT'] = ASSET_TYPE_FONT())] = 'FONT';
          /**
           * 图片资源。
           *
           */
          TAssetType[(TAssetType['IMAGE'] = ASSET_TYPE_IMAGE())] = 'IMAGE';
          /**
           * 窗体样式资源。
           *
           */
          TAssetType[(TAssetType['STYLE'] = ASSET_TYPE_STYLE())] = 'STYLE';
          /**
           * UI数据资源。
           *
           */
          TAssetType[(TAssetType['UI'] = ASSET_TYPE_UI())] = 'UI';
          /**
           * XML数据资源。
           *
           */
          TAssetType[(TAssetType['XML'] = ASSET_TYPE_XML())] = 'XML';
          /**
           * 字符串数据资源。
           *
           */
          TAssetType[(TAssetType['STRINGS'] = ASSET_TYPE_STRINGS())] =
            'STRINGS';
          /**
           * JS等脚本资源。
           *
           */
          TAssetType[(TAssetType['SCRIPT'] = ASSET_TYPE_SCRIPT())] = 'SCRIPT';
          /**
           * 流图资源。
           *
           */
          TAssetType[(TAssetType['FLOW'] = ASSET_TYPE_FLOW())] = 'FLOW';
          /**
           * 其它数据资源。
           *
           */
          TAssetType[(TAssetType['DATA'] = ASSET_TYPE_DATA())] = 'DATA';
        })((TAssetType = exports.TAssetType || (exports.TAssetType = {})));
        /**
         * 单个资源的描述信息。
         *
         */
        var TAssetInfo = /** @class */ (function() {
          function TAssetInfo(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 获取类型。
           *
           *
           * @returns 返回类型。
           */
          TAssetInfo.prototype.getType = function() {
            return asset_info_get_type(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取名称。
           *
           *
           * @returns 返回名称。
           */
          TAssetInfo.prototype.getName = function() {
            return asset_info_get_name(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TAssetInfo.prototype, 'type', {
            /**
             * 类型。
             *
             */
            get: function() {
              return asset_info_t_get_prop_type(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TAssetInfo.prototype, 'subtype', {
            /**
             * 子类型。
             *
             */
            get: function() {
              return asset_info_t_get_prop_subtype(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TAssetInfo.prototype, 'isInRom', {
            /**
             * 资源是否在ROM中。
             *
             */
            get: function() {
              return asset_info_t_get_prop_is_in_rom(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TAssetInfo.prototype, 'size', {
            /**
             * 大小。
             *
             */
            get: function() {
              return asset_info_t_get_prop_size(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TAssetInfo.prototype, 'refcount', {
            /**
             * 引用计数。
             *is\_in\_rom == FALSE时才有效。
             *
             */
            get: function() {
              return asset_info_t_get_prop_refcount(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TAssetInfo.prototype, 'name', {
            /**
             * 名称。
             *
             */
            get: function() {
              return asset_info_t_get_prop_name(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TAssetInfo;
        })();
        exports.TAssetInfo = TAssetInfo;
        /**
         * 颜色。
         *
         */
        var TColor = /** @class */ (function() {
          function TColor(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 创建color对象。
           *
           *> 主要供脚本语言使用。
           *
           * @param r 红色通道。
           * @param b 蓝色通道。
           * @param g 绿色通道。
           * @param a alpha通道。
           *
           * @returns color对象。
           */
          TColor.create = function(r, b, g, a) {
            return new TColor(color_create(r, b, g, a));
          };
          /**
           * 创建color对象。
           *
           *> 主要供脚本语言使用。
           *
           * @param str css类似的颜色值。
           *
           * @returns color对象。
           */
          TColor.prototype.fromStr = function(str) {
            return new TColor(
              color_from_str(this != null ? this.nativeObj || this : null, str)
            );
          };
          /**
           * 获取红色通道的值。
           *
           *> 主要供脚本语言使用。
           *
           *
           * @returns 返回红色通道的值。
           */
          TColor.prototype.r = function() {
            return color_r(this != null ? this.nativeObj || this : null);
          };
          /**
           * 获取绿色通道的值。
           *
           *> 主要供脚本语言使用。
           *
           *
           * @returns 返回绿色通道的值。
           */
          TColor.prototype.g = function() {
            return color_g(this != null ? this.nativeObj || this : null);
          };
          /**
           * 获取蓝色通道的值。
           *
           *> 主要供脚本语言使用。
           *
           *
           * @returns 返回蓝色通道的值。
           */
          TColor.prototype.b = function() {
            return color_b(this != null ? this.nativeObj || this : null);
          };
          /**
           * 获取alpha通道的值。
           *
           *> 主要供脚本语言使用。
           *
           *
           * @returns 返回alpha通道的值。
           */
          TColor.prototype.a = function() {
            return color_a(this != null ? this.nativeObj || this : null);
          };
          /**
           * 获取颜色值。
           *
           *> 主要供脚本语言使用。
           *
           *
           * @returns 返回颜色值。
           */
          TColor.prototype.getColor = function() {
            return color_get_color(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 转换为color对象。
           *
           *> 供脚本语言使用。
           *
           * @param color color对象。
           *
           * @returns color对象。
           */
          TColor.cast = function(color) {
            return new TColor(
              color_cast(color != null ? color.nativeObj || color : null)
            );
          };
          /**
           * 销毁color对象。
           *> 主要供脚本语言使用。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TColor.prototype.destroy = function() {
            return color_destroy(this != null ? this.nativeObj || this : null);
          };
          Object.defineProperty(TColor.prototype, 'color', {
            /**
             * 颜色的数值。
             *
             */
            get: function() {
              return color_t_get_prop_color(this.nativeObj);
            },
            set: function(v) {
              color_t_set_prop_color(this.nativeObj, v);
            },
            enumerable: false,
            configurable: true,
          });
          return TColor;
        })();
        exports.TColor = TColor;
        /**
         * 日期时间。
         *
         *> 在嵌入式平台中，在系统初始时，需要调用date\_time\_global\_init设置实际获取/设置系统时间的函数。
         *
         */
        var TDateTime = /** @class */ (function() {
          function TDateTime(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 创建date_time对象，并初始为当前日期和时间(一般供脚本语言中使用)。
           *
           *
           * @returns 返回date_time对象。
           */
          TDateTime.create = function() {
            return new TDateTime(date_time_create());
          };
          /**
           * 设置年。
           *
           * @param year 年。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.setYear = function(year) {
            return date_time_set_year(
              this != null ? this.nativeObj || this : null,
              year
            );
          };
          /**
           * 设置月。
           *
           * @param month 月。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.setMonth = function(month) {
            return date_time_set_month(
              this != null ? this.nativeObj || this : null,
              month
            );
          };
          /**
           * 设置日。
           *
           * @param day 日。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.setDay = function(day) {
            return date_time_set_day(
              this != null ? this.nativeObj || this : null,
              day
            );
          };
          /**
           * 设置小时。
           *
           * @param hour 小时。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.setHour = function(hour) {
            return date_time_set_hour(
              this != null ? this.nativeObj || this : null,
              hour
            );
          };
          /**
           * 设置分钟。
           *
           * @param minute 分钟。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.setMinute = function(minute) {
            return date_time_set_minute(
              this != null ? this.nativeObj || this : null,
              minute
            );
          };
          /**
           * 设置秒。
           *
           * @param second 秒。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.setSecond = function(second) {
            return date_time_set_second(
              this != null ? this.nativeObj || this : null,
              second
            );
          };
          /**
           * 设置当前时间。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.set = function() {
            return date_time_set(this != null ? this.nativeObj || this : null);
          };
          /**
           * 从time转换而来。
           *
           * @param time 时间。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.fromTime = function(time) {
            return date_time_from_time(
              this != null ? this.nativeObj || this : null,
              time
            );
          };
          /**
           * 转换成time。
           *
           *
           * @returns 返回time。
           */
          TDateTime.prototype.toTime = function() {
            return date_time_to_time(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 加上一个偏移量(s)。
           *
           * @param delta 偏移量(s)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.addDelta = function(delta) {
            return date_time_add_delta(
              this != null ? this.nativeObj || this : null,
              delta
            );
          };
          /**
           * 是否是闰年。
           *
           * @param year 年份。
           *
           * @returns 返回TRUE表示是，否则表示否。
           */
          TDateTime.isLeap = function(year) {
            return date_time_is_leap(year);
          };
          /**
           * 获取指定年份月份的天数。
           *
           * @param year 年份。
           * @param montn 月份(1-12)。
           *
           * @returns 返回大于0表示天数，否则表示失败。
           */
          TDateTime.getDays = function(year, montn) {
            return date_time_get_days(year, montn);
          };
          /**
           * 获取指定日期是周几(0-6, Sunday = 0)。。
           *
           * @param year 年份。
           * @param montn 月份(1-12)。
           * @param day 日(1-31)。
           *
           * @returns 返回大于等于0表示周几(0-6)，否则表示失败。
           */
          TDateTime.getWday = function(year, montn, day) {
            return date_time_get_wday(year, montn, day);
          };
          /**
           * 获取指定月份的英文名称(简写)。
           *
           * @param montn 月份(1-12)。
           *
           * @returns 返回指定月份的英文名称(简写)。
           */
          TDateTime.getMonthName = function(montn) {
            return date_time_get_month_name(montn);
          };
          /**
           * 获取周几的英文名称(简写)。
           *
           * @param wday 星期几(0-6, Sunday = 0)。
           *
           * @returns 返回指定周几的英文名称(简写)。
           */
          TDateTime.getWdayName = function(wday) {
            return date_time_get_wday_name(wday);
          };
          /**
           * 销毁date_time对象(一般供脚本语言中使用)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDateTime.prototype.destroy = function() {
            return date_time_destroy(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TDateTime.prototype, 'second', {
            /**
             * 秒(0 - 59)。
             *
             */
            get: function() {
              return date_time_t_get_prop_second(this.nativeObj);
            },
            set: function(v) {
              this.setSecond(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDateTime.prototype, 'minute', {
            /**
             * 分(0 - 59)。
             *
             */
            get: function() {
              return date_time_t_get_prop_minute(this.nativeObj);
            },
            set: function(v) {
              this.setMinute(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDateTime.prototype, 'hour', {
            /**
             * 时(0 - 23)。
             *
             */
            get: function() {
              return date_time_t_get_prop_hour(this.nativeObj);
            },
            set: function(v) {
              this.setHour(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDateTime.prototype, 'day', {
            /**
             * 日(1-31)。
             *
             */
            get: function() {
              return date_time_t_get_prop_day(this.nativeObj);
            },
            set: function(v) {
              this.setDay(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDateTime.prototype, 'wday', {
            /**
             * 星期几(0-6, Sunday = 0)。
             *
             */
            get: function() {
              return date_time_t_get_prop_wday(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDateTime.prototype, 'month', {
            /**
             * 月(1-12)。
             *
             */
            get: function() {
              return date_time_t_get_prop_month(this.nativeObj);
            },
            set: function(v) {
              this.setMonth(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDateTime.prototype, 'year', {
            /**
             * 年。
             *
             */
            get: function() {
              return date_time_t_get_prop_year(this.nativeObj);
            },
            set: function(v) {
              this.setYear(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TDateTime;
        })();
        exports.TDateTime = TDateTime;
        /**
         * 缓动作动画常量定义。
         *
         */
        var TEasingType;
        (function(TEasingType) {
          /**
           * EASING_LINEAR。
           *
           */
          TEasingType[(TEasingType['LINEAR'] = EASING_LINEAR())] = 'LINEAR';
          /**
           * EASING_QUADRATIC_IN
           *
           */
          TEasingType[(TEasingType['QUADRATIC_IN'] = EASING_QUADRATIC_IN())] =
            'QUADRATIC_IN';
          /**
           * EASING_QUADRATIC_OUT
           *
           */
          TEasingType[(TEasingType['QUADRATIC_OUT'] = EASING_QUADRATIC_OUT())] =
            'QUADRATIC_OUT';
          /**
           * EASING_QUADRATIC_INOUT
           *
           */
          TEasingType[
            (TEasingType['QUADRATIC_INOUT'] = EASING_QUADRATIC_INOUT())
          ] = 'QUADRATIC_INOUT';
          /**
           * EASING_CUBIC_IN
           *
           */
          TEasingType[(TEasingType['CUBIC_IN'] = EASING_CUBIC_IN())] =
            'CUBIC_IN';
          /**
           * EASING_CUBIC_OUT
           *
           */
          TEasingType[(TEasingType['CUBIC_OUT'] = EASING_CUBIC_OUT())] =
            'CUBIC_OUT';
          /**
           * EASING_SIN_IN
           *
           */
          TEasingType[(TEasingType['SIN_IN'] = EASING_SIN_IN())] = 'SIN_IN';
          /**
           * EASING_SIN_OUT
           *
           */
          TEasingType[(TEasingType['SIN_OUT'] = EASING_SIN_OUT())] = 'SIN_OUT';
          /**
           * EASING_SIN_OUT
           *
           */
          TEasingType[(TEasingType['SIN_INOUT'] = EASING_SIN_INOUT())] =
            'SIN_INOUT';
          /**
           * EASING_POW_IN
           *
           */
          TEasingType[(TEasingType['POW_IN'] = EASING_POW_IN())] = 'POW_IN';
          /**
           * EASING_POW_OUT
           *
           */
          TEasingType[(TEasingType['POW_OUT'] = EASING_POW_OUT())] = 'POW_OUT';
          /**
           * EASING_POW_INOUT
           *
           */
          TEasingType[(TEasingType['POW_INOUT'] = EASING_POW_INOUT())] =
            'POW_INOUT';
          /**
           * EASING_CIRCULAR_IN
           *
           */
          TEasingType[(TEasingType['CIRCULAR_IN'] = EASING_CIRCULAR_IN())] =
            'CIRCULAR_IN';
          /**
           * EASING_CIRCULAR_OUT
           *
           */
          TEasingType[(TEasingType['CIRCULAR_OUT'] = EASING_CIRCULAR_OUT())] =
            'CIRCULAR_OUT';
          /**
           * EASING_CIRCULAR_INOUT
           *
           */
          TEasingType[
            (TEasingType['CIRCULAR_INOUT'] = EASING_CIRCULAR_INOUT())
          ] = 'CIRCULAR_INOUT';
          /**
           * EASING_ELASTIC_IN
           *
           */
          TEasingType[(TEasingType['ELASTIC_IN'] = EASING_ELASTIC_IN())] =
            'ELASTIC_IN';
          /**
           * EASING_ELASTIC_OUT
           *
           */
          TEasingType[(TEasingType['ELASTIC_OUT'] = EASING_ELASTIC_OUT())] =
            'ELASTIC_OUT';
          /**
           * EASING_ELASTIC_INOUT
           *
           */
          TEasingType[(TEasingType['ELASTIC_INOUT'] = EASING_ELASTIC_INOUT())] =
            'ELASTIC_INOUT';
          /**
           * EASING_BACK_IN
           *
           */
          TEasingType[(TEasingType['BACK_IN'] = EASING_BACK_IN())] = 'BACK_IN';
          /**
           * EASING_BACK_OUT
           *
           */
          TEasingType[(TEasingType['BACK_OUT'] = EASING_BACK_OUT())] =
            'BACK_OUT';
          /**
           * EASING_BACK_INOUT
           *
           */
          TEasingType[(TEasingType['BACK_INOUT'] = EASING_BACK_INOUT())] =
            'BACK_INOUT';
          /**
           * EASING_BOUNCE_IN
           *
           */
          TEasingType[(TEasingType['BOUNCE_IN'] = EASING_BOUNCE_IN())] =
            'BOUNCE_IN';
          /**
           * EASING_BOUNCE_OUT
           *
           */
          TEasingType[(TEasingType['BOUNCE_OUT'] = EASING_BOUNCE_OUT())] =
            'BOUNCE_OUT';
          /**
           * EASING_BOUNCE_INOUT
           *
           */
          TEasingType[(TEasingType['BOUNCE_INOUT'] = EASING_BOUNCE_INOUT())] =
            'BOUNCE_INOUT';
        })((TEasingType = exports.TEasingType || (exports.TEasingType = {})));
        /**
         * idle_manager_t管理器。
         *
         */
        var TIdleManager = /** @class */ (function() {
          function TIdleManager(nativeObj) {
            this.nativeObj = nativeObj;
          }
          return TIdleManager;
        })();
        exports.TIdleManager = TIdleManager;
        /**
         * MIME_TYPE。
         *
         */
        var TMIME_TYPE;
        (function(TMIME_TYPE) {
          /**
           * "application/envoy"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_ENVOY'] = MIME_TYPE_APPLICATION_ENVOY())
          ] = 'APPLICATION_ENVOY';
          /**
           * "application/fractals"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_FRACTALS'
            ] = MIME_TYPE_APPLICATION_FRACTALS())
          ] = 'APPLICATION_FRACTALS';
          /**
           * "application/futuresplash"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_FUTURESPLASH'
            ] = MIME_TYPE_APPLICATION_FUTURESPLASH())
          ] = 'APPLICATION_FUTURESPLASH';
          /**
           * "application/hta"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_HTA'] = MIME_TYPE_APPLICATION_HTA())
          ] = 'APPLICATION_HTA';
          /**
           * "application/json"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_JSON'] = MIME_TYPE_APPLICATION_JSON())
          ] = 'APPLICATION_JSON';
          /**
           * "application/ubjson"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_UBJSON'] = MIME_TYPE_APPLICATION_UBJSON())
          ] = 'APPLICATION_UBJSON';
          /**
           * "application/mac-binhex40"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_MAC_BINHEX40'
            ] = MIME_TYPE_APPLICATION_MAC_BINHEX40())
          ] = 'APPLICATION_MAC_BINHEX40';
          /**
           * "application/msword"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_MSWORD'] = MIME_TYPE_APPLICATION_MSWORD())
          ] = 'APPLICATION_MSWORD';
          /**
           * "application/octet-stream"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_OCTET_STREAM'
            ] = MIME_TYPE_APPLICATION_OCTET_STREAM())
          ] = 'APPLICATION_OCTET_STREAM';
          /**
           * "application/oda"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_ODA'] = MIME_TYPE_APPLICATION_ODA())
          ] = 'APPLICATION_ODA';
          /**
           * "application/olescript"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_OLESCRIPT'
            ] = MIME_TYPE_APPLICATION_OLESCRIPT())
          ] = 'APPLICATION_OLESCRIPT';
          /**
           * "application/pdf"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_PDF'] = MIME_TYPE_APPLICATION_PDF())
          ] = 'APPLICATION_PDF';
          /**
           * "application/pics-rules"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_PICS_RULES'
            ] = MIME_TYPE_APPLICATION_PICS_RULES())
          ] = 'APPLICATION_PICS_RULES';
          /**
           * "application/pkcs10"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_PKCS10'] = MIME_TYPE_APPLICATION_PKCS10())
          ] = 'APPLICATION_PKCS10';
          /**
           * "application/pkix-crl"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_PKIX_CRL'
            ] = MIME_TYPE_APPLICATION_PKIX_CRL())
          ] = 'APPLICATION_PKIX_CRL';
          /**
           * "application/postscript"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_POSTSCRIPT'
            ] = MIME_TYPE_APPLICATION_POSTSCRIPT())
          ] = 'APPLICATION_POSTSCRIPT';
          /**
           * "application/rtf"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_RTF'] = MIME_TYPE_APPLICATION_RTF())
          ] = 'APPLICATION_RTF';
          /**
           * "application/vnd.ms-excel"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_VND_MS_EXCEL'
            ] = MIME_TYPE_APPLICATION_VND_MS_EXCEL())
          ] = 'APPLICATION_VND_MS_EXCEL';
          /**
           * "application/vnd.ms-outlook"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_VND_MS_OUTLOOK'
            ] = MIME_TYPE_APPLICATION_VND_MS_OUTLOOK())
          ] = 'APPLICATION_VND_MS_OUTLOOK';
          /**
           * "application/vnd.ms-pkicertstore"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_VND_MS_PKICERTSTORE'
            ] = MIME_TYPE_APPLICATION_VND_MS_PKICERTSTORE())
          ] = 'APPLICATION_VND_MS_PKICERTSTORE';
          /**
           * "application/vnd.ms-pkiseccat"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_VND_MS_PKISECCAT'
            ] = MIME_TYPE_APPLICATION_VND_MS_PKISECCAT())
          ] = 'APPLICATION_VND_MS_PKISECCAT';
          /**
           * "application/vnd.ms-pkistl"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_VND_MS_PKISTL'
            ] = MIME_TYPE_APPLICATION_VND_MS_PKISTL())
          ] = 'APPLICATION_VND_MS_PKISTL';
          /**
           * "application/vnd.ms-powerpoint"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_VND_MS_POWERPOINT'
            ] = MIME_TYPE_APPLICATION_VND_MS_POWERPOINT())
          ] = 'APPLICATION_VND_MS_POWERPOINT';
          /**
           * "application/vnd.ms-project"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_VND_MS_PROJECT'
            ] = MIME_TYPE_APPLICATION_VND_MS_PROJECT())
          ] = 'APPLICATION_VND_MS_PROJECT';
          /**
           * "application/vnd.ms-works"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_VND_MS_WORKS'
            ] = MIME_TYPE_APPLICATION_VND_MS_WORKS())
          ] = 'APPLICATION_VND_MS_WORKS';
          /**
           * "application/winhlp"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_WINHLP'] = MIME_TYPE_APPLICATION_WINHLP())
          ] = 'APPLICATION_WINHLP';
          /**
           * "application/x-bcpio"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_BCPIO'
            ] = MIME_TYPE_APPLICATION_X_BCPIO())
          ] = 'APPLICATION_X_BCPIO';
          /**
           * "application/x-cdf"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_CDF'] = MIME_TYPE_APPLICATION_X_CDF())
          ] = 'APPLICATION_X_CDF';
          /**
           * "application/x-compress"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_COMPRESS'
            ] = MIME_TYPE_APPLICATION_X_COMPRESS())
          ] = 'APPLICATION_X_COMPRESS';
          /**
           * "application/x-compressed"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_COMPRESSED'
            ] = MIME_TYPE_APPLICATION_X_COMPRESSED())
          ] = 'APPLICATION_X_COMPRESSED';
          /**
           * "application/x-cpio"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_CPIO'] = MIME_TYPE_APPLICATION_X_CPIO())
          ] = 'APPLICATION_X_CPIO';
          /**
           * "application/x-csh"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_CSH'] = MIME_TYPE_APPLICATION_X_CSH())
          ] = 'APPLICATION_X_CSH';
          /**
           * "application/x-director"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_DIRECTOR'
            ] = MIME_TYPE_APPLICATION_X_DIRECTOR())
          ] = 'APPLICATION_X_DIRECTOR';
          /**
           * "application/x-dvi"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_DVI'] = MIME_TYPE_APPLICATION_X_DVI())
          ] = 'APPLICATION_X_DVI';
          /**
           * "application/x-gtar"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_GTAR'] = MIME_TYPE_APPLICATION_X_GTAR())
          ] = 'APPLICATION_X_GTAR';
          /**
           * "application/x-gzip"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_GZIP'] = MIME_TYPE_APPLICATION_X_GZIP())
          ] = 'APPLICATION_X_GZIP';
          /**
           * "application/x-hdf"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_HDF'] = MIME_TYPE_APPLICATION_X_HDF())
          ] = 'APPLICATION_X_HDF';
          /**
           * "application/x-iphone"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_IPHONE'
            ] = MIME_TYPE_APPLICATION_X_IPHONE())
          ] = 'APPLICATION_X_IPHONE';
          /**
           * "application/x-javascript"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_JAVASCRIPT'
            ] = MIME_TYPE_APPLICATION_X_JAVASCRIPT())
          ] = 'APPLICATION_X_JAVASCRIPT';
          /**
           * "application/x-latex"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_LATEX'
            ] = MIME_TYPE_APPLICATION_X_LATEX())
          ] = 'APPLICATION_X_LATEX';
          /**
           * "application/x-msaccess"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSACCESS'
            ] = MIME_TYPE_APPLICATION_X_MSACCESS())
          ] = 'APPLICATION_X_MSACCESS';
          /**
           * "application/x-mscardfile"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSCARDFILE'
            ] = MIME_TYPE_APPLICATION_X_MSCARDFILE())
          ] = 'APPLICATION_X_MSCARDFILE';
          /**
           * "application/x-msclip"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSCLIP'
            ] = MIME_TYPE_APPLICATION_X_MSCLIP())
          ] = 'APPLICATION_X_MSCLIP';
          /**
           * "application/x-msdownload"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSDOWNLOAD'
            ] = MIME_TYPE_APPLICATION_X_MSDOWNLOAD())
          ] = 'APPLICATION_X_MSDOWNLOAD';
          /**
           * "application/x-msmediaview"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSMEDIAVIEW'
            ] = MIME_TYPE_APPLICATION_X_MSMEDIAVIEW())
          ] = 'APPLICATION_X_MSMEDIAVIEW';
          /**
           * "application/x-msmetafile"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSMETAFILE'
            ] = MIME_TYPE_APPLICATION_X_MSMETAFILE())
          ] = 'APPLICATION_X_MSMETAFILE';
          /**
           * "application/x-msmoney"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSMONEY'
            ] = MIME_TYPE_APPLICATION_X_MSMONEY())
          ] = 'APPLICATION_X_MSMONEY';
          /**
           * "application/x-mspublisher"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSPUBLISHER'
            ] = MIME_TYPE_APPLICATION_X_MSPUBLISHER())
          ] = 'APPLICATION_X_MSPUBLISHER';
          /**
           * "application/x-msschedule"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSSCHEDULE'
            ] = MIME_TYPE_APPLICATION_X_MSSCHEDULE())
          ] = 'APPLICATION_X_MSSCHEDULE';
          /**
           * "application/x-msterminal"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSTERMINAL'
            ] = MIME_TYPE_APPLICATION_X_MSTERMINAL())
          ] = 'APPLICATION_X_MSTERMINAL';
          /**
           * "application/x-mswrite"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_MSWRITE'
            ] = MIME_TYPE_APPLICATION_X_MSWRITE())
          ] = 'APPLICATION_X_MSWRITE';
          /**
           * "application/x-netcdf"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_NETCDF'
            ] = MIME_TYPE_APPLICATION_X_NETCDF())
          ] = 'APPLICATION_X_NETCDF';
          /**
           * "application/x-perfmon"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_PERFMON'
            ] = MIME_TYPE_APPLICATION_X_PERFMON())
          ] = 'APPLICATION_X_PERFMON';
          /**
           * "application/x-pkcs12"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_PKCS12'
            ] = MIME_TYPE_APPLICATION_X_PKCS12())
          ] = 'APPLICATION_X_PKCS12';
          /**
           * "application/x-sh"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_SH'] = MIME_TYPE_APPLICATION_X_SH())
          ] = 'APPLICATION_X_SH';
          /**
           * "application/x-shar"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_SHAR'] = MIME_TYPE_APPLICATION_X_SHAR())
          ] = 'APPLICATION_X_SHAR';
          /**
           * "application/x-shockwave-flash"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_SHOCKWAVE_FLASH'
            ] = MIME_TYPE_APPLICATION_X_SHOCKWAVE_FLASH())
          ] = 'APPLICATION_X_SHOCKWAVE_FLASH';
          /**
           * "application/x-stuffit"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_STUFFIT'
            ] = MIME_TYPE_APPLICATION_X_STUFFIT())
          ] = 'APPLICATION_X_STUFFIT';
          /**
           * "application/x-sv4cpio"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_SV4CPIO'
            ] = MIME_TYPE_APPLICATION_X_SV4CPIO())
          ] = 'APPLICATION_X_SV4CPIO';
          /**
           * "application/x-sv4crc"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_SV4CRC'
            ] = MIME_TYPE_APPLICATION_X_SV4CRC())
          ] = 'APPLICATION_X_SV4CRC';
          /**
           * "application/x-tar"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_TAR'] = MIME_TYPE_APPLICATION_X_TAR())
          ] = 'APPLICATION_X_TAR';
          /**
           * "application/x-tcl"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_TCL'] = MIME_TYPE_APPLICATION_X_TCL())
          ] = 'APPLICATION_X_TCL';
          /**
           * "application/x-tex"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_X_TEX'] = MIME_TYPE_APPLICATION_X_TEX())
          ] = 'APPLICATION_X_TEX';
          /**
           * "application/x-texinfo"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_TEXINFO'
            ] = MIME_TYPE_APPLICATION_X_TEXINFO())
          ] = 'APPLICATION_X_TEXINFO';
          /**
           * "application/x-troff"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_TROFF'
            ] = MIME_TYPE_APPLICATION_X_TROFF())
          ] = 'APPLICATION_X_TROFF';
          /**
           * "application/x-ustar"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'APPLICATION_X_USTAR'
            ] = MIME_TYPE_APPLICATION_X_USTAR())
          ] = 'APPLICATION_X_USTAR';
          /**
           * "application/zip"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['APPLICATION_ZIP'] = MIME_TYPE_APPLICATION_ZIP())
          ] = 'APPLICATION_ZIP';
          /**
           * "audio/basic"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['AUDIO_BASIC'] = MIME_TYPE_AUDIO_BASIC())] =
            'AUDIO_BASIC';
          /**
           * "audio/mid"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['AUDIO_MID'] = MIME_TYPE_AUDIO_MID())] =
            'AUDIO_MID';
          /**
           * "audio/mpeg"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['AUDIO_MPEG'] = MIME_TYPE_AUDIO_MPEG())] =
            'AUDIO_MPEG';
          /**
           * "audio/x-aiff"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['AUDIO_X_AIFF'] = MIME_TYPE_AUDIO_X_AIFF())] =
            'AUDIO_X_AIFF';
          /**
           * "audio/x-mpegurl"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['AUDIO_X_MPEGURL'] = MIME_TYPE_AUDIO_X_MPEGURL())
          ] = 'AUDIO_X_MPEGURL';
          /**
           * "audio/x-wav"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['AUDIO_X_WAV'] = MIME_TYPE_AUDIO_X_WAV())] =
            'AUDIO_X_WAV';
          /**
           * "image/bmp"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_BMP'] = MIME_TYPE_IMAGE_BMP())] =
            'IMAGE_BMP';
          /**
           * "image/cis-cod"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['IMAGE_CIS_COD'] = MIME_TYPE_IMAGE_CIS_COD())
          ] = 'IMAGE_CIS_COD';
          /**
           * "image/gif"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_GIF'] = MIME_TYPE_IMAGE_GIF())] =
            'IMAGE_GIF';
          /**
           * "image/ief"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_IEF'] = MIME_TYPE_IMAGE_IEF())] =
            'IMAGE_IEF';
          /**
           * "image/jpeg"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_JPEG'] = MIME_TYPE_IMAGE_JPEG())] =
            'IMAGE_JPEG';
          /**
           * "image/pipeg"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_PIPEG'] = MIME_TYPE_IMAGE_PIPEG())] =
            'IMAGE_PIPEG';
          /**
           * "image/svg+xml"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['IMAGE_SVG_XML'] = MIME_TYPE_IMAGE_SVG_XML())
          ] = 'IMAGE_SVG_XML';
          /**
           * "image/tiff"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_TIFF'] = MIME_TYPE_IMAGE_TIFF())] =
            'IMAGE_TIFF';
          /**
           * "image/x-cmx"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_X_CMX'] = MIME_TYPE_IMAGE_X_CMX())] =
            'IMAGE_X_CMX';
          /**
           * "image/x-icon"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_X_ICON'] = MIME_TYPE_IMAGE_X_ICON())] =
            'IMAGE_X_ICON';
          /**
           * "image/x-rgb"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['IMAGE_X_RGB'] = MIME_TYPE_IMAGE_X_RGB())] =
            'IMAGE_X_RGB';
          /**
           * "image/x-xbitmap"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['IMAGE_X_XBITMAP'] = MIME_TYPE_IMAGE_X_XBITMAP())
          ] = 'IMAGE_X_XBITMAP';
          /**
           * "image/x-xpixmap"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['IMAGE_X_XPIXMAP'] = MIME_TYPE_IMAGE_X_XPIXMAP())
          ] = 'IMAGE_X_XPIXMAP';
          /**
           * "image/x-xwindowdump"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE[
              'IMAGE_X_XWINDOWDUMP'
            ] = MIME_TYPE_IMAGE_X_XWINDOWDUMP())
          ] = 'IMAGE_X_XWINDOWDUMP';
          /**
           * "message/rfc822"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['MESSAGE_RFC822'] = MIME_TYPE_MESSAGE_RFC822())
          ] = 'MESSAGE_RFC822';
          /**
           * "text/css"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['TEXT_CSS'] = MIME_TYPE_TEXT_CSS())] =
            'TEXT_CSS';
          /**
           * "text/h323"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['TEXT_H323'] = MIME_TYPE_TEXT_H323())] =
            'TEXT_H323';
          /**
           * "text/html"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['TEXT_HTML'] = MIME_TYPE_TEXT_HTML())] =
            'TEXT_HTML';
          /**
           * "text/iuls"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['TEXT_IULS'] = MIME_TYPE_TEXT_IULS())] =
            'TEXT_IULS';
          /**
           * "text/plain"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['TEXT_PLAIN'] = MIME_TYPE_TEXT_PLAIN())] =
            'TEXT_PLAIN';
          /**
           * "text/richtext"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['TEXT_RICHTEXT'] = MIME_TYPE_TEXT_RICHTEXT())
          ] = 'TEXT_RICHTEXT';
          /**
           * "text/scriptlet"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['TEXT_SCRIPTLET'] = MIME_TYPE_TEXT_SCRIPTLET())
          ] = 'TEXT_SCRIPTLET';
          /**
           * "text/webviewhtml"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['TEXT_WEBVIEWHTML'] = MIME_TYPE_TEXT_WEBVIEWHTML())
          ] = 'TEXT_WEBVIEWHTML';
          /**
           * "text/x-component"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['TEXT_X_COMPONENT'] = MIME_TYPE_TEXT_X_COMPONENT())
          ] = 'TEXT_X_COMPONENT';
          /**
           * "text/x-setext"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['TEXT_X_SETEXT'] = MIME_TYPE_TEXT_X_SETEXT())
          ] = 'TEXT_X_SETEXT';
          /**
           * "text/x-vcard"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['TEXT_X_VCARD'] = MIME_TYPE_TEXT_X_VCARD())] =
            'TEXT_X_VCARD';
          /**
           * "video/mpeg"。
           *
           */
          TMIME_TYPE[(TMIME_TYPE['VIDEO_MPEG'] = MIME_TYPE_VIDEO_MPEG())] =
            'VIDEO_MPEG';
          /**
           * "video/quicktime"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['VIDEO_QUICKTIME'] = MIME_TYPE_VIDEO_QUICKTIME())
          ] = 'VIDEO_QUICKTIME';
          /**
           * "video/x-msvideo"。
           *
           */
          TMIME_TYPE[
            (TMIME_TYPE['VIDEO_X_MSVIDEO'] = MIME_TYPE_VIDEO_X_MSVIDEO())
          ] = 'VIDEO_X_MSVIDEO';
        })((TMIME_TYPE = exports.TMIME_TYPE || (exports.TMIME_TYPE = {})));
        /**
         * 命名的值。
         *
         */
        var TNamedValue = /** @class */ (function() {
          function TNamedValue(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * 创建named_value对象。
           *
           *
           * @returns 返回named_value对象。
           */
          TNamedValue.create = function() {
            return new TNamedValue(named_value_create());
          };
          /**
           * 转换为named_value对象(供脚本语言使用)。
           *
           * @param nv named_value对象。
           *
           * @returns 返回named_value对象。
           */
          TNamedValue.cast = function(nv) {
            return new TNamedValue(
              named_value_cast(nv != null ? nv.nativeObj || nv : null)
            );
          };
          /**
           * 设置名称。
           *
           * @param name 名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNamedValue.prototype.setName = function(name) {
            return named_value_set_name(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置值。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNamedValue.prototype.setValue = function(value) {
            return named_value_set_value(
              this != null ? this.nativeObj || this : null,
              value != null ? value.nativeObj || value : null
            );
          };
          /**
           * 获取值对象(主要给脚本语言使用)。
           *
           *
           * @returns 返回值对象。
           */
          TNamedValue.prototype.getValue = function() {
            return new TValue(
              named_value_get_value(
                this != null ? this.nativeObj || this : null
              )
            );
          };
          /**
           * 销毁named_value对象。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNamedValue.prototype.destroy = function() {
            return named_value_destroy(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TNamedValue.prototype, 'name', {
            /**
             * 名称。
             *
             */
            get: function() {
              return named_value_t_get_prop_name(this.nativeObj);
            },
            set: function(v) {
              this.setName(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TNamedValue;
        })();
        exports.TNamedValue = TNamedValue;
        /**
         * 对象常见命令定义
         *
         */
        var TObjectCmd;
        (function(TObjectCmd) {
          /**
           * 保存命令
           *
           */
          TObjectCmd[(TObjectCmd['SAVE'] = OBJECT_CMD_SAVE())] = 'SAVE';
          /**
           * 重新加载命令
           *
           */
          TObjectCmd[(TObjectCmd['RELOAD'] = OBJECT_CMD_RELOAD())] = 'RELOAD';
          /**
           * 和前一个属性交换位置
           *>参数为属性的名称或路径。
           *
           */
          TObjectCmd[(TObjectCmd['MOVE_UP'] = OBJECT_CMD_MOVE_UP())] =
            'MOVE_UP';
          /**
           * 和后一个属性交换位置
           *>参数为属性的名称或路径。
           *
           */
          TObjectCmd[(TObjectCmd['MOVE_DOWN'] = OBJECT_CMD_MOVE_DOWN())] =
            'MOVE_DOWN';
          /**
           * 删除属性。
           *>参数为属性的名称或路径。
           *
           */
          TObjectCmd[(TObjectCmd['REMOVE'] = OBJECT_CMD_REMOVE())] = 'REMOVE';
          /**
           * 删除勾选的属性。
           *>参数为属性的名称或路径。
           *
           */
          TObjectCmd[
            (TObjectCmd['REMOVE_CHECKED'] = OBJECT_CMD_REMOVE_CHECKED())
          ] = 'REMOVE_CHECKED';
          /**
           * 清除全部属性。
           *>参数为属性的名称或路径。
           *
           */
          TObjectCmd[(TObjectCmd['CLEAR'] = OBJECT_CMD_CLEAR())] = 'CLEAR';
          /**
           * 增加子项。
           *>参数为属性的名称或路径。
           *
           */
          TObjectCmd[(TObjectCmd['ADD'] = OBJECT_CMD_ADD())] = 'ADD';
          /**
           * 显示对象详细信息。
           *>参数为属性的名称或路径。
           *
           */
          TObjectCmd[(TObjectCmd['DETAIL'] = OBJECT_CMD_DETAIL())] = 'DETAIL';
          /**
           * 编辑子项。
           *>参数为属性的名称或路径。
           *
           */
          TObjectCmd[(TObjectCmd['EDIT'] = OBJECT_CMD_EDIT())] = 'EDIT';
        })((TObjectCmd = exports.TObjectCmd || (exports.TObjectCmd = {})));
        /**
         * 对象常见属性定义
         *
         */
        var TObjectProp;
        (function(TObjectProp) {
          /**
           * 属性的个数。
           *
           */
          TObjectProp[(TObjectProp['SIZE'] = OBJECT_PROP_SIZE())] = 'SIZE';
          /**
           * 属性是否勾选。
           *
           */
          TObjectProp[(TObjectProp['CHECKED'] = OBJECT_PROP_CHECKED())] =
            'CHECKED';
        })((TObjectProp = exports.TObjectProp || (exports.TObjectProp = {})));
        /**
         * 循环记录日志(支持多线程访问)。
         *如果我们把日志写入文件中，随着时间的推移，日志文件会越来越大，最终占满这个磁盘，出现不可预料的错误。
         *rlog提供一个循环记录日志的功能，让日志文件始终不会超出指定的大小，达到指定大小后再从头开始写。
         *
         *> 为了实现简单，我们把日志文件分成0和1两个文件，先写文件0，到达指定最大值的一半时，再写文件1。
         *> 文件1到达指定最大值的一半时，删除文件0，并将文件1改名为文件0，重新创建文件1，继续写文件1，重复此过程。
         *
         */
        var TRlog = /** @class */ (function() {
          function TRlog(nativeObj) {
            this.nativeObj = nativeObj;
          }
          /**
           * rlog_t* log = rlog_create("./logs/%d.log", 1020*1024, 256);
           *rlog_write(log, "hello\n");
           *rlog_destroy(log);
           *```
           *
           * @param filename_pattern 用来确定文件名的路径和文件名。
           * @param max_size log文件占用最大磁盘空间(字节)。
           * @param buff_size 用于指定print时的buff大小。
           *
           * @returns 返回rlog对象。
           */
          TRlog.create = function(filename_pattern, max_size, buff_size) {
            return new TRlog(
              rlog_create(filename_pattern, max_size, buff_size)
            );
          };
          /**
           * 写入一条日志记录。
           *
           * @param str 日志字符串。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TRlog.prototype.write = function(str) {
            return rlog_write(
              this != null ? this.nativeObj || this : null,
              str
            );
          };
          return TRlog;
        })();
        exports.TRlog = TRlog;
        /**
         * 获取当前时间的函数。
         *这里的当前时间是相对的，在嵌入式系统一般相对于开机时间。
         *它本身并没有任何意义，一般用来计算时间间隔，如实现定时器和动画等等。
         *
         */
        var TTimeNow = /** @class */ (function() {
          function TTimeNow() {}
          /**
           * 获取当前时间(秒)。
           *
           *
           * @returns 返回当前时间(秒)。
           */
          TTimeNow.s = function() {
            return time_now_s();
          };
          /**
           * 获取当前时间(毫秒)。
           *
           *
           * @returns 返回当前时间(毫秒)。
           */
          TTimeNow.ms = function() {
            return time_now_ms();
          };
          /**
           * 获取当前时间(微秒)。
           *
           *
           * @returns 返回当前时间(微秒)。
           */
          TTimeNow.us = function() {
            return time_now_us();
          };
          return TTimeNow;
        })();
        exports.TTimeNow = TTimeNow;
        /**
         * 定时器管理器。
         *
         */
        var TTimerManager = /** @class */ (function() {
          function TTimerManager(nativeObj) {
            this.nativeObj = nativeObj;
          }
          return TTimerManager;
        })();
        exports.TTimerManager = TTimerManager;
        /**
         * 函数返回值常量定义。
         *
         */
        var TRet;
        (function(TRet) {
          /**
           * 成功。
           *
           */
          TRet[(TRet['OK'] = RET_OK())] = 'OK';
          /**
           * Out of memory。
           *
           */
          TRet[(TRet['OOM'] = RET_OOM())] = 'OOM';
          /**
           * 失败。
           *
           */
          TRet[(TRet['FAIL'] = RET_FAIL())] = 'FAIL';
          /**
           * 没有实现/不支持。
           *
           */
          TRet[(TRet['NOT_IMPL'] = RET_NOT_IMPL())] = 'NOT_IMPL';
          /**
           * 退出。通常用于主循环。
           *
           */
          TRet[(TRet['QUIT'] = RET_QUIT())] = 'QUIT';
          /**
           * 找到。
           *
           */
          TRet[(TRet['FOUND'] = RET_FOUND())] = 'FOUND';
          /**
           * 对象忙。
           *
           */
          TRet[(TRet['BUSY'] = RET_BUSY())] = 'BUSY';
          /**
           * 移出。通常用于定时器。
           *
           */
          TRet[(TRet['REMOVE'] = RET_REMOVE())] = 'REMOVE';
          /**
           * 重复。通常用于定时器。
           *
           */
          TRet[(TRet['REPEAT'] = RET_REPEAT())] = 'REPEAT';
          /**
           * 没找到。
           *
           */
          TRet[(TRet['NOT_FOUND'] = RET_NOT_FOUND())] = 'NOT_FOUND';
          /**
           * 操作完成。
           *
           */
          TRet[(TRet['DONE'] = RET_DONE())] = 'DONE';
          /**
           * 停止后续操作。
           *
           */
          TRet[(TRet['STOP'] = RET_STOP())] = 'STOP';
          /**
           * 跳过当前项。
           *
           */
          TRet[(TRet['SKIP'] = RET_SKIP())] = 'SKIP';
          /**
           * 继续后续操作。
           *
           */
          TRet[(TRet['CONTINUE'] = RET_CONTINUE())] = 'CONTINUE';
          /**
           * 对象属性变化。
           *
           */
          TRet[(TRet['OBJECT_CHANGED'] = RET_OBJECT_CHANGED())] =
            'OBJECT_CHANGED';
          /**
           * 集合数目变化。
           *
           */
          TRet[(TRet['ITEMS_CHANGED'] = RET_ITEMS_CHANGED())] = 'ITEMS_CHANGED';
          /**
           * 无效参数。
           *
           */
          TRet[(TRet['BAD_PARAMS'] = RET_BAD_PARAMS())] = 'BAD_PARAMS';
          /**
           * 超时。
           *
           */
          TRet[(TRet['TIMEOUT'] = RET_TIMEOUT())] = 'TIMEOUT';
          /**
           * CRC错误。
           *
           */
          TRet[(TRet['CRC'] = RET_CRC())] = 'CRC';
          /**
           * IO错误。
           *
           */
          TRet[(TRet['IO'] = RET_IO())] = 'IO';
          /**
           * End of Stream
           *
           */
          TRet[(TRet['EOS'] = RET_EOS())] = 'EOS';
          /**
           * 没有改变。
           *
           */
          TRet[(TRet['NOT_MODIFIED'] = RET_NOT_MODIFIED())] = 'NOT_MODIFIED';
        })((TRet = exports.TRet || (exports.TRet = {})));
        /**
         * 类型常量定义。
         *
         */
        var TValueType;
        (function(TValueType) {
          /**
           * 无效类型。
           *
           */
          TValueType[(TValueType['INVALID'] = VALUE_TYPE_INVALID())] =
            'INVALID';
          /**
           * BOOL类型。
           *
           */
          TValueType[(TValueType['BOOL'] = VALUE_TYPE_BOOL())] = 'BOOL';
          /**
           * int8_t类型。
           *
           */
          TValueType[(TValueType['INT8'] = VALUE_TYPE_INT8())] = 'INT8';
          /**
           * uint8_t类型。
           *
           */
          TValueType[(TValueType['UINT8'] = VALUE_TYPE_UINT8())] = 'UINT8';
          /**
           * int16_t类型。
           *
           */
          TValueType[(TValueType['INT16'] = VALUE_TYPE_INT16())] = 'INT16';
          /**
           * uint16_t类型。
           *
           */
          TValueType[(TValueType['UINT16'] = VALUE_TYPE_UINT16())] = 'UINT16';
          /**
           * int32_t类型。
           *
           */
          TValueType[(TValueType['INT32'] = VALUE_TYPE_INT32())] = 'INT32';
          /**
           * uint32_t类型。
           *
           */
          TValueType[(TValueType['UINT32'] = VALUE_TYPE_UINT32())] = 'UINT32';
          /**
           * int64_t类型。
           *
           */
          TValueType[(TValueType['INT64'] = VALUE_TYPE_INT64())] = 'INT64';
          /**
           * uint64_t类型。
           *
           */
          TValueType[(TValueType['UINT64'] = VALUE_TYPE_UINT64())] = 'UINT64';
          /**
           * void*类型。
           *
           */
          TValueType[(TValueType['POINTER'] = VALUE_TYPE_POINTER())] =
            'POINTER';
          /**
           * float_t类型。
           *
           */
          TValueType[(TValueType['FLOAT'] = VALUE_TYPE_FLOAT())] = 'FLOAT';
          /**
           * float类型。
           *
           */
          TValueType[(TValueType['FLOAT32'] = VALUE_TYPE_FLOAT32())] =
            'FLOAT32';
          /**
           * double类型。
           *
           */
          TValueType[(TValueType['DOUBLE'] = VALUE_TYPE_DOUBLE())] = 'DOUBLE';
          /**
           * char*类型。
           *
           */
          TValueType[(TValueType['STRING'] = VALUE_TYPE_STRING())] = 'STRING';
          /**
           * wchar_t*类型。
           *
           */
          TValueType[(TValueType['WSTRING'] = VALUE_TYPE_WSTRING())] =
            'WSTRING';
          /**
           * object_t*类型。
           *
           */
          TValueType[(TValueType['OBJECT'] = VALUE_TYPE_OBJECT())] = 'OBJECT';
          /**
           * 带长度的字符串。
           *
           */
          TValueType[(TValueType['SIZED_STRING'] = VALUE_TYPE_SIZED_STRING())] =
            'SIZED_STRING';
          /**
           * 二进制数据。
           *
           */
          TValueType[(TValueType['BINARY'] = VALUE_TYPE_BINARY())] = 'BINARY';
          /**
           * 二进制数据(UBJSON)。
           *
           */
          TValueType[(TValueType['UBJSON'] = VALUE_TYPE_UBJSON())] = 'UBJSON';
          /**
           * 特殊用途。
           *
           */
          TValueType[(TValueType['TOKEN'] = VALUE_TYPE_TOKEN())] = 'TOKEN';
        })((TValueType = exports.TValueType || (exports.TValueType = {})));
        /**
         * 资源管理器。
         *这里的资源管理器并非Windows下的文件浏览器，而是负责对各种资源，比如字体、窗体样式、图片、界面数据、字符串和其它数据的进行集中管理的组件。引入资源管理器的目的有以下几个：
         *
         ** 让上层不需要了解存储的方式。
         *在没有文件系统时或者内存紧缺时，把资源转成常量数组直接编译到代码中。在有文件系统而且内存充足时，资源放在文件系统中。在有网络时，资源也可以存放在服务器上(暂未实现)。资源管理器为上层提供统一的接口，让上层而不用关心底层的存储方式。
         *
         ** 让上层不需要了解资源的具体格式。
         *比如一个名为earth的图片，没有文件系统或内存紧缺，图片直接用位图数据格式存在ROM中，而有文件系统时，则用PNG格式存放在文件系统中。资源管理器让上层不需要关心图片的格式，访问时指定图片的名称即可(不用指定扩展名)。
         *
         ** 让上层不需要了解屏幕的密度。
         *不同的屏幕密度下需要加载不同的图片，比如MacPro的Retina屏就需要用双倍解析度的图片，否则就出现界面模糊。AWTK以后会支持PC软件和手机软件的开发，所以资源管理器需要为此提供支持，让上层不需关心屏幕的密度。
         *
         ** 对资源进行内存缓存。
         *不同类型的资源使用方式是不一样的，比如字体和窗体样式加载之后会一直使用，UI文件在生成界面之后就暂时不需要了，PNG文件解码之后就只需要保留解码的位图数据即可。资源管理器配合图片管理器等其它组件实现资源的自动缓存。
         *
         *当从文件系统加载资源时，目录结构要求如下：
         *
         *```
         *assets/{theme}/raw/
         *fonts   字体
         *images  图片
         *x1   普通密度屏幕的图片。
         *x2   2倍密度屏幕的图片。
         *x3   3倍密度屏幕的图片。
         *xx   密度无关的图片。
         *strings 需要翻译的字符串。
         *styles  窗体样式数据。
         *ui      UI描述数据。
         *```
         *
         */
        var TAssetsManager = /** @class */ (function(_super) {
          __extends(TAssetsManager, _super);
          function TAssetsManager(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 获取缺省资源管理器。
           *
           *
           * @returns 返回asset manager对象。
           */
          TAssetsManager.instance = function() {
            return new TAssetsManager(assets_manager());
          };
          /**
           * 设置当前的主题。
           *
           * @param theme 主题名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAssetsManager.prototype.setTheme = function(theme) {
            return assets_manager_set_theme(
              this != null ? this.nativeObj || this : null,
              theme
            );
          };
          /**
           * 在资源管理器的缓存中查找指定的资源并引用它，如果缓存中不存在，尝试加载该资源。
           *
           * @param type 资源的类型。
           * @param name 资源的名称。
           *
           * @returns 返回资源。
           */
          TAssetsManager.prototype.ref = function(type, name) {
            return new TAssetInfo(
              assets_manager_ref(
                this != null ? this.nativeObj || this : null,
                type,
                name
              )
            );
          };
          /**
           * 在资源管理器的缓存中查找指定的资源并引用它，如果缓存中不存在，尝试加载该资源。
           *
           * @param type 资源的类型。
           * @param subtype 资源的子类型。
           * @param name 资源的名称。
           *
           * @returns 返回资源。
           */
          TAssetsManager.prototype.refEx = function(type, subtype, name) {
            return new TAssetInfo(
              assets_manager_ref_ex(
                this != null ? this.nativeObj || this : null,
                type,
                subtype,
                name
              )
            );
          };
          /**
           * 释放指定的资源。
           *
           * @param info 资源。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TAssetsManager.prototype.unref = function(info) {
            return assets_manager_unref(
              this != null ? this.nativeObj || this : null,
              info != null ? info.nativeObj || info : null
            );
          };
          return TAssetsManager;
        })(TEmitter);
        exports.TAssetsManager = TAssetsManager;
        /**
         * 滚轮事件。
         *
         */
        var TWheelEvent = /** @class */ (function(_super) {
          __extends(TWheelEvent, _super);
          function TWheelEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转wheel_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns event对象。
           */
          TWheelEvent.cast = function(event) {
            return new TWheelEvent(
              wheel_event_cast(event != null ? event.nativeObj || event : null)
            );
          };
          Object.defineProperty(TWheelEvent.prototype, 'dy', {
            /**
             * 滚轮的y值。
             *
             */
            get: function() {
              return wheel_event_t_get_prop_dy(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWheelEvent.prototype, 'alt', {
            /**
             * alt键是否按下。
             *
             */
            get: function() {
              return wheel_event_t_get_prop_alt(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWheelEvent.prototype, 'ctrl', {
            /**
             * ctrl键是否按下。
             *
             */
            get: function() {
              return wheel_event_t_get_prop_ctrl(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWheelEvent.prototype, 'shift', {
            /**
             * shift键是否按下。
             *
             */
            get: function() {
              return wheel_event_t_get_prop_shift(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TWheelEvent;
        })(TEvent);
        exports.TWheelEvent = TWheelEvent;
        /**
         * 滚轮事件。
         *
         */
        var TOrientationEvent = /** @class */ (function(_super) {
          __extends(TOrientationEvent, _super);
          function TOrientationEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转orientation_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns event对象。
           */
          TOrientationEvent.cast = function(event) {
            return new TOrientationEvent(
              orientation_event_cast(
                event != null ? event.nativeObj || event : null
              )
            );
          };
          Object.defineProperty(TOrientationEvent.prototype, 'orientation', {
            /**
             * 屏幕方向。
             *
             */
            get: function() {
              return orientation_event_t_get_prop_orientation(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TOrientationEvent;
        })(TEvent);
        exports.TOrientationEvent = TOrientationEvent;
        /**
         * 值变化事件。
         *
         */
        var TValueChangeEvent = /** @class */ (function(_super) {
          __extends(TValueChangeEvent, _super);
          function TValueChangeEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转value_change_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns event对象。
           */
          TValueChangeEvent.cast = function(event) {
            return new TValueChangeEvent(
              value_change_event_cast(
                event != null ? event.nativeObj || event : null
              )
            );
          };
          return TValueChangeEvent;
        })(TEvent);
        exports.TValueChangeEvent = TValueChangeEvent;
        /**
         * 指针事件。
         *
         */
        var TPointerEvent = /** @class */ (function(_super) {
          __extends(TPointerEvent, _super);
          function TPointerEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转pointer_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns event对象。
           */
          TPointerEvent.cast = function(event) {
            return new TPointerEvent(
              pointer_event_cast(
                event != null ? event.nativeObj || event : null
              )
            );
          };
          Object.defineProperty(TPointerEvent.prototype, 'x', {
            /**
             * x坐标。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPointerEvent.prototype, 'y', {
            /**
             * y坐标。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPointerEvent.prototype, 'button', {
            /**
             * button。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_button(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPointerEvent.prototype, 'pressed', {
            /**
             * 指针是否按下。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_pressed(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPointerEvent.prototype, 'alt', {
            /**
             * alt键是否按下。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_alt(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPointerEvent.prototype, 'ctrl', {
            /**
             * ctrl键是否按下。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_ctrl(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPointerEvent.prototype, 'cmd', {
            /**
             * cmd键是否按下。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_cmd(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPointerEvent.prototype, 'menu', {
            /**
             * menu键是否按下。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_menu(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPointerEvent.prototype, 'shift', {
            /**
             * shift键是否按下。
             *
             */
            get: function() {
              return pointer_event_t_get_prop_shift(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TPointerEvent;
        })(TEvent);
        exports.TPointerEvent = TPointerEvent;
        /**
         * 按键事件。
         *
         */
        var TKeyEvent = /** @class */ (function(_super) {
          __extends(TKeyEvent, _super);
          function TKeyEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转key_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns event对象。
           */
          TKeyEvent.cast = function(event) {
            return new TKeyEvent(
              key_event_cast(event != null ? event.nativeObj || event : null)
            );
          };
          Object.defineProperty(TKeyEvent.prototype, 'key', {
            /**
             * 键值。
             *
             */
            get: function() {
              return key_event_t_get_prop_key(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'alt', {
            /**
             * alt键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_alt(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'lalt', {
            /**
             * left alt键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_lalt(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'ralt', {
            /**
             * right alt键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_ralt(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'ctrl', {
            /**
             * right alt键是否按下。
             *ctrl键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_ctrl(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'lctrl', {
            /**
             * left ctrl键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_lctrl(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'rctrl', {
            /**
             * right ctrl键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_rctrl(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'shift', {
            /**
             * shift键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_shift(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'lshift', {
            /**
             * left shift键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_lshift(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'rshift', {
            /**
             * right shift键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_rshift(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'cmd', {
            /**
             * left shift键是否按下。
             *cmd/win键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_cmd(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'menu', {
            /**
             * menu键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_menu(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TKeyEvent.prototype, 'capslock', {
            /**
             * capslock键是否按下。
             *
             */
            get: function() {
              return key_event_t_get_prop_capslock(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TKeyEvent;
        })(TEvent);
        exports.TKeyEvent = TKeyEvent;
        /**
         * 绘制事件。
         *
         */
        var TPaintEvent = /** @class */ (function(_super) {
          __extends(TPaintEvent, _super);
          function TPaintEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转paint_event_t对象。主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns event 对象。
           */
          TPaintEvent.cast = function(event) {
            return new TPaintEvent(
              paint_event_cast(event != null ? event.nativeObj || event : null)
            );
          };
          Object.defineProperty(TPaintEvent.prototype, 'c', {
            /**
             * canvas。
             *
             */
            get: function() {
              return new TCanvas(paint_event_t_get_prop_c(this.nativeObj));
            },
            enumerable: false,
            configurable: true,
          });
          return TPaintEvent;
        })(TEvent);
        exports.TPaintEvent = TPaintEvent;
        /**
         * 窗口事件，由窗口管理器触发。
         *
         */
        var TWindowEvent = /** @class */ (function(_super) {
          __extends(TWindowEvent, _super);
          function TWindowEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转window_event_t对象。主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns 对象。
           */
          TWindowEvent.cast = function(event) {
            return new TWindowEvent(
              window_event_cast(event != null ? event.nativeObj || event : null)
            );
          };
          Object.defineProperty(TWindowEvent.prototype, 'window', {
            /**
             * canvas。
             *
             */
            get: function() {
              return new TWidget(
                window_event_t_get_prop_window(this.nativeObj)
              );
            },
            enumerable: false,
            configurable: true,
          });
          return TWindowEvent;
        })(TEvent);
        exports.TWindowEvent = TWindowEvent;
        /**
         * 多点触摸手势事件。
         *
         */
        var TMultiGestureEvent = /** @class */ (function(_super) {
          __extends(TMultiGestureEvent, _super);
          function TMultiGestureEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转multi_gesture_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns event对象。
           */
          TMultiGestureEvent.cast = function(event) {
            return new TMultiGestureEvent(
              multi_gesture_event_cast(
                event != null ? event.nativeObj || event : null
              )
            );
          };
          Object.defineProperty(TMultiGestureEvent.prototype, 'x', {
            /**
             * 中心点x坐标。
             *
             */
            get: function() {
              return multi_gesture_event_t_get_prop_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMultiGestureEvent.prototype, 'y', {
            /**
             * 中心点y坐标。
             *
             */
            get: function() {
              return multi_gesture_event_t_get_prop_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMultiGestureEvent.prototype, 'rotation', {
            /**
             * 旋转角度(幅度)增量。（单位弧度）
             *
             */
            get: function() {
              return multi_gesture_event_t_get_prop_rotation(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMultiGestureEvent.prototype, 'distance', {
            /**
             * 两点间的距离增量。(-1,0)表示缩小，(0-1)表示增加。
             *
             */
            get: function() {
              return multi_gesture_event_t_get_prop_distance(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TMultiGestureEvent;
        })(TEvent);
        exports.TMultiGestureEvent = TMultiGestureEvent;
        /**
         * 图片控件基类。
         *
         *本类把图片相关控件的公共行为进行抽象，放到一起方便重用。目前已知的具体实现如下图：
         *
         *
         *
         *> 本类是一个抽象类，不能进行实例化。请在应用程序中使用具体的类，如image\_t。
         *
         *如果需要显示文件系统中的图片，只需将图片名称换成实际的文件名，并加上"file://"前缀即可。如：
         *
         *```
         *<image draw_type="center" image="file://./design/default/images/xx/flag_CN.png" />
         *<gif image="file://./design/default/images/x2/bee.gif" />
         *<svg image="file://./design/default/images/svg/china.bsvg" />
         *```
         *
         */
        var TImageBase = /** @class */ (function(_super) {
          __extends(TImageBase, _super);
          function TImageBase(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 设置控件的图片名称。
           *
           *> 如果需要显示文件系统中的图片，只需将图片名称换成实际的文件名，并加上"file://"前缀即可。
           *
           * @param name 图片名称，该图片必须存在于资源管理器。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageBase.prototype.setImage = function(name) {
            return image_base_set_image(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置控件的旋转角度(仅在WITH_VGCANVAS定义时生效)。
           *
           * @param rotation 旋转角度(幅度)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageBase.prototype.setRotation = function(rotation) {
            return image_base_set_rotation(
              this != null ? this.nativeObj || this : null,
              rotation
            );
          };
          /**
           * 设置控件的缩放比例(仅在WITH_VGCANVAS定义时生效)。
           *
           * @param scale_x X方向缩放比例。
           * @param scale_y Y方向缩放比例。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageBase.prototype.setScale = function(scale_x, scale_y) {
            return image_base_set_scale(
              this != null ? this.nativeObj || this : null,
              scale_x,
              scale_y
            );
          };
          /**
           * 设置控件的锚点(仅在WITH_VGCANVAS定义时生效)。
           *
           * @param anchor_x 锚点X(0-1)。0在控件左边，0.5在控件中间，1在控件右边。
           * @param anchor_y 锚点Y(0-1)。0在控件顶部，0.5在控件中间，1在控件底部。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageBase.prototype.setAnchor = function(anchor_x, anchor_y) {
            return image_base_set_anchor(
              this != null ? this.nativeObj || this : null,
              anchor_x,
              anchor_y
            );
          };
          /**
           * 设置控件的选中状态。
           *
           * @param selected 是否被选中。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageBase.prototype.setSelected = function(selected) {
            return image_base_set_selected(
              this != null ? this.nativeObj || this : null,
              selected
            );
          };
          /**
           * 设置控件是否可以被选中。
           *
           * @param selectable 是否可以被选中。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageBase.prototype.setSelectable = function(selectable) {
            return image_base_set_selectable(
              this != null ? this.nativeObj || this : null,
              selectable
            );
          };
          /**
           * 设置控件是否可以被点击。
           *
           * @param clickable 是否可以被点击。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageBase.prototype.setClickable = function(clickable) {
            return image_base_set_clickable(
              this != null ? this.nativeObj || this : null,
              clickable
            );
          };
          /**
           * 转换为image_base对象(供脚本语言使用)。
           *
           * @param widget image_base对象。
           *
           * @returns image_base对象。
           */
          TImageBase.cast = function(widget) {
            return new TImageBase(
              image_base_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(TImageBase.prototype, 'image', {
            /**
             * 图片的名称。
             *
             */
            get: function() {
              return image_base_t_get_prop_image(this.nativeObj);
            },
            set: function(v) {
              this.setImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageBase.prototype, 'anchorX', {
            /**
             * 锚点X(0-1)。0在控件左边，0.5在控件中间，1在控件右边。
             *
             */
            get: function() {
              return image_base_t_get_prop_anchor_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageBase.prototype, 'anchorY', {
            /**
             * 锚点Y(0-1)。0在控件顶部，0.5在控件中间，1在控件底部。
             *
             */
            get: function() {
              return image_base_t_get_prop_anchor_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageBase.prototype, 'scaleX', {
            /**
             * 控件在X方向上的缩放比例。
             *
             */
            get: function() {
              return image_base_t_get_prop_scale_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageBase.prototype, 'scaleY', {
            /**
             * 控件在Y方向上的缩放比例。
             *
             */
            get: function() {
              return image_base_t_get_prop_scale_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageBase.prototype, 'rotation', {
            /**
             * 控件的旋转角度(幅度)。
             *
             */
            get: function() {
              return image_base_t_get_prop_rotation(this.nativeObj);
            },
            set: function(v) {
              this.setRotation(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageBase.prototype, 'clickable', {
            /**
             * 点击时，是否触发EVT_CLICK事件。
             *
             */
            get: function() {
              return image_base_t_get_prop_clickable(this.nativeObj);
            },
            set: function(v) {
              this.setClickable(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageBase.prototype, 'selectable', {
            /**
             * 是否设置选中状态。
             *
             */
            get: function() {
              return image_base_t_get_prop_selectable(this.nativeObj);
            },
            set: function(v) {
              this.setSelectable(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageBase.prototype, 'selected', {
            /**
             * 当前是否被选中。
             *
             */
            get: function() {
              return image_base_t_get_prop_selected(this.nativeObj);
            },
            set: function(v) {
              this.setSelected(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TImageBase;
        })(TWidget);
        exports.TImageBase = TImageBase;
        /**
         * 可变的style(可实时修改并生效，主要用于在designer中被编辑的控件，或者一些特殊控件)。
         *
         *style\_mutable也对style\_const进行了包装，当用户没修改某个值时，便从style\_const中获取。
         *
         */
        var TStyleMutable = /** @class */ (function(_super) {
          __extends(TStyleMutable, _super);
          function TStyleMutable(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 设置style的名称。
           *
           * @param name 名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TStyleMutable.prototype.setName = function(name) {
            return style_mutable_set_name(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置指定名称整数格式的值。
           *
           * @param state 控件状态。
           * @param name 属性名。
           * @param val 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TStyleMutable.prototype.setInt = function(state, name, val) {
            return style_mutable_set_int(
              this != null ? this.nativeObj || this : null,
              state,
              name,
              val
            );
          };
          /**
           * 转换为style_mutable对象。
           *
           * @param s style对象。
           *
           * @returns style对象。
           */
          TStyleMutable.cast = function(s) {
            return new TStyleMutable(
              style_mutable_cast(s != null ? s.nativeObj || s : null)
            );
          };
          /**
           * 创建style\_mutable对象。
           *
           *> 除了测试程序外不需要直接调用，widget会通过style\_factory\_create创建。
           *
           * @param default_style 缺省的style。
           *
           * @returns style对象。
           */
          TStyleMutable.create = function(default_style) {
            return new TStyleMutable(
              style_mutable_create(
                default_style != null
                  ? default_style.nativeObj || default_style
                  : null
              )
            );
          };
          Object.defineProperty(TStyleMutable.prototype, 'name', {
            /**
             * 名称。
             *
             */
            get: function() {
              return style_mutable_t_get_prop_name(this.nativeObj);
            },
            set: function(v) {
              this.setName(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TStyleMutable;
        })(TStyle);
        exports.TStyleMutable = TStyleMutable;
        /**
         * 窗口。
         *
         *本类把窗口相关的公共行为进行抽象，放到一起方便重用。目前已知的具体实现如下图：
         *
         *
         *
         *> 本类是一个抽象类，不能进行实例化。请在应用程序中使用具体的类，如window\_t。
         *
         */
        var TWindowBase = /** @class */ (function(_super) {
          __extends(TWindowBase, _super);
          function TWindowBase(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 转换为window_base对象(供脚本语言使用)。
           *
           * @param widget window_base对象。
           *
           * @returns window_base对象。
           */
          TWindowBase.cast = function(widget) {
            return new TWindowBase(
              window_base_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(TWindowBase.prototype, 'theme', {
            /**
             * 窗体样式资源的名称。
             *每个窗口都可以有独立的窗体样式文件，如果没指定，则使用系统缺省的窗体样式文件。
             *窗体样式是一个XML文件，放在assets/raw/styles目录下。
             *请参考[窗体样式](https://github.com/zlgopen/awtk/blob/master/docs/theme.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_theme(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'designW', {
            /**
             * 设计时宽度。
             *
             */
            get: function() {
              return window_base_t_get_prop_design_w(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'designH', {
            /**
             * 设计时高度。
             *
             */
            get: function() {
              return window_base_t_get_prop_design_h(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'autoScaleChildrenX', {
            /**
             * 窗口大小与设计时大小不同时，是否自动调整子控件的x坐标。
             *
             */
            get: function() {
              return window_base_t_get_prop_auto_scale_children_x(
                this.nativeObj
              );
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'autoScaleChildrenY', {
            /**
             * 窗口大小与设计时大小不同时，是否自动调整子控件的y坐标。
             *
             */
            get: function() {
              return window_base_t_get_prop_auto_scale_children_y(
                this.nativeObj
              );
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'autoScaleChildrenW', {
            /**
             * 窗口大小与设计时大小不同时，是否自动调整子控件的宽度。
             *
             */
            get: function() {
              return window_base_t_get_prop_auto_scale_children_w(
                this.nativeObj
              );
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'autoScaleChildrenH', {
            /**
             * 窗口大小与设计时大小不同时，是否自动调整子控件的高度。
             *
             */
            get: function() {
              return window_base_t_get_prop_auto_scale_children_h(
                this.nativeObj
              );
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'disableAnim', {
            /**
             * 禁用窗口动画。
             *
             */
            get: function() {
              return window_base_t_get_prop_disable_anim(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'closable', {
            /**
             * 收到EVT_REQUEST_CLOSE_WINDOW是否自动关闭窗口。
             *
             *如果关闭窗口时，需要用户确认:
             *
             ** 1.将closable设置为WINDOW\_CLOSABLE\_CONFIRM
             *
             ** 2.处理窗口的EVT\_REQUEST\_CLOSE\_WINDOW事件
             *
             *> closable在XML中取值为：yes/no/confirm，缺省为yes。
             *
             */
            get: function() {
              return window_base_t_get_prop_closable(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'openAnimHint', {
            /**
             * 打开窗口动画的名称。
             *请参考[窗口动画](https://github.com/zlgopen/awtk/blob/master/docs/window_animator.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_open_anim_hint(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'closeAnimHint', {
            /**
             * 关闭窗口动画的名称。
             *请参考[窗口动画](https://github.com/zlgopen/awtk/blob/master/docs/window_animator.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_close_anim_hint(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'moveFocusPrevKey', {
            /**
             * 向前移动焦点的键值。
             *
             *请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_move_focus_prev_key(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'moveFocusNextKey', {
            /**
             * 向后移动焦点的键值。
             *
             *请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_move_focus_next_key(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'moveFocusUpKey', {
            /**
             * 向上移动焦点的键值。
             *
             *请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_move_focus_up_key(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'moveFocusDownKey', {
            /**
             * 向下移动焦点的键值。
             *
             *请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_move_focus_down_key(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'moveFocusLeftKey', {
            /**
             * 向左移动焦点的键值。
             *
             *请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_move_focus_left_key(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'moveFocusRightKey', {
            /**
             * 向右移动焦点的键值。
             *
             *请参考[控件焦点](https://github.com/zlgopen/awtk/blob/master/docs/widget_focus.md)
             *
             */
            get: function() {
              return window_base_t_get_prop_move_focus_right_key(
                this.nativeObj
              );
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'singleInstance', {
            /**
             * 单例。如果窗口存在，先关闭再打开。
             *
             */
            get: function() {
              return window_base_t_get_prop_single_instance(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TWindowBase.prototype, 'stronglyFocus', {
            /**
             * 点击非focusable控件时，是否让当前焦点控件失去焦点。比如点击窗口空白区域，是否让编辑器失去焦点。
             *
             */
            get: function() {
              return window_base_t_get_prop_strongly_focus(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TWindowBase;
        })(TWidget);
        exports.TWindowBase = TWindowBase;
        /**
         * 窗口管理器。
         *
         */
        var TWindowManager = /** @class */ (function(_super) {
          __extends(TWindowManager, _super);
          function TWindowManager(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 获取全局window_manager对象
           *
           *
           * @returns 对象。
           */
          TWindowManager.instance = function() {
            return new TWindowManager(window_manager());
          };
          /**
           * 转换为window_manager对象(供脚本语言使用)。
           *
           * @param widget window_manager对象。
           *
           * @returns window_manager对象。
           */
          TWindowManager.cast = function(widget) {
            return new TWindowManager(
              window_manager_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 获取最上面的主窗口。
           *
           *
           * @returns 返回窗口对象。
           */
          TWindowManager.prototype.getTopMainWindow = function() {
            return new TWidget(
              window_manager_get_top_main_window(
                this != null ? this.nativeObj || this : null
              )
            );
          };
          /**
           * 获取最上面的窗口。
           *
           *
           * @returns 返回窗口对象。
           */
          TWindowManager.prototype.getTopWindow = function() {
            return new TWidget(
              window_manager_get_top_window(
                this != null ? this.nativeObj || this : null
              )
            );
          };
          /**
           * 获取前一个的窗口。
           *
           *
           * @returns 返回窗口对象。
           */
          TWindowManager.prototype.getPrevWindow = function() {
            return new TWidget(
              window_manager_get_prev_window(
                this != null ? this.nativeObj || this : null
              )
            );
          };
          /**
           * 获取指针当前的X坐标。
           *
           *
           * @returns 返回指针当前的X坐标。
           */
          TWindowManager.prototype.getPointerX = function() {
            return window_manager_get_pointer_x(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取指针当前的Y坐标。
           *
           *
           * @returns 返回指针当前的X坐标。
           */
          TWindowManager.prototype.getPointerY = function() {
            return window_manager_get_pointer_y(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取指针当前是否按下。
           *
           *
           * @returns 返回指针当前是否按下。
           */
          TWindowManager.prototype.getPointerPressed = function() {
            return window_manager_get_pointer_pressed(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取当前窗口动画是否正在播放。
           *
           *
           * @returns 返回TRUE表示正在播放，FALSE表示没有播放。
           */
          TWindowManager.prototype.isAnimating = function() {
            return window_manager_is_animating(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置是否显示FPS。
           *
           * @param show_fps 是否显示FPS。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.setShowFps = function(show_fps) {
            return window_manager_set_show_fps(
              this != null ? this.nativeObj || this : null,
              show_fps
            );
          };
          /**
           * 限制最大帧率。
           *
           *> TK\_MAX\_LOOP\_FPS/max\_fps最好是整数，比如TK\_MAX\_LOOP\_FPS为120，max\_fps可取60/30/20/10等。
           *
           * @param max_fps 最大帧率。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.setMaxFps = function(max_fps) {
            return window_manager_set_max_fps(
              this != null ? this.nativeObj || this : null,
              max_fps
            );
          };
          /**
           * 设置是否忽略用户输入事件。
           *
           * @param ignore_input_events 是否忽略用户输入事件。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.setIgnoreInputEvents = function(
            ignore_input_events
          ) {
            return window_manager_set_ignore_input_events(
              this != null ? this.nativeObj || this : null,
              ignore_input_events
            );
          };
          /**
           * 设置屏保时间。
           *
           * @param screen_saver_time 屏保时间(单位毫秒), 为0关闭屏保。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.setScreenSaverTime = function(
            screen_saver_time
          ) {
            return window_manager_set_screen_saver_time(
              this != null ? this.nativeObj || this : null,
              screen_saver_time
            );
          };
          /**
           * 设置鼠标指针。
           *
           * @param cursor 图片名称(从图片管理器中加载)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.setCursor = function(cursor) {
            return window_manager_set_cursor(
              this != null ? this.nativeObj || this : null,
              cursor
            );
          };
          /**
           * 请求关闭顶层窗口。
           *
           *> 如果顶层窗口时模态对话框，用DIALOG\_QUIT\_NONE调用dialog\_quit。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.back = function() {
            return window_manager_back(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 回到主窗口，关闭之上的全部窗口。
           *
           *> 如果顶层窗口时模态对话框，用DIALOG\_QUIT\_NONE调用dialog\_quit。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.backToHome = function() {
            return window_manager_back_to_home(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 回到指定的窗口，关闭之上的全部窗口。
           *
           *> 如果顶层窗口时模态对话框，用DIALOG\_QUIT\_NONE调用dialog\_quit。
           *
           * @param target 目标窗口的名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.backTo = function(target) {
            return window_manager_back_to(
              this != null ? this.nativeObj || this : null,
              target
            );
          };
          /**
           * 调整原生窗口的大小。
           *
           * @param w 宽度
           * @param h 高度
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.resize = function(w, h) {
            return window_manager_resize(
              this != null ? this.nativeObj || this : null,
              w,
              h
            );
          };
          /**
           * 关闭全部窗口。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindowManager.prototype.closeAll = function() {
            return window_manager_close_all(
              this != null ? this.nativeObj || this : null
            );
          };
          return TWindowManager;
        })(TWidget);
        exports.TWindowManager = TWindowManager;
        /**
         * 画布控件。
         *
         *画布控件让开发者可以自己在控件上绘制需要的内容。
         *
         *canvas\_widget\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于canvas\_widget\_t控件。
         *
         *在xml中使用"canvas"标签创建画布控件。如：
         *
         *```xml
         *<canvas name="paint_vgcanvas" x="0" y="0" w="100%" h="100%" />
         *```
         *
         *> 更多用法请参考：
         *[canvas_widget.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/vgcanvas.xml)
         *
         *在c代码中使用函数canvas\_widget\_create创建画布控件。如：
         *
         *
         *> 创建之后，需要用widget\_on注册EVT\_PAINT事件，并在EVT\_PAINT事件处理函数中绘制。
         *
         *
         *绘制时，可以通过canvas接口去绘制，也可以通过vgcanvas接口去绘制。
         *先从evt获取canvas对象，再通过canvas\_get\_vgcanvas从canvas中获取vgcanvas对象。
         *
         *
         *> 完整示例请参考：
         *[canvas demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/canvas.c)
         *
         *参考：
         *
         ** [canvas接口描述](canvas_t.md)
         ** [vgcanvas接口描述](vgcanvas_t.md)
         *
         */
        var TCanvasWidget = /** @class */ (function(_super) {
          __extends(TCanvasWidget, _super);
          function TCanvasWidget(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建canvas_widget对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TCanvasWidget.create = function(parent, x, y, w, h) {
            return new TCanvasWidget(
              canvas_widget_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为canvas_widget对象(供脚本语言使用)。
           *
           * @param widget canvas_widget对象。
           *
           * @returns canvas_widget对象。
           */
          TCanvasWidget.cast = function(widget) {
            return new TCanvasWidget(
              canvas_widget_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TCanvasWidget;
        })(TWidget);
        exports.TCanvasWidget = TCanvasWidget;
        /**
         * 颜色选择器的颜色分量。
         *控件的名称有严格规定：
         *COLOR_PICKER_CHILD_SV: 水平为Value/Brightness(递增)，垂直为Saturation(递减)。
         *COLOR_PICKER_CHILD_H: 水平为同色，垂直为Hue(递减)。
         *
         */
        var TColorComponent = /** @class */ (function(_super) {
          __extends(TColorComponent, _super);
          function TColorComponent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建color_component对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TColorComponent.create = function(parent, x, y, w, h) {
            return new TColorComponent(
              color_component_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为color_component对象(供脚本语言使用)。
           *
           * @param widget color_component对象。
           *
           * @returns color_component对象。
           */
          TColorComponent.cast = function(widget) {
            return new TColorComponent(
              color_component_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TColorComponent;
        })(TWidget);
        exports.TColorComponent = TColorComponent;
        /**
         * 颜色选择器。
         *
         *color\_picker\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于color\_picker\_t控件。
         *
         *在xml中使用"color\_picker"标签创建颜色选择器控件。如：
         *
         *```xml
         *<color_picker x="0" y="0" w="100%" h="100%" value="orange">
         *<color_component x="0" y="0" w="200" h="200" name="sv"/>
         *<color_component x="210" y="0" w="20" h="200" name="h"/>
         *<color_tile x="0" y="210" w="50%" h="20" name="new" bg_color="green"/>
         *<color_tile x="right" y="210" w="50%" h="20" name="old" bg_color="blue"/>
         *</color_picker>
         *```
         *
         *> 更多用法请参考：
         *[color\_picker](https://github.com/zlgopen/awtk/blob/master/design/default/ui/color_picker.xml)
         *
         *其中的子控件必须按下列规则命名：
         *
         ** r 红色分量。可以是spin_box、edit和slider。
         ** g 绿色分量。可以是spin_box、edit和slider。
         ** b 蓝色分量。可以是spin_box、edit和slider。
         ** h Hue分量。可以是spin_box、edit、slider和color_component。
         ** s Saturation分量。可以是spin_box、edit和slider。
         ** v Value/Brightness分量。可以是spin_box、edit和slider。
         ** sv Saturation和Value/Brightness分量。可以是color_component。
         ** old 旧的值。可以是spin_box、edit和color_tile。
         ** new 新的值。可以是spin_box、edit和color_tile。
         *
         */
        var TColorPicker = /** @class */ (function(_super) {
          __extends(TColorPicker, _super);
          function TColorPicker(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建color_picker对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TColorPicker.create = function(parent, x, y, w, h) {
            return new TColorPicker(
              color_picker_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置颜色。
           *
           * @param color 颜色。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TColorPicker.prototype.setColor = function(color) {
            return color_picker_set_color(
              this != null ? this.nativeObj || this : null,
              color
            );
          };
          /**
           * 转换为color_picker对象(供脚本语言使用)。
           *
           * @param widget color_picker对象。
           *
           * @returns color_picker对象。
           */
          TColorPicker.cast = function(widget) {
            return new TColorPicker(
              color_picker_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(TColorPicker.prototype, 'value', {
            /**
             * 颜色。
             *
             */
            get: function() {
              return color_picker_t_get_prop_value(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TColorPicker;
        })(TWidget);
        exports.TColorPicker = TColorPicker;
        /**
         * 将draggable放入目标控件，即可让目标控件或当前窗口可以被拖动。
         *
         *draggable\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于draggable\_t控件。
         *
         *在xml中使用"draggable"标签创建draggable控件。如：
         *
         *```xml
         *<button text="Drag Me" w="80" h="40" x="10" y="10">
         *<draggable />
         *</button>
         *```
         *
         *拖动对话框标题时移动对话框：
         *
         *```xml
         *<dialog_title x="0" y="0" w="100%" h="30" text="Hello AWTK"
         *<draggable drag_window="true"/>
         *</dialog_title>
         *```
         *
         *> 更多用法请参考：
         *[draggable.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/draggable.xml)
         *
         *在c代码中使用函数draggable\_create创建按钮控件。如：
         *
         *
         *> draggable本身不可见，故无需style。
         *
         */
        var TDraggable = /** @class */ (function(_super) {
          __extends(TDraggable, _super);
          function TDraggable(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建draggable对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TDraggable.create = function(parent, x, y, w, h) {
            return new TDraggable(
              draggable_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为draggable对象(供脚本语言使用)。
           *
           * @param widget draggable对象。
           *
           * @returns draggable对象。
           */
          TDraggable.cast = function(widget) {
            return new TDraggable(
              draggable_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 设置top。
           *
           * @param top 拖动范围的顶部限制。缺省为父控件的顶部。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDraggable.prototype.setTop = function(top) {
            return draggable_set_top(
              this != null ? this.nativeObj || this : null,
              top
            );
          };
          /**
           * 设置bottom。
           *
           * @param bottom 拖动范围的底部限制。缺省为父控件的底部。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDraggable.prototype.setBottom = function(bottom) {
            return draggable_set_bottom(
              this != null ? this.nativeObj || this : null,
              bottom
            );
          };
          /**
           * 设置left。
           *
           * @param left 拖动范围的左边限制。缺省为父控件的左边。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDraggable.prototype.setLeft = function(left) {
            return draggable_set_left(
              this != null ? this.nativeObj || this : null,
              left
            );
          };
          /**
           * 设置right。
           *
           * @param right 拖动范围的右边限制。缺省为父控件的右边边。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDraggable.prototype.setRight = function(right) {
            return draggable_set_right(
              this != null ? this.nativeObj || this : null,
              right
            );
          };
          /**
           * 设置vertical_only。
           *
           * @param vertical_only 只允许垂直拖动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDraggable.prototype.setVerticalOnly = function(vertical_only) {
            return draggable_set_vertical_only(
              this != null ? this.nativeObj || this : null,
              vertical_only
            );
          };
          /**
           * 设置horizontal_only。
           *
           * @param horizontal_only 只允许水平拖动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDraggable.prototype.setHorizontalOnly = function(horizontal_only) {
            return draggable_set_horizontal_only(
              this != null ? this.nativeObj || this : null,
              horizontal_only
            );
          };
          /**
           * 设置drag_window。
           *拖动窗口而不是父控件。比如放在对话框的titlebar上，拖动titlebar其实是希望拖动对话框。
           *
           * @param drag_window drag_window
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDraggable.prototype.setDragWindow = function(drag_window) {
            return draggable_set_drag_window(
              this != null ? this.nativeObj || this : null,
              drag_window
            );
          };
          Object.defineProperty(TDraggable.prototype, 'top', {
            /**
             * 拖动范围的顶部限制。缺省为父控件的顶部。
             *
             */
            get: function() {
              return draggable_t_get_prop_top(this.nativeObj);
            },
            set: function(v) {
              this.setTop(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDraggable.prototype, 'bottom', {
            /**
             * 拖动范围的底部限制。缺省为父控件的底部。
             *
             */
            get: function() {
              return draggable_t_get_prop_bottom(this.nativeObj);
            },
            set: function(v) {
              this.setBottom(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDraggable.prototype, 'left', {
            /**
             * 拖动范围的左边限制。缺省为父控件的左边。
             *
             */
            get: function() {
              return draggable_t_get_prop_left(this.nativeObj);
            },
            set: function(v) {
              this.setLeft(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDraggable.prototype, 'right', {
            /**
             * 拖动范围的右边限制。缺省为父控件的右边边。
             *
             */
            get: function() {
              return draggable_t_get_prop_right(this.nativeObj);
            },
            set: function(v) {
              this.setRight(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDraggable.prototype, 'verticalOnly', {
            /**
             * 只允许垂直拖动。
             *
             */
            get: function() {
              return draggable_t_get_prop_vertical_only(this.nativeObj);
            },
            set: function(v) {
              this.setVerticalOnly(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDraggable.prototype, 'horizontalOnly', {
            /**
             * 只允许水平拖动。
             *
             */
            get: function() {
              return draggable_t_get_prop_horizontal_only(this.nativeObj);
            },
            set: function(v) {
              this.setHorizontalOnly(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDraggable.prototype, 'dragWindow', {
            /**
             * 拖动窗口而不是父控件。比如放在对话框的titlebar上，拖动titlebar其实是希望拖动对话框。
             *
             */
            get: function() {
              return draggable_t_get_prop_drag_window(this.nativeObj);
            },
            set: function(v) {
              this.setDragWindow(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TDraggable;
        })(TWidget);
        exports.TDraggable = TDraggable;
        /**
         * 文件管理/浏览/选择控件。
         *
         *file\_browser\_view\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于file\_browser\_view\_t控件。
         *
         *考虑到文件浏览器界面呈现的多样性，界面呈现工作完全有子控件来完成。
         *
         *file\_browser\_view\_t负责关联文件/文件夹数据到子控件上，子控件需要特定的规范命名。
         *
         ** 名为 "cwd" 的子控件用于显示当前路径。
         *
         ** 名为 "selected_file" 的子控件用于显示当前选择的文件。
         *
         ** 名为 "file" 的子控件用于显示文件项的模板控件。
         *
         ** 名为 "folder" 的子控件用于显示文件夹项的模板控件。
         *
         ** 名为 "return_up" 的子控件用于返回上一级文件夹的模板控件。
         *
         ** 名为 "container" 的子控件为容器控件，通常是scrollview。
         *
         ** 名为 "name" 的子控件用于显示文件和文件夹的名称(放在列表项目内)。
         *
         ** 名为 "size" 的子控件用于显示文件和文件夹的大小(放在列表项目内)。
         *
         ** 名为 "mtime" 的子控件用于显示文件和文件夹的修改时间(放在列表项目内)。
         *
         ** 名为 "ctime" 的子控件用于显示文件和文件夹的创建时间(放在列表项目内)。
         *
         ** 名为 "icon" 的子控件用于显示文件和文件夹的图标(放在列表项目内)。
         *
         ** 类型为 "check_button" 的子控件用于选择(放在列表项目内)。
         *
         *完整示例请参考：
         *
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/file_chooser_for_open.xml
         *
         */
        var TFileBrowserView = /** @class */ (function(_super) {
          __extends(TFileBrowserView, _super);
          function TFileBrowserView(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建file_browser_view对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TFileBrowserView.create = function(parent, x, y, w, h) {
            return new TFileBrowserView(
              file_browser_view_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为file_browser_view对象(供脚本语言使用)。
           *
           * @param widget file_browser_view对象。
           *
           * @returns file_browser_view对象。
           */
          TFileBrowserView.cast = function(widget) {
            return new TFileBrowserView(
              file_browser_view_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置 初始文件夹。
           *
           * @param init_dir 初始文件夹。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.setInitDir = function(init_dir) {
            return file_browser_view_set_init_dir(
              this != null ? this.nativeObj || this : null,
              init_dir
            );
          };
          /**
           * 设置 顶层文件夹。
           *
           * @param top_dir 初始文件夹。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.setTopDir = function(top_dir) {
            return file_browser_view_set_top_dir(
              this != null ? this.nativeObj || this : null,
              top_dir
            );
          };
          /**
           * 设置 过滤规则。
           *> files_only 表示只列出文件，dir_only 表示只列出目录，其它表示只列出满足扩展名文件集合(如：.jpg.png.gif)。
           *
           * @param filter 过滤规则。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.setFilter = function(filter) {
            return file_browser_view_set_filter(
              this != null ? this.nativeObj || this : null,
              filter
            );
          };
          /**
           * 重新加载。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.reload = function() {
            return file_browser_view_reload(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置 忽略隐藏文件。
           *
           * @param ignore_hidden_files 忽略隐藏文件。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.setIgnoreHiddenFiles = function(
            ignore_hidden_files
          ) {
            return file_browser_view_set_ignore_hidden_files(
              this != null ? this.nativeObj || this : null,
              ignore_hidden_files
            );
          };
          /**
           * 设置 是否为升序排序。
           *
           * @param sort_ascending 是否为升序排序。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.setSortAscending = function(
            sort_ascending
          ) {
            return file_browser_view_set_sort_ascending(
              this != null ? this.nativeObj || this : null,
              sort_ascending
            );
          };
          /**
           * 设置 是否显示checkbutton。
           *
           * @param show_check_button 是否显示checkbutton。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.setShowCheckButton = function(
            show_check_button
          ) {
            return file_browser_view_set_show_check_button(
              this != null ? this.nativeObj || this : null,
              show_check_button
            );
          };
          /**
           * 设置 排序方式。可选值(name, size, mtime, type)。
           *
           * @param sort_by 排序方式。可选值(name, size, mtime, type)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.setSortBy = function(sort_by) {
            return file_browser_view_set_sort_by(
              this != null ? this.nativeObj || this : null,
              sort_by
            );
          };
          /**
           * 获取当前路径。
           *
           *
           * @returns 返回当前路径。
           */
          TFileBrowserView.prototype.getCwd = function() {
            return file_browser_view_get_cwd(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 在当前文件夹创建子文件夹。
           *
           * @param name 子文件夹名。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.createDir = function(name) {
            return file_browser_view_create_dir(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 在当前文件夹创建文件。
           *
           * @param name 文件名。
           * @param data 数据。
           * @param size 数据长度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileBrowserView.prototype.createFile = function(name, data, size) {
            return file_browser_view_create_file(
              this != null ? this.nativeObj || this : null,
              name,
              data,
              size
            );
          };
          Object.defineProperty(TFileBrowserView.prototype, 'initDir', {
            /**
             * 初始文件夹。
             *
             */
            get: function() {
              return file_browser_view_t_get_prop_init_dir(this.nativeObj);
            },
            set: function(v) {
              this.setInitDir(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TFileBrowserView.prototype, 'topDir', {
            /**
             * 最顶层目录。到达本目录后，不允许往上。
             *
             */
            get: function() {
              return file_browser_view_t_get_prop_top_dir(this.nativeObj);
            },
            set: function(v) {
              this.setTopDir(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TFileBrowserView.prototype, 'filter', {
            /**
             * 过滤规则。
             *
             */
            get: function() {
              return file_browser_view_t_get_prop_filter(this.nativeObj);
            },
            set: function(v) {
              this.setFilter(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(
            TFileBrowserView.prototype,
            'ignoreHiddenFiles',
            {
              /**
               * 是否忽略隐藏文件。
               *
               */
              get: function() {
                return file_browser_view_t_get_prop_ignore_hidden_files(
                  this.nativeObj
                );
              },
              set: function(v) {
                this.setIgnoreHiddenFiles(v);
              },
              enumerable: false,
              configurable: true,
            }
          );
          Object.defineProperty(TFileBrowserView.prototype, 'sortAscending', {
            /**
             * 是否为升序排序。
             *
             */
            get: function() {
              return file_browser_view_t_get_prop_sort_ascending(
                this.nativeObj
              );
            },
            set: function(v) {
              this.setSortAscending(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TFileBrowserView.prototype, 'showCheckButton', {
            /**
             * 是否显示checkbutton。
             *
             */
            get: function() {
              return file_browser_view_t_get_prop_show_check_button(
                this.nativeObj
              );
            },
            set: function(v) {
              this.setShowCheckButton(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TFileBrowserView.prototype, 'sortBy', {
            /**
             * 排序方式。可选值(name, size, mtime, type)。
             *
             */
            get: function() {
              return file_browser_view_t_get_prop_sort_by(this.nativeObj);
            },
            set: function(v) {
              this.setSortBy(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TFileBrowserView;
        })(TWidget);
        exports.TFileBrowserView = TFileBrowserView;
        /**
         * 文件/目录选择器
         *
         */
        var TFileChooser = /** @class */ (function(_super) {
          __extends(TFileChooser, _super);
          function TFileChooser(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建file_chooser对象
           *
           *
           * @returns 对象。
           */
          TFileChooser.create = function() {
            return new TFileChooser(file_chooser_create());
          };
          /**
           * 设置初始目录。
           *
           * @param init_dir 初始目录
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileChooser.prototype.setInitDir = function(init_dir) {
            return file_chooser_set_init_dir(
              this != null ? this.nativeObj || this : null,
              init_dir
            );
          };
          /**
           * 设置初始目录。
           *
           * @param top_dir 初始目录
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileChooser.prototype.setTopDir = function(top_dir) {
            return file_chooser_set_top_dir(
              this != null ? this.nativeObj || this : null,
              top_dir
            );
          };
          /**
           * 设置过滤规则。
           *> files_only 表示只列出文件，dir_only 表示只列出目录，其它表示只列出满足扩展名文件集合(如：.jpg.png.gif)。
           *
           * @param filter 过滤规则。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileChooser.prototype.setFilter = function(filter) {
            return file_chooser_set_filter(
              this != null ? this.nativeObj || this : null,
              filter
            );
          };
          /**
           * 转换为file_chooser对象(供脚本语言使用)。
           *
           * @param chooser file_chooser对象。
           *
           * @returns 对象。
           */
          TFileChooser.cast = function(chooser) {
            return new TFileChooser(
              file_chooser_cast(
                chooser != null ? chooser.nativeObj || chooser : null
              )
            );
          };
          /**
           * 为了保存而选择文件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileChooser.prototype.chooseFileForSave = function() {
            return file_chooser_choose_file_for_save(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 为了打开而选择文件。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileChooser.prototype.chooseFileForOpen = function() {
            return file_chooser_choose_file_for_open(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 选择目录。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TFileChooser.prototype.chooseFolder = function() {
            return file_chooser_choose_folder(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取目录。
           *
           *
           * @returns 返回选择的目录。
           */
          TFileChooser.prototype.getDir = function() {
            return file_chooser_get_dir(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取文件名。
           *
           *
           * @returns 返回选择的文件名。
           */
          TFileChooser.prototype.getFilename = function() {
            return file_chooser_get_filename(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 用户是否取消了选择。
           *
           *
           * @returns 返回用户是否取消了选择。
           */
          TFileChooser.prototype.isAborted = function() {
            return file_chooser_is_aborted(
              this != null ? this.nativeObj || this : null
            );
          };
          return TFileChooser;
        })(TEmitter);
        exports.TFileChooser = TFileChooser;
        /**
         * 仪表指针控件。
         *
         *仪表指针就是一张旋转的图片，图片可以是普通图片也可以是SVG图片。
         *
         *在嵌入式平台上，对于旋转的图片，SVG图片的效率比位图高数倍，所以推荐使用SVG图片。
         *
         *gauge\_pointer\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于gauge\_pointer\_t控件。
         *
         *在xml中使用"gauge\_pointer"标签创建仪表指针控件。如：
         *
         *```xml
         *<gauge_pointer x="c" y="50" w="24" h="140" value="-128" image="gauge_pointer" />
         *```
         *
         *> 更多用法请参考：
         *[gauge.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/gauge.xml)
         *
         *在c代码中使用函数gauge\_pointer\_create创建仪表指针控件。如：
         *
         *
         *> 创建之后，需要用gauge\_pointer\_set\_image设置仪表指针图片。
         *
         */
        var TGaugePointer = /** @class */ (function(_super) {
          __extends(TGaugePointer, _super);
          function TGaugePointer(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建gauge_pointer对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TGaugePointer.create = function(parent, x, y, w, h) {
            return new TGaugePointer(
              gauge_pointer_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为gauge_pointer对象(供脚本语言使用)。
           *
           * @param widget gauge_pointer对象。
           *
           * @returns gauge_pointer对象。
           */
          TGaugePointer.cast = function(widget) {
            return new TGaugePointer(
              gauge_pointer_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置指针角度。12点钟方向为0度，顺时钟方向为正，单位为度。
           *
           * @param angle 指针角度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGaugePointer.prototype.setAngle = function(angle) {
            return gauge_pointer_set_angle(
              this != null ? this.nativeObj || this : null,
              angle
            );
          };
          /**
           * 设置指针的图片。
           *
           * @param image 指针的图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGaugePointer.prototype.setImage = function(image) {
            return gauge_pointer_set_image(
              this != null ? this.nativeObj || this : null,
              image
            );
          };
          /**
           * 设置指针的旋转锚点。
           *
           * @param anchor_x 指针的锚点坐标x。(后面加上px为像素点，不加px为相对百分比坐标)
           * @param anchor_y 指针的锚点坐标y。(后面加上px为像素点，不加px为相对百分比坐标)
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGaugePointer.prototype.setAnchor = function(anchor_x, anchor_y) {
            return gauge_pointer_set_anchor(
              this != null ? this.nativeObj || this : null,
              anchor_x,
              anchor_y
            );
          };
          Object.defineProperty(TGaugePointer.prototype, 'angle', {
            /**
             * 指针角度。12点钟方向为0度，顺时钟方向为正，单位为度。
             *
             */
            get: function() {
              return gauge_pointer_t_get_prop_angle(this.nativeObj);
            },
            set: function(v) {
              this.setAngle(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TGaugePointer.prototype, 'image', {
            /**
             * 指针图片。
             *
             *图片须垂直向上，图片的中心点为旋转方向。
             *
             */
            get: function() {
              return gauge_pointer_t_get_prop_image(this.nativeObj);
            },
            set: function(v) {
              this.setImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TGaugePointer.prototype, 'anchorX', {
            /**
             * 图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)
             *
             */
            get: function() {
              return gauge_pointer_t_get_prop_anchor_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TGaugePointer.prototype, 'anchorY', {
            /**
             * 图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)
             *
             */
            get: function() {
              return gauge_pointer_t_get_prop_anchor_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TGaugePointer;
        })(TWidget);
        exports.TGaugePointer = TGaugePointer;
        /**
         * 表盘控件。
         *
         *表盘控件就是一张图片。
         *
         *gauge\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于gauge\_t控件。
         *
         *在xml中使用"gauge"标签创建表盘控件。如：
         *
         *```xml
         *<gauge x="c" y="10" w="240" h="240" image="gauge_bg"
         *```
         *
         *> 更多用法请参考：
         *[gauge.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/gauge.xml)
         *
         *在c代码中使用函数gauge\_create创建表盘控件。如：
         *
         *
         *可用通过style来设置控件的显示风格，如背景和边框等。如：
         *
         *```xml
         *<gauge>
         *<style name="border">
         *<normal border_color="#000000" bg_color="#e0e0e0" text_color="black"/>
         *</style>
         *</gauge>
         *```
         *
         *> 更多用法请参考：
         *[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml)
         *
         */
        var TGauge = /** @class */ (function(_super) {
          __extends(TGauge, _super);
          function TGauge(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建gauge对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TGauge.create = function(parent, x, y, w, h) {
            return new TGauge(
              gauge_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为gauge对象(供脚本语言使用)。
           *
           * @param widget gauge对象。
           *
           * @returns gauge对象。
           */
          TGauge.cast = function(widget) {
            return new TGauge(
              gauge_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 设置背景图片的名称。
           *
           * @param name 图片名称，该图片必须存在于资源管理器。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGauge.prototype.setImage = function(name) {
            return gauge_set_image(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置图片的显示方式。
           *
           *> 绘制方式的属性值和枚举值:
           *[image\_draw\_type\_name\_value](https://github.com/zlgopen/awtk/blob/master/src/base/enums.c#L98)
           *
           * @param draw_type 显示方式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGauge.prototype.setDrawType = function(draw_type) {
            return gauge_set_draw_type(
              this != null ? this.nativeObj || this : null,
              draw_type
            );
          };
          Object.defineProperty(TGauge.prototype, 'image', {
            /**
             * 背景图片。
             *
             */
            get: function() {
              return gauge_t_get_prop_image(this.nativeObj);
            },
            set: function(v) {
              this.setImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TGauge.prototype, 'drawType', {
            /**
             * 图片的绘制方式。
             *
             */
            get: function() {
              return gauge_t_get_prop_draw_type(this.nativeObj);
            },
            set: function(v) {
              this.setDrawType(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TGauge;
        })(TWidget);
        exports.TGauge = TGauge;
        /**
         * 图片动画控件，指定一个图片前缀，依次显示指定序列的图片，从而形成动画效果。
         *
         *图片序列可以用sequence指定，也可以用start\_index和end\_index指定一个范围。
         *
         *image\_animation\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于image\_animation\_t控件。
         *
         *在xml中使用"image\_animation"标签创建图片动画控件。如：
         *
         *```xml
         *<image_animation image="ani" start_index="1" end_index="9" auto_play="true" interval="50"
         *delay="100"/>
         *```
         *
         *> 更多用法请参考：
         *[image_animation.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/image_animation.xml)
         *
         *在c代码中使用函数image\_animation\_create创建图片动画控件。如：
         *
         *
         *> 完整示例请参考：
         *[image_animation
         *demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image_animation.c)
         *
         *可用通过style来设置控件的显示风格，如背景颜色和边框等等，不过一般情况并不需要。
         *
         */
        var TImageAnimation = /** @class */ (function(_super) {
          __extends(TImageAnimation, _super);
          function TImageAnimation(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建image_animation对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TImageAnimation.create = function(parent, x, y, w, h) {
            return new TImageAnimation(
              image_animation_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置是否循环播放。
           *
           * @param loop 是否循环播放。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setLoop = function(loop) {
            return image_animation_set_loop(
              this != null ? this.nativeObj || this : null,
              loop
            );
          };
          /**
           * 设置图片前缀。
           *
           * @param image 图片前缀。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setImage = function(image) {
            return image_animation_set_image(
              this != null ? this.nativeObj || this : null,
              image
            );
          };
          /**
           * 设置播放间隔时间。
           *
           * @param interval 间隔时间(毫秒)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setInterval = function(interval) {
            return image_animation_set_interval(
              this != null ? this.nativeObj || this : null,
              interval
            );
          };
          /**
           * 设置延迟播放时间(仅适用于自动播放)。
           *
           * @param delay 延迟播放时间(毫秒)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setDelay = function(delay) {
            return image_animation_set_delay(
              this != null ? this.nativeObj || this : null,
              delay
            );
          };
          /**
           * 设置是否自动播放。
           *
           * @param auto_play 是否自动播放。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setAutoPlay = function(auto_play) {
            return image_animation_set_auto_play(
              this != null ? this.nativeObj || this : null,
              auto_play
            );
          };
          /**
           * 设置播放序列。比如image为"fire"，sequence为"12223", 将依次播放"fire1", "fire2", "fire2", "fire2",
           *"fire3"。
           *
           * @param sequence 播放序列。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setSequence = function(sequence) {
            return image_animation_set_sequence(
              this != null ? this.nativeObj || this : null,
              sequence
            );
          };
          /**
           * 设置播放序列。比如image为"fire"，start_index为0, end_index为99, 将依次播放"fire0", ...,
           *"fire99"。
           *
           *若指定的图片不存在，则重复上一张图片。
           *
           * @param start_index 图片起始序数。
           * @param end_index 图片结束序数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setRangeSequence = function(
            start_index,
            end_index
          ) {
            return image_animation_set_range_sequence(
              this != null ? this.nativeObj || this : null,
              start_index,
              end_index
            );
          };
          /**
           * 播放。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.play = function() {
            return image_animation_play(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 停止(并重置index为-1)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.stop = function() {
            return image_animation_stop(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 暂停。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.pause = function() {
            return image_animation_pause(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 手动切换到下一张图片。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.next = function() {
            return image_animation_next(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置生成图片名的格式。
           *
           *XXX:生成图片名时，第一个参数是图片名前缀，第二个是序数，只能在此前提下设置格式。
           *
           *```
           *const char* format = image_animation->format ? image_animation->format : "%s%d";
           *tk_snprintf(name, TK_NAME_LEN, format, image_animation->image, image_animation->index);
           *```
           *
           * @param format 格式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setFormat = function(format) {
            return image_animation_set_format(
              this != null ? this.nativeObj || this : null,
              format
            );
          };
          /**
           * 设置绘制完成后unload图片，以释放内存空间。
           *
           * @param unload_after_paint 是否绘制完成后unload图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setUnloadAfterPaint = function(
            unload_after_paint
          ) {
            return image_animation_set_unload_after_paint(
              this != null ? this.nativeObj || this : null,
              unload_after_paint
            );
          };
          /**
           * 设置是否倒序播放。
           *
           * @param reverse 是否倒序播放。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setReverse = function(reverse) {
            return image_animation_set_reverse(
              this != null ? this.nativeObj || this : null,
              reverse
            );
          };
          /**
           * 设置结束播放后是否保持显示最后一帧。
           *
           * @param show_when_done 是否继续显示最后一帧。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageAnimation.prototype.setShowWhenDone = function(show_when_done) {
            return image_animation_set_show_when_done(
              this != null ? this.nativeObj || this : null,
              show_when_done
            );
          };
          /**
           * 转换为image_animation对象(供脚本语言使用)。
           *
           * @param widget image_animation对象。
           *
           * @returns image_animation对象。
           */
          TImageAnimation.cast = function(widget) {
            return new TImageAnimation(
              image_animation_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 判断是否在播放。
           *
           *
           * @returns 返回TRUE表示是，否则表示否。
           */
          TImageAnimation.prototype.isPlaying = function() {
            return image_animation_is_playing(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TImageAnimation.prototype, 'image', {
            /**
             * 图片名称的前缀。
             *
             */
            get: function() {
              return image_animation_t_get_prop_image(this.nativeObj);
            },
            set: function(v) {
              this.setImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'sequence', {
            /**
             * 播放的序列，字符可选值为数字和英文大小写字母，字符可以重复。如：0123456789或者123123abcd。
             *
             */
            get: function() {
              return image_animation_t_get_prop_sequence(this.nativeObj);
            },
            set: function(v) {
              this.setSequence(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'startIndex', {
            /**
             * 图片起始序数。
             *
             */
            get: function() {
              return image_animation_t_get_prop_start_index(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'endIndex', {
            /**
             * 图片结束序数。
             *
             */
            get: function() {
              return image_animation_t_get_prop_end_index(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'reverse', {
            /**
             * 是否倒序播放。
             *
             */
            get: function() {
              return image_animation_t_get_prop_reverse(this.nativeObj);
            },
            set: function(v) {
              this.setReverse(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'loop', {
            /**
             * 是否循环播放。
             *
             */
            get: function() {
              return image_animation_t_get_prop_loop(this.nativeObj);
            },
            set: function(v) {
              this.setLoop(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'autoPlay', {
            /**
             * 是否自动播放。
             *
             */
            get: function() {
              return image_animation_t_get_prop_auto_play(this.nativeObj);
            },
            set: function(v) {
              this.setAutoPlay(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'unloadAfterPaint', {
            /**
             * 绘制完成后unload图片，以释放内存空间。
             *
             */
            get: function() {
              return image_animation_t_get_prop_unload_after_paint(
                this.nativeObj
              );
            },
            set: function(v) {
              this.setUnloadAfterPaint(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'format', {
            /**
             * 索引到图片名转换时的格式，缺省为"%s%d"。
             *
             */
            get: function() {
              return image_animation_t_get_prop_format(this.nativeObj);
            },
            set: function(v) {
              this.setFormat(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'interval', {
            /**
             * 每张图片播放的时间(毫秒)。
             *
             */
            get: function() {
              return image_animation_t_get_prop_interval(this.nativeObj);
            },
            set: function(v) {
              this.setInterval(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'delay', {
            /**
             * 自动播放时延迟播放的时间(毫秒)。
             *
             */
            get: function() {
              return image_animation_t_get_prop_delay(this.nativeObj);
            },
            set: function(v) {
              this.setDelay(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageAnimation.prototype, 'showWhenDone', {
            /**
             * 结束后是否继续显示最后一帧。
             *
             */
            get: function() {
              return image_animation_t_get_prop_show_when_done(this.nativeObj);
            },
            set: function(v) {
              this.setShowWhenDone(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TImageAnimation;
        })(TWidget);
        exports.TImageAnimation = TImageAnimation;
        /**
         * 图片值控件。
         *
         *可以用图片来表示如电池电量、WIFI信号强度和其它各种数值的值。
         *
         *其原理如下：
         *
         ** 1.把value以format为格式转换成字符串。
         ** 2.把每个字符与image(图片文件名前缀)映射成一个图片名。
         ** 3.最后把这些图片显示出来。
         *
         *如果设置click\_add\_delta为非0，那么点击时自动增加指定的增量，值超过最大值时回到最小值,
         *或者值超过最小值时回到最大值。
         *
         *image\_value\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于image\_value\_t控件。
         *
         *在xml中使用"image\_value"标签创建图片值控件。如：
         *
         *```xml
         *<image_value  value="0" image="num_" />
         *```
         *
         *> 更多用法请参考：
         *[image\_value](https://github.com/zlgopen/awtk/blob/master/design/default/ui/image_value.xml)
         *
         *在c代码中使用函数image\_value\_create创建图片值控件。如：
         *
         *
         *> 完整示例请参考：
         *[image_value demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image_value.c)
         *
         *可用通过style来设置控件的显示风格，如背景颜色和边框等等，不过一般情况并不需要。
         *
         */
        var TImageValue = /** @class */ (function(_super) {
          __extends(TImageValue, _super);
          function TImageValue(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建image_value对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TImageValue.create = function(parent, x, y, w, h) {
            return new TImageValue(
              image_value_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置图片前缀。
           *
           * @param image 图片前缀。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageValue.prototype.setImage = function(image) {
            return image_value_set_image(
              this != null ? this.nativeObj || this : null,
              image
            );
          };
          /**
           * 设置格式。
           *
           * @param format 格式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageValue.prototype.setFormat = function(format) {
            return image_value_set_format(
              this != null ? this.nativeObj || this : null,
              format
            );
          };
          /**
           * 设置点击时加上的增量。
           *
           * @param delta 增量。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageValue.prototype.setClickAddDelta = function(delta) {
            return image_value_set_click_add_delta(
              this != null ? this.nativeObj || this : null,
              delta
            );
          };
          /**
           * 设置值。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageValue.prototype.setValue = function(value) {
            return image_value_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置最小值。
           *
           * @param min 最小值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageValue.prototype.setMin = function(min) {
            return image_value_set_min(
              this != null ? this.nativeObj || this : null,
              min
            );
          };
          /**
           * 设置最大值。
           *
           * @param max 最大值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImageValue.prototype.setMax = function(max) {
            return image_value_set_max(
              this != null ? this.nativeObj || this : null,
              max
            );
          };
          /**
           * 转换为image_value对象(供脚本语言使用)。
           *
           * @param widget image_value对象。
           *
           * @returns image_value对象。
           */
          TImageValue.cast = function(widget) {
            return new TImageValue(
              image_value_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(TImageValue.prototype, 'image', {
            /**
             * 图片名称的前缀。
             *
             */
            get: function() {
              return image_value_t_get_prop_image(this.nativeObj);
            },
            set: function(v) {
              this.setImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageValue.prototype, 'format', {
            /**
             * 数值到字符串转换时的格式，缺省为"%d"。
             *
             */
            get: function() {
              return image_value_t_get_prop_format(this.nativeObj);
            },
            set: function(v) {
              this.setFormat(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageValue.prototype, 'clickAddDelta', {
            /**
             * 点击时加上一个增量。
             *
             */
            get: function() {
              return image_value_t_get_prop_click_add_delta(this.nativeObj);
            },
            set: function(v) {
              this.setClickAddDelta(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageValue.prototype, 'value', {
            /**
             * 值。
             *
             */
            get: function() {
              return image_value_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageValue.prototype, 'min', {
            /**
             * 最小值(如果设置了click\_add\_delta，到达最小值后回到最大值)。
             *
             */
            get: function() {
              return image_value_t_get_prop_min(this.nativeObj);
            },
            set: function(v) {
              this.setMin(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TImageValue.prototype, 'max', {
            /**
             * 最大值(如果设置了click\_add\_delta，到达最大值后回到最小值)。
             *
             */
            get: function() {
              return image_value_t_get_prop_max(this.nativeObj);
            },
            set: function(v) {
              this.setMax(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TImageValue;
        })(TWidget);
        exports.TImageValue = TImageValue;
        /**
         * 输入法候选字词控件。
         *
         *如果希望启用用数字选择对应的候选字，请设置属性grab_keys="true"。如：
         *
         *```xml
         *<candidates x="0" y="0" w="100%" h="30" grab_keys="true"/>
         *```
         *
         *>相关文件： assets/default/raw/ui/kb_default.xml
         *
         *如果希望通过左右键切换不同的候选字，除了设置属性grab_keys="true"，还需要设置按钮的focused状态的style。
         *
         *```xml
         *<style name="candidates" text_color="black">
         *<normal  />
         *<pressed    bg_color="#c0c0c0" border_color="#a0a0a0"/>
         *<over       bg_color="#e0e0e0" border_color="#a0a0a0"/>
         *<focused    border_color="#a0a0a0"/>
         *</style>
         *```
         *
         *>相关文件：assets/default/raw/styles/keyboard.xml
         *
         */
        var TCandidates = /** @class */ (function(_super) {
          __extends(TCandidates, _super);
          function TCandidates(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建candidates对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TCandidates.create = function(parent, x, y, w, h) {
            return new TCandidates(
              candidates_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为candidates对象(供脚本语言使用)。
           *
           * @param widget candidates对象。
           *
           * @returns candidates对象。
           */
          TCandidates.cast = function(widget) {
            return new TCandidates(
              candidates_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置是否为预候选字列表。
           *
           *> 为预候选字列表则注册EVT\_IM\_SHOW\_PRE\_CANDIDATES，否则注册EVT\_IM\_SHOW\_CANDIDATES事件。
           *
           * @param pre 是否为预候选字列表。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCandidates.prototype.setPre = function(pre) {
            return candidates_set_pre(
              this != null ? this.nativeObj || this : null,
              pre
            );
          };
          /**
           * 设置是否启用用数字选择候选字。
           *
           * @param select_by_num 是否启用用数字选择候选字。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCandidates.prototype.setSelectByNum = function(select_by_num) {
            return candidates_set_select_by_num(
              this != null ? this.nativeObj || this : null,
              select_by_num
            );
          };
          /**
           * 设置是否自动隐藏。
           *
           * @param auto_hide 是否自动隐藏。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCandidates.prototype.setAutoHide = function(auto_hide) {
            return candidates_set_auto_hide(
              this != null ? this.nativeObj || this : null,
              auto_hide
            );
          };
          /**
           * 设置按钮的style名称。
           *
           * @param button_style 按钮的style名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCandidates.prototype.setButtonStyle = function(button_style) {
            return candidates_set_button_style(
              this != null ? this.nativeObj || this : null,
              button_style
            );
          };
          Object.defineProperty(TCandidates.prototype, 'pre', {
            /**
             * 是否为预候选字。
             *
             *> 预候选字: 在有的输入法中，比如T9硬键盘输入时，按下12两个键时，预候选字会显示可用的拼音列表。
             *> 从预候选字列表中选择拼音，再查询拼音对应的候选字列表。
             *
             */
            get: function() {
              return candidates_t_get_prop_pre(this.nativeObj);
            },
            set: function(v) {
              this.setPre(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCandidates.prototype, 'selectByNum', {
            /**
             * 是否启用用数字选择候选字。比如按下1选择第1个候选字，按下2选择第2个候选字。
             *
             */
            get: function() {
              return candidates_t_get_prop_select_by_num(this.nativeObj);
            },
            set: function(v) {
              this.setSelectByNum(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCandidates.prototype, 'autoHide', {
            /**
             * 没有候选字时，是否自动隐藏控件。
             *
             */
            get: function() {
              return candidates_t_get_prop_auto_hide(this.nativeObj);
            },
            set: function(v) {
              this.setAutoHide(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCandidates.prototype, 'buttonStyle', {
            /**
             * 按钮的style名称。
             *
             */
            get: function() {
              return candidates_t_get_prop_button_style(this.nativeObj);
            },
            set: function(v) {
              this.setButtonStyle(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TCandidates;
        })(TWidget);
        exports.TCandidates = TCandidates;
        /**
         * 输入法语言指示器。
         *
         *用于显示输入法的输入语言或类型，主要用于T9输入法。
         *
         *lang_indicator\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于lang_indicator\_t控件。
         *
         *在xml中使用"lang_indicator"标签创建lang_indicator。如：
         *
         *```xml
         *<lang_indicator x="0" y="0" w="100%" h="100%" children_layout="default(c=2,r=2,m=5,s=5)">
         *</lang_indicator>
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TLangIndicator = /** @class */ (function(_super) {
          __extends(TLangIndicator, _super);
          function TLangIndicator(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建lang_indicator对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TLangIndicator.create = function(parent, x, y, w, h) {
            return new TLangIndicator(
              lang_indicator_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置缺省获得焦点的子控件(可用控件名或类型)。
           *
           * @param image 缺省获得焦点的子控件(可用控件名或类型)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLangIndicator.prototype.setImage = function(image) {
            return lang_indicator_set_image(
              this != null ? this.nativeObj || this : null,
              image
            );
          };
          /**
           * 转换为lang_indicator对象(供脚本语言使用)。
           *
           * @param widget lang_indicator对象。
           *
           * @returns lang_indicator对象。
           */
          TLangIndicator.cast = function(widget) {
            return new TLangIndicator(
              lang_indicator_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(TLangIndicator.prototype, 'image', {
            /**
             * 如果希望用图片格式显示，本属性用于指定图片的前缀。
             *
             */
            get: function() {
              return lang_indicator_t_get_prop_image(this.nativeObj);
            },
            set: function(v) {
              this.setImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TLangIndicator;
        })(TWidget);
        exports.TLangIndicator = TLangIndicator;
        /**
         * 行号。多行编辑器的行号。
         *
         *line\_number\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于line\_number\_t控件。
         *
         *在xml中使用"lin\e_number"标签创建行号控件，一般配合mledit使用。如：
         *
         *```xml
         *<mledit x="c" y="10" h="40%" w="90%" focus="true" left_margin="36" right_margin="16"
         *wrap_word="true">
         *<line_number x="0" y="0" w="32" h="100%" value="0"/>
         *<scroll_bar_d x="right" y="0" w="14" h="100%" value="0"/>
         *</mledit>
         *```
         *
         *> 更多用法请参考：[mledit.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/mledit.xml)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<line_number>
         *<style name="default">
         *<normal text_color="black" bg_color="#d0d0d0" text_align_h="right"/>
         *</style>
         *</line_number>
         *```
         *
         *> 更多用法请参考：
         *[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L556)
         *
         */
        var TLineNumber = /** @class */ (function(_super) {
          __extends(TLineNumber, _super);
          function TLineNumber(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建line_number对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TLineNumber.create = function(parent, x, y, w, h) {
            return new TLineNumber(
              line_number_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置顶部边距。
           *
           * @param top_margin 顶部边距。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLineNumber.prototype.setTopMargin = function(top_margin) {
            return line_number_set_top_margin(
              this != null ? this.nativeObj || this : null,
              top_margin
            );
          };
          /**
           * 设置顶部边距。
           *
           * @param bottom_margin 顶部边距。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLineNumber.prototype.setBottomMargin = function(bottom_margin) {
            return line_number_set_bottom_margin(
              this != null ? this.nativeObj || this : null,
              bottom_margin
            );
          };
          /**
           * 设置行高。
           *
           * @param line_height 行高。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLineNumber.prototype.setLineHeight = function(line_height) {
            return line_number_set_line_height(
              this != null ? this.nativeObj || this : null,
              line_height
            );
          };
          /**
           * 设置y偏移。
           *
           * @param yoffset 行高。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLineNumber.prototype.setYoffset = function(yoffset) {
            return line_number_set_yoffset(
              this != null ? this.nativeObj || this : null,
              yoffset
            );
          };
          /**
           * 转换为line_number对象(供脚本语言使用)。
           *
           * @param widget line_number对象。
           *
           * @returns line_number对象。
           */
          TLineNumber.cast = function(widget) {
            return new TLineNumber(
              line_number_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TLineNumber;
        })(TWidget);
        exports.TLineNumber = TLineNumber;
        /**
         * 多行编辑器控件。
         *
         *mledit\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于mledit\_t控件。
         *
         *在xml中使用"mledit"标签创建多行编辑器控件。如：
         *
         *```xml
         *<mledit x="c" y="m" w="300" h="300" />
         *```
         *
         *> 更多用法请参考：[mledit.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/mledit.xml)
         *
         *在c代码中使用函数mledit\_create创建多行编辑器控件。如：
         *
         *
         *> 完整示例请参考：[mledit demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/mledit.c)
         *
         *time\_clock一般不需要设置style。
         *
         */
        var TMledit = /** @class */ (function(_super) {
          __extends(TMledit, _super);
          function TMledit(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建mledit对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TMledit.create = function(parent, x, y, w, h) {
            return new TMledit(
              mledit_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置编辑器是否为只读。
           *
           * @param readonly 只读。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setReadonly = function(readonly) {
            return mledit_set_readonly(
              this != null ? this.nativeObj || this : null,
              readonly
            );
          };
          /**
           * 设置编辑器是否为可撤销修改。
           *
           * @param cancelable 是否为可撤销修。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setCancelable = function(cancelable) {
            return mledit_set_cancelable(
              this != null ? this.nativeObj || this : null,
              cancelable
            );
          };
          /**
           * 设置为焦点。
           *
           * @param focus 是否为焦点。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setFocus = function(focus) {
            return mledit_set_focus(
              this != null ? this.nativeObj || this : null,
              focus
            );
          };
          /**
           * 设置编辑器是否自动折行。
           *
           * @param wrap_word 是否自动折行。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setWrapWord = function(wrap_word) {
            return mledit_set_wrap_word(
              this != null ? this.nativeObj || this : null,
              wrap_word
            );
          };
          /**
           * 设置编辑器的最大行数。
           *
           * @param max_lines 最大行数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setMaxLines = function(max_lines) {
            return mledit_set_max_lines(
              this != null ? this.nativeObj || this : null,
              max_lines
            );
          };
          /**
           * 设置编辑器的最大字符数（0 为不限制字符数）。
           *
           * @param max_chars 最大字符数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setMaxChars = function(max_chars) {
            return mledit_set_max_chars(
              this != null ? this.nativeObj || this : null,
              max_chars
            );
          };
          /**
           * 设置编辑器的输入提示。
           *
           * @param tips 输入提示。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setTips = function(tips) {
            return mledit_set_tips(
              this != null ? this.nativeObj || this : null,
              tips
            );
          };
          /**
           * 获取翻译之后的文本，然后调用mledit_set_tips。
           *
           * @param tr_tips 提示信息。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setTrTips = function(tr_tips) {
            return mledit_set_tr_tips(
              this != null ? this.nativeObj || this : null,
              tr_tips
            );
          };
          /**
           * 设置自定义软键盘名称。
           *
           * @param keyboard 键盘名称(相应UI资源必须存在)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setKeyboard = function(keyboard) {
            return mledit_set_keyboard(
              this != null ? this.nativeObj || this : null,
              keyboard
            );
          };
          /**
           * 设置编辑器光标位置。
           *
           * @param cursor 光标位置。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setCursor = function(cursor) {
            return mledit_set_cursor(
              this != null ? this.nativeObj || this : null,
              cursor
            );
          };
          /**
           * 获取编辑器光标位置。
           *
           *
           * @returns 返回光标位置。
           */
          TMledit.prototype.getCursor = function() {
            return mledit_get_cursor(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置编辑器滚动速度。
           *
           * @param scroll_line 滚动行数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setScrollLine = function(scroll_line) {
            return mledit_set_scroll_line(
              this != null ? this.nativeObj || this : null,
              scroll_line
            );
          };
          /**
           * 设置编辑器滚动到指定偏移位置。
           *
           * @param offset 偏移位置。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.scrollToOffset = function(offset) {
            return mledit_scroll_to_offset(
              this != null ? this.nativeObj || this : null,
              offset
            );
          };
          /**
           * 设置编辑器是否在获得焦点时打开输入法。
           *
           *> * 设置默认焦点时，打开窗口时不弹出软键盘。
           *> * 用键盘切换焦点时，编辑器获得焦点时不弹出软键盘。
           *
           * @param open_im_when_focused 是否在获得焦点时打开输入法。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setOpenImWhenFocused = function(
            open_im_when_focused
          ) {
            return mledit_set_open_im_when_focused(
              this != null ? this.nativeObj || this : null,
              open_im_when_focused
            );
          };
          /**
           * 设置编辑器是否在失去焦点时关闭输入法。
           *
           * @param close_im_when_blured 是否是否在失去焦点时关闭输入法。在失去焦点时关闭输入法。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setCloseImWhenBlured = function(
            close_im_when_blured
          ) {
            return mledit_set_close_im_when_blured(
              this != null ? this.nativeObj || this : null,
              close_im_when_blured
            );
          };
          /**
           * 选择编辑器中指定范围的文本。
           *
           * @param start 起始偏移。
           * @param end 结束偏移。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TMledit.prototype.setSelect = function(start, end) {
            return mledit_set_select(
              this != null ? this.nativeObj || this : null,
              start,
              end
            );
          };
          /**
           * 获取选中的文本。
           *使用完后需调用 TKMEM_FREE() 进行释放文本占有内存。
           *
           *
           * @returns 返回选中文本。
           */
          TMledit.prototype.getSelectedText = function() {
            return mledit_get_selected_text(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 转换为mledit对象(供脚本语言使用)。
           *
           * @param widget mledit对象。
           *
           * @returns mledit对象。
           */
          TMledit.cast = function(widget) {
            return new TMledit(
              mledit_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          Object.defineProperty(TMledit.prototype, 'tips', {
            /**
             * 输入提示。
             *
             */
            get: function() {
              return mledit_t_get_prop_tips(this.nativeObj);
            },
            set: function(v) {
              this.setTips(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'trTips', {
            /**
             * 保存用于翻译的提示信息。
             *
             */
            get: function() {
              return mledit_t_get_prop_tr_tips(this.nativeObj);
            },
            set: function(v) {
              this.setTrTips(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'keyboard', {
            /**
             * 自定义软键盘名称。
             *
             */
            get: function() {
              return mledit_t_get_prop_keyboard(this.nativeObj);
            },
            set: function(v) {
              this.setKeyboard(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'maxLines', {
            /**
             * 最大行数。
             *
             */
            get: function() {
              return mledit_t_get_prop_max_lines(this.nativeObj);
            },
            set: function(v) {
              this.setMaxLines(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'maxChars', {
            /**
             * 最大字符数。
             *
             */
            get: function() {
              return mledit_t_get_prop_max_chars(this.nativeObj);
            },
            set: function(v) {
              this.setMaxChars(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'wrapWord', {
            /**
             * 是否自动折行。
             *
             */
            get: function() {
              return mledit_t_get_prop_wrap_word(this.nativeObj);
            },
            set: function(v) {
              this.setWrapWord(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'scrollLine', {
            /**
             * 鼠标一次滚动行数。
             *
             */
            get: function() {
              return mledit_t_get_prop_scroll_line(this.nativeObj);
            },
            set: function(v) {
              this.setScrollLine(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'readonly', {
            /**
             * 编辑器是否为只读。
             *
             */
            get: function() {
              return mledit_t_get_prop_readonly(this.nativeObj);
            },
            set: function(v) {
              this.setReadonly(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'cancelable', {
            /**
             * 是否支持撤销编辑。如果为TRUE，在失去焦点之前可以撤销所有修改(恢复获得焦点之前的内容)。
             *
             *> * 1.一般配合keyboard的"cancel"按钮使用。
             *> * 2.为TRUE时，如果内容有变化，会设置编辑器的状态为changed，所以此时编辑器需要支持changed状态的style。
             *
             */
            get: function() {
              return mledit_t_get_prop_cancelable(this.nativeObj);
            },
            set: function(v) {
              this.setCancelable(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'openImWhenFocused', {
            /**
             * 获得焦点时打开输入法。
             *
             *> 主要用于没有指针设备的情况，否则每次切换焦点时都打开输入法。
             *
             */
            get: function() {
              return mledit_t_get_prop_open_im_when_focused(this.nativeObj);
            },
            set: function(v) {
              this.setOpenImWhenFocused(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TMledit.prototype, 'closeImWhenBlured', {
            /**
             * 是否在失去焦点时关闭输入法(默认是)。
             *
             */
            get: function() {
              return mledit_t_get_prop_close_im_when_blured(this.nativeObj);
            },
            set: function(v) {
              this.setCloseImWhenBlured(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TMledit;
        })(TWidget);
        exports.TMledit = TMledit;
        /**
         * 进度圆环控件。
         *
         *progress\_circle\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于progress\_circle\_t控件。
         *
         *在xml中使用"progress\_circle"标签创建进度圆环控件。如：
         *
         *```xml
         *<progress_circle max="360" show_text="true" start_angle="90" />
         *```
         *
         *> 更多用法请参考：
         *[progress_circle.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/progress_circle.xml)
         *
         *在c代码中使用函数progress\_circle\_create创建进度圆环控件。如：
         *
         *
         *> 完整示例请参考：
         *[progress_circle
         *demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/progress_circle.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style name="default">
         *<normal text_color="green" fg_color="black" />
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L467)
         *
         */
        var TProgressCircle = /** @class */ (function(_super) {
          __extends(TProgressCircle, _super);
          function TProgressCircle(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建progress_circle对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TProgressCircle.create = function(parent, x, y, w, h) {
            return new TProgressCircle(
              progress_circle_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为progress_circle对象(供脚本语言使用)。
           *
           * @param widget progress_circle对象。
           *
           * @returns progress_circle对象。
           */
          TProgressCircle.cast = function(widget) {
            return new TProgressCircle(
              progress_circle_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置值。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressCircle.prototype.setValue = function(value) {
            return progress_circle_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置最大值。
           *
           * @param max 最大值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressCircle.prototype.setMax = function(max) {
            return progress_circle_set_max(
              this != null ? this.nativeObj || this : null,
              max
            );
          };
          /**
           * 设置格式。
           *
           * @param format 格式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressCircle.prototype.setFormat = function(format) {
            return progress_circle_set_format(
              this != null ? this.nativeObj || this : null,
              format
            );
          };
          /**
           * 设置环线的厚度。
           *
           * @param line_width 环线的厚度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressCircle.prototype.setLineWidth = function(line_width) {
            return progress_circle_set_line_width(
              this != null ? this.nativeObj || this : null,
              line_width
            );
          };
          /**
           * 设置起始角度。
           *
           * @param start_angle 起始角度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressCircle.prototype.setStartAngle = function(start_angle) {
            return progress_circle_set_start_angle(
              this != null ? this.nativeObj || this : null,
              start_angle
            );
          };
          /**
           * 设置线帽类型。
           *
           * @param line_cap 线帽类型(round:圆头，square:方头)。。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressCircle.prototype.setLineCap = function(line_cap) {
            return progress_circle_set_line_cap(
              this != null ? this.nativeObj || this : null,
              line_cap
            );
          };
          /**
           * 设置是否显示文本。
           *
           * @param show_text 是否显示文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressCircle.prototype.setShowText = function(show_text) {
            return progress_circle_set_show_text(
              this != null ? this.nativeObj || this : null,
              show_text
            );
          };
          /**
           * 设置是否为逆时针方向。
           *
           * @param counter_clock_wise 是否为逆时针方向。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressCircle.prototype.setCounterClockWise = function(
            counter_clock_wise
          ) {
            return progress_circle_set_counter_clock_wise(
              this != null ? this.nativeObj || this : null,
              counter_clock_wise
            );
          };
          Object.defineProperty(TProgressCircle.prototype, 'value', {
            /**
             * 值(缺省为0)。
             *
             */
            get: function() {
              return progress_circle_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressCircle.prototype, 'max', {
            /**
             * 最大值(缺省为100)。
             *
             */
            get: function() {
              return progress_circle_t_get_prop_max(this.nativeObj);
            },
            set: function(v) {
              this.setMax(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressCircle.prototype, 'format', {
            /**
             * 数值到字符串转换时的格式，缺省为"%d"。
             *
             */
            get: function() {
              return progress_circle_t_get_prop_format(this.nativeObj);
            },
            set: function(v) {
              this.setFormat(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressCircle.prototype, 'startAngle', {
            /**
             * 起始角度(单位为度，缺省-90)。
             *
             */
            get: function() {
              return progress_circle_t_get_prop_start_angle(this.nativeObj);
            },
            set: function(v) {
              this.setStartAngle(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressCircle.prototype, 'lineWidth', {
            /**
             * 环线的厚度(缺省为8)。
             *
             */
            get: function() {
              return progress_circle_t_get_prop_line_width(this.nativeObj);
            },
            set: function(v) {
              this.setLineWidth(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressCircle.prototype, 'lineCap', {
            /**
             * 线帽类型(round:圆头，square:方头)。
             *
             */
            get: function() {
              return progress_circle_t_get_prop_line_cap(this.nativeObj);
            },
            set: function(v) {
              this.setLineCap(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressCircle.prototype, 'counterClockWise', {
            /**
             * 是否为逆时针方向(缺省为FALSE)。
             *
             */
            get: function() {
              return progress_circle_t_get_prop_counter_clock_wise(
                this.nativeObj
              );
            },
            set: function(v) {
              this.setCounterClockWise(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressCircle.prototype, 'showText', {
            /**
             * 是否显示文本(缺省为TRUE)。
             *
             */
            get: function() {
              return progress_circle_t_get_prop_show_text(this.nativeObj);
            },
            set: function(v) {
              this.setShowText(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TProgressCircle;
        })(TWidget);
        exports.TProgressCircle = TProgressCircle;
        /**
         * rich_text_view是一个专用容器，用来放rich text和 scroll bar，并在两者之间建立联系。
         *
         *rich_text_view\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于rich_text_view\_t控件。
         *
         *在xml中使用"rich_text_view"标签创建rich_text_view。如：
         *
         *```xml
         *<rich_text_view x="0" y="10" w="100%" h="300">
         *<rich_text line_gap="5" x="0" y="10" w="-12" h="100%" margin="10">
         *...
         *</rich_text>
         *<scroll_bar_d name="bar" x="right" y="0" w="12" h="100%" value="0"/>
         *</rich_text_view>
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TRichTextView = /** @class */ (function(_super) {
          __extends(TRichTextView, _super);
          function TRichTextView(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建rich_text_view对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TRichTextView.create = function(parent, x, y, w, h) {
            return new TRichTextView(
              rich_text_view_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为rich_text_view对象(供脚本语言使用)。
           *
           * @param widget rich_text_view对象。
           *
           * @returns rich_text_view对象。
           */
          TRichTextView.cast = function(widget) {
            return new TRichTextView(
              rich_text_view_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TRichTextView;
        })(TWidget);
        exports.TRichTextView = TRichTextView;
        /**
         * 图文混排控件，实现简单的图文混排。
         *
         *rich\_text\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于rich\_text\_t控件。
         *
         *在xml中使用"rich\_text"标签创建图文混排控件。如：
         *
         *```xml
         *<rich_text x="0" y="0" w="100%" h="60"
         *text="<image name=&quota;bricks&quota;/><font align_v=&quota;middle&quota;>hello awtk!</font>" />
         *```
         *>
         *
         *> 更多用法请参考：
         *[rich_text.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/rich_text.xml)
         *
         *在c代码中使用函数rich\_text\_create创建图文混排控件。如：
         *
         *
         *> 完整示例请参考：
         *[rich_text demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/rich_text.c)
         *
         *可用通过style来设置控件的显示风格，如背景颜色等等。而字体的大小和颜色则由文本内部的属性决定。
         *
         *目前支持image和font两个tag：
         *
         ** image 支持的属性有：
         ** name 图片的名称。
         ** w 图片的宽度。
         ** h 图片的高度。
         *
         ** font 支持的属性有：
         ** color 颜色。
         ** size 大小。
         ** align_v 垂直方向对齐的方式(top|middle|bottom)。
         ** bold 粗体(暂不支持)
         ** italic 斜体(暂不支持)
         ** underline 下划线(暂不支持)
         *
         */
        var TRichText = /** @class */ (function(_super) {
          __extends(TRichText, _super);
          function TRichText(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建rich_text对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TRichText.create = function(parent, x, y, w, h) {
            return new TRichText(
              rich_text_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置文本。
           *
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TRichText.prototype.setText = function(text) {
            return rich_text_set_text(
              this != null ? this.nativeObj || this : null,
              text
            );
          };
          /**
           * 设置是否允许y方向滑动。
           *
           * @param yslidable 是否允许滑动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TRichText.prototype.setYslidable = function(yslidable) {
            return rich_text_set_yslidable(
              this != null ? this.nativeObj || this : null,
              yslidable
            );
          };
          /**
           * 转换为rich_text对象(供脚本语言使用)。
           *
           * @param widget rich_text对象。
           *
           * @returns rich_text对象。
           */
          TRichText.cast = function(widget) {
            return new TRichText(
              rich_text_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          Object.defineProperty(TRichText.prototype, 'lineGap', {
            /**
             * 行间距。
             *
             */
            get: function() {
              return rich_text_t_get_prop_line_gap(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TRichText.prototype, 'yslidable', {
            /**
             * 标识控件是否允许上下拖动。
             *
             */
            get: function() {
              return rich_text_t_get_prop_yslidable(this.nativeObj);
            },
            set: function(v) {
              this.setYslidable(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TRichText;
        })(TWidget);
        exports.TRichText = TRichText;
        /**
         * 可水平滚动的文本控件，方便实现长文本滚动。
         *
         *
         *hscroll\_label\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于hscroll\_label\_t控件。
         *
         *在xml中使用"hscroll\_label"标签创建行号控件，一般配合mledit使用。如：
         *
         *```xml
         *```
         *
         *> 更多用法请参考：[mledit.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/mledit.xml)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style name="default" text_color="black">
         *<normal   />
         *<focused  />
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml)
         *
         */
        var THscrollLabel = /** @class */ (function(_super) {
          __extends(THscrollLabel, _super);
          function THscrollLabel(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建hscroll_label对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          THscrollLabel.create = function(parent, x, y, w, h) {
            return new THscrollLabel(
              hscroll_label_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置lull。
           *
           * @param lull 间歇时间(ms)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.setLull = function(lull) {
            return hscroll_label_set_lull(
              this != null ? this.nativeObj || this : null,
              lull
            );
          };
          /**
           * 设置duration。
           *
           * @param duration 滚动时间(ms)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.setDuration = function(duration) {
            return hscroll_label_set_duration(
              this != null ? this.nativeObj || this : null,
              duration
            );
          };
          /**
           * 设置only_focus。
           *
           * @param only_focus 是否只有处于focus时才滚动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.setOnlyFocus = function(only_focus) {
            return hscroll_label_set_only_focus(
              this != null ? this.nativeObj || this : null,
              only_focus
            );
          };
          /**
           * 设置only_parent_focus。
           *
           * @param only_parent_focus 是否只有处于focus时才滚动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.setOnlyParentFocus = function(
            only_parent_focus
          ) {
            return hscroll_label_set_only_parent_focus(
              this != null ? this.nativeObj || this : null,
              only_parent_focus
            );
          };
          /**
           * 设置loop。
           *
           * @param loop 是否循环滚动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.setLoop = function(loop) {
            return hscroll_label_set_loop(
              this != null ? this.nativeObj || this : null,
              loop
            );
          };
          /**
           * 设置yoyo。
           *
           * @param yoyo 是否往返滚动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.setYoyo = function(yoyo) {
            return hscroll_label_set_yoyo(
              this != null ? this.nativeObj || this : null,
              yoyo
            );
          };
          /**
           * 设置ellipses。
           *
           * @param ellipses 是否在文本超长时在行尾显示"..."。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.setEllipses = function(ellipses) {
            return hscroll_label_set_ellipses(
              this != null ? this.nativeObj || this : null,
              ellipses
            );
          };
          /**
           * 设置x偏移(一般无需用户调用)。。
           *
           * @param xoffset x偏移。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.setXoffset = function(xoffset) {
            return hscroll_label_set_xoffset(
              this != null ? this.nativeObj || this : null,
              xoffset
            );
          };
          /**
           * 启动(一般无需用户调用)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.start = function() {
            return hscroll_label_start(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 停止(一般无需用户调用)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          THscrollLabel.prototype.stop = function() {
            return hscroll_label_stop(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 转换为hscroll_label对象(供脚本语言使用)。
           *
           * @param widget hscroll_label对象。
           *
           * @returns hscroll_label对象。
           */
          THscrollLabel.cast = function(widget) {
            return new THscrollLabel(
              hscroll_label_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(THscrollLabel.prototype, 'onlyFocus', {
            /**
             * 只有处于focus时才滚动(缺省否)。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_only_focus(this.nativeObj);
            },
            set: function(v) {
              this.setOnlyFocus(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(THscrollLabel.prototype, 'onlyParentFocus', {
            /**
             * 只有父控件处于focus时才滚动(缺省否)。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_only_parent_focus(this.nativeObj);
            },
            set: function(v) {
              this.setOnlyParentFocus(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(THscrollLabel.prototype, 'loop', {
            /**
             * loop是否循环滚动(缺省FALSE)。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_loop(this.nativeObj);
            },
            set: function(v) {
              this.setLoop(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(THscrollLabel.prototype, 'yoyo', {
            /**
             * 是否往返滚动(缺省FALSE)。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_yoyo(this.nativeObj);
            },
            set: function(v) {
              this.setYoyo(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(THscrollLabel.prototype, 'ellipses', {
            /**
             * 文本显示不下时，在行尾显示省略号(缺省FALSE)。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_ellipses(this.nativeObj);
            },
            set: function(v) {
              this.setEllipses(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(THscrollLabel.prototype, 'lull', {
            /**
             * 滚动之间的间歇时间(ms)，缺省3000ms。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_lull(this.nativeObj);
            },
            set: function(v) {
              this.setLull(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(THscrollLabel.prototype, 'duration', {
            /**
             * 完整的滚动一次需要的时间(ms)，缺省5000ms。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_duration(this.nativeObj);
            },
            set: function(v) {
              this.setDuration(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(THscrollLabel.prototype, 'xoffset', {
            /**
             * 偏移量。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_xoffset(this.nativeObj);
            },
            set: function(v) {
              this.setXoffset(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(THscrollLabel.prototype, 'textW', {
            /**
             * 文本的宽度。
             *
             */
            get: function() {
              return hscroll_label_t_get_prop_text_w(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return THscrollLabel;
        })(TWidget);
        exports.THscrollLabel = THscrollLabel;
        /**
         * 列表项控件。
         *
         *列表项控件是一个简单的容器控件，一般作为列表视图中滚动视图的子控件。
         *
         *list\_item\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于list\_item\_t控件。
         *
         *在xml中使用"list\_item"标签创建列表项控件。如：
         *
         *```xml
         *<list_view x="0"  y="30" w="100%" h="-80" item_height="60">
         *<scroll_view name="view" x="0"  y="0" w="100%" h="100%">
         *<list_item style="odd" children_layout="default(rows=1,cols=0)">
         *<image draw_type="icon" w="30" image="earth"/>
         *<label w="-30" text="1.Hello AWTK !">
         *<switch x="r:10" y="m" w="60" h="20"/>
         *</label>
         *</list_item>
         *...
         *</scroll_view>
         *</list_view>
         *```
         *
         *> 更多用法请参考：[list\_view\_m.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_m.xml)
         *
         *在c代码中使用函数list\_item\_create创建列表项控件。如：
         *
         *
         *> 列表项控件大小一般由列表控制，不需指定xywh参数。
         *
         *可以用style来实现可点击或不可点击的效果。如：
         *
         *```xml
         *<style name="odd_clickable" border_color="#a0a0a0"  border="bottom" text_color="black">
         *<normal     bg_color="#f5f5f5" />
         *<pressed    bg_color="#c0c0c0" />
         *<over       bg_color="#f5f5f5" />
         *</style>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L372)
         *
         */
        var TListItem = /** @class */ (function(_super) {
          __extends(TListItem, _super);
          function TListItem(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建list_item对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TListItem.create = function(parent, x, y, w, h) {
            return new TListItem(
              list_item_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为list_item对象(供脚本语言使用)。
           *
           * @param widget list_item对象。
           *
           * @returns list_item对象。
           */
          TListItem.cast = function(widget) {
            return new TListItem(
              list_item_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TListItem;
        })(TWidget);
        exports.TListItem = TListItem;
        /**
         * 水平列表视图控件。
         *
         *list\_view\_h\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于list\_view\_h\_t控件。
         *
         *在xml中使用"list\_view\_h"标签创建水平列表视图控件。如：
         *
         *```xml
         *<list_view_h x="center"  y="10" w="90%" h="100" item_width="200" spacing="5">
         *<scroll_view name="view" w="100%" h="100%">
         *<image style="border" draw_type="auto" image="1" text="1"/>
         *...
         *</scroll_view>
         *</list_view_h>
         *```
         *
         *> 注意：列表项不是作为列表视图控件的直接子控件，而是作为滚动视图的子控件。
         *
         *
         *> 更多用法请参考：[list\_view\_h.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_h.xml)
         *
         *在c代码中使用函数list\_view\_h\_create创建水平列表视图控件。如：
         *
         *
         *用代码构造列表视图是比较繁琐的事情，最好用XML来构造。
         *如果需要动态修改，可以使用widget\_clone来增加列表项，使用widget\_remove\_child来移出列表项。
         *
         *可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。
         *
         */
        var TListViewH = /** @class */ (function(_super) {
          __extends(TListViewH, _super);
          function TListViewH(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建list_view_h对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TListViewH.create = function(parent, x, y, w, h) {
            return new TListViewH(
              list_view_h_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置列表项的宽度。
           *
           * @param item_width 列表项的宽度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TListViewH.prototype.setItemWidth = function(item_width) {
            return list_view_h_set_item_width(
              this != null ? this.nativeObj || this : null,
              item_width
            );
          };
          /**
           * 设置列表项的间距。
           *
           * @param spacing 列表项的间距。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TListViewH.prototype.setSpacing = function(spacing) {
            return list_view_h_set_spacing(
              this != null ? this.nativeObj || this : null,
              spacing
            );
          };
          /**
           * 转换为list_view_h对象(供脚本语言使用)。
           *
           * @param widget list_view_h对象。
           *
           * @returns list_view_h对象。
           */
          TListViewH.cast = function(widget) {
            return new TListViewH(
              list_view_h_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(TListViewH.prototype, 'itemWidth', {
            /**
             * 列表项的宽度。
             *
             */
            get: function() {
              return list_view_h_t_get_prop_item_width(this.nativeObj);
            },
            set: function(v) {
              this.setItemWidth(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TListViewH.prototype, 'spacing', {
            /**
             * 间距。
             *
             */
            get: function() {
              return list_view_h_t_get_prop_spacing(this.nativeObj);
            },
            set: function(v) {
              this.setSpacing(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TListViewH;
        })(TWidget);
        exports.TListViewH = TListViewH;
        /**
         * 列表视图控件。
         *
         *列表视图控件是一个可以垂直滚动的列表控件。
         *
         *如果不需要滚动，可以用view控件配置适当的layout参数作为列表控件。
         *
         *列表视图中的列表项可以固定高度，也可以使用不同高度。请参考[变高列表项](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_vh.xml)
         *
         *列表视图控件的中可以有滚动条，也可以没有滚动条。
         *可以使用移动设备风格的滚动条，也可以使用桌面风格的滚动条。
         *
         *list\_view\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于list\_view\_t控件。
         *
         *在xml中使用"list\_view"标签创建列表视图控件。如：
         *
         *```xml
         *<list_view x="0"  y="30" w="100%" h="-80" item_height="60">
         *<scroll_view name="view" x="0"  y="0" w="100%" h="100%">
         *<list_item style="odd" children_layout="default(rows=1,cols=0)">
         *<image draw_type="icon" w="30" image="earth"/>
         *<label w="-30" text="1.Hello AWTK !">
         *<switch x="r:10" y="m" w="60" h="20"/>
         *</label>
         *</list_item>
         *...
         *</scroll_view>
         *</list_view>
         *```
         *
         *> 注意：列表项不是作为列表视图控件的直接子控件，而是作为滚动视图的子控件。
         *
         *
         *> 更多用法请参考：[list\_view\_m.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_m.xml)
         *
         *在c代码中使用函数list\_view\_create创建列表视图控件。如：
         *
         *
         *用代码构造列表视图是比较繁琐的事情，最好用XML来构造。
         *如果需要动态修改，可以使用widget\_clone来增加列表项，使用widget\_remove\_child来移出列表项。
         *
         *可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。
         *
         *备注：list_view 下的 scroll_view 控件不支持遍历所有子控件的效果。
         *
         *下面是针对 scroll_bar_d （桌面版）有效果，scroll_bar_m（移动版）没有效果。
         *如果 floating_scroll_bar 属性为 TRUE 和 auto_hide_scroll_bar 属性为 TRUE，scroll_view 宽默认为 list_view 的 100% 宽，鼠标在 list_view 上滚动条才显示，不在的就自动隐藏，如果 scroll_view 的高比虚拟高要大的话，滚动条变成不可见，scroll_view 宽不会变。
         *如果 floating_scroll_bar 属性为 TRUE 和 auto_hide_scroll_bar 属性为 FALSE ，scroll_view 宽默认为 list_view 的 100% 宽，滚动条不隐藏，如果 scroll_view 的高比虚拟高要大的话，滚动条变成不可见，scroll_view 宽不会变。
         *如果 floating_scroll_bar 属性为 FALSE 和 auto_hide_scroll_bar 属性为 FALSE，如果 scroll_view 的高比虚拟高要大的话，滚动条变成不可用，scroll_view 宽不会变。
         *如果 floating_scroll_bar 属性为 FALSE 和 auto_hide_scroll_bar 属性为 TRUE，如果 scroll_view 的高比虚拟高要大的话，滚动条变成不可见，scroll_view 宽会合并原来滚动条的宽。
         *
         */
        var TListView = /** @class */ (function(_super) {
          __extends(TListView, _super);
          function TListView(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建list_view对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TListView.create = function(parent, x, y, w, h) {
            return new TListView(
              list_view_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置列表项的高度。
           *
           * @param item_height 列表项的高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TListView.prototype.setItemHeight = function(item_height) {
            return list_view_set_item_height(
              this != null ? this.nativeObj || this : null,
              item_height
            );
          };
          /**
           * 设置列表项的缺省高度。
           *
           * @param default_item_height 列表项的高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TListView.prototype.setDefaultItemHeight = function(
            default_item_height
          ) {
            return list_view_set_default_item_height(
              this != null ? this.nativeObj || this : null,
              default_item_height
            );
          };
          /**
           * 设置是否自动隐藏滚动条。
           *
           * @param auto_hide_scroll_bar 是否自动隐藏滚动条。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TListView.prototype.setAutoHideScrollBar = function(
            auto_hide_scroll_bar
          ) {
            return list_view_set_auto_hide_scroll_bar(
              this != null ? this.nativeObj || this : null,
              auto_hide_scroll_bar
            );
          };
          /**
           * 设置滚动条是否悬浮在 scroll_view 上面。
           *
           * @param floating_scroll_bar 滚动条是否悬浮在 scroll_view 上面。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TListView.prototype.setFloatingScrollBar = function(
            floating_scroll_bar
          ) {
            return list_view_set_floating_scroll_bar(
              this != null ? this.nativeObj || this : null,
              floating_scroll_bar
            );
          };
          /**
           * 转换为list_view对象(供脚本语言使用)。
           *
           * @param widget list_view对象。
           *
           * @returns list_view对象。
           */
          TListView.cast = function(widget) {
            return new TListView(
              list_view_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * list_view重新初始化。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TListView.prototype.reinit = function() {
            return list_view_reinit(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TListView.prototype, 'itemHeight', {
            /**
             * 列表项的高度。如果 item_height 0，所有列表项使用固定高度，否则使用列表项自身的高度。
             *
             */
            get: function() {
              return list_view_t_get_prop_item_height(this.nativeObj);
            },
            set: function(v) {
              this.setItemHeight(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TListView.prototype, 'defaultItemHeight', {
            /**
             * 列表项的缺省高度。如果item_height <= 0 而且列表项自身的高度 <= 0，则使用缺省高度。
             *
             */
            get: function() {
              return list_view_t_get_prop_default_item_height(this.nativeObj);
            },
            set: function(v) {
              this.setDefaultItemHeight(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TListView.prototype, 'autoHideScrollBar', {
            /**
             * 如果不需要滚动条时，自动隐藏滚动条。
             *
             */
            get: function() {
              return list_view_t_get_prop_auto_hide_scroll_bar(this.nativeObj);
            },
            set: function(v) {
              this.setAutoHideScrollBar(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TListView.prototype, 'floatingScrollBar', {
            /**
             * 滚动条是否悬浮在 scroll_view 上面
             *
             */
            get: function() {
              return list_view_t_get_prop_floating_scroll_bar(this.nativeObj);
            },
            set: function(v) {
              this.setFloatingScrollBar(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TListView;
        })(TWidget);
        exports.TListView = TListView;
        /**
         * 滚动条控件。
         *
         *> 目前只支持垂直滚动。
         *
         *scroll\_bar\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于scroll\_bar\_t控件。
         *
         *在xml中使用"scroll\_bar"或"scroll\_bar\_d"或"scroll\_bar\_m"标签创建滚动条控件。如：
         *
         *```xml
         *<list_view x="0"  y="30" w="100%" h="-80" item_height="60">
         *<scroll_view name="view" x="0"  y="0" w="100%" h="100%">
         *...
         *</scroll_view>
         *<scroll_bar_m name="bar" x="right" y="0" w="6" h="100%" value="0"/>
         *</list_view>
         *```
         *
         *> 更多用法请参考：[list\_view\_m.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_m.xml)
         *
         *在c代码中使用函数scroll\_bar\_create创建列表项控件。如：
         *
         *
         *```xml
         *<style name="default">
         *<normal bg_color="#c0c0c0" fg_color="#808080"/>
         *<over bg_color="#c0c0c0" fg_color="#808080"/>
         *<pressed bg_color="#c0c0c0" fg_color="#808080"/>
         *</style>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L350)
         *
         */
        var TScrollBar = /** @class */ (function(_super) {
          __extends(TScrollBar, _super);
          function TScrollBar(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建scroll_bar对象
           *
           *> 根据宏WITH_DESKTOP_STYLE决定创建desktop风格还是mobile风格的滚动条
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TScrollBar.create = function(parent, x, y, w, h) {
            return new TScrollBar(
              scroll_bar_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为scroll_bar对象(供脚本语言使用)。
           *
           * @param widget scroll_bar对象。
           *
           * @returns scroll_bar对象。
           */
          TScrollBar.cast = function(widget) {
            return new TScrollBar(
              scroll_bar_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 创建mobile风格的scroll_bar对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TScrollBar.createMobile = function(parent, x, y, w, h) {
            return new TScrollBar(
              scroll_bar_create_mobile(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 创建desktop风格的scroll_bar对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TScrollBar.createDesktop = function(parent, x, y, w, h) {
            return new TScrollBar(
              scroll_bar_create_desktop(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置参数。
           *
           * @param virtual_size 虚拟高度。
           * @param row 每一行的高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollBar.prototype.setParams = function(virtual_size, row) {
            return scroll_bar_set_params(
              this != null ? this.nativeObj || this : null,
              virtual_size,
              row
            );
          };
          /**
           * 滚动到指定的值。
           *
           * @param value 值。
           * @param duration 动画持续时间。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollBar.prototype.scrollTo = function(value, duration) {
            return scroll_bar_scroll_to(
              this != null ? this.nativeObj || this : null,
              value,
              duration
            );
          };
          /**
           * 设置值，并触发EVT_VALUE_CHANGED事件。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollBar.prototype.setValue = function(value) {
            return scroll_bar_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 在当前的值上增加一个值，并触发EVT_VALUE_CHANGED事件。
           *
           * @param delta 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollBar.prototype.addDelta = function(delta) {
            return scroll_bar_add_delta(
              this != null ? this.nativeObj || this : null,
              delta
            );
          };
          /**
           * 在当前的值上增加一个值，并滚动到新的值，并触发EVT_VALUE_CHANGED事件。
           *
           * @param delta 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollBar.prototype.scrollDelta = function(delta) {
            return scroll_bar_scroll_delta(
              this != null ? this.nativeObj || this : null,
              delta
            );
          };
          /**
           * 设置值，但不触发EVT_VALUE_CHANGED事件。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollBar.prototype.setValueOnly = function(value) {
            return scroll_bar_set_value_only(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置auto_hide属性。
           *
           *>仅对mobile风格的滚动条有效
           *
           * @param auto_hide 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollBar.prototype.setAutoHide = function(auto_hide) {
            return scroll_bar_set_auto_hide(
              this != null ? this.nativeObj || this : null,
              auto_hide
            );
          };
          /**
           * 判断是否是mobile风格的滚动条。
           *
           *
           * @returns 返回TRUE表示是mobile风格的，否则表示不是mobile风格的。
           */
          TScrollBar.prototype.isMobile = function() {
            return scroll_bar_is_mobile(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TScrollBar.prototype, 'virtualSize', {
            /**
             * 虚拟宽度或高度。
             *
             */
            get: function() {
              return scroll_bar_t_get_prop_virtual_size(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollBar.prototype, 'value', {
            /**
             * 当前的值。
             *
             */
            get: function() {
              return scroll_bar_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollBar.prototype, 'row', {
            /**
             * 行的高度。
             *
             */
            get: function() {
              return scroll_bar_t_get_prop_row(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollBar.prototype, 'animatable', {
            /**
             * 滚动时是否启用动画。
             *
             */
            get: function() {
              return scroll_bar_t_get_prop_animatable(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollBar.prototype, 'autoHide', {
            /**
             * 是否自动隐藏(仅对mobile风格的滚动条有效)。
             *
             */
            get: function() {
              return scroll_bar_t_get_prop_auto_hide(this.nativeObj);
            },
            set: function(v) {
              this.setAutoHide(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TScrollBar;
        })(TWidget);
        exports.TScrollBar = TScrollBar;
        /**
         * 滚动视图。
         *
         *scroll\_view\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于scroll\_view\_t控件。
         *
         *在xml中使用"scroll\_view"标签创建滚动视图控件。如：
         *
         *```xml
         *<list_view x="0"  y="30" w="100%" h="-80" item_height="60">
         *<scroll_view name="view" x="0"  y="0" w="100%" h="100%">
         *<list_item style="odd" children_layout="default(rows=1,cols=0)">
         *<image draw_type="icon" w="30" image="earth"/>
         *<label w="-30" text="1.Hello AWTK !">
         *<switch x="r:10" y="m" w="60" h="20"/>
         *</label>
         *</list_item>
         *...
         *</scroll_view>
         *</list_view>
         *```
         *
         *> 滚动视图一般作为列表视图的子控件使用。
         *
         *> 更多用法请参考：[list\_view\_m.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/list_view_m.xml)
         *
         *在c代码中使用函数scroll\_view\_create创建列表视图控件。如：
         *
         *
         *可用通过style来设置控件的显示风格，如背景颜色和边框颜色等(一般情况不需要)。
         *
         */
        var TScrollView = /** @class */ (function(_super) {
          __extends(TScrollView, _super);
          function TScrollView(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建scroll_view对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TScrollView.create = function(parent, x, y, w, h) {
            return new TScrollView(
              scroll_view_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为scroll_view对象(供脚本语言使用)。
           *
           * @param widget scroll_view对象。
           *
           * @returns scroll_view对象。
           */
          TScrollView.cast = function(widget) {
            return new TScrollView(
              scroll_view_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置虚拟宽度。
           *
           * @param w 虚拟宽度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setVirtualW = function(w) {
            return scroll_view_set_virtual_w(
              this != null ? this.nativeObj || this : null,
              w
            );
          };
          /**
           * 设置虚拟高度。
           *
           * @param h 虚拟高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setVirtualH = function(h) {
            return scroll_view_set_virtual_h(
              this != null ? this.nativeObj || this : null,
              h
            );
          };
          /**
           * 设置是否允许x方向滑动。
           *
           * @param xslidable 是否允许滑动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setXslidable = function(xslidable) {
            return scroll_view_set_xslidable(
              this != null ? this.nativeObj || this : null,
              xslidable
            );
          };
          /**
           * 设置是否允许y方向滑动。
           *
           * @param yslidable 是否允许滑动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setYslidable = function(yslidable) {
            return scroll_view_set_yslidable(
              this != null ? this.nativeObj || this : null,
              yslidable
            );
          };
          /**
           * 设置滚动时offset是否按页面对齐。
           *
           * @param snap_to_page 是否按页面对齐。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setSnapToPage = function(snap_to_page) {
            return scroll_view_set_snap_to_page(
              this != null ? this.nativeObj || this : null,
              snap_to_page
            );
          };
          /**
           * 设置滚动时是否每次翻一页
           *备注：当 snap_to_page 为ture 的时候才有效果，主要用于区分一次翻一页还是一次翻多页。
           *
           * @param move_to_page 是否每次翻一页。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setMoveToPage = function(move_to_page) {
            return scroll_view_set_move_to_page(
              this != null ? this.nativeObj || this : null,
              move_to_page
            );
          };
          /**
           * 设置是否递归查找全部子控件。
           *
           * @param recursive 是否递归查找全部子控件。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setRecursive = function(recursive) {
            return scroll_view_set_recursive(
              this != null ? this.nativeObj || this : null,
              recursive
            );
          };
          /**
           * 设置是否递归查找全部子控件。(不触发repaint和relayout)。
           *
           * @param recursive 是否递归查找全部子控件。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setRecursiveOnly = function(recursive) {
            return scroll_view_set_recursive_only(
              this != null ? this.nativeObj || this : null,
              recursive
            );
          };
          /**
           * 设置偏移量。
           *
           * @param xoffset x偏移量。
           * @param yoffset y偏移量。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setOffset = function(xoffset, yoffset) {
            return scroll_view_set_offset(
              this != null ? this.nativeObj || this : null,
              xoffset,
              yoffset
            );
          };
          /**
           * 设置偏移速度比例。
           *
           * @param xspeed_scale x偏移速度比例。
           * @param yspeed_scale y偏移速度比例。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.setSpeedScale = function(
            xspeed_scale,
            yspeed_scale
          ) {
            return scroll_view_set_speed_scale(
              this != null ? this.nativeObj || this : null,
              xspeed_scale,
              yspeed_scale
            );
          };
          /**
           * 滚动到指定的偏移量。
           *
           * @param xoffset_end x偏移量。
           * @param yoffset_end y偏移量。
           * @param duration 时间。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.scrollTo = function(
            xoffset_end,
            yoffset_end,
            duration
          ) {
            return scroll_view_scroll_to(
              this != null ? this.nativeObj || this : null,
              xoffset_end,
              yoffset_end,
              duration
            );
          };
          /**
           * 滚动到指定的偏移量。
           *
           * @param xoffset_delta x偏移量。
           * @param yoffset_delta y偏移量。
           * @param duration 时间。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TScrollView.prototype.scrollDeltaTo = function(
            xoffset_delta,
            yoffset_delta,
            duration
          ) {
            return scroll_view_scroll_delta_to(
              this != null ? this.nativeObj || this : null,
              xoffset_delta,
              yoffset_delta,
              duration
            );
          };
          Object.defineProperty(TScrollView.prototype, 'virtualW', {
            /**
             * 虚拟宽度。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_virtual_w(this.nativeObj);
            },
            set: function(v) {
              this.setVirtualW(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'virtualH', {
            /**
             * 虚拟高度。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_virtual_h(this.nativeObj);
            },
            set: function(v) {
              this.setVirtualH(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'xoffset', {
            /**
             * x偏移量。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_xoffset(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'yoffset', {
            /**
             * y偏移量。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_yoffset(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'xspeedScale', {
            /**
             * x偏移速度比例。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_xspeed_scale(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'yspeedScale', {
            /**
             * y偏移速度比例。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_yspeed_scale(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'xslidable', {
            /**
             * 是否允许x方向滑动。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_xslidable(this.nativeObj);
            },
            set: function(v) {
              this.setXslidable(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'yslidable', {
            /**
             * 是否允许y方向滑动。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_yslidable(this.nativeObj);
            },
            set: function(v) {
              this.setYslidable(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'snapToPage', {
            /**
             * 滚动时offset是否按页面对齐。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_snap_to_page(this.nativeObj);
            },
            set: function(v) {
              this.setSnapToPage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'moveToPage', {
            /**
             * 是否每次翻一页（当 move_to_page 为ture 的时候才有效果，主要用于区分一次翻一页还是一次翻多页）。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_move_to_page(this.nativeObj);
            },
            set: function(v) {
              this.setMoveToPage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TScrollView.prototype, 'recursive', {
            /**
             * 是否递归查找全部子控件。
             *
             */
            get: function() {
              return scroll_view_t_get_prop_recursive(this.nativeObj);
            },
            set: function(v) {
              this.setRecursive(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TScrollView;
        })(TWidget);
        exports.TScrollView = TScrollView;
        /**
         * 左右滑动菜单控件。
         *
         *一般用一组按钮作为子控件，通过左右滑动改变当前的项。除了当菜单使用外，也可以用来切换页面。
         *
         *slide\_menu\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于slide\_menu\_t控件。
         *
         *在xml中使用"slide\_menu"标签创建左右滑动菜单控件。如：
         *
         *```xml
         *<slide_menu style="mask" align_v="top">
         *<button style="slide_button" text="0"/>
         *<button style="slide_button" text="1"/>
         *<button style="slide_button" text="2"/>
         *<button style="slide_button" text="3"/>
         *<button style="slide_button" text="4"/>
         *</slide_menu>
         *```
         *
         *> 更多用法请参考：[slide_menu.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/slide_menu.xml)
         *
         *在c代码中使用函数slide\_menu\_create创建左右滑动菜单控件。如：
         *
         *
         *可按下面的方法关注当前项改变的事件：
         *
         *
         *可按下面的方法关注当前按钮被点击的事件：
         *
         *
         *> 完整示例请参考：[slide_menu demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/slide_menu.c)
         *
         *可用通过style来设置控件的显示风格，如背景颜色和蒙版颜色等等。如：
         *
         *```xml
         *<style name="mask">
         *<normal     bg_color="#f0f0f0" mask_color="#f0f0f0"/>
         *</style>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L493)
         *
         */
        var TSlideMenu = /** @class */ (function(_super) {
          __extends(TSlideMenu, _super);
          function TSlideMenu(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建slide_menu对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSlideMenu.create = function(parent, x, y, w, h) {
            return new TSlideMenu(
              slide_menu_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换slide_menu对象(供脚本语言使用)。
           *
           * @param widget slide_menu对象。
           *
           * @returns slide_menu对象。
           */
          TSlideMenu.cast = function(widget) {
            return new TSlideMenu(
              slide_menu_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置当前项。
           *
           * @param value 当前项的索引。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideMenu.prototype.setValue = function(value) {
            return slide_menu_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置垂直对齐方式。
           *
           * @param align_v 对齐方式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideMenu.prototype.setAlignV = function(align_v) {
            return slide_menu_set_align_v(
              this != null ? this.nativeObj || this : null,
              align_v
            );
          };
          /**
           * 设置最小缩放比例。
           *
           * @param min_scale 最小缩放比例，范围[0.5-1]。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideMenu.prototype.setMinScale = function(min_scale) {
            return slide_menu_set_min_scale(
              this != null ? this.nativeObj || this : null,
              min_scale
            );
          };
          Object.defineProperty(TSlideMenu.prototype, 'value', {
            /**
             * 值。代表当前选中项的索引。
             *
             */
            get: function() {
              return slide_menu_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideMenu.prototype, 'alignV', {
            /**
             * 垂直对齐方式。
             *
             */
            get: function() {
              return slide_menu_t_get_prop_align_v(this.nativeObj);
            },
            set: function(v) {
              this.setAlignV(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideMenu.prototype, 'minScale', {
            /**
             * 最小缩放比例。
             *
             */
            get: function() {
              return slide_menu_t_get_prop_min_scale(this.nativeObj);
            },
            set: function(v) {
              this.setMinScale(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TSlideMenu;
        })(TWidget);
        exports.TSlideMenu = TSlideMenu;
        /**
         * slide_view的指示器控件。
         *
         *> 支持直线、弧线排布，默认有4种绘制样式，若设置了icon/active_icon，则优先使用icon/active_icon
         *
         *slide\_indicator\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于slide\_indicator\_t控件。
         *
         *在xml中使用"slide\_indicator"或"slide\_indicator\_arc"标签创建指示器控件。如：
         *
         *```xml
         *<slide_view name="view" x="0"  y="0" w="100%" h="100%">
         *...
         *</slide_view>
         *<slide_indicator name="indicator" x="right" y="0" w="6" h="100%"/>
         *```
         *
         *> 更多用法请参考：[slide\_view.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/slide_view.xml)
         *
         *在c代码中使用函数slide\_indicator\_create创建指示器控件。如：
         *
         *
         *```xml
         *<style name="default">
         *<normal fg_color="#FFFFFF80" selected_fg_color="#FFFFFF"/>
         *</style>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L350)
         *
         */
        var TSlideIndicator = /** @class */ (function(_super) {
          __extends(TSlideIndicator, _super);
          function TSlideIndicator(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建slide_indicator对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSlideIndicator.create = function(parent, x, y, w, h) {
            return new TSlideIndicator(
              slide_indicator_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 创建slide_indicator对象（线性显示）
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSlideIndicator.createLinear = function(parent, x, y, w, h) {
            return new TSlideIndicator(
              slide_indicator_create_linear(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 创建slide_indicator对象（圆弧显示）
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSlideIndicator.createArc = function(parent, x, y, w, h) {
            return new TSlideIndicator(
              slide_indicator_create_arc(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为slide_indicator对象(供脚本语言使用)。
           *
           * @param widget slide_indicator对象。
           *
           * @returns slide_indicator对象。
           */
          TSlideIndicator.cast = function(widget) {
            return new TSlideIndicator(
              slide_indicator_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置当前页的序号。
           *
           * @param value 当前项的序号。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setValue = function(value) {
            return slide_indicator_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置指示器的数量。
           *
           * @param max 数量。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setMax = function(max) {
            return slide_indicator_set_max(
              this != null ? this.nativeObj || this : null,
              max
            );
          };
          /**
           * 设置指示器的默认绘制类型。
           *
           * @param default_paint 默认绘制类型。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setDefaultPaint = function(default_paint) {
            return slide_indicator_set_default_paint(
              this != null ? this.nativeObj || this : null,
              default_paint
            );
          };
          /**
           * 设置指示器是否自动隐藏。
           *
           * @param auto_hide 0表示禁止，非0表示无操作后延迟多久隐藏。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setAutoHide = function(auto_hide) {
            return slide_indicator_set_auto_hide(
              this != null ? this.nativeObj || this : null,
              auto_hide
            );
          };
          /**
           * 设置指示器的边距(默认为10像素)。
           *
           * @param margin 指示器的边距。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setMargin = function(margin) {
            return slide_indicator_set_margin(
              this != null ? this.nativeObj || this : null,
              margin
            );
          };
          /**
           * 设置指示器的间距(指示器有弧度时为角度值，否则为直线间距)。
           *
           * @param spacing 指示器的间距。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setSpacing = function(spacing) {
            return slide_indicator_set_spacing(
              this != null ? this.nativeObj || this : null,
              spacing
            );
          };
          /**
           * 设置指示器的大小(默认为8)。
           *
           * @param size 指示器的大小。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setSize = function(size) {
            return slide_indicator_set_size(
              this != null ? this.nativeObj || this : null,
              size
            );
          };
          /**
           * 设置旋转锚点。
           *
           * @param anchor_x 锚点坐标x。(后面加上px为像素点，不加px为相对百分比坐标)
           * @param anchor_y 锚点坐标y。(后面加上px为像素点，不加px为相对百分比坐标)
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setAnchor = function(anchor_x, anchor_y) {
            return slide_indicator_set_anchor(
              this != null ? this.nativeObj || this : null,
              anchor_x,
              anchor_y
            );
          };
          /**
           * 设置指示器指示的目标。
           *
           * @param target_name 指示器指示的目标控件的名称
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideIndicator.prototype.setIndicatedTarget = function(target_name) {
            return slide_indicator_set_indicated_target(
              this != null ? this.nativeObj || this : null,
              target_name
            );
          };
          Object.defineProperty(TSlideIndicator.prototype, 'value', {
            /**
             * 值(缺省为0)。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'max', {
            /**
             * 最大值(缺省为100)。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_max(this.nativeObj);
            },
            set: function(v) {
              this.setMax(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'defaultPaint', {
            /**
             * 指示器的类型。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_default_paint(this.nativeObj);
            },
            set: function(v) {
              this.setDefaultPaint(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'autoHide', {
            /**
             * 自动隐藏。0表示禁止，非0表示无操作后延迟多久隐藏。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_auto_hide(this.nativeObj);
            },
            set: function(v) {
              this.setAutoHide(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'margin', {
            /**
             * 指示器与边缘的边距。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_margin(this.nativeObj);
            },
            set: function(v) {
              this.setMargin(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'spacing', {
            /**
             * 指示器的中心之间的间距（圆弧显示时，间距的单位为弧度，否则为像素）。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_spacing(this.nativeObj);
            },
            set: function(v) {
              this.setSpacing(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'size', {
            /**
             * 指示器的大小。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_size(this.nativeObj);
            },
            set: function(v) {
              this.setSize(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'anchorX', {
            /**
             * 锚点x坐标。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_anchor_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'anchorY', {
            /**
             * 锚点y坐标。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_anchor_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideIndicator.prototype, 'indicatedTarget', {
            /**
             * 指示器指示的目标控件的名称。
             *
             */
            get: function() {
              return slide_indicator_t_get_prop_indicated_target(
                this.nativeObj
              );
            },
            set: function(v) {
              this.setIndicatedTarget(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TSlideIndicator;
        })(TWidget);
        exports.TSlideIndicator = TSlideIndicator;
        /**
         * 滑动视图。
         *
         *滑动视图可以管理多个页面，并通过滑动来切换当前页面。也可以管理多张图片，让它们自动切换。
         *
         *slide\_view\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于slide\_view\_t控件。
         *
         *在xml中使用"slide\_view"标签创建滑动视图控件。如：
         *
         *```xml
         *<slide_view x="0" y="0" w="100%" h="100%" style="dot">
         *<view x="0" y="0" w="100%" h="100%" children_layout="default(w=60,h=60,m=5,s=10)">
         *...
         *</view>
         *<view x="0" y="0" w="100%" h="100%" children_layout="default(w=60,h=60,m=5,s=10)">
         *...
         *</view>
         *</slide_view>
         *```
         *
         *> 更多用法请参考：[slide_view.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/slide_view.xml)
         *
         *在c代码中使用函数slide\_view\_create创建滑动视图控件。如：
         *
         *
         *> 完整示例请参考：
         *[slide_view demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/slide_view.c)
         *
         *可用通过style来设置控件的显示风格，如背景颜色和指示器的图标等等。如：
         *
         *```xml
         *<style name="dot">
         *<normal  icon="dot" active_icon="active_dot"/>
         *</style>
         *```
         *
         *> 如果希望背景图片跟随滚动，请将背景图片设置到页面上，否则设置到slide\_view上。
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L458)
         *
         */
        var TSlideView = /** @class */ (function(_super) {
          __extends(TSlideView, _super);
          function TSlideView(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建slide_view对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSlideView.create = function(parent, x, y, w, h) {
            return new TSlideView(
              slide_view_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为slide_view对象(供脚本语言使用)。
           *
           * @param widget slide_view对象。
           *
           * @returns slide_view对象。
           */
          TSlideView.cast = function(widget) {
            return new TSlideView(
              slide_view_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置为自动播放模式。
           *
           * @param auto_play 0表示禁止自动播放，非0表示自动播放时每一页播放的时间。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideView.prototype.setAutoPlay = function(auto_play) {
            return slide_view_set_auto_play(
              this != null ? this.nativeObj || this : null,
              auto_play
            );
          };
          /**
           * 设置当前页的序号(默认启用动画)。
           *
           * @param index 当前页的序号。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideView.prototype.setActive = function(index) {
            return slide_view_set_active(
              this != null ? this.nativeObj || this : null,
              index
            );
          };
          /**
           * 设置当前页的序号。
           *
           * @param index 当前页的序号。
           * @param animate 是否启用动画。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideView.prototype.setActiveEx = function(index, animate) {
            return slide_view_set_active_ex(
              this != null ? this.nativeObj || this : null,
              index,
              animate
            );
          };
          /**
           * 设置为上下滑动(缺省为左右滑动)。
           *
           * @param vertical TRUE表示上下滑动，FALSE表示左右滑动。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideView.prototype.setVertical = function(vertical) {
            return slide_view_set_vertical(
              this != null ? this.nativeObj || this : null,
              vertical
            );
          };
          /**
           * 设置页面切换动画。
           *
           *anim_hint取值如下：
           *
           ** "translate"：平移。
           ** "overlap"：覆盖。
           ** "overlap\_with\_alpha"：覆盖并改变透明度。
           *
           *> 使用"overlap"或"overlap\_with\_alpha"动画时，背景图片最好指定到page上。
           *>
           *> 使用"overlap\_with\_alpha"动画时，slideview的背景设置为黑色，
           *> 或slideview的背景设置为透明，窗口的背景设置为黑色，以获得更好的视觉效果和性能。
           *
           * @param anim_hint 页面切换动画。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideView.prototype.setAnimHint = function(anim_hint) {
            return slide_view_set_anim_hint(
              this != null ? this.nativeObj || this : null,
              anim_hint
            );
          };
          /**
           * 设置循环切换模式。
           *
           * @param loop 是否启用循环切换模式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideView.prototype.setLoop = function(loop) {
            return slide_view_set_loop(
              this != null ? this.nativeObj || this : null,
              loop
            );
          };
          /**
           * 删除指定序号页面。
           *
           * @param index 删除页面的序号。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlideView.prototype.removeIndex = function(index) {
            return slide_view_remove_index(
              this != null ? this.nativeObj || this : null,
              index
            );
          };
          Object.defineProperty(TSlideView.prototype, 'vertical', {
            /**
             * 是否为上下滑动模式。
             *
             */
            get: function() {
              return slide_view_t_get_prop_vertical(this.nativeObj);
            },
            set: function(v) {
              this.setVertical(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideView.prototype, 'autoPlay', {
            /**
             * 自动播放。0表示禁止自动播放，非0表示自动播放时每一页播放的时间。
             *
             */
            get: function() {
              return slide_view_t_get_prop_auto_play(this.nativeObj);
            },
            set: function(v) {
              this.setAutoPlay(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideView.prototype, 'loop', {
            /**
             * 循环切换模式。
             *
             *向后切换：切换到最后一页时，再往后切换就到第一页。
             *向前切换：切换到第一页时，再往前切换就到最后一页。
             *
             */
            get: function() {
              return slide_view_t_get_prop_loop(this.nativeObj);
            },
            set: function(v) {
              this.setLoop(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlideView.prototype, 'animHint', {
            /**
             * 页面切换效果。
             *
             */
            get: function() {
              return slide_view_t_get_prop_anim_hint(this.nativeObj);
            },
            set: function(v) {
              this.setAnimHint(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TSlideView;
        })(TWidget);
        exports.TSlideView = TSlideView;
        /**
         * 开关控件。
         *
         *switch\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于switch\_t控件。
         *
         *在xml中使用"switch"标签创建开关控件。如：
         *
         *```xml
         *<switch x="10" y="60" w="60" h="22" />
         *```
         *
         *> 更多用法请参考：[switch.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/switch.xml)
         *
         *在c代码中使用函数switch\_create创建开关控件。如：
         *
         *
         *> 完整示例请参考：[switch demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/switch.c)
         *
         *可用通过style来设置控件的显示风格，如背景图片等。如：
         *
         *```xml
         *<style name="default">
         *<normal  bg_image="switch" />
         *</style>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L452)
         *
         */
        var TSwitch = /** @class */ (function(_super) {
          __extends(TSwitch, _super);
          function TSwitch(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建switch对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSwitch.create = function(parent, x, y, w, h) {
            return new TSwitch(
              switch_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置控件的值。
           *
           * @param value 值
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSwitch.prototype.setValue = function(value) {
            return switch_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 转换switch对象(供脚本语言使用)。
           *
           * @param widget switch对象。
           *
           * @returns switch对象。
           */
          TSwitch.cast = function(widget) {
            return new TSwitch(
              switch_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          Object.defineProperty(TSwitch.prototype, 'value', {
            /**
             * 值。
             *
             */
            get: function() {
              return switch_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSwitch.prototype, 'maxXoffsetRatio', {
            /**
             * 当开关处于关闭时，图片偏移相对于图片宽度的比例(缺省为1/3)。
             *
             */
            get: function() {
              return switch_t_get_prop_max_xoffset_ratio(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TSwitch;
        })(TWidget);
        exports.TSwitch = TSwitch;
        /**
         * 文本选择器控件，通常用于选择日期和时间等。
         *
         *> XXX: 目前需要先设置options和visible_nr，再设置其它参数(在XML中也需要按此顺序)。
         *
         *text\_selector\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于text\_selector\_t控件。
         *
         *在xml中使用"text\_selector"标签创建文本选择器控件。如：
         *
         *```xml
         *<text_selector options="red;green;blue;gold;orange" visible_nr="3" text="red"/>
         *```
         *
         *> 更多用法请参考：[text\_selector.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/text_selector.xml)
         *
         *在c代码中使用函数text\_selector\_create创建文本选择器控件。如：
         *
         *
         *> 完整示例请参考：[text\_selector demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/text_selector.c)
         *
         *可用通过style来设置控件的显示风格，如字体和背景颜色等。如：
         *
         *```xml
         *<style name="dark" fg_color="#a0a0a0"  text_color="black" text_align_h="center">
         *<normal     bg_color="#ffffff" mask_color="#404040" border_color="#404040"/>
         *</style>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L443)
         *
         */
        var TTextSelector = /** @class */ (function(_super) {
          __extends(TTextSelector, _super);
          function TTextSelector(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建text_selector对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TTextSelector.create = function(parent, x, y, w, h) {
            return new TTextSelector(
              text_selector_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换text_selector对象(供脚本语言使用)。
           *
           * @param widget text_selector对象。
           *
           * @returns text_selector对象。
           */
          TTextSelector.cast = function(widget) {
            return new TTextSelector(
              text_selector_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 重置所有选项。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.resetOptions = function() {
            return text_selector_reset_options(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取选项个数。
           *
           *
           * @returns 返回选项个数。
           */
          TTextSelector.prototype.countOptions = function() {
            return text_selector_count_options(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 追加一个选项。
           *
           * @param value 值。
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.appendOption = function(value, text) {
            return text_selector_append_option(
              this != null ? this.nativeObj || this : null,
              value,
              text
            );
          };
          /**
           * 设置选项。
           *
           * @param options 选项。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setOptions = function(options) {
            return text_selector_set_options(
              this != null ? this.nativeObj || this : null,
              options
            );
          };
          /**
           * 设置一系列的整数选项。
           *
           * @param start 起始值。
           * @param nr 个数。
           * @param step 步长。
           * @param format 选项的格式化。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setRangeOptionsEx = function(
            start,
            nr,
            step,
            format
          ) {
            return text_selector_set_range_options_ex(
              this != null ? this.nativeObj || this : null,
              start,
              nr,
              step,
              format
            );
          };
          /**
           * 设置一系列的整数选项。
           *
           * @param start 起始值。
           * @param nr 个数。
           * @param step 步长。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setRangeOptions = function(start, nr, step) {
            return text_selector_set_range_options(
              this != null ? this.nativeObj || this : null,
              start,
              nr,
              step
            );
          };
          /**
           * 获取text_selector的值。
           *
           *
           * @returns 返回值。
           */
          TTextSelector.prototype.getValue = function() {
            return text_selector_get_value(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置text_selector的值。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setValue = function(value) {
            return text_selector_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 获取text_selector的文本。
           *
           *
           * @returns 返回文本。
           */
          TTextSelector.prototype.getTextValue = function() {
            return text_selector_get_text(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置text_selector的文本。
           *
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setText = function(text) {
            return text_selector_set_text(
              this != null ? this.nativeObj || this : null,
              text
            );
          };
          /**
           * 设置第index个选项为当前选中的选项。
           *
           * @param index 选项的索引。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setSelectedIndex = function(index) {
            return text_selector_set_selected_index(
              this != null ? this.nativeObj || this : null,
              index
            );
          };
          /**
           * 设置可见的选项数。
           *
           * @param visible_nr 选项数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setVisibleNr = function(visible_nr) {
            return text_selector_set_visible_nr(
              this != null ? this.nativeObj || this : null,
              visible_nr
            );
          };
          /**
           * 设置是否本地化(翻译)选项。
           *
           * @param localize_options 是否本地化(翻译)选项。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setLocalizeOptions = function(
            localize_options
          ) {
            return text_selector_set_localize_options(
              this != null ? this.nativeObj || this : null,
              localize_options
            );
          };
          /**
           * 设置是否循环选项。
           *
           * @param loop_options 是否循环选项。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setLoopOptions = function(loop_options) {
            return text_selector_set_loop_options(
              this != null ? this.nativeObj || this : null,
              loop_options
            );
          };
          /**
           * 设置Y轴偏移速度比例。
           *
           * @param yspeed_scale y偏移速度比例。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setYspeedScale = function(yspeed_scale) {
            return text_selector_set_yspeed_scale(
              this != null ? this.nativeObj || this : null,
              yspeed_scale
            );
          };
          /**
           * 设置滚动动画播放时间。
           *
           * @param animating_time 滚动动画播放时间。(单位毫秒)
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setAnimatingTime = function(animating_time) {
            return text_selector_set_animating_time(
              this != null ? this.nativeObj || this : null,
              animating_time
            );
          };
          /**
           * 设置是否修改值时启用动画。
           *
           * @param enable_value_animator 是否修改值时启用动画
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTextSelector.prototype.setEnableValueAnimator = function(
            enable_value_animator
          ) {
            return text_selector_set_enable_value_animator(
              this != null ? this.nativeObj || this : null,
              enable_value_animator
            );
          };
          Object.defineProperty(TTextSelector.prototype, 'visibleNr', {
            /**
             * 可见的选项数量(只能是1或者3或者5，缺省为5)。
             *
             */
            get: function() {
              return text_selector_t_get_prop_visible_nr(this.nativeObj);
            },
            set: function(v) {
              this.setVisibleNr(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTextSelector.prototype, 'selectedIndex', {
            /**
             * 当前选中的选项。
             *
             */
            get: function() {
              return text_selector_t_get_prop_selected_index(this.nativeObj);
            },
            set: function(v) {
              this.setSelectedIndex(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTextSelector.prototype, 'options', {
            /**
             * 设置可选项(冒号分隔值和文本，分号分隔选项，如:1:red;2:green;3:blue)。
             *对于数值选项，也可以指定一个范围，用『-』分隔起始值、结束值和格式。
             *如："1-7-%02d"表示1到7，格式为『02d』，格式为可选，缺省为『%d』。
             *
             */
            get: function() {
              return text_selector_t_get_prop_options(this.nativeObj);
            },
            set: function(v) {
              this.setOptions(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTextSelector.prototype, 'yspeedScale', {
            /**
             * y偏移速度比例。
             *
             */
            get: function() {
              return text_selector_t_get_prop_yspeed_scale(this.nativeObj);
            },
            set: function(v) {
              this.setYspeedScale(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTextSelector.prototype, 'animatingTime', {
            /**
             * 滚动动画播放时间。(单位毫秒)
             *
             */
            get: function() {
              return text_selector_t_get_prop_animating_time(this.nativeObj);
            },
            set: function(v) {
              this.setAnimatingTime(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTextSelector.prototype, 'localizeOptions', {
            /**
             * 是否本地化(翻译)选项(缺省为FALSE)。
             *
             */
            get: function() {
              return text_selector_t_get_prop_localize_options(this.nativeObj);
            },
            set: function(v) {
              this.setLocalizeOptions(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTextSelector.prototype, 'loopOptions', {
            /**
             * 是否循环选项(缺省为FALSE)。
             *
             */
            get: function() {
              return text_selector_t_get_prop_loop_options(this.nativeObj);
            },
            set: function(v) {
              this.setLoopOptions(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(
            TTextSelector.prototype,
            'enableValueAnimator',
            {
              /**
               * 是否修改值时启用动画。
               *
               */
              get: function() {
                return text_selector_t_get_prop_enable_value_animator(
                  this.nativeObj
                );
              },
              set: function(v) {
                this.setEnableValueAnimator(v);
              },
              enumerable: false,
              configurable: true,
            }
          );
          return TTextSelector;
        })(TWidget);
        exports.TTextSelector = TTextSelector;
        /**
         * 模拟时钟控件。
         *
         *time\_clock\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于time\_clock\_t控件。
         *
         *在xml中使用"time\_clock"标签创建模拟时钟控件。如：
         *
         *```xml
         *<time_clock x="c" y="m" w="300" h="300" bg_image="clock_bg" image="clock"
         *hour_image="clock_hour" minute_image="clock_minute" second_image="clock_second"/>
         *```
         *
         *> 更多用法请参考：[time\_clock.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/time_clock.xml)
         *
         *在c代码中使用函数time\_clock\_create创建模拟时钟控件。如：
         *
         *
         *> 完整示例请参考：[time_clock demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/time_clock.c)
         *
         *time\_clock一般不需要设置style。
         *
         */
        var TTimeClock = /** @class */ (function(_super) {
          __extends(TTimeClock, _super);
          function TTimeClock(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建time_clock对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TTimeClock.create = function(parent, x, y, w, h) {
            return new TTimeClock(
              time_clock_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为time_clock对象(供脚本语言使用)。
           *
           * @param widget time_clock对象。
           *
           * @returns time_clock对象。
           */
          TTimeClock.cast = function(widget) {
            return new TTimeClock(
              time_clock_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置小时的值。
           *
           * @param hour 小时的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setHour = function(hour) {
            return time_clock_set_hour(
              this != null ? this.nativeObj || this : null,
              hour
            );
          };
          /**
           * 设置分钟的值。
           *
           * @param minute 分钟的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setMinute = function(minute) {
            return time_clock_set_minute(
              this != null ? this.nativeObj || this : null,
              minute
            );
          };
          /**
           * 设置秒的值。
           *
           * @param second 秒的值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setSecond = function(second) {
            return time_clock_set_second(
              this != null ? this.nativeObj || this : null,
              second
            );
          };
          /**
           * 设置小时的图片。
           *
           * @param hour 小时的图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setHourImage = function(hour) {
            return time_clock_set_hour_image(
              this != null ? this.nativeObj || this : null,
              hour
            );
          };
          /**
           * 设置分钟的图片。
           *
           * @param minute_image 分钟的图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setMinuteImage = function(minute_image) {
            return time_clock_set_minute_image(
              this != null ? this.nativeObj || this : null,
              minute_image
            );
          };
          /**
           * 设置秒的图片。
           *
           * @param second_image 秒的图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setSecondImage = function(second_image) {
            return time_clock_set_second_image(
              this != null ? this.nativeObj || this : null,
              second_image
            );
          };
          /**
           * 设置背景图片。
           *
           * @param bg_image 背景图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setBgImage = function(bg_image) {
            return time_clock_set_bg_image(
              this != null ? this.nativeObj || this : null,
              bg_image
            );
          };
          /**
           * 设置中心图片。
           *
           * @param image 图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setImage = function(image) {
            return time_clock_set_image(
              this != null ? this.nativeObj || this : null,
              image
            );
          };
          /**
           * 设置小时指针的旋转锚点。
           *> 后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f
           *
           * @param anchor_x 指针的锚点坐标x。
           * @param anchor_y 指针的锚点坐标y。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setHourAnchor = function(anchor_x, anchor_y) {
            return time_clock_set_hour_anchor(
              this != null ? this.nativeObj || this : null,
              anchor_x,
              anchor_y
            );
          };
          /**
           * 设置分钟指针的旋转锚点。
           *> 后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f
           *
           * @param anchor_x 指针的锚点坐标x。
           * @param anchor_y 指针的锚点坐标y。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setMinuteAnchor = function(anchor_x, anchor_y) {
            return time_clock_set_minute_anchor(
              this != null ? this.nativeObj || this : null,
              anchor_x,
              anchor_y
            );
          };
          /**
           * 设置秒钟指针的旋转锚点。
           *> 后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f
           *
           * @param anchor_x 指针的锚点坐标x。
           * @param anchor_y 指针的锚点坐标y。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTimeClock.prototype.setSecondAnchor = function(anchor_x, anchor_y) {
            return time_clock_set_second_anchor(
              this != null ? this.nativeObj || this : null,
              anchor_x,
              anchor_y
            );
          };
          Object.defineProperty(TTimeClock.prototype, 'hour', {
            /**
             * 小时。
             *
             */
            get: function() {
              return time_clock_t_get_prop_hour(this.nativeObj);
            },
            set: function(v) {
              this.setHour(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'minute', {
            /**
             * 分钟。
             *
             */
            get: function() {
              return time_clock_t_get_prop_minute(this.nativeObj);
            },
            set: function(v) {
              this.setMinute(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'second', {
            /**
             * 秒。
             *
             */
            get: function() {
              return time_clock_t_get_prop_second(this.nativeObj);
            },
            set: function(v) {
              this.setSecond(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'image', {
            /**
             * 中心图片。
             *
             */
            get: function() {
              return time_clock_t_get_prop_image(this.nativeObj);
            },
            set: function(v) {
              this.setImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'bgImage', {
            /**
             * 背景图片。
             *
             */
            get: function() {
              return time_clock_t_get_prop_bg_image(this.nativeObj);
            },
            set: function(v) {
              this.setBgImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'hourImage', {
            /**
             * 时针图片。
             *
             */
            get: function() {
              return time_clock_t_get_prop_hour_image(this.nativeObj);
            },
            set: function(v) {
              this.setHourImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'minuteImage', {
            /**
             * 分针图片。
             *
             */
            get: function() {
              return time_clock_t_get_prop_minute_image(this.nativeObj);
            },
            set: function(v) {
              this.setMinuteImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'secondImage', {
            /**
             * 秒针图片。
             *
             */
            get: function() {
              return time_clock_t_get_prop_second_image(this.nativeObj);
            },
            set: function(v) {
              this.setSecondImage(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'hourAnchorX', {
            /**
             * 时针图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)
             *
             */
            get: function() {
              return time_clock_t_get_prop_hour_anchor_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'hourAnchorY', {
            /**
             * 时针图片旋转锚点y坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)
             *
             */
            get: function() {
              return time_clock_t_get_prop_hour_anchor_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'minuteAnchorX', {
            /**
             * 分针图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)
             *
             */
            get: function() {
              return time_clock_t_get_prop_minute_anchor_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'minuteAnchorY', {
            /**
             * 分针图片旋转锚点y坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)
             *
             */
            get: function() {
              return time_clock_t_get_prop_minute_anchor_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'secondAnchorX', {
            /**
             * 秒针图片旋转锚点x坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)
             *
             */
            get: function() {
              return time_clock_t_get_prop_second_anchor_x(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimeClock.prototype, 'secondAnchorY', {
            /**
             * 秒针图片旋转锚点y坐标。(后面加上px为像素点，不加px为相对百分比坐标0.0f到1.0f)
             *
             */
            get: function() {
              return time_clock_t_get_prop_second_anchor_y(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TTimeClock;
        })(TWidget);
        exports.TTimeClock = TTimeClock;
        /**
         * 虚拟页面(根据情况自动加载/卸载页面，并提供入场/出场动画)。
         *
         *> 虚拟页面只能作为pages的直接子控件使用。
         *
         *如果指定了ui_asset:
         *
         ** 当页面切换到后台时自动卸载，并触发EVT\_VPAGE\_CLOSE消息。
         ** 当页面切换到前台时自动加载，在动画前出发EVT\_VPAGE\_WILL\_OPEN消息，在动画完成时触发 EVT\_VPAGE\_CLOSE消息。
         *
         *vpage\_t也可以当作普通view嵌入到pages中，让tab控件在切换时具有动画效果。
         *
         *在xml中使用"vpage"标签创建控件。如：
         *
         *```xml
         *<!-- ui -->
         *<vpage x="c" y="50" w="100" h="100" ui_asset="mypage"/>
         *```
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等(一般无需指定)。如：
         *
         *```xml
         *<!-- style -->
         *<vpage>
         *<style name="default">
         *<normal />
         *</style>
         *</vpage>
         *```
         *
         */
        var TVpage = /** @class */ (function(_super) {
          __extends(TVpage, _super);
          function TVpage(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建vpage对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns vpage对象。
           */
          TVpage.create = function(parent, x, y, w, h) {
            return new TVpage(
              vpage_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为vpage对象(供脚本语言使用)。
           *
           * @param widget vpage对象。
           *
           * @returns vpage对象。
           */
          TVpage.cast = function(widget) {
            return new TVpage(
              vpage_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 设置 UI资源名称。
           *
           * @param ui_asset UI资源名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVpage.prototype.setUiAsset = function(ui_asset) {
            return vpage_set_ui_asset(
              this != null ? this.nativeObj || this : null,
              ui_asset
            );
          };
          /**
           * 设置动画类型(vtranslate: 垂直平移，htranslate: 水平平移)。
           *
           * @param anim_hint 动画类型。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TVpage.prototype.setAnimHint = function(anim_hint) {
            return vpage_set_anim_hint(
              this != null ? this.nativeObj || this : null,
              anim_hint
            );
          };
          Object.defineProperty(TVpage.prototype, 'uiAsset', {
            /**
             * UI资源名称。
             *
             */
            get: function() {
              return vpage_t_get_prop_ui_asset(this.nativeObj);
            },
            set: function(v) {
              this.setUiAsset(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TVpage.prototype, 'animHint', {
            /**
             * 动画类型(目前支持：vtranslate: 垂直平移，htranslate: 水平平移)。
             *
             */
            get: function() {
              return vpage_t_get_prop_anim_hint(this.nativeObj);
            },
            set: function(v) {
              this.setAnimHint(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TVpage;
        })(TWidget);
        exports.TVpage = TVpage;
        /**
         * 对象属性变化事件。
         *
         */
        var TPropChangeEvent = /** @class */ (function(_super) {
          __extends(TPropChangeEvent, _super);
          function TPropChangeEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转prop_change_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns 返回event对象。
           */
          TPropChangeEvent.cast = function(event) {
            return new TPropChangeEvent(
              prop_change_event_cast(
                event != null ? event.nativeObj || event : null
              )
            );
          };
          Object.defineProperty(TPropChangeEvent.prototype, 'name', {
            /**
             * 属性的名称。
             *
             */
            get: function() {
              return prop_change_event_t_get_prop_name(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPropChangeEvent.prototype, 'value', {
            /**
             * 属性的值。
             *
             */
            get: function() {
              return new TValue(
                prop_change_event_t_get_prop_value(this.nativeObj)
              );
            },
            enumerable: false,
            configurable: true,
          });
          return TPropChangeEvent;
        })(TEvent);
        exports.TPropChangeEvent = TPropChangeEvent;
        /**
         * 进度变化事件。
         *
         */
        var TProgressEvent = /** @class */ (function(_super) {
          __extends(TProgressEvent, _super);
          function TProgressEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转progress_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns 返回event对象。
           */
          TProgressEvent.cast = function(event) {
            return new TProgressEvent(
              progress_event_cast(
                event != null ? event.nativeObj || event : null
              )
            );
          };
          Object.defineProperty(TProgressEvent.prototype, 'percent', {
            /**
             * 进度百分比。
             *
             */
            get: function() {
              return progress_event_t_get_prop_percent(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TProgressEvent;
        })(TEvent);
        exports.TProgressEvent = TProgressEvent;
        /**
         * 执行完成事件。
         *
         */
        var TDoneEvent = /** @class */ (function(_super) {
          __extends(TDoneEvent, _super);
          function TDoneEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转done_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns 返回event对象。
           */
          TDoneEvent.cast = function(event) {
            return new TDoneEvent(
              done_event_cast(event != null ? event.nativeObj || event : null)
            );
          };
          Object.defineProperty(TDoneEvent.prototype, 'result', {
            /**
             * 执行结果。
             *
             */
            get: function() {
              return done_event_t_get_prop_result(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TDoneEvent;
        })(TEvent);
        exports.TDoneEvent = TDoneEvent;
        /**
         * 执行完成事件。
         *
         */
        var TErrorEvent = /** @class */ (function(_super) {
          __extends(TErrorEvent, _super);
          function TErrorEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转error_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns 返回event对象。
           */
          TErrorEvent.cast = function(event) {
            return new TErrorEvent(
              error_event_cast(event != null ? event.nativeObj || event : null)
            );
          };
          Object.defineProperty(TErrorEvent.prototype, 'code', {
            /**
             * 错误码。
             *
             */
            get: function() {
              return error_event_t_get_prop_code(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TErrorEvent.prototype, 'message', {
            /**
             * 错误信息。
             *
             */
            get: function() {
              return error_event_t_get_prop_message(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TErrorEvent;
        })(TEvent);
        exports.TErrorEvent = TErrorEvent;
        /**
         * 对象执行命令的事件。
         *
         */
        var TCmdExecEvent = /** @class */ (function(_super) {
          __extends(TCmdExecEvent, _super);
          function TCmdExecEvent(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 把event对象转cmd_exec_event_t对象，主要给脚本语言使用。
           *
           * @param event event对象。
           *
           * @returns 返回event对象。
           */
          TCmdExecEvent.cast = function(event) {
            return new TCmdExecEvent(
              cmd_exec_event_cast(
                event != null ? event.nativeObj || event : null
              )
            );
          };
          Object.defineProperty(TCmdExecEvent.prototype, 'name', {
            /**
             * 命令的名称。
             *
             */
            get: function() {
              return cmd_exec_event_t_get_prop_name(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCmdExecEvent.prototype, 'args', {
            /**
             * 命令的参数。
             *
             */
            get: function() {
              return cmd_exec_event_t_get_prop_args(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCmdExecEvent.prototype, 'result', {
            /**
             * 执行结果(适用于EXECED)。
             *
             */
            get: function() {
              return cmd_exec_event_t_get_prop_result(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TCmdExecEvent.prototype, 'canExec', {
            /**
             * 标识命令是否可以执行(适用于CAN_EXEC)。
             *
             */
            get: function() {
              return cmd_exec_event_t_get_prop_can_exec(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TCmdExecEvent;
        })(TEvent);
        exports.TCmdExecEvent = TCmdExecEvent;
        /**
         * app_bar控件。
         *
         *一个简单的容器控件，一般在窗口的顶部，用于显示本窗口的状态和信息。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *app\_bar\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于app\_bar\_t控件。
         *
         *在xml中使用"app\_bar"标签创建app\_bar。如：
         *
         *```xml
         *<app_bar x="0" y="0" w="100%" h="30"
         *<label x="0" y="0" w="100%" h="100%" text="Basic Controls" />
         *</app_bar>
         *```
         *
         *在c代码中使用函数app\_bar\_create创建app\_bar。如：
         *
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TAppBar = /** @class */ (function(_super) {
          __extends(TAppBar, _super);
          function TAppBar(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建app_bar对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TAppBar.create = function(parent, x, y, w, h) {
            return new TAppBar(
              app_bar_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为app_bar对象(供脚本语言使用)。
           *
           * @param widget app_bar对象。
           *
           * @returns app_bar对象。
           */
          TAppBar.cast = function(widget) {
            return new TAppBar(
              app_bar_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TAppBar;
        })(TWidget);
        exports.TAppBar = TAppBar;
        /**
         * Button Group控件。一个简单的容器控件，用于容纳一组按钮控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *button\_group\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于button\_group\_t控件。
         *
         *在xml中使用"button\_group"标签创建button\_group。如：
         *
         *```xml
         *<button_group x="0" y="m" w="100%" h="40" children_layout="default(c=4,r=1,s=5,m=5)">
         *<button name="open:basic" text="Basic"/>
         *<button name="open:button" text="Buttons"/>
         *<button name="open:edit" text="Edits"/>
         *<button name="open:keyboard" text="KeyBoard"/>
         *</button_group>
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TButtonGroup = /** @class */ (function(_super) {
          __extends(TButtonGroup, _super);
          function TButtonGroup(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建button_group对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TButtonGroup.create = function(parent, x, y, w, h) {
            return new TButtonGroup(
              button_group_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为button_group对象(供脚本语言使用)。
           *
           * @param widget button_group对象。
           *
           * @returns button_group对象。
           */
          TButtonGroup.cast = function(widget) {
            return new TButtonGroup(
              button_group_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TButtonGroup;
        })(TWidget);
        exports.TButtonGroup = TButtonGroup;
        /**
         * 按钮控件。
         *
         *点击按钮之后会触发EVT\_CLICK事件，注册EVT\_CLICK事件以执行特定操作。
         *
         *按钮控件也可以作为容器使用，使用图片和文本作为其子控件，可以实现很多有趣的效果。
         *
         *button\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于button\_t控件。
         *
         *在xml中使用"button"标签创建按钮控件。如：
         *
         *```xml
         *<button x="c" y="m" w="80" h="30" text="OK"/>
         *```
         *
         *> 更多用法请参考：
         *[button.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/button.xml)
         *
         *在c代码中使用函数button\_create创建按钮控件。如：
         *
         *
         *> 创建之后，需要用widget\_set\_text或widget\_set\_text\_utf8设置文本内容。
         *
         *> 完整示例请参考：
         *[button demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/button.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0"  text_color="black">
         *<normal     bg_color="#f0f0f0" />
         *<pressed    bg_color="#c0c0c0" x_offset="1" y_offset="1"/>
         *<over       bg_color="#e0e0e0" />
         *<disable    bg_color="gray" text_color="#d0d0d0" />
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L31)
         *
         */
        var TButton = /** @class */ (function(_super) {
          __extends(TButton, _super);
          function TButton(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建button对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TButton.create = function(parent, x, y, w, h) {
            return new TButton(
              button_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为button对象(供脚本语言使用)。
           *
           * @param widget button对象。
           *
           * @returns button对象。
           */
          TButton.cast = function(widget) {
            return new TButton(
              button_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 设置触发EVT\_CLICK事件的时间间隔。为0则不重复触发EVT\_CLICK事件。
           *
           * @param repeat 触发EVT_CLICK事件的时间间隔(毫秒)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TButton.prototype.setRepeat = function(repeat) {
            return button_set_repeat(
              this != null ? this.nativeObj || this : null,
              repeat
            );
          };
          /**
           * 设置触发长按事件的时间。
           *
           * @param long_press_time 触发长按事件的时间(毫秒)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TButton.prototype.setLongPressTime = function(long_press_time) {
            return button_set_long_press_time(
              this != null ? this.nativeObj || this : null,
              long_press_time
            );
          };
          /**
           * 设置是否启用长按事件。
           *
           * @param enable_long_press 是否启用长按事件。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TButton.prototype.setEnableLongPress = function(enable_long_press) {
            return button_set_enable_long_press(
              this != null ? this.nativeObj || this : null,
              enable_long_press
            );
          };
          Object.defineProperty(TButton.prototype, 'repeat', {
            /**
             * 重复触发EVT\_CLICK事件的时间间隔。
             *
             *为0则不重复触发EVT\_CLICK事件。
             *
             */
            get: function() {
              return button_t_get_prop_repeat(this.nativeObj);
            },
            set: function(v) {
              this.setRepeat(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TButton.prototype, 'enableLongPress', {
            /**
             * 是否启用长按事件，为true时才触发长按事件。
             *
             *触发长按事件后不再触发点击事件。
             *缺省不启用。
             *
             */
            get: function() {
              return button_t_get_prop_enable_long_press(this.nativeObj);
            },
            set: function(v) {
              this.setEnableLongPress(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TButton.prototype, 'longPressTime', {
            /**
             * 触发长按事件的时间(ms)
             *
             */
            get: function() {
              return button_t_get_prop_long_press_time(this.nativeObj);
            },
            set: function(v) {
              this.setLongPressTime(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TButton;
        })(TWidget);
        exports.TButton = TButton;
        /**
         * 勾选按钮控件(单选/多选)。
         *
         *check\_button\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于check\_button\_t控件。
         *
         *在xml中使用"check_button"标签创建多选按钮控件。如：
         *
         *```xml
         *<check_button name="c1" text="Book"/>
         *```
         *
         *在xml中使用"radio_button"标签创建单选按钮控件。如：
         *
         *```xml
         *<radio_button name="r1" text="Book"/>
         *```
         *
         *> 更多用法请参考：
         *[button.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/basic.xml)
         *
         *在c代码中使用函数check\_button\_create创建多选按钮控件。如：
         *
         *
         *在c代码中使用函数check\_button\_create\_radio创建单选按钮控件。如：
         *
         *
         *> 完整示例请参考：
         *[button demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/check_button.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style name="default" icon_at="left">
         *<normal  icon="unchecked" />
         *<pressed icon="unchecked" />
         *<over    icon="unchecked" text_color="green"/>
         *<normal_of_checked icon="checked" text_color="blue"/>
         *<pressed_of_checked icon="checked" text_color="blue"/>
         *<over_of_checked icon="checked" text_color="green"/>
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L227)
         *
         */
        var TCheckButton = /** @class */ (function(_super) {
          __extends(TCheckButton, _super);
          function TCheckButton(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建多选按钮对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns widget对象。
           */
          TCheckButton.create = function(parent, x, y, w, h) {
            return new TCheckButton(
              check_button_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 创建单选按钮对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns widget对象。
           */
          TCheckButton.createRadio = function(parent, x, y, w, h) {
            return new TCheckButton(
              check_button_create_radio(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置控件的值。
           *
           * @param value 值(勾选为TRUE，非勾选为FALSE)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TCheckButton.prototype.setValue = function(value) {
            return check_button_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 转换check_button对象(供脚本语言使用)。
           *
           * @param widget check_button对象。
           *
           * @returns check_button对象。
           */
          TCheckButton.cast = function(widget) {
            return new TCheckButton(
              check_button_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(TCheckButton.prototype, 'value', {
            /**
             * 值(勾选为TRUE，非勾选为FALSE)。
             *
             */
            get: function() {
              return check_button_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TCheckButton;
        })(TWidget);
        exports.TCheckButton = TCheckButton;
        /**
         * 一个裁剪子控件的容器控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *clip\_view\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于clip\_view\_t控件。
         *
         *在xml中使用"clip_view"标签创建clip_view，在clip_view控件下的所有子控件都会被裁剪。如下button控件会被裁剪，无法画出clip_view控件 ：
         *
         *```xml
         *<clip_view x="0" y="0" w="100" h="100">
         *<button x="50" y="10" w="100" h="50" />
         *</clip_view>
         *```
         *
         *备注：在clip_view控件下的所有子控件都会被裁剪，如果子控件本身会设置裁剪区的话，在子控件中计算裁剪区的交集，具体请参考scroll_view控件的scroll_view_on_paint_children函数。
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TClipView = /** @class */ (function(_super) {
          __extends(TClipView, _super);
          function TClipView(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建clip_view对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TClipView.create = function(parent, x, y, w, h) {
            return new TClipView(
              clip_view_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为clip_view对象(供脚本语言使用)。
           *
           * @param widget clip_view对象。
           *
           * @returns clip_view对象。
           */
          TClipView.cast = function(widget) {
            return new TClipView(
              clip_view_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TClipView;
        })(TWidget);
        exports.TClipView = TClipView;
        /**
         * 色块控件。
         *
         *用来显示一个颜色块，它通过属性而不是窗体样式来设置颜色，方便在运行时动态改变颜色。
         *
         *可以使用value属性访问背景颜色的颜色值。
         *
         *color\_tile\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于color\_tile\_t控件。
         *
         *在xml中使用"color_tile"标签创建色块控件。如：
         *
         *```xml
         *<color_tile x="c" y="m" w="80" h="30" bg_color="green" />
         *```
         *
         *> 更多用法请参考：
         *[color_tile](https://github.com/zlgopen/awtk/blob/master/design/default/ui/color_picker_rgb.xml)
         *
         *在c代码中使用函数color_tile\_create创建色块控件。如：
         *
         *> 创建之后，用color\_tile\_set\_bg\_color设置背景颜色。
         *
         */
        var TColorTile = /** @class */ (function(_super) {
          __extends(TColorTile, _super);
          function TColorTile(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建color_tile对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TColorTile.create = function(parent, x, y, w, h) {
            return new TColorTile(
              color_tile_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为color_tile对象(供脚本语言使用)。
           *
           * @param widget color_tile对象。
           *
           * @returns color_tile对象。
           */
          TColorTile.cast = function(widget) {
            return new TColorTile(
              color_tile_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置背景颜色。
           *
           * @param color 背景颜色。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TColorTile.prototype.setBgColor = function(color) {
            return color_tile_set_bg_color(
              this != null ? this.nativeObj || this : null,
              color
            );
          };
          /**
           * 获取背景颜色。
           *
           *
           * @returns 返回背景颜色。
           */
          TColorTile.prototype.getBgColor = function() {
            return color_tile_get_bg_color(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取边框颜色。
           *
           *
           * @returns 返回边框颜色。
           */
          TColorTile.prototype.getBorderColor = function() {
            return color_tile_get_border_color(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TColorTile.prototype, 'bgColor', {
            /**
             * 背景颜色。
             *
             */
            get: function() {
              return color_tile_t_get_prop_bg_color(this.nativeObj);
            },
            set: function(v) {
              this.setBgColor(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TColorTile.prototype, 'borderColor', {
            /**
             * 边框颜色。
             *
             */
            get: function() {
              return color_tile_t_get_prop_border_color(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TColorTile;
        })(TWidget);
        exports.TColorTile = TColorTile;
        /**
         * column。一个简单的容器控件，垂直排列其子控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *column\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于column\_t控件。
         *
         *在xml中使用"column"标签创建column。如：
         *
         *```xml
         *<column x="0" y="0" w="100%" h="100%" children_layout="default(c=1,r=0)">
         *<button name="open:basic" text="Basic"/>
         *<button name="open:button" text="Buttons"/>
         *<button name="open:edit" text="Edits"/>
         *<button name="open:keyboard" text="KeyBoard"/>
         *</column>
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TColumn = /** @class */ (function(_super) {
          __extends(TColumn, _super);
          function TColumn(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建column对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TColumn.create = function(parent, x, y, w, h) {
            return new TColumn(
              column_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为column对象(供脚本语言使用)。
           *
           * @param widget column对象。
           *
           * @returns column对象。
           */
          TColumn.cast = function(widget) {
            return new TColumn(
              column_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TColumn;
        })(TWidget);
        exports.TColumn = TColumn;
        /**
         * ComboBox Item控件。
         *
         *本类仅供combo\_box控件内部使用。
         *
         */
        var TComboBoxItem = /** @class */ (function(_super) {
          __extends(TComboBoxItem, _super);
          function TComboBoxItem(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建combo_box_item对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TComboBoxItem.create = function(parent, x, y, w, h) {
            return new TComboBoxItem(
              combo_box_item_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换combo_box_item对象(供脚本语言使用)。
           *
           * @param widget combo_box_item对象。
           *
           * @returns combo_box_item对象。
           */
          TComboBoxItem.cast = function(widget) {
            return new TComboBoxItem(
              combo_box_item_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置控件是否被选中。
           *
           * @param checked 是否被选中。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBoxItem.prototype.setChecked = function(checked) {
            return combo_box_item_set_checked(
              this != null ? this.nativeObj || this : null,
              checked
            );
          };
          /**
           * 设置控件的值。
           *
           * @param value 值
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBoxItem.prototype.setValue = function(value) {
            return combo_box_item_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          Object.defineProperty(TComboBoxItem.prototype, 'value', {
            /**
             * 值。
             *
             */
            get: function() {
              return combo_box_item_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TComboBoxItem.prototype, 'checked', {
            /**
             * 是否被选中。
             *
             */
            get: function() {
              return combo_box_item_t_get_prop_checked(this.nativeObj);
            },
            set: function(v) {
              this.setChecked(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TComboBoxItem;
        })(TWidget);
        exports.TComboBoxItem = TComboBoxItem;
        /**
         * 对话框客户区控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *dialog\_client\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于dialog\_client\_t控件。
         *
         *在xml中使用"dialog\_client"标签创建dialog\_client。如：
         *
         *```xml
         *<dialog anim_hint="center_scale(duration=300)" x="c" y="m" w="80%" h="160" text="Dialog">
         *<dialog_title x="0" y="0" w="100%" h="30" text="Hello AWTK" />
         *<dialog_client x="0" y="bottom" w="100%" h="-30">
         *<label name="" x="center" y="middle:-20" w="200" h="30" text="Are you ready?"/>
         *<button name="quit" x="10" y="bottom:10" w="40%" h="30" text="确定"/>
         *<button name="quit" x="right:10" y="bottom:10" w="40%" h="30" text="取消"/>
         *</dialog_client>
         *</dialog>
         *```
         *
         *在c代码中，用dialog\_create\_simple创建对话框时，自动创建dialog客户区对象。
         *
         */
        var TDialogClient = /** @class */ (function(_super) {
          __extends(TDialogClient, _super);
          function TDialogClient(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建dialog客户区对象。
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns dialog对象。
           */
          TDialogClient.create = function(parent, x, y, w, h) {
            return new TDialogClient(
              dialog_client_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为dialog_client对象(供脚本语言使用)。
           *
           * @param widget dialog_client对象。
           *
           * @returns dialog_client对象。
           */
          TDialogClient.cast = function(widget) {
            return new TDialogClient(
              dialog_client_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TDialogClient;
        })(TWidget);
        exports.TDialogClient = TDialogClient;
        /**
         * 对话框标题控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *dialog\_title\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于dialog\_title\_t控件。
         *
         *在xml中使用"dialog\_title"标签创建dialog\_title。如：
         *
         *```xml
         *<dialog anim_hint="center_scale(duration=300)" x="c" y="m" w="80%" h="160" text="Dialog">
         *<dialog_title x="0" y="0" w="100%" h="30" text="Hello AWTK" />
         *<dialog_client x="0" y="bottom" w="100%" h="-30">
         *<label name="" x="center" y="middle:-20" w="200" h="30" text="Are you ready?"/>
         *<button name="quit" x="10" y="bottom:10" w="40%" h="30" text="确定"/>
         *<button name="quit" x="right:10" y="bottom:10" w="40%" h="30" text="取消"/>
         *</dialog_client>
         *</dialog>
         *```
         *
         *在c代码中，用dialog\_create\_simple创建对话框时，自动创建dialog标题对象。
         *
         */
        var TDialogTitle = /** @class */ (function(_super) {
          __extends(TDialogTitle, _super);
          function TDialogTitle(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建dialog对象。
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns dialog对象。
           */
          TDialogTitle.create = function(parent, x, y, w, h) {
            return new TDialogTitle(
              dialog_title_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为dialog_title对象(供脚本语言使用)。
           *
           * @param widget dialog_title对象。
           *
           * @returns dialog_title对象。
           */
          TDialogTitle.cast = function(widget) {
            return new TDialogTitle(
              dialog_title_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TDialogTitle;
        })(TWidget);
        exports.TDialogTitle = TDialogTitle;
        /**
         * 数字时钟控件。
         *
         *digit\_clock\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于digit\_clock\_t控件。
         *
         *在xml中使用"digit\_clock"标签创建数字时钟控件。如：
         *
         *```xml
         *<digit_clock format="YY/MM/DD h:mm:ss"/>
         *```
         *
         *> 更多用法请参考：[digit\_clock.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/digit_clock.xml)
         *
         *在c代码中使用函数digit\_clock\_create创建数字时钟控件。如：
         *
         *
         *> 完整示例请参考：[digit\_clock demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/digit_clock.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style name="default">
         *<normal text_color="black" />
         *</style>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L138)
         *
         */
        var TDigitClock = /** @class */ (function(_super) {
          __extends(TDigitClock, _super);
          function TDigitClock(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建digit_clock对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TDigitClock.create = function(parent, x, y, w, h) {
            return new TDigitClock(
              digit_clock_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为digit_clock对象(供脚本语言使用)。
           *
           * @param widget digit_clock对象。
           *
           * @returns digit_clock对象。
           */
          TDigitClock.cast = function(widget) {
            return new TDigitClock(
              digit_clock_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置显示格式。
           *
           * @param format 格式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDigitClock.prototype.setFormat = function(format) {
            return digit_clock_set_format(
              this != null ? this.nativeObj || this : null,
              format
            );
          };
          Object.defineProperty(TDigitClock.prototype, 'format', {
            /**
             * 显示格式。
             *
             ** Y 代表年(完整显示)
             ** M 代表月(1-12)
             ** D 代表日(1-31)
             ** h 代表时(0-23)
             ** m 代表分(0-59)
             ** s 代表秒(0-59)
             ** w 代表星期(0-6)
             ** W 代表星期的英文缩写(支持翻译)
             ** YY 代表年(只显示末两位)
             ** MM 代表月(01-12)
             ** DD 代表日(01-31)
             ** hh 代表时(00-23)
             ** mm 代表分(00-59)
             ** ss 代表秒(00-59)
             ** MMM 代表月的英文缩写(支持翻译)
             *
             *如 日期时间为：2018/11/12 9:10:20
             ** "Y/M/D"显示为"2018/11/12"
             ** "Y-M-D"显示为"2018-11-12"
             ** "Y-M-D h:m:s"显示为"2018-11-12 9:10:20"
             ** "Y-M-D hh:mm:ss"显示为"2018-11-12 09:10:20"
             *
             */
            get: function() {
              return digit_clock_t_get_prop_format(this.nativeObj);
            },
            set: function(v) {
              this.setFormat(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TDigitClock;
        })(TWidget);
        exports.TDigitClock = TDigitClock;
        /**
         * dragger控件。
         *
         *目前主要用于scrollbar里的滑块。
         *
         */
        var TDragger = /** @class */ (function(_super) {
          __extends(TDragger, _super);
          function TDragger(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建dragger对象。
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TDragger.create = function(parent, x, y, w, h) {
            return new TDragger(
              dragger_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为dragger对象(供脚本语言使用)。
           *
           * @param widget dragger对象。
           *
           * @returns dragger对象。
           */
          TDragger.cast = function(widget) {
            return new TDragger(
              dragger_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 设置拖动的范围。
           *
           * @param x_min x坐标最小值。
           * @param y_min y坐标最小值。
           * @param x_max x坐标最大值。
           * @param y_max y坐标最大值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDragger.prototype.setRange = function(x_min, y_min, x_max, y_max) {
            return dragger_set_range(
              this != null ? this.nativeObj || this : null,
              x_min,
              y_min,
              x_max,
              y_max
            );
          };
          Object.defineProperty(TDragger.prototype, 'xMin', {
            /**
             * x坐标的最小值。
             *
             */
            get: function() {
              return dragger_t_get_prop_x_min(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDragger.prototype, 'yMin', {
            /**
             * y坐标的最小值。
             *
             */
            get: function() {
              return dragger_t_get_prop_y_min(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDragger.prototype, 'xMax', {
            /**
             * x坐标的最大值。
             *
             */
            get: function() {
              return dragger_t_get_prop_x_max(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TDragger.prototype, 'yMax', {
            /**
             * y坐标的最大值。
             *
             */
            get: function() {
              return dragger_t_get_prop_y_max(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TDragger;
        })(TWidget);
        exports.TDragger = TDragger;
        /**
         * 单行编辑器控件。
         *
         *在基于SDL的平台，单行编辑器控件使用平台原生的输入法，对于嵌入式平台使用内置的输入法。
         *
         *在使用内置的输入法时，软键盘由输入类型决定，开发者可以自定义软键盘的界面。
         *
         *edit\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于edit\_t控件。
         *
         *edit\_t本身可以做为容器，放入按钮等控件。有几个特殊的子控件：
         *
         ** 名为"clear"的按钮。点击时清除编辑器中的内容。
         ** 名为"inc"的按钮。点击时增加编辑器的值，用于实现类似于spinbox的功能。
         ** 名为"dec"的按钮。点击时减少编辑器的值，用于实现类似于spinbox的功能。
         ** 名为"visible"的复选框。勾选时显示密码，反之不显示密码。
         *
         *在xml中使用"edit"标签创建编辑器控件。如：
         *
         *```xml
         *<edit x="c" y="m" w="80" h="30"
         *tips="age" input_type="uint" min="0" max="150" step="1" auto_fix="true" style="number" />
         *```
         *
         *> XXX：需要在min/max/step之前设置input\_type。
         *
         *>更多用法请参考：
         *[edit.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/edit.xml)
         *
         *在c代码中使用函数edit\_create创建编辑器控件。如：
         *
         *
         *> 创建之后，可以用widget\_set\_text或widget\_set\_text\_utf8设置文本内容。
         *
         *> 完整示例请参考：
         *[edit demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/edit.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0"  text_color="black" text_align_h="left">
         *<normal     bg_color="#f0f0f0" />
         *<focused    bg_color="#f0f0f0" border_color="black"/>
         *<disable    bg_color="gray" text_color="#d0d0d0" />
         *<error      bg_color="#f0f0f0" text_color="red" />
         *<empty      bg_color="#f0f0f0" text_color="#a0a0a0" />
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L104)
         *
         */
        var TEdit = /** @class */ (function(_super) {
          __extends(TEdit, _super);
          function TEdit(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建edit对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TEdit.create = function(parent, x, y, w, h) {
            return new TEdit(
              edit_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为edit对象(供脚本语言使用)。
           *
           * @param widget edit对象。
           *
           * @returns edit对象。
           */
          TEdit.cast = function(widget) {
            return new TEdit(
              edit_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 获取int类型的值。
           *
           *
           * @returns 返回int的值。
           */
          TEdit.prototype.getInt = function() {
            return edit_get_int(this != null ? this.nativeObj || this : null);
          };
          /**
           * 获取double类型的值。
           *
           *
           * @returns 返回double的值。
           */
          TEdit.prototype.getDouble = function() {
            return edit_get_double(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置int类型的值。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setInt = function(value) {
            return edit_set_int(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置double类型的值。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setDouble = function(value) {
            return edit_set_double(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置为文本输入及其长度限制，不允许输入超过max个字符，少于min个字符时进入error状态。
           *
           * @param min 最小长度。
           * @param max 最大长度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setTextLimit = function(min, max) {
            return edit_set_text_limit(
              this != null ? this.nativeObj || this : null,
              min,
              max
            );
          };
          /**
           * 设置为整数输入及取值范围。
           *
           * @param min 最小值。
           * @param max 最大值。
           * @param step 步长。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setIntLimit = function(min, max, step) {
            return edit_set_int_limit(
              this != null ? this.nativeObj || this : null,
              min,
              max,
              step
            );
          };
          /**
           * 设置为浮点数输入及取值范围。
           *
           * @param min 最小值。
           * @param max 最大值。
           * @param step 步长。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setFloatLimit = function(min, max, step) {
            return edit_set_float_limit(
              this != null ? this.nativeObj || this : null,
              min,
              max,
              step
            );
          };
          /**
           * 设置编辑器是否为只读。
           *
           * @param readonly 只读。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setReadonly = function(readonly) {
            return edit_set_readonly(
              this != null ? this.nativeObj || this : null,
              readonly
            );
          };
          /**
           * 设置编辑器是否为可撤销修改。
           *
           * @param cancelable 是否为可撤销修。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setCancelable = function(cancelable) {
            return edit_set_cancelable(
              this != null ? this.nativeObj || this : null,
              cancelable
            );
          };
          /**
           * 设置编辑器是否为自动改正。
           *
           * @param auto_fix 自动改正。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setAutoFix = function(auto_fix) {
            return edit_set_auto_fix(
              this != null ? this.nativeObj || this : null,
              auto_fix
            );
          };
          /**
           * 设置编辑器是否在获得焦点时不选中文本。
           *
           * @param select_none_when_focused 是否在获得焦点时不选中文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setSelectNoneWhenFocused = function(
            select_none_when_focused
          ) {
            return edit_set_select_none_when_focused(
              this != null ? this.nativeObj || this : null,
              select_none_when_focused
            );
          };
          /**
           * 设置编辑器是否在获得焦点时打开输入法。
           *
           *> * 设置默认焦点时，打开窗口时不弹出软键盘。
           *> * 用键盘切换焦点时，编辑器获得焦点时不弹出软键盘。
           *
           * @param open_im_when_focused 是否在获得焦点时打开输入法。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setOpenImWhenFocused = function(
            open_im_when_focused
          ) {
            return edit_set_open_im_when_focused(
              this != null ? this.nativeObj || this : null,
              open_im_when_focused
            );
          };
          /**
           * 设置编辑器是否在失去焦点时关闭输入法。
           *
           * @param close_im_when_blured 是否是否在失去焦点时关闭输入法。在失去焦点时关闭输入法。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setCloseImWhenBlured = function(
            close_im_when_blured
          ) {
            return edit_set_close_im_when_blured(
              this != null ? this.nativeObj || this : null,
              close_im_when_blured
            );
          };
          /**
           * 设置编辑器的输入类型。
           *
           * @param type 输入类型。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setInputType = function(type) {
            return edit_set_input_type(
              this != null ? this.nativeObj || this : null,
              type
            );
          };
          /**
           * 设置软键盘上action按钮的文本。
           *
           * @param action_text 软键盘上action按钮的文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setActionText = function(action_text) {
            return edit_set_action_text(
              this != null ? this.nativeObj || this : null,
              action_text
            );
          };
          /**
           * 设置编辑器的输入提示。
           *
           * @param tips 输入提示。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setTips = function(tips) {
            return edit_set_tips(
              this != null ? this.nativeObj || this : null,
              tips
            );
          };
          /**
           * 获取翻译之后的文本，然后调用edit_set_tips。
           *
           * @param tr_tips 提示信息。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setTrTips = function(tr_tips) {
            return edit_set_tr_tips(
              this != null ? this.nativeObj || this : null,
              tr_tips
            );
          };
          /**
           * 设置自定义软键盘名称。
           *
           * @param keyboard 键盘名称(相应UI资源必须存在)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setKeyboard = function(keyboard) {
            return edit_set_keyboard(
              this != null ? this.nativeObj || this : null,
              keyboard
            );
          };
          /**
           * 当编辑器输入类型为密码时，设置密码是否可见。
           *
           * @param password_visible 密码是否可见。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setPasswordVisible = function(password_visible) {
            return edit_set_password_visible(
              this != null ? this.nativeObj || this : null,
              password_visible
            );
          };
          /**
           * 设置为焦点。
           *
           * @param focus 是否为焦点。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setFocus = function(focus) {
            return edit_set_focus(
              this != null ? this.nativeObj || this : null,
              focus
            );
          };
          /**
           * 设置输入框的光标位置。
           *
           * @param cursor 光标位置。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setCursor = function(cursor) {
            return edit_set_cursor(
              this != null ? this.nativeObj || this : null,
              cursor
            );
          };
          /**
           * 获取输入框的光标位置。
           *
           *
           * @returns 返回光标位置。
           */
          TEdit.prototype.getCursor = function() {
            return edit_get_cursor(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 选择指定范围的文本。
           *
           * @param start 起始偏移。
           * @param end 结束偏移。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TEdit.prototype.setSelect = function(start, end) {
            return edit_set_select(
              this != null ? this.nativeObj || this : null,
              start,
              end
            );
          };
          /**
           * 获取选中的文本。
           *使用完后需调用 TKMEM_FREE() 进行释放文本占有内存。
           *
           *
           * @returns 返回选中文本。
           */
          TEdit.prototype.getSelectedText = function() {
            return edit_get_selected_text(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TEdit.prototype, 'tips', {
            /**
             * 输入提示。
             *
             */
            get: function() {
              return edit_t_get_prop_tips(this.nativeObj);
            },
            set: function(v) {
              this.setTips(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'trTips', {
            /**
             * 保存用于翻译的提示信息。
             *
             */
            get: function() {
              return edit_t_get_prop_tr_tips(this.nativeObj);
            },
            set: function(v) {
              this.setTrTips(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'actionText', {
            /**
             * 软键盘上action按钮的文本。内置取值有：
             *
             ** next 将焦点切换到下一个控件。
             ** done 完成，关闭软键盘。
             *
             *也可以使用其它文本，比如send表示发送。这个需要自己实现相应的功能，处理EVT\_IM\_ACTION事件即可。
             *
             */
            get: function() {
              return edit_t_get_prop_action_text(this.nativeObj);
            },
            set: function(v) {
              this.setActionText(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'keyboard', {
            /**
             * 自定义软键盘名称。AWTK优先查找keyboard属性设置的键盘文件名（该键盘的XML文件需要在default\raw\ui目录下存在），如果keyboard为空就找input_type设置的键盘类型
             *
             */
            get: function() {
              return edit_t_get_prop_keyboard(this.nativeObj);
            },
            set: function(v) {
              this.setKeyboard(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'min', {
            /**
             * 最小值或最小长度。
             *
             */
            get: function() {
              return edit_t_get_prop_min(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'max', {
            /**
             * 最大值或最大长度。
             *
             */
            get: function() {
              return edit_t_get_prop_max(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'step', {
            /**
             * 步长。
             *作为数值型编辑器时，一次增加和减少时的数值。
             *
             */
            get: function() {
              return edit_t_get_prop_step(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'inputType', {
            /**
             * 输入类型。
             *
             */
            get: function() {
              return edit_t_get_prop_input_type(this.nativeObj);
            },
            set: function(v) {
              this.setInputType(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'readonly', {
            /**
             * 编辑器是否为只读。
             *
             */
            get: function() {
              return edit_t_get_prop_readonly(this.nativeObj);
            },
            set: function(v) {
              this.setReadonly(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'passwordVisible', {
            /**
             * 密码是否可见。
             *
             */
            get: function() {
              return edit_t_get_prop_password_visible(this.nativeObj);
            },
            set: function(v) {
              this.setPasswordVisible(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'autoFix', {
            /**
             * 输入无效时，是否自动改正。
             *
             */
            get: function() {
              return edit_t_get_prop_auto_fix(this.nativeObj);
            },
            set: function(v) {
              this.setAutoFix(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'selectNoneWhenFocused', {
            /**
             * 获得焦点时不选中文本。
             *
             *> 主要用于没有指针设备的情况，否则软键盘无法取消选中文本。
             *
             */
            get: function() {
              return edit_t_get_prop_select_none_when_focused(this.nativeObj);
            },
            set: function(v) {
              this.setSelectNoneWhenFocused(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'openImWhenFocused', {
            /**
             * 获得焦点时打开输入法。
             *
             *> 主要用于没有指针设备的情况，否则每次切换焦点时都打开输入法。
             *
             */
            get: function() {
              return edit_t_get_prop_open_im_when_focused(this.nativeObj);
            },
            set: function(v) {
              this.setOpenImWhenFocused(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'closeImWhenBlured', {
            /**
             * 是否在失去焦点时关闭输入法(默认是)。
             *
             */
            get: function() {
              return edit_t_get_prop_close_im_when_blured(this.nativeObj);
            },
            set: function(v) {
              this.setCloseImWhenBlured(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TEdit.prototype, 'cancelable', {
            /**
             * 是否支持撤销编辑。如果为TRUE，在失去焦点之前可以撤销所有修改(恢复获得焦点之前的内容)。
             *
             *> * 1.一般配合keyboard的"cancel"按钮使用。
             *> * 2.为TRUE时，如果内容有变化，会设置编辑器的状态为changed，所以此时编辑器需要支持changed状态的style。
             *
             */
            get: function() {
              return edit_t_get_prop_cancelable(this.nativeObj);
            },
            set: function(v) {
              this.setCancelable(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TEdit;
        })(TWidget);
        exports.TEdit = TEdit;
        /**
         * grid_item。一个简单的容器控件，一般作为grid的子控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *grid\_item\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于grid\_item\_t控件。
         *
         *在xml中使用"grid\_item"标签创建grid\_item。如：
         *
         *```xml
         *<grid x="0" y="0" w="100%" h="100%" children_layout="default(c=2,r=2,m=5,s=5)">
         *<grid_item>
         *<button x="c" y="m" w="80%" h="30" name="0" text="0"/>
         *</grid_item>
         *<grid_item>
         *<button x="c" y="m" w="80%" h="30" name="1" text="1"/>
         *</grid_item>
         *<grid_item>
         *<button x="c" y="m" w="80%" h="30" name="2" text="2"/>
         *</grid_item>
         *<grid_item>
         *<button x="c" y="m" w="80%" h="30" name="3" text="3"/>
         *</grid_item>
         *</grid>
         *
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TGridItem = /** @class */ (function(_super) {
          __extends(TGridItem, _super);
          function TGridItem(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建grid_item对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TGridItem.create = function(parent, x, y, w, h) {
            return new TGridItem(
              grid_item_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为grid_item对象(供脚本语言使用)。
           *
           * @param widget grid_item对象。
           *
           * @returns grid_item对象。
           */
          TGridItem.cast = function(widget) {
            return new TGridItem(
              grid_item_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TGridItem;
        })(TWidget);
        exports.TGridItem = TGridItem;
        /**
         * grid控件。一个简单的容器控件，用于网格排列一组控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *grid\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于grid\_t控件。
         *
         *在xml中使用"grid"标签创建grid。如：
         *
         *```xml
         *<grid x="0" y="0" w="100%" h="100%" children_layout="default(c=2,r=2,m=5,s=5)">
         *<button name="open:basic" text="Basic"/>
         *<button name="open:button" text="Buttons"/>
         *<button name="open:edit" text="Edits"/>
         *<button name="open:keyboard" text="KeyBoard"/>
         *</grid>
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TGrid = /** @class */ (function(_super) {
          __extends(TGrid, _super);
          function TGrid(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建grid对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TGrid.create = function(parent, x, y, w, h) {
            return new TGrid(
              grid_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为grid对象(供脚本语言使用)。
           *
           * @param widget grid对象。
           *
           * @returns grid对象。
           */
          TGrid.cast = function(widget) {
            return new TGrid(
              grid_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TGrid;
        })(TWidget);
        exports.TGrid = TGrid;
        /**
         * 分组控件。
         *
         *单选按钮在同一个父控件中是互斥的，所以通常将相关的单选按钮放在一个group\_box中。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *group\_box\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于group\_box\_t控件。
         *
         *在xml中使用"group\_box"标签创建group\_box。如：
         *
         *```xml
         *<group_box x="20" y="230" w="50%" h="90" children_layout="default(r=3,c=1,ym=2,s=10)"
         *<radio_button name="r1" text="Book"/>
         *<radio_button name="r2" text="Food"/>
         *<radio_button name="r3" text="Pencil" value="true"/>
         *</group_box>
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TGroupBox = /** @class */ (function(_super) {
          __extends(TGroupBox, _super);
          function TGroupBox(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建group_box对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TGroupBox.create = function(parent, x, y, w, h) {
            return new TGroupBox(
              group_box_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为group_box对象(供脚本语言使用)。
           *
           * @param widget group_box对象。
           *
           * @returns group_box对象。
           */
          TGroupBox.cast = function(widget) {
            return new TGroupBox(
              group_box_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TGroupBox;
        })(TWidget);
        exports.TGroupBox = TGroupBox;
        /**
         * 文本控件。用于显示一行或多行文本。
         *
         *文本控件不会根据文本的长度自动换行，只有文本内容包含换行符时才会换行。
         *
         *如需自动换行请使用[rich\_text\_t](rich_text_t.md)控件。
         *
         *label\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于label\_t控件。
         *
         *在xml中使用"label"标签创建文本控件。如：
         *
         *```xml
         *<label style="center" text="center"/>
         *```
         *
         *> 更多用法请参考：[label.xml](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/label.xml)
         *
         *在c代码中使用函数label\_create创建文本控件。如：
         *
         *
         *> 创建之后，需要用widget\_set\_text或widget\_set\_text\_utf8设置文本内容。
         *
         *> 完整示例请参考：[label demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/label.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style name="left">
         *<normal text_color="red" text_align_h="left" border_color="#a0a0a0" margin="4" />
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L144)
         *
         */
        var TLabel = /** @class */ (function(_super) {
          __extends(TLabel, _super);
          function TLabel(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建label对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TLabel.create = function(parent, x, y, w, h) {
            return new TLabel(
              label_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置显示字符的个数(小余0时全部显示)。
           *
           * @param length 最大可显示字符个数。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLabel.prototype.setLength = function(length) {
            return label_set_length(
              this != null ? this.nativeObj || this : null,
              length
            );
          };
          /**
           * 设置max_w。
           *
           * @param max_w 最大宽度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLabel.prototype.setMaxW = function(max_w) {
            return label_set_max_w(
              this != null ? this.nativeObj || this : null,
              max_w
            );
          };
          /**
           * 设置是否自动换行。
           *
           * @param line_wrap 是否自动换行。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLabel.prototype.setLineWrap = function(line_wrap) {
            return label_set_line_wrap(
              this != null ? this.nativeObj || this : null,
              line_wrap
            );
          };
          /**
           * 设置是否允许整个单词换行。(需要开启自动换行才有效果)
           *
           * @param word_wrap 是否允许整个单词换行。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLabel.prototype.setWordWrap = function(word_wrap) {
            return label_set_word_wrap(
              this != null ? this.nativeObj || this : null,
              word_wrap
            );
          };
          /**
           * 根据文本内容调节控件大小。
           *
           * @param min_w 最小宽度。
           * @param max_w 最大宽度。
           * @param min_h 最小高度。
           * @param max_h 最大高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TLabel.prototype.resizeToContent = function(
            min_w,
            max_w,
            min_h,
            max_h
          ) {
            return label_resize_to_content(
              this != null ? this.nativeObj || this : null,
              min_w,
              max_w,
              min_h,
              max_h
            );
          };
          /**
           * 转换为label对象(供脚本语言使用)。
           *
           * @param widget label对象。
           *
           * @returns label对象。
           */
          TLabel.cast = function(widget) {
            return new TLabel(
              label_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          Object.defineProperty(TLabel.prototype, 'length', {
            /**
             * 显示字符的个数(小余0时全部显示)。
             *主要用于动态改变显示字符的个数，来实现类似[拨号中...]的动画效果。
             *
             */
            get: function() {
              return label_t_get_prop_length(this.nativeObj);
            },
            set: function(v) {
              this.setLength(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TLabel.prototype, 'lineWrap', {
            /**
             * 是否自动换行(默认FALSE)。
             *
             */
            get: function() {
              return label_t_get_prop_line_wrap(this.nativeObj);
            },
            set: function(v) {
              this.setLineWrap(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TLabel.prototype, 'wordWrap', {
            /**
             * 是否允许整个单词换行(默认FALSE)。
             *> 需要开启自动换行才有效果
             *
             */
            get: function() {
              return label_t_get_prop_word_wrap(this.nativeObj);
            },
            set: function(v) {
              this.setWordWrap(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TLabel.prototype, 'maxW', {
            /**
             * 当auto_adjust_size为TRUE时，用于控制控件的最大宽度，超出该宽度后才自动换行。
             *>为0表示忽略该参数。小于0时取父控件宽度加上max_w。
             *
             */
            get: function() {
              return label_t_get_prop_max_w(this.nativeObj);
            },
            set: function(v) {
              this.setMaxW(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TLabel;
        })(TWidget);
        exports.TLabel = TLabel;
        /**
         * 页面管理控件。
         *
         *只有一个Page处于active状态，处于active状态的Page才能显示并接收事件。
         *常用于实现标签控件中的页面管理。
         *
         *pages\_t是[widget\_t](widget_t.md)的子类控件，
         *widget\_t的函数均适用于pages\_t控件。
         *
         *在xml中使用"pages"标签创建页面管理控件。如：
         *
         *```xml
         *<tab_control x="0" y="0" w="100%" h="100%"
         *<pages x="c" y="20" w="90%" h="-60" value="1">
         *...
         *</pages>
         *<tab_button_group>
         *...
         *</tab_button_group>
         *</tab_control>
         *```
         *
         *> 更多用法请参考：
         *[tab control](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)
         *
         */
        var TPages = /** @class */ (function(_super) {
          __extends(TPages, _super);
          function TPages(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建pages对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TPages.create = function(parent, x, y, w, h) {
            return new TPages(
              pages_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为pages对象(供脚本语言使用)。
           *
           * @param widget pages对象。
           *
           * @returns pages对象。
           */
          TPages.cast = function(widget) {
            return new TPages(
              pages_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 设置当前的Page。
           *
           * @param index 当前Page的序号。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TPages.prototype.setActive = function(index) {
            return pages_set_active(
              this != null ? this.nativeObj || this : null,
              index
            );
          };
          /**
           * 通过页面的名字设置当前的Page。
           *
           * @param name 当前Page的名字。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TPages.prototype.setActiveByName = function(name) {
            return pages_set_active_by_name(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          Object.defineProperty(TPages.prototype, 'active', {
            /**
             * 当前活跃的page。
             *
             */
            get: function() {
              return pages_t_get_prop_active(this.nativeObj);
            },
            set: function(v) {
              this.setActive(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TPages;
        })(TWidget);
        exports.TPages = TPages;
        /**
         * 进度条控件。
         *
         *进度条控件可以水平显示也可以垂直显示，由vertical属性决定。
         *
         *progress\_bar\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于progress\_bar\_t控件。
         *
         *在xml中使用"progress\_bar"标签创建进度条控件。如：
         *
         *```xml
         *<progress_bar name="bar1" x="10" y="128" w="240" h="30" value="40"/>
         *<progress_bar name="bar2" x="280" y="128" w="30" h="118" value="20" vertical="true"/>
         *```
         *
         *> 更多用法请参考：
         *[basic demo](https://github.com/zlgopen/awtk/blob/master/design/default/ui/basic.xml)
         *
         *在c代码中使用函数progress\_bar\_create创建进度条控件。如：
         *
         *
         *> 完整示例请参考：
         *[progress_bar demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/progress_bar.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style>
         *<normal bg_color="#f0f0f0" text_color="gold" fg_color="#c0c0c0" border_color="#a0a0a0" />
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L183)
         *
         */
        var TProgressBar = /** @class */ (function(_super) {
          __extends(TProgressBar, _super);
          function TProgressBar(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建progress_bar对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TProgressBar.create = function(parent, x, y, w, h) {
            return new TProgressBar(
              progress_bar_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为progress_bar对象(供脚本语言使用)。
           *
           * @param widget progress_bar对象。
           *
           * @returns progress_bar对象。
           */
          TProgressBar.cast = function(widget) {
            return new TProgressBar(
              progress_bar_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置进度条的进度。
           *
           * @param value 进度
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressBar.prototype.setValue = function(value) {
            return progress_bar_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置最大值。
           *
           * @param max 最大值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressBar.prototype.setMax = function(max) {
            return progress_bar_set_max(
              this != null ? this.nativeObj || this : null,
              max
            );
          };
          /**
           * 设置格式。
           *
           * @param format 格式。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressBar.prototype.setFormat = function(format) {
            return progress_bar_set_format(
              this != null ? this.nativeObj || this : null,
              format
            );
          };
          /**
           * 设置进度条的方向。
           *
           * @param vertical 是否为垂直方向。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressBar.prototype.setVertical = function(vertical) {
            return progress_bar_set_vertical(
              this != null ? this.nativeObj || this : null,
              vertical
            );
          };
          /**
           * 设置进度条的是否显示文本。
           *
           * @param show_text 是否显示文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressBar.prototype.setShowText = function(show_text) {
            return progress_bar_set_show_text(
              this != null ? this.nativeObj || this : null,
              show_text
            );
          };
          /**
           * 设置进度条是否反向。
           *
           * @param reverse 是否反向。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TProgressBar.prototype.setReverse = function(reverse) {
            return progress_bar_set_reverse(
              this != null ? this.nativeObj || this : null,
              reverse
            );
          };
          /**
           * 获取进度百分比。
           *
           *> 当max为100时，percent和value取整后一致。
           *
           *
           * @returns 返回百分比。
           */
          TProgressBar.prototype.getPercent = function() {
            return progress_bar_get_percent(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TProgressBar.prototype, 'value', {
            /**
             * 进度条的值[0-max]。
             *
             */
            get: function() {
              return progress_bar_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressBar.prototype, 'max', {
            /**
             * 最大值(缺省为100)。
             *
             */
            get: function() {
              return progress_bar_t_get_prop_max(this.nativeObj);
            },
            set: function(v) {
              this.setMax(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressBar.prototype, 'format', {
            /**
             * 数值到字符串转换时的格式，缺省为"%d"。
             *
             */
            get: function() {
              return progress_bar_t_get_prop_format(this.nativeObj);
            },
            set: function(v) {
              this.setFormat(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressBar.prototype, 'vertical', {
            /**
             * 进度条的是否为垂直方向。
             *
             */
            get: function() {
              return progress_bar_t_get_prop_vertical(this.nativeObj);
            },
            set: function(v) {
              this.setVertical(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressBar.prototype, 'showText', {
            /**
             * 是否显示文本。
             *
             */
            get: function() {
              return progress_bar_t_get_prop_show_text(this.nativeObj);
            },
            set: function(v) {
              this.setShowText(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TProgressBar.prototype, 'reverse', {
            /**
             * 是否反向显示。如果为TRUE，水平方向从右向左表示增加，垂直方向从上到下表示增加。
             *
             */
            get: function() {
              return progress_bar_t_get_prop_reverse(this.nativeObj);
            },
            set: function(v) {
              this.setReverse(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TProgressBar;
        })(TWidget);
        exports.TProgressBar = TProgressBar;
        /**
         * row。一个简单的容器控件，用于水平排列其子控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *row\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于row\_t控件。
         *
         *在xml中使用"row"标签创建row。如：
         *
         *```xml
         *<row x="0" y="0" w="100%" h="100%" children_layout="default(c=0,r=1)">
         *<button name="open:basic" text="Basic"/>
         *<button name="open:button" text="Buttons"/>
         *<button name="open:edit" text="Edits"/>
         *<button name="open:keyboard" text="KeyBoard"/>
         *</row>
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TRow = /** @class */ (function(_super) {
          __extends(TRow, _super);
          function TRow(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建row对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TRow.create = function(parent, x, y, w, h) {
            return new TRow(
              row_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为row对象(供脚本语言使用)。
           *
           * @param widget row对象。
           *
           * @returns row对象。
           */
          TRow.cast = function(widget) {
            return new TRow(
              row_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TRow;
        })(TWidget);
        exports.TRow = TRow;
        /**
         * 滑块控件。
         *
         *slider\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于slider\_t控件。
         *
         *在xml中使用"slider"标签创建滑块控件。如：
         *
         *```xml
         *<slider x="center" y="10" w="80%" h="20" value="10"/>
         *<slider style="img" x="center" y="50" w="80%" h="30" value="20" />
         *<slider style="img" x="center" y="90" w="80%" h="30" value="30" min="5" max="50" step="5"/>
         *```
         *
         *> 更多用法请参考：
         *[basic](https://github.com/zlgopen/awtk/blob/master/design/default/ui/basic.xml)
         *
         *在c代码中使用函数slider\_create创建滑块控件。如：
         *
         *
         *> 完整示例请参考：
         *[slider demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/slider.c)
         *
         *可用通过style来设置控件的显示风格，如图片和颜色等等。如：
         *
         *```xml
         *<style name="img" bg_image="slider_bg" fg_image="slider_fg">
         *<normal icon="slider_drag"/>
         *<pressed icon="slider_drag_p"/>
         *<over icon="slider_drag_o"/>
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L179)
         *
         */
        var TSlider = /** @class */ (function(_super) {
          __extends(TSlider, _super);
          function TSlider(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建slider对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSlider.create = function(parent, x, y, w, h) {
            return new TSlider(
              slider_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为slider对象(供脚本语言使用)。
           *
           * @param widget slider对象。
           *
           * @returns slider对象。
           */
          TSlider.cast = function(widget) {
            return new TSlider(
              slider_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 设置滑块的值。
           *
           * @param value 值
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlider.prototype.setValue = function(value) {
            return slider_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置滑块的最小值。
           *
           * @param min 最小值
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlider.prototype.setMin = function(min) {
            return slider_set_min(
              this != null ? this.nativeObj || this : null,
              min
            );
          };
          /**
           * 设置滑块的最大值。
           *
           * @param max 最大值
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlider.prototype.setMax = function(max) {
            return slider_set_max(
              this != null ? this.nativeObj || this : null,
              max
            );
          };
          /**
           * 设置滑块的拖动的最小单位。
           *
           * @param step 拖动的最小单位。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlider.prototype.setStep = function(step) {
            return slider_set_step(
              this != null ? this.nativeObj || this : null,
              step
            );
          };
          /**
           * 设置bar的宽度或高度。
           *
           * @param bar_size bar的宽度或高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlider.prototype.setBarSize = function(bar_size) {
            return slider_set_bar_size(
              this != null ? this.nativeObj || this : null,
              bar_size
            );
          };
          /**
           * 设置滑块的方向。
           *
           * @param vertical 是否为垂直方向。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSlider.prototype.setVertical = function(vertical) {
            return slider_set_vertical(
              this != null ? this.nativeObj || this : null,
              vertical
            );
          };
          Object.defineProperty(TSlider.prototype, 'value', {
            /**
             * 值。
             *
             */
            get: function() {
              return slider_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlider.prototype, 'min', {
            /**
             * 最小值。
             *
             */
            get: function() {
              return slider_t_get_prop_min(this.nativeObj);
            },
            set: function(v) {
              this.setMin(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlider.prototype, 'max', {
            /**
             * 最大值。
             *
             */
            get: function() {
              return slider_t_get_prop_max(this.nativeObj);
            },
            set: function(v) {
              this.setMax(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlider.prototype, 'step', {
            /**
             * 拖动的最小单位。
             *
             */
            get: function() {
              return slider_t_get_prop_step(this.nativeObj);
            },
            set: function(v) {
              this.setStep(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlider.prototype, 'vertical', {
            /**
             * 滑块的是否为垂直方向。
             *
             */
            get: function() {
              return slider_t_get_prop_vertical(this.nativeObj);
            },
            set: function(v) {
              this.setVertical(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlider.prototype, 'barSize', {
            /**
             * 轴的宽度或高度（单位：像素），为0表示为控件的宽度或高度的一半，缺省为0。
             *
             */
            get: function() {
              return slider_t_get_prop_bar_size(this.nativeObj);
            },
            set: function(v) {
              this.setBarSize(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlider.prototype, 'draggerSize', {
            /**
             * 滑块的宽度或高度（单位：像素），缺省为10。
             *
             */
            get: function() {
              return slider_t_get_prop_dragger_size(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlider.prototype, 'draggerAdaptToIcon', {
            /**
             * 滑块的宽度或高度是否与icon适应，缺省为true。
             *
             */
            get: function() {
              return slider_t_get_prop_dragger_adapt_to_icon(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TSlider.prototype, 'slideWithBar', {
            /**
             * 是否允许在轴上滑动来改变滑块位置，缺省为FALSE。
             *
             */
            get: function() {
              return slider_t_get_prop_slide_with_bar(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TSlider;
        })(TWidget);
        exports.TSlider = TSlider;
        /**
         * 标签按钮分组控件。
         *
         *一个简单的容器，主要用于对标签按钮进行布局和管理。
         *
         *tab\_button\_group\_t是[widget\_t](widget_t.md)的子类控件，
         *widget\_t的函数均适用于tab\_button\_group\_t控件。
         *
         *在xml中使用"tab\_button\_group"标签创建标签按钮分组控件。如：
         *
         *```xml
         *<tab_button_group x="c" y="bottom:10" w="90%" h="30" compact="true"
         *<tab_button text="General"/>
         *<tab_button text="Network" value="true" />
         *<tab_button text="Security"/>
         *</tab_button_group>
         *```
         *
         *> 更多用法请参考：
         *[tab control](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)
         *
         *可用通过style来设置控件的显示风格，如颜色等等。如：
         *
         *```xml
         *<tab_button_group>
         *<style name="default">
         *<normal/>
         *</style>
         *</tab_button_group>
         *```
         *
         */
        var TTabButtonGroup = /** @class */ (function(_super) {
          __extends(TTabButtonGroup, _super);
          function TTabButtonGroup(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建tab_button_group对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TTabButtonGroup.create = function(parent, x, y, w, h) {
            return new TTabButtonGroup(
              tab_button_group_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置compact。
           *
           * @param compact 是否使用紧凑布局(缺省FALSE)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTabButtonGroup.prototype.setCompact = function(compact) {
            return tab_button_group_set_compact(
              this != null ? this.nativeObj || this : null,
              compact
            );
          };
          /**
           * 设置scrollable。
           *
           * @param scrollable 是否允许滚动(缺省FALSE)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTabButtonGroup.prototype.setScrollable = function(scrollable) {
            return tab_button_group_set_scrollable(
              this != null ? this.nativeObj || this : null,
              scrollable
            );
          };
          /**
           * 转换tab_button_group对象(供脚本语言使用)。
           *
           * @param widget tab_button_group对象。
           *
           * @returns tab_button_group对象。
           */
          TTabButtonGroup.cast = function(widget) {
            return new TTabButtonGroup(
              tab_button_group_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          Object.defineProperty(TTabButtonGroup.prototype, 'compact', {
            /**
             * 紧凑型排版子控件(缺省FALSE)。
             *
             */
            get: function() {
              return tab_button_group_t_get_prop_compact(this.nativeObj);
            },
            set: function(v) {
              this.setCompact(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTabButtonGroup.prototype, 'scrollable', {
            /**
             * 是否支持滚动(缺省FALSE)。
             *
             *> 紧凑型排版子控件时才支持滚动。
             *
             */
            get: function() {
              return tab_button_group_t_get_prop_scrollable(this.nativeObj);
            },
            set: function(v) {
              this.setScrollable(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TTabButtonGroup;
        })(TWidget);
        exports.TTabButtonGroup = TTabButtonGroup;
        /**
         * 标签按钮控件。
         *
         *标签按钮有点类似单选按钮，但点击标签按钮之后会自动切换当前的标签页。
         *
         *tab\_button\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于tab\_button\_t控件。
         *
         *在xml中使用"tab\_button"标签创建标签按钮控件。如：
         *
         *```xml
         *<!-- tab_button_view_page1.xml -->
         *<view w="100%" h="100%">
         *<label x="c" y="m" w="100%" h="60" text="page1" />
         *<button name="close" x="c" y="bottom:100" w="80" h="40" text="Close" />
         *</view>
         *```
         *
         *```xml
         *<!-- tab_button dynamic load UI -->
         *<pages name="pages" x="right" y="0" w="70%" h="100%">
         *</pages>
         *<list_view x="0" y="0" w="30%" h="100%" item_height="40" auto_hide_scroll_bar="true">
         *<scroll_view name="view" x="0"  y="0" w="-12" h="100%">
         *<tab_button text="page1" load_ui="tab_button_view_page1" value="true"/>
         *<tab_button text="page2" load_ui="tab_button_view_page2" />
         *<tab_button text="page3" load_ui="tab_button_view_page3" />
         *<scroll_view />
         *<scroll_bar_d name="bar" x="right" y="0" w="12" h="100%" value="0"/>
         *</list_view>
         *```
         *
         *```xml
         *<!-- tab_button static load UI -->
         *<tab_button_group x="c" y="bottom:10" w="90%" h="30" compact="true"
         *<tab_button text="General"/>
         *<tab_button text="Network" value="true" />
         *<tab_button text="Security"/>
         *</tab_button_group>
         *```
         *
         *标签按钮一般放在标签按钮分组中，布局由标签按钮分组控件决定，不需要指定自己的布局参数和坐标。
         *
         *> 更多用法请参考：
         *[tab control](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<tab_button>
         *<style name="default" border_color="#a0a0a0"  text_color="black">
         *<normal     bg_color="#d0d0d0" />
         *<pressed    bg_color="#f0f0f0" />
         *<over       bg_color="#e0e0e0" />
         *<normal_of_active     bg_color="#f0f0f0" />
         *<pressed_of_active    bg_color="#f0f0f0" />
         *<over_of_active       bg_color="#f0f0f0" />
         *</style>
         *</tab_button>
         *```
         *
         */
        var TTabButton = /** @class */ (function(_super) {
          __extends(TTabButton, _super);
          function TTabButton(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建tab_button对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TTabButton.create = function(parent, x, y, w, h) {
            return new TTabButton(
              tab_button_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换tab_button对象(供脚本语言使用)。
           *
           * @param widget tab_button对象。
           *
           * @returns tab_button对象。
           */
          TTabButton.cast = function(widget) {
            return new TTabButton(
              tab_button_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          /**
           * 设置为当前标签。
           *
           * @param value 是否为当前标签。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTabButton.prototype.setValue = function(value) {
            return tab_button_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置控件的图标。
           *
           * @param name 当前项的图标。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTabButton.prototype.setIcon = function(name) {
            return tab_button_set_icon(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置控件的active图标。
           *
           * @param name 当前项的图标。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTabButton.prototype.setActiveIcon = function(name) {
            return tab_button_set_active_icon(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 设置控件动态加载显示UI。
           *
           * @param name 动态加载UI的资源名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TTabButton.prototype.setLoadUi = function(name) {
            return tab_button_set_load_ui(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          Object.defineProperty(TTabButton.prototype, 'value', {
            /**
             * 值。
             *
             */
            get: function() {
              return tab_button_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTabButton.prototype, 'loadUi', {
            /**
             * 激活后加载的UI名字。
             *
             */
            get: function() {
              return tab_button_t_get_prop_load_ui(this.nativeObj);
            },
            set: function(v) {
              this.setLoadUi(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTabButton.prototype, 'activeIcon', {
            /**
             * 当前项的图标的名称。
             *
             */
            get: function() {
              return tab_button_t_get_prop_active_icon(this.nativeObj);
            },
            set: function(v) {
              this.setActiveIcon(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTabButton.prototype, 'icon', {
            /**
             * 非当前项的图标的名称。
             *
             */
            get: function() {
              return tab_button_t_get_prop_icon(this.nativeObj);
            },
            set: function(v) {
              this.setIcon(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TTabButton;
        })(TWidget);
        exports.TTabButton = TTabButton;
        /**
         * 标签控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *
         *标签控件通常会包含一个pages控件和一个tab\_button\_group控件。
         *
         *
         *
         *tab\_control\_t是[widget\_t](widget_t.md)的子类控件，
         *widget\_t的函数均适用于tab\_control\_t控件。
         *
         *在xml中使用"tab\_control"标签创建标签控件。如：
         *
         *```xml
         *<tab_control x="0" y="0" w="100%" h="100%"
         *<pages x="c" y="20" w="90%" h="-60" value="1">
         *...
         *</pages>
         *<tab_button_group>
         *...
         *</tab_button_group>
         *</tab_control>
         *```
         *
         *> 更多用法请参考：
         *[tab control](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)
         *
         */
        var TTabControl = /** @class */ (function(_super) {
          __extends(TTabControl, _super);
          function TTabControl(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建tab_control对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TTabControl.create = function(parent, x, y, w, h) {
            return new TTabControl(
              tab_control_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换tab_control对象(供脚本语言使用)。
           *
           * @param widget tab_control对象。
           *
           * @returns tab_control对象。
           */
          TTabControl.cast = function(widget) {
            return new TTabControl(
              tab_control_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TTabControl;
        })(TWidget);
        exports.TTabControl = TTabControl;
        /**
         * 一个通用的容器控件。
         *
         *它本身不提供布局功能，仅提供具有语义的标签，让xml更具有可读性。
         *子控件的布局可用layout\_children属性指定。
         *请参考[布局参数](https://github.com/zlgopen/awtk/blob/master/docs/layout.md)。
         *
         *view\_t是[widget\_t](widget_t.md)的子类控件，widget\_t的函数均适用于view\_t控件。
         *
         *在xml中使用"view"标签创建view。如：
         *
         *```xml
         *<view x="0" y="0" w="100%" h="100%" children_layout="default(c=2,r=2,m=5,s=5)">
         *</view>
         *```
         *
         *可用通过style来设置控件的显示风格，如背景颜色等。如：
         *
         *```xml
         *<style name="default" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" />
         *</style>
         *```
         *
         */
        var TView = /** @class */ (function(_super) {
          __extends(TView, _super);
          function TView(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建view对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TView.create = function(parent, x, y, w, h) {
            return new TView(
              view_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置缺省获得焦点的子控件(可用控件名或类型)。
           *
           * @param default_focused_child 缺省获得焦点的子控件(可用控件名或类型)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TView.prototype.setDefaultFocusedChild = function(
            default_focused_child
          ) {
            return view_set_default_focused_child(
              this != null ? this.nativeObj || this : null,
              default_focused_child
            );
          };
          /**
           * 转换为view对象(供脚本语言使用)。
           *
           * @param widget view对象。
           *
           * @returns view对象。
           */
          TView.cast = function(widget) {
            return new TView(
              view_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          Object.defineProperty(TView.prototype, 'defaultFocusedChild', {
            /**
             * 缺省获得焦点的子控件(可用控件名或类型)。
             *
             *> view作为pages/slideview的直接子控件才需要设置。
             *> 正常情况下，一个窗口只能指定一个初始焦点。
             *> 但是对于pages/slideview来说，可能希望每一个页面都有一个初始焦点，此时可用default\_focused\_child来指定。
             *
             */
            get: function() {
              return view_t_get_prop_default_focused_child(this.nativeObj);
            },
            set: function(v) {
              this.setDefaultFocusedChild(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TView;
        })(TWidget);
        exports.TView = TView;
        /**
         * 对话框。 对话框是一种特殊的窗口，大小和位置可以自由设置。
         *
         *AWTK中的对话框可以是模态的，也可以是非模态的。
         *
         *如果dialog有透明或半透效果则不支持窗口动画。
         *
         *> 由于浏览器中无法实现主循环嵌套，因此无法实现模态对话框。
         *如果希望自己写的AWTK应用程序可以在浏览器(包括各种小程序)中运行或演示，
         *请避免使用模态对话框。
         *
         *对话框通常由对话框标题和对话框客户区两部分组成：
         *
         *
         *
         *dialog\_t是[window\_base\_t](window_base_t.md)的子类控件，window\_base\_t的函数均适用于dialog\_t控件。
         *
         *在xml中使用"dialog"标签创建对话框。如：
         *
         *```xml
         *<dialog anim_hint="center_scale(duration=300)" x="c" y="m" w="80%" h="160" text="Dialog">
         *<dialog_title x="0" y="0" w="100%" h="30" text="Hello AWTK" />
         *<dialog_client x="0" y="bottom" w="100%" h="-30">
         *<label name="" x="center" y="middle:-20" w="200" h="30" text="Are you ready?"/>
         *<button name="quit" x="10" y="bottom:10" w="40%" h="30" text="确定"/>
         *<button name="quit" x="right:10" y="bottom:10" w="40%" h="30" text="取消"/>
         *</dialog_client>
         *</dialog>
         *```
         *
         *如果你不需要对话框的标题，可以这样写：
         *
         *```xml
         *<dialog anim_hint="center_scale(duration=300)" x="c" y="m" w="80%" h="160" text="Dialog">
         *<label name="" x="center" y="middle:-20" w="200" h="30" text="Are you ready?"/>
         *<button name="quit" x="10" y="bottom:10" w="40%" h="30" text="确定"/>
         *<button name="quit" x="right:10" y="bottom:10" w="40%" h="30" text="取消"/>
         *</dialog>
         *```
         *
         *打开非模态对话框时，其用法与普通窗口一样。打开非模态对话框时，还需要调用dialog\_modal。
         *
         *
         *关闭模态对话框用dialog\_quit
         *
         *
         *关闭非模态对话框用window\_close。
         *
         *
         *> 更多用法请参考：
         *[dialog.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)
         *
         *> 完整C代码示例请参考：
         *
         ** [非模态对话框](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/dialog.c)
         *
         ** [模态对话框](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/dialog_modal.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<style name="default">
         *<normal border_color="#606060" />
         *</style>
         *```
         *
         *> 更多用法请参考：
         *[theme default]
         *(https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L324)
         *
         */
        var TDialog = /** @class */ (function(_super) {
          __extends(TDialog, _super);
          function TDialog(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建dialog对象。
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns dialog对象。
           */
          TDialog.create = function(parent, x, y, w, h) {
            return new TDialog(
              dialog_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 创建dialog对象，同时创建title/client。
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns dialog对象。
           */
          TDialog.createSimple = function(parent, x, y, w, h) {
            return new TDialog(
              dialog_create_simple(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换dialog对象(供脚本语言使用)。
           *
           * @param widget dialog对象。
           *
           * @returns dialog对象。
           */
          TDialog.cast = function(widget) {
            return new TDialog(
              dialog_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 获取title控件。
           *
           *
           * @returns title对象。
           */
          TDialog.prototype.getTitle = function() {
            return new TWidget(
              dialog_get_title(this != null ? this.nativeObj || this : null)
            );
          };
          /**
           * 获取client控件。
           *
           *
           * @returns client对象。
           */
          TDialog.prototype.getClient = function() {
            return new TWidget(
              dialog_get_client(this != null ? this.nativeObj || this : null)
            );
          };
          /**
           * 从资源文件中加载并创建Dialog对象。
           *
           *本函数在ui\_loader/ui\_builder_default里实现。
           *
           * @param name dialog的名称。
           *
           * @returns 对象。
           */
          TDialog.open = function(name) {
            return new TDialog(dialog_open(name));
          };
          /**
           * 设置对话框的标题文本。
           *
           * @param title 标题。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDialog.prototype.setTitle = function(title) {
            return dialog_set_title(
              this != null ? this.nativeObj || this : null,
              title
            );
          };
          /**
           * 模态显示对话框。
           *dialog_modal返回后，dialog对象将在下一个idle函数中回收。
           *也就是在dialog_modal调用完成后仍然可以访问dialog中控件，直到本次事件结束。
           *
           *
           * @returns 返回退出码。
           */
          TDialog.prototype.modal = function() {
            return dialog_modal(this != null ? this.nativeObj || this : null);
          };
          /**
           * 退出模态显示，关闭对话框。
           *
           *> 比如，在对话框中关闭按钮的事件处理函数中，调用本函数关闭对话框。
           *
           * @param code 退出码，作为dialog_modal的返回值(参考：[dialog_quit_code_t](dialog_quit_code_t.md))。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDialog.prototype.quit = function(code) {
            return dialog_quit(
              this != null ? this.nativeObj || this : null,
              code
            );
          };
          /**
           * 检查对话框是否已经退出模态。
           *
           *
           * @returns 返回TRUE表示已经退出，否则表示没有。
           */
          TDialog.prototype.isQuited = function() {
            return dialog_is_quited(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 检查对话框是否为模态对话框。
           *
           *
           * @returns 返回TRUE表示是模态对话框，否则表示不是。
           */
          TDialog.prototype.isModal = function() {
            return dialog_is_modal(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 显示『短暂提示信息』对话框。
           *
           *窗体样式由dialog_toast.xml文件决定。
           *
           * @param text 文本内容。
           * @param duration 显示时间(单位为毫秒)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDialog.toast = function(text, duration) {
            return dialog_toast(text, duration);
          };
          /**
           * 显示『提示信息』对话框。
           *
           *窗体样式由dialog_info.xml文件决定。
           *
           * @param title 标题。
           * @param text 文本内容。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDialog.info = function(title, text) {
            return dialog_info(title, text);
          };
          /**
           * 显示『警告』对话框。
           *
           *窗体样式由dialog_warn.xml文件决定。
           *
           * @param title 标题。
           * @param text 文本内容。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TDialog.warn = function(title, text) {
            return dialog_warn(title, text);
          };
          /**
           * 显示『确认』对话框。
           *
           *窗体样式由dialog_confirm.xml文件决定。
           *
           * @param title 标题。
           * @param text 文本内容。
           *
           * @returns 返回RET_OK表示确认，否则表示取消。
           */
          TDialog.confirm = function(title, text) {
            return dialog_confirm(title, text);
          };
          Object.defineProperty(TDialog.prototype, 'highlight', {
            /**
             * 对话框高亮策略。
             *
             *> 请参考 [对话框高亮策略](https://github.com/zlgopen/awtk/blob/master/docs/dialog_highlight.md)
             *
             */
            get: function() {
              return dialog_t_get_prop_highlight(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TDialog;
        })(TWindowBase);
        exports.TDialog = TDialog;
        /**
         * 原生窗口。
         *
         */
        var TNativeWindow = /** @class */ (function(_super) {
          __extends(TNativeWindow, _super);
          function TNativeWindow(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 移动窗口。
           *
           * @param x x坐标。
           * @param y y坐标。
           * @param force 无论是否shared都move。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.move = function(x, y, force) {
            return native_window_move(
              this != null ? this.nativeObj || this : null,
              x,
              y,
              force
            );
          };
          /**
           * 调整窗口大小。
           *
           * @param w 宽。
           * @param h 高。
           * @param force 无论是否shared都resize。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.resize = function(w, h, force) {
            return native_window_resize(
              this != null ? this.nativeObj || this : null,
              w,
              h,
              force
            );
          };
          /**
           * 最小化窗口。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.minimize = function() {
            return native_window_minimize(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 最大化窗口。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.maximize = function() {
            return native_window_maximize(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 恢复窗口大小。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.restore = function() {
            return native_window_restore(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 窗口居中。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.center = function() {
            return native_window_center(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 是否显示边框。
           *
           * @param show 是否显示。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.showBorder = function(show) {
            return native_window_show_border(
              this != null ? this.nativeObj || this : null,
              show
            );
          };
          /**
           * 是否全屏。
           *
           * @param fullscreen 是否全屏。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.setFullscreen = function(fullscreen) {
            return native_window_set_fullscreen(
              this != null ? this.nativeObj || this : null,
              fullscreen
            );
          };
          /**
           * 设置鼠标光标。
           *
           * @param name 鼠标光标的名称。
           * @param img 鼠标光标的图片。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TNativeWindow.prototype.setCursor = function(name, img) {
            return native_window_set_cursor(
              this != null ? this.nativeObj || this : null,
              name,
              img != null ? img.nativeObj || img : null
            );
          };
          return TNativeWindow;
        })(TObject);
        exports.TNativeWindow = TNativeWindow;
        /**
         * 窗口。
         *
         *缺省的应用程序窗口，占用除system\_bar\_t之外的整个区域，请不要修改它的位置和大小(除非你清楚后果)。
         *
         *window\_t是[window\_base\_t](window_base_t.md)的子类控件，window\_base\_t的函数均适用于window\_t控件。
         *
         *在xml中使用"window"标签创建窗口。无需指定坐标和大小，可以指定窗体样式和动画名称。如：
         *
         *```xml
         *<window theme="basic" anim_hint="htranslate">
         *...
         *</window>
         *```
         *
         *>
         *更多用法请参考：[window.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)
         *
         *在c代码中使用函数window\_create创建窗口。如：
         *
         *
         *> 无需指定父控件、坐标和大小，使用0即可。
         *
         *> 完整示例请参考：[window
         *demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/)
         *
         *可用通过style来设置窗口的风格，如背景颜色或图片等。如：
         *
         *```xml
         *<style name="bricks">
         *<normal bg_image="bricks"  bg_image_draw_type="repeat"/>
         *</style>
         *```
         *
         *> 更多用法请参考：[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L0)
         *
         */
        var TWindow = /** @class */ (function(_super) {
          __extends(TWindow, _super);
          function TWindow(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建window对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TWindow.create = function(parent, x, y, w, h) {
            return new TWindow(
              window_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 以缺省的方式创建window对象。
           *
           *
           * @returns 对象。
           */
          TWindow.createDefault = function() {
            return new TWindow(window_create_default());
          };
          /**
           * 设置为全屏窗口。
           *
           *>如果app_type是SIMULATOR，全屏是指与LCD相同大小，而非让SDL窗口全屏。
           *
           * @param fullscreen 是否全屏。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindow.prototype.setFullscreen = function(fullscreen) {
            return window_set_fullscreen(
              this != null ? this.nativeObj || this : null,
              fullscreen
            );
          };
          /**
           * 当设计分辨率和实际分辨率不一致时，自动调整子控件的位置和大小。
           *
           *> 当子控件有self_layout参数或者子控件的父控件有children_layout参数时，不会自动调整。
           *
           * @param design_w 设计时宽度。
           * @param design_h 设计时高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindow.prototype.setAutoScaleChildren = function(
            design_w,
            design_h
          ) {
            return window_set_auto_scale_children(
              this != null ? this.nativeObj || this : null,
              design_w,
              design_h
            );
          };
          /**
           * 从资源文件中加载并创建window_base对象。本函数在ui_loader/ui_builder_default里实现。
           *
           * @param name window的名称。
           *
           * @returns 对象。
           */
          TWindow.open = function(name) {
            return new TWindow(window_open(name));
          };
          /**
           * 从资源文件中加载并创建window对象。本函数在ui_loader/ui_builder_default里实现。
           *
           * @param name window的名称。
           * @param to_close 关闭该窗口。
           *
           * @returns 对象。
           */
          TWindow.openAndClose = function(name, to_close) {
            return new TWindow(
              window_open_and_close(
                name,
                to_close != null ? to_close.nativeObj || to_close : null
              )
            );
          };
          /**
           * 关闭窗口。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindow.prototype.close = function() {
            return window_close(this != null ? this.nativeObj || this : null);
          };
          /**
           * 立即无条件关闭窗口(无动画)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TWindow.prototype.closeForce = function() {
            return window_close_force(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 转换为window对象(供脚本语言使用)。
           *
           * @param widget window对象。
           *
           * @returns window对象。
           */
          TWindow.cast = function(widget) {
            return new TWindow(
              window_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          Object.defineProperty(TWindow.prototype, 'fullscreen', {
            /**
             * 是否全屏。
             *
             *>对于模拟器，全屏是让窗口和LCD具有相同大小，而非让SDL窗口全屏。
             *
             */
            get: function() {
              return window_t_get_prop_fullscreen(this.nativeObj);
            },
            set: function(v) {
              this.setFullscreen(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TWindow;
        })(TWindowBase);
        exports.TWindow = TWindow;
        /**
         * GIF图片控件。
         *
         *> 注意：GIF图片的尺寸大于控件大小时会自动缩小图片，但一般的嵌入式系统的硬件加速都不支持图片缩放，
         *所以缩放图片会导致性能明显下降。如果性能不满意时，请确认一下GIF图片的尺寸是否小余控件大小。
         *
         *gif\_image\_t是[image\_base\_t](image_base_t.md)的子类控件，image\_base\_t的函数均适用于gif\_image\_t控件。
         *
         *在xml中使用"gif"标签创建GIF图片控件。如：
         *
         *```xml
         *<gif image="bee"/>
         *```
         *
         *>更多用法请参考：
         *[gif
         *image](https://github.com/zlgopen/awtk/blob/master/design/default/ui/gif_image.xml)
         *
         *在c代码中使用函数gif\_image\_create创建GIF图片控件。如：
         *
         *
         *> 创建之后:
         *>
         *> 需要用widget\_set\_image设置图片名称。
         *
         *> 完整示例请参考：[gif image demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/gif_image.c)
         *
         *可用通过style来设置控件的显示风格，如背景和边框等。如：
         *
         *```xml
         *<gif>
         *<style name="border">
         *<normal border_color="#000000" bg_color="#e0e0e0" text_color="black"/>
         *</style>
         *</gif>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml)
         *
         */
        var TGifImage = /** @class */ (function(_super) {
          __extends(TGifImage, _super);
          function TGifImage(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建gif_image对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TGifImage.create = function(parent, x, y, w, h) {
            return new TGifImage(
              gif_image_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 播放。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGifImage.prototype.play = function() {
            return gif_image_play(this != null ? this.nativeObj || this : null);
          };
          /**
           * 停止(并重置index为-1)。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGifImage.prototype.stop = function() {
            return gif_image_stop(this != null ? this.nativeObj || this : null);
          };
          /**
           * 暂停。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TGifImage.prototype.pause = function() {
            return gif_image_pause(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 转换为gif_image对象(供脚本语言使用)。
           *
           * @param widget gif_image对象。
           *
           * @returns gif_image对象。
           */
          TGifImage.cast = function(widget) {
            return new TGifImage(
              gif_image_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TGifImage;
        })(TImageBase);
        exports.TGifImage = TGifImage;
        /**
         * 软键盘。
         *
         *软键盘是一个特殊的窗口，由编辑器通过输入法自动打开和关闭。
         *
         *这里介绍一下定制软键盘的方法：
         *
         *编辑器输入类型和软键盘UI资源文件的对应关系:
         *
         *| 输入类型       | 软键盘UI资源文件|
         *|----------------|:---------------:|
         *| INPUT\_PHONE    | kb\_phone.xml    |
         *| INPUT\_INT      | kb\_int.xml      |
         *| INPUT\_FLOAT    | kb\_float.xml    |
         *| INPUT\_UINT     | kb\_uint.xml     |
         *| INPUT\_UFLOAT   | kb\_ufloat.xml   |
         *| INPUT\_HEX      | kb\_hex.xml      |
         *| INPUT\_EMAIL    | kb\_ascii.xml    |
         *| INPUT\_PASSWORD | kb\_ascii.xml    |
         *| INPUT\_ASCII    | kb\_ascii.xml    |
         *| INPUT\_CUSTOM   | 使用自定义的键盘 |
         *| 其它            | kb\_default.xml  |
         *
         *keyboard中按钮子控件的名称有些特殊要求：
         *
         *|  名称          | 功能            |
         *|----------------|:---------------:|
         *| return         | 回车键          |
         *| action         | 定制按钮        |
         *| backspace      | 删除键          |
         *| tab            | tab键           |
         *| space          | 空格键          |
         *| close          | 关闭软键盘       |
         *| clear          | 清除编辑器的内容 |
         *| cancel         | 恢复编辑器的内容 |
         *| back           | 关闭当前窗口     |
         *| back_to_home   | 返回home窗口    |
         *| 前缀key:        | 键值           |
         *| 前缀hard_key:   | 模拟物理键盘    |
         *| 前缀page:       | 切换到页面      |
         *| 前缀opt:        | 多个字符选择一个，点击切换到下一个，超时提交字符(用于实现九宫格输入) |
         *
         *示例：
         *
         ** 按键"a"，提交输入法处理。
         *
         *```xml
         *<button repeat="300" name="key:a" text="a"/>
         *```
         *
         ** 字符"a"，直接提交到编辑器。
         *
         *```xml
         *<button repeat="300" name="a" text="a"/>
         *```
         *
         ** 模拟物理键盘数字"1"，触发key down/up事件（可以用来选择候选字）。
         *
         *```xml
         *<button repeat="300" name="hard_key:1" text="1"/>
         *```
         *
         ** 九宫格输入
         *
         *```xml
         *<button repeat="300" name="opt:._@/#" text="._@/#"/>
         *<button repeat="300" name="opt:abc" text="abc"/>
         *<button repeat="300" name="opt:def" text="def"/>
         *```
         *
         *
         ** 输入语言切换
         *
         *有的输入法，同时支持输入多种语言。
         *比如T9，可以同时支持中文和英文输入，配合软键盘随时切换输入的语言。
         *
         *可以在pages的页面里指定lang属性，切换到该页面时会设置输入法的语言。如：
         *
         *```xml
         *<pages x="0" y="bottom" w="100%" h="-28" active="2">
         *<view name="lower" lang="en_us"
         *x="0" y="0" w="100%" h="100%" children_layout="default(r=4,c=4,s=2,m=2)">
         *...
         *</view>
         *<view name="chinese" lang="zh_cn"
         *x="0" y="0" w="100%" h="100%" children_layout="default(r=4,c=4,s=2,m=2)">
         *...
         *</view>
         *</pages>
         *```
         *
         ** 键盘跟随。
         *默认情况下，键盘从底部弹出。如果需要让键盘在编辑器附近弹出，可以指定floating属性为true。如：
         *
         *```xml
         *<keyboard theme="keyboard" w="200" h="200" floating="true">
         *```
         *
         *> 更多用法请参考：
         *[kb_default](https://github.com/zlgopen/awtk/blob/master/design/default/ui/kb_default.xml)
         *
         */
        var TKeyboard = /** @class */ (function(_super) {
          __extends(TKeyboard, _super);
          function TKeyboard(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建keyboard对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TKeyboard.create = function(parent, x, y, w, h) {
            return new TKeyboard(
              keyboard_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为keyboard对象(供脚本语言使用)。
           *
           * @param widget keyboard对象。
           *
           * @returns keyboard对象。
           */
          TKeyboard.cast = function(widget) {
            return new TKeyboard(
              keyboard_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TKeyboard;
        })(TWindowBase);
        exports.TKeyboard = TKeyboard;
        /**
         * mutable图片控件。
         *
         *像摄像头和视频的图像是变化的，每一帧都不同，我们把这类图片称为mutable image。
         *
         *本控件辅助实现摄像头和视频的显示功能。
         *
         *mutable\_image\_t是[image\_base\_t](image_base_t.md)的子类控件，image\_base\_t的函数均适用于mutable\_image\_t控件。
         *
         *在xml中使用"mutable\_image"标签创建mutable图片控件。如：
         *
         *```xml
         *<mutable_image w="100%" h="100%"/>
         *```
         *
         *>更多用法请参考：
         *[mutable
         *image](https://github.com/zlgopen/awtk/blob/master/design/default/ui/mutable_image.xml)
         *
         *在c代码中使用函数mutable\_image\_create创建mutable图片控件。如：
         *
         *
         *> 创建之后:
         *>
         *> 需要用mutable\_image\_set\_create\_image设置创建图片的回调函数。
         *> 需要用mutable\_image\_set\_prepare\_image设置准备图片的回调函数。
         *
         *> 完整示例请参考：[mutable image demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/mutable_image.c)
         *
         *一般不需通过style来设置控件的显示风格，如果在特殊情况下需要，可以参考其它控件。
         *
         */
        var TMutableImage = /** @class */ (function(_super) {
          __extends(TMutableImage, _super);
          function TMutableImage(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建mutable_image对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TMutableImage.create = function(parent, x, y, w, h) {
            return new TMutableImage(
              mutable_image_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          return TMutableImage;
        })(TImageBase);
        exports.TMutableImage = TMutableImage;
        /**
         * SVG图片控件。
         *
         *svg\_image\_t是[image\_base\_t](image_base_t.md)的子类控件，image\_base\_t的函数均适用于svg\_image\_t控件。
         *
         *在xml中使用"svg"标签创建SVG图片控件。如：
         *
         *```xml
         *<svg image="girl"/>
         *```
         *
         *>更多用法请参考：[svg image](
         *https://github.com/zlgopen/awtk/blob/master/design/default/ui/svg_image.xml)
         *
         *在c代码中使用函数svg\_image\_create创建SVG图片控件。如：
         *
         *
         *> 创建之后: 需要用widget\_set\_image设置图片名称。
         *
         *> 完整示例请参考：[svg image demo](
         *https://github.com/zlgopen/awtk-c-demos/blob/master/demos/svg_image.c)
         *
         *可用通过style来设置控件的显示风格，如背景和边框等。如：
         *
         *```xml
         *<svg>
         *<style name="default">
         *<normal border_color="green" fg_color="red" />
         *</style>
         *</svg>
         *```
         *
         *> 更多用法请参考：[theme default](
         *https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml)
         *
         */
        var TSvgImage = /** @class */ (function(_super) {
          __extends(TSvgImage, _super);
          function TSvgImage(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建svg_image对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSvgImage.create = function(parent, x, y, w, h) {
            return new TSvgImage(
              svg_image_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置控件的图片名称。
           *
           *> 如果需要显示文件系统中的图片，只需将图片名称换成实际的文件名，并加上"file://"前缀即可。
           *
           * @param name 图片名称，该图片必须存在于资源管理器。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TSvgImage.prototype.setImage = function(name) {
            return svg_image_set_image(
              this != null ? this.nativeObj || this : null,
              name
            );
          };
          /**
           * 转换为svg_image对象(供脚本语言使用)。
           *
           * @param widget svg_image对象。
           *
           * @returns svg_image对象。
           */
          TSvgImage.cast = function(widget) {
            return new TSvgImage(
              svg_image_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TSvgImage;
        })(TImageBase);
        exports.TSvgImage = TSvgImage;
        /**
         * 单个idle的信息。
         *
         */
        var TIdleInfo = /** @class */ (function(_super) {
          __extends(TIdleInfo, _super);
          function TIdleInfo(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 转换为idle_info对象(供脚本语言使用)。
           *
           * @param idle idle_info对象。
           *
           * @returns idle_info对象。
           */
          TIdleInfo.cast = function(idle) {
            return new TIdleInfo(
              idle_info_cast(idle != null ? idle.nativeObj || idle : null)
            );
          };
          Object.defineProperty(TIdleInfo.prototype, 'ctx', {
            /**
             * idle回调函数上下文。
             *
             */
            get: function() {
              return idle_info_t_get_prop_ctx(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TIdleInfo.prototype, 'extraCtx', {
            /**
             * idle回调函数上下文。
             *
             */
            get: function() {
              return idle_info_t_get_prop_extra_ctx(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TIdleInfo.prototype, 'id', {
            /**
             * idle的ID
             *
             *> 为TK\_INVALID\_ID时表示无效idle。
             *
             */
            get: function() {
              return idle_info_t_get_prop_id(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TIdleInfo;
        })(TObject);
        exports.TIdleInfo = TIdleInfo;
        /**
         * 简单的动态数组，内部存放value对象。
         *
         *访问时属性名称为：
         *
         ** "size"/"length" 用于获取数组的长度。
         ** index 用于访问属性，-1可以用来追加新元素。
         *
         */
        var TObjectArray = /** @class */ (function(_super) {
          __extends(TObjectArray, _super);
          function TObjectArray(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建对象。
           *
           *
           * @returns 返回object对象。
           */
          TObjectArray.create = function() {
            return new TObjectArray(object_array_create());
          };
          /**
           * for script gc
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObjectArray.prototype.unref = function() {
            return object_array_unref(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 清除全部属性。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObjectArray.prototype.clearProps = function() {
            return object_array_clear_props(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 在指定位置插入一个元素。
           *
           * @param index 位置。
           * @param v 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObjectArray.prototype.insert = function(index, v) {
            return object_array_insert(
              this != null ? this.nativeObj || this : null,
              index,
              v != null ? v.nativeObj || v : null
            );
          };
          /**
           * 追加一个元素。
           *
           * @param v 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObjectArray.prototype.push = function(v) {
            return object_array_push(
              this != null ? this.nativeObj || this : null,
              v != null ? v.nativeObj || v : null
            );
          };
          /**
           * 查找元素出现的第一个位置。
           *
           * @param v 值。
           *
           * @returns 如果找到返回其位置，否则返回-1。
           */
          TObjectArray.prototype.indexOf = function(v) {
            return object_array_index_of(
              this != null ? this.nativeObj || this : null,
              v != null ? v.nativeObj || v : null
            );
          };
          /**
           * 查找元素出现的最后一个位置。
           *
           * @param v 值。
           *
           * @returns 如果找到返回其位置，否则返回-1。
           */
          TObjectArray.prototype.lastIndexOf = function(v) {
            return object_array_last_index_of(
              this != null ? this.nativeObj || this : null,
              v != null ? v.nativeObj || v : null
            );
          };
          /**
           * 在指定位置删除一个元素。
           *
           * @param index 位置。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObjectArray.prototype.remove = function(index) {
            return object_array_remove(
              this != null ? this.nativeObj || this : null,
              index
            );
          };
          /**
           * 在指定位置删除一个元素，并返回它。
           *
           * @param index 位置。
           * @param v 用于返回值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObjectArray.prototype.getAndRemove = function(index, v) {
            return object_array_get_and_remove(
              this != null ? this.nativeObj || this : null,
              index,
              v != null ? v.nativeObj || v : null
            );
          };
          Object.defineProperty(TObjectArray.prototype, 'size', {
            /**
             * 属性个数。
             *
             */
            get: function() {
              return object_array_t_get_prop_size(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TObjectArray;
        })(TObject);
        exports.TObjectArray = TObjectArray;
        /**
         * 对象接口的缺省实现。
         *
         *内部使用有序数组保存所有属性，可以快速查找指定名称的属性。
         *
         */
        var TObjectDefault = /** @class */ (function(_super) {
          __extends(TObjectDefault, _super);
          function TObjectDefault(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建对象。
           *
           *
           * @returns 返回object对象。
           */
          TObjectDefault.create = function() {
            return new TObjectDefault(object_default_create());
          };
          /**
           * for script gc
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObjectDefault.prototype.unref = function() {
            return object_default_unref(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 清除全部属性。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TObjectDefault.prototype.clearProps = function() {
            return object_default_clear_props(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TObjectDefault.prototype, 'propsSize', {
            /**
             * 属性个数。
             *
             */
            get: function() {
              return object_default_t_get_prop_props_size(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TObjectDefault;
        })(TObject);
        exports.TObjectDefault = TObjectDefault;
        /**
         * 单个定时器的信息。
         *
         */
        var TTimerInfo = /** @class */ (function(_super) {
          __extends(TTimerInfo, _super);
          function TTimerInfo(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 转换为timer_info对象(供脚本语言使用)。
           *
           * @param timer timer_info对象。
           *
           * @returns timer_info对象。
           */
          TTimerInfo.cast = function(timer) {
            return new TTimerInfo(
              timer_info_cast(timer != null ? timer.nativeObj || timer : null)
            );
          };
          Object.defineProperty(TTimerInfo.prototype, 'ctx', {
            /**
             * 定时器回调函数的上下文
             *
             */
            get: function() {
              return timer_info_t_get_prop_ctx(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimerInfo.prototype, 'extraCtx', {
            /**
             * 定时器回调函数的上下文
             *
             */
            get: function() {
              return timer_info_t_get_prop_extra_ctx(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimerInfo.prototype, 'id', {
            /**
             * 定时器的ID
             *
             *> 为TK\_INVALID\_ID时表示无效定时器。
             *
             */
            get: function() {
              return timer_info_t_get_prop_id(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TTimerInfo.prototype, 'now', {
            /**
             * 当前时间(相对时间，单位为毫秒)。
             *
             */
            get: function() {
              return timer_info_t_get_prop_now(this.nativeObj);
            },
            enumerable: false,
            configurable: true,
          });
          return TTimerInfo;
        })(TObject);
        exports.TTimerInfo = TTimerInfo;
        /**
         * 电阻屏校准窗口。
         *
         *calibration\_win\_t是[window\_base\_t](window_base_t.md)的子类控件，
         *window\_base\_t的函数均适用于calibration\_win\_t控件。
         *
         *在xml中使用"calibration\_win"标签创建电阻屏校准窗口。如：
         *
         *```xml
         *<calibration_win name="cali" w="100%" h="100%" text="Please click the center of cross">
         *</calibration_win>
         *```
         *
         *> 更多用法请参考：
         *[window.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/calibration_win.xml)
         *
         *在c代码中使用函数calibration\_win\_create创建窗口。如：
         *
         *
         *通过calibration\_win\_set\_on\_done注册回调函数，用于保存校准数据。
         *
         */
        var TCalibrationWin = /** @class */ (function(_super) {
          __extends(TCalibrationWin, _super);
          function TCalibrationWin(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建calibration_win对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TCalibrationWin.create = function(parent, x, y, w, h) {
            return new TCalibrationWin(
              calibration_win_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为calibration_win对象(供脚本语言使用)。
           *
           * @param widget calibration_win对象。
           *
           * @returns calibration_win对象。
           */
          TCalibrationWin.cast = function(widget) {
            return new TCalibrationWin(
              calibration_win_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TCalibrationWin;
        })(TWindowBase);
        exports.TCalibrationWin = TCalibrationWin;
        /**
         * 下拉列表控件。
         *
         *点击右边的按钮，可弹出一个下拉列表，从中选择一项作为当前的值。
         *
         *combo\_box\_t是[edit\_t](edit_t.md)的子类控件，edit\_t的函数均适用于combo\_box\_t控件。
         *
         *在xml中使用"combo_box"标签创建下拉列表控件。
         *
         *列表选项可以直接写在"options"属性中。如：
         *
         *```xml
         *<combo_box readonly="true" x="10" y="bottom:5" w="200" h="30" tr_text="ok"
         *options="1:ok;2:cancel;"/>
         *```
         *
         *列表选项也可以放在独立的窗口中，用属性"open_window"指定窗口的名称。如：
         *
         *```xml
         *<combo_box open_window="language" readonly="true" x="10" y="bottom:50" w="200" h="30"
         *tr_text="english"/>
         *```
         *
         *language.xml:
         *
         *```xml
         *<popup close_when_click_outside="true" h="80"
         *<list_view x="0"  y="0" w="100%" h="100%" item_height="30">
         *<scroll_view name="view" x="0"  y="0" w="-12" h="100%">
         *<combo_box_item tr_text="english"/>
         *<combo_box_item tr_text="chinese" />
         *</scroll_view>
         *<scroll_bar_d name="bar" x="right" y="0" w="12" h="100%" value="0"/>
         *</list_view>
         *</popup>
         *```
         *
         *> 更多用法请参考：[combo_box.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/combo_box.xml)
         *
         *
         *
         *如果在文本比较长时，希望在获得焦点时文本自动滚动，可以放入一个hscroll_label为子控件，并命名为"value"。如：
         *
         *```xml
         *<combo_box left_margin="6" readonly="true" x="10" y="50" w="80" h="30" options="leftttttttttt;centerrrrrrrrrrrrrrrr;rightttttttttt;"
         *selected_index="1">
         *<hscroll_label x="0" y="0" w="-30" h="100%"
         *name="value"
         *lull="1000"
         *loop="true"
         *yoyo="true"
         *ellipses="true"
         *only_parent_focus="true"/>
         *<button style="combobox_down" x="right:5" y="middle" w="20" h="20"/>
         *</combo_box>
         *```
         *
         *在c代码中使用函数combo\_box\_create创建下拉列表控件。如：
         *
         *
         *创建之后：
         *
         ** 用combo\_box\_set\_options设置可选项目。
         ** 用combo\_box\_set\_selected\_index设置缺省项。
         *
         *> 完整示例请参考：[combo_box
         *demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/combo_box.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<combo_box>
         *<style name="default" border_color="#a0a0a0"  text_color="black" text_align_h="left">
         *<normal     bg_color="#f0f0f0" />
         *<focused    bg_color="#f0f0f0" border_color="black"/>
         *<empty      bg_color="#f0f0f0" text_color="#a0a0a0" />
         *</style>
         *</combo_box>
         *```
         *
         ** 1.combobox的下拉按钮的style名称为combobox_down，可以在窗体样式文件中设置。
         *
         *```xml
         *<button>
         *<style name="combobox_down" border_color="#a0a0a0">
         *<normal     bg_color="#f0f0f0" icon="arrow_down_n"/>
         *<pressed    bg_color="#c0c0c0" icon="arrow_down_p"/>
         *<over       bg_color="#e0e0e0" icon="arrow_down_o"/>
         *</style>
         *</button>
         *```
         *
         ** 2.combobox的弹出popup窗口的style名称为combobox_popup，可以在窗体样式文件中设置。
         *
         *```xml
         *<popup>
         *<style name="combobox_popup" border_color="red">
         *<normal bg_color="#808080"/>
         *</style>
         *</popup>
         *```
         *
         *> 更多用法请参考：[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L422)
         *
         */
        var TComboBox = /** @class */ (function(_super) {
          __extends(TComboBox, _super);
          function TComboBox(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建combo_box对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TComboBox.create = function(parent, x, y, w, h) {
            return new TComboBox(
              combo_box_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换combo_box对象(供脚本语言使用)。
           *
           * @param widget combo_box对象。
           *
           * @returns combo_box对象。
           */
          TComboBox.cast = function(widget) {
            return new TComboBox(
              combo_box_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 点击按钮时可以打开popup窗口，本函数可设置窗口的名称。
           *
           * @param open_window 弹出窗口的名称。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.setOpenWindow = function(open_window) {
            return combo_box_set_open_window(
              this != null ? this.nativeObj || this : null,
              open_window
            );
          };
          /**
           * 重置所有选项。
           *
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.resetOptions = function() {
            return combo_box_reset_options(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取选项个数。
           *
           *
           * @returns 返回选项个数。
           */
          TComboBox.prototype.countOptions = function() {
            return combo_box_count_options(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 设置第index个选项为当前选中的选项。
           *
           * @param index 选项的索引。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.setSelectedIndex = function(index) {
            return combo_box_set_selected_index(
              this != null ? this.nativeObj || this : null,
              index
            );
          };
          /**
           * 设置是否本地化(翻译)选项。
           *
           * @param localize_options 是否本地化(翻译)选项。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.setLocalizeOptions = function(localize_options) {
            return combo_box_set_localize_options(
              this != null ? this.nativeObj || this : null,
              localize_options
            );
          };
          /**
           * 设置值。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.setValue = function(value) {
            return combo_box_set_value(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置item高度。
           *
           * @param item_height item的高度。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.setItemHeight = function(item_height) {
            return combo_box_set_item_height(
              this != null ? this.nativeObj || this : null,
              item_height
            );
          };
          /**
           * 追加一个选项。
           *
           * @param value 值。
           * @param text 文本。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.appendOption = function(value, text) {
            return combo_box_append_option(
              this != null ? this.nativeObj || this : null,
              value,
              text
            );
          };
          /**
           * 删除选项。
           *
           * @param value 值。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.removeOption = function(value) {
            return combo_box_remove_option(
              this != null ? this.nativeObj || this : null,
              value
            );
          };
          /**
           * 设置选项。
           *
           * @param options 选项。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TComboBox.prototype.setOptions = function(options) {
            return combo_box_set_options(
              this != null ? this.nativeObj || this : null,
              options
            );
          };
          /**
           * 获取combo_box的值。
           *
           *
           * @returns 返回值。
           */
          TComboBox.prototype.getValue = function() {
            return combo_box_get_value(
              this != null ? this.nativeObj || this : null
            );
          };
          /**
           * 获取combo_box的文本。
           *
           *
           * @returns 返回文本。
           */
          TComboBox.prototype.getTextValue = function() {
            return combo_box_get_text(
              this != null ? this.nativeObj || this : null
            );
          };
          Object.defineProperty(TComboBox.prototype, 'openWindow', {
            /**
             * 为点击按钮时，要打开窗口的名称。
             *
             */
            get: function() {
              return combo_box_t_get_prop_open_window(this.nativeObj);
            },
            set: function(v) {
              this.setOpenWindow(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TComboBox.prototype, 'selectedIndex', {
            /**
             * 当前选中的选项。
             *
             */
            get: function() {
              return combo_box_t_get_prop_selected_index(this.nativeObj);
            },
            set: function(v) {
              this.setSelectedIndex(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TComboBox.prototype, 'value', {
            /**
             * 值。
             *
             */
            get: function() {
              return combo_box_t_get_prop_value(this.nativeObj);
            },
            set: function(v) {
              this.setValue(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TComboBox.prototype, 'localizeOptions', {
            /**
             * 是否本地化(翻译)选项(缺省为TRUE)。
             *
             */
            get: function() {
              return combo_box_t_get_prop_localize_options(this.nativeObj);
            },
            set: function(v) {
              this.setLocalizeOptions(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TComboBox.prototype, 'options', {
            /**
             * 设置可选项(冒号分隔值和文本，分号分隔选项，如:1:red;2:green;3:blue)。
             *
             */
            get: function() {
              return combo_box_t_get_prop_options(this.nativeObj);
            },
            set: function(v) {
              this.setOptions(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TComboBox.prototype, 'itemHeight', {
            /**
             * 下拉选项的高度。如果open_window为空，则使用缺省高度。
             *
             */
            get: function() {
              return combo_box_t_get_prop_item_height(this.nativeObj);
            },
            set: function(v) {
              this.setItemHeight(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TComboBox;
        })(TEdit);
        exports.TComboBox = TComboBox;
        /**
         * 图片控件。
         *
         *用来显示一张静态图片，目前支持bmp/png/jpg等格式。
         *
         *如果要显示gif文件，请用[gif\_image](gif_image_t.md)。
         *
         *如果要显示svg文件，请用[svg\_image](svg_image_t.md)。
         *
         *如果需要支持勾选效果，请设置**selectable**属性。
         *
         *如果需要支持点击效果，请设置**clickable**属性。
         *
         *image\_t是[image\_base\_t](image_base_t.md)的子类控件，image\_base\_t的函数均适用于image\_t控件。
         *
         *在xml中使用"image"标签创建图片控件。如：
         *
         *```xml
         *<image style="border" image="earth" draw_type="icon" />
         *```
         *
         *> 更多用法请参考：
         *[image.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/images.xml)
         *
         *在c代码中使用函数image\_create创建图片控件。如：
         *
         *
         *> 创建之后:
         *>
         *> 需要用widget\_set\_image设置图片名称。
         *>
         *> 可以用image\_set\_draw\_type设置图片的绘制方式。
         *
         *> 绘制方式请参考[image\_draw\_type\_t](image_draw_type_t.md)
         *
         *> 绘制方式的属性值和枚举值:
         *[image\_draw\_type\_name\_value](https://github.com/zlgopen/awtk/blob/master/src/base/enums.c#L98)
         *
         *> 完整示例请参考：
         *[image demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/image.c)
         *
         *可用通过style来设置控件的显示风格，如背景和边框等。如：
         *
         *```xml
         *<image>
         *<style name="border">
         *<normal border_color="#000000" bg_color="#e0e0e0" text_color="black"/>
         *</style>
         *</image>
         *```
         *
         *> 更多用法请参考：
         *[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L313)
         *
         */
        var TImage = /** @class */ (function(_super) {
          __extends(TImage, _super);
          function TImage(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建image对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TImage.create = function(parent, x, y, w, h) {
            return new TImage(
              image_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置图片的绘制方式。
           *
           * @param draw_type 绘制方式(仅在没有旋转和缩放时生效)。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TImage.prototype.setDrawType = function(draw_type) {
            return image_set_draw_type(
              this != null ? this.nativeObj || this : null,
              draw_type
            );
          };
          /**
           * 转换为image对象(供脚本语言使用)。
           *
           * @param widget image对象。
           *
           * @returns image对象。
           */
          TImage.cast = function(widget) {
            return new TImage(
              image_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          Object.defineProperty(TImage.prototype, 'drawType', {
            /**
             * 图片的绘制方式(仅在没有旋转和缩放时生效)。
             *
             */
            get: function() {
              return image_t_get_prop_draw_type(this.nativeObj);
            },
            set: function(v) {
              this.setDrawType(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TImage;
        })(TImageBase);
        exports.TImage = TImage;
        /**
         * overlay窗口。
         *
         *overlay窗口有点类似于非模态的dialog，但是它位置和大小是完全自由的，窗口管理器不会对它做任何限制。
         *
         *如果overlay窗口有透明或半透效果，则不支持窗口动画，但可以通过移动窗口位置来实现类似动画的效果。
         *
         *overlay\_t是[window\_base\_t](window_base_t.md)的子类控件，window\_base\_t的函数均适用于overlay\_t控件。
         *
         *在xml中使用"overlay"标签创建窗口。需要指定坐标和大小，可以指定窗体样式和动画名称。如：
         *
         *```xml
         *<overlay theme="basic" x="100" y="100" w="200" h="300">
         *...
         *</overlay>
         *```
         *
         *>
         *更多用法请参考：[overlay.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)
         *
         *在c代码中使用函数overlay\_create创建窗口。如：
         *
         *
         *> 完整示例请参考：[overlay
         *demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/)
         *
         *可用通过style来设置窗口的风格，如背景颜色或图片等。如：
         *
         *```xml
         *<style name="bricks">
         *<normal bg_image="bricks"  bg_image_draw_type="repeat"/>
         *</style>
         *```
         *
         *> 更多用法请参考：[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L0)
         *
         */
        var TOverlay = /** @class */ (function(_super) {
          __extends(TOverlay, _super);
          function TOverlay(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建overlay对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TOverlay.create = function(parent, x, y, w, h) {
            return new TOverlay(
              overlay_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 设置是否启用点击穿透。
           *
           * @param click_through 是否启用点击穿透。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TOverlay.prototype.setClickThrough = function(click_through) {
            return overlay_set_click_through(
              this != null ? this.nativeObj || this : null,
              click_through
            );
          };
          /**
           * 设置是否总是在最上面。
           *
           * @param always_on_top 是否总是在最上面。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TOverlay.prototype.setAlwaysOnTop = function(always_on_top) {
            return overlay_set_always_on_top(
              this != null ? this.nativeObj || this : null,
              always_on_top
            );
          };
          /**
           * 转换为overlay对象(供脚本语言使用)。
           *
           * @param widget overlay对象。
           *
           * @returns overlay对象。
           */
          TOverlay.cast = function(widget) {
            return new TOverlay(
              overlay_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          Object.defineProperty(TOverlay.prototype, 'clickThrough', {
            /**
             * 点击穿透。点击没有子控件的位置，是否穿透到底层窗口。
             *
             *缺省不启用。
             *
             */
            get: function() {
              return overlay_t_get_prop_click_through(this.nativeObj);
            },
            set: function(v) {
              this.setClickThrough(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TOverlay.prototype, 'alwaysOnTop', {
            /**
             * 是否总在最上面。
             *
             *缺省不启用。
             *
             */
            get: function() {
              return overlay_t_get_prop_always_on_top(this.nativeObj);
            },
            set: function(v) {
              this.setAlwaysOnTop(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TOverlay;
        })(TWindowBase);
        exports.TOverlay = TOverlay;
        /**
         * 弹出窗口。
         *
         *弹出窗口是一种特殊的窗口，大小和位置可以自由设置，主要用来实现右键菜单和combo\_box的下列列表等功能。
         *
         *popup\_t是[window\_base\_t](window_base_t.md)的子类控件，window\_base\_t的函数均适用于popup\_t控件。
         *
         *在xml中使用"popup"标签创建弹出窗口。如：
         *
         *```xml
         *<popup close_when_click_outside="true" x="c" y="m" w="80%" h="80"
         *<list_view x="0"  y="0" w="100%" h="100%" item_height="30">
         *<scroll_view name="view" x="0"  y="0" w="-12" h="100%">
         *<combo_box_item tr_text="english"/>
         *<combo_box_item tr_text="chinese" />
         *</scroll_view>
         *<scroll_bar_d name="bar" x="right" y="0" w="12" h="100%" value="0"/>
         *</list_view>
         *</popup>
         *```
         *
         *>
         *更多用法请参考：[popup](https://github.com/zlgopen/awtk/blob/master/design/default/ui/)
         *
         *在c代码中使用函数popup\_create创建弹出窗口。如：
         *
         *
         *> 创建之后，和使用普通窗口是一样的。
         *
         *> 完整示例请参考：[combo_box.c](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/combo_box.c)
         *
         *可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：
         *
         *```xml
         *<popup>
         *<style name="default" border_color="#a0a0a0">
         *<normal bg_color="#f0f0f0"/>
         *</style>
         *</popup>
         *```
         *
         *> 更多用法请参考：[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L324)
         *
         */
        var TPopup = /** @class */ (function(_super) {
          __extends(TPopup, _super);
          function TPopup(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建popup对象。
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns popup对象。
           */
          TPopup.create = function(parent, x, y, w, h) {
            return new TPopup(
              popup_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为popup对象(供脚本语言使用)。
           *
           * @param widget popup对象。
           *
           * @returns popup对象。
           */
          TPopup.cast = function(widget) {
            return new TPopup(
              popup_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          /**
           * 设置点击时是否关闭窗口。
           *
           * @param close_when_click 点击时是否关闭窗口。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TPopup.prototype.setCloseWhenClick = function(close_when_click) {
            return popup_set_close_when_click(
              this != null ? this.nativeObj || this : null,
              close_when_click
            );
          };
          /**
           * 设置点击窗口外部时是否关闭窗口。
           *
           * @param close_when_click_outside 点击窗口外部时是否关闭窗口。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TPopup.prototype.setCloseWhenClickOutside = function(
            close_when_click_outside
          ) {
            return popup_set_close_when_click_outside(
              this != null ? this.nativeObj || this : null,
              close_when_click_outside
            );
          };
          /**
           * 设置超时关闭时间(ms)。
           *
           * @param close_when_timeout 大于0时，为定时器时间(ms)，超时关闭窗口。
           *
           * @returns 返回RET_OK表示成功，否则表示失败。
           */
          TPopup.prototype.setCloseWhenTimeout = function(close_when_timeout) {
            return popup_set_close_when_timeout(
              this != null ? this.nativeObj || this : null,
              close_when_timeout
            );
          };
          Object.defineProperty(TPopup.prototype, 'closeWhenClick', {
            /**
             * 点击时是否关闭窗口。
             *
             */
            get: function() {
              return popup_t_get_prop_close_when_click(this.nativeObj);
            },
            set: function(v) {
              this.setCloseWhenClick(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPopup.prototype, 'closeWhenClickOutside', {
            /**
             * 点击到窗口外时是否关闭窗口。
             *
             */
            get: function() {
              return popup_t_get_prop_close_when_click_outside(this.nativeObj);
            },
            set: function(v) {
              this.setCloseWhenClickOutside(v);
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(TPopup.prototype, 'closeWhenTimeout', {
            /**
             * 超时后自动关闭窗口(ms)。
             *
             */
            get: function() {
              return popup_t_get_prop_close_when_timeout(this.nativeObj);
            },
            set: function(v) {
              this.setCloseWhenTimeout(v);
            },
            enumerable: false,
            configurable: true,
          });
          return TPopup;
        })(TWindowBase);
        exports.TPopup = TPopup;
        /**
         * spinbox控件。
         *
         *一个特殊的数值编辑器，将edit\_t和button\_t进行组合，方便编辑数值。
         *
         *点击向上的按钮将数值增加一个step，点击向下的按钮将数值减小一个step。
         *step的值可以通过step属性进行设置。
         *
         *spin_box\_t是[edit\_t](edit_t.md)的子类控件，edit\_t的函数均适用于spin\_box\_t控件。
         *
         *在xml中使用"spin_box"标签创建spinbox控件。如：
         *
         *```xml
         *<spin_box w="70%" input_type="int" min="-100" max="100" step="5">
         *```
         *
         *>
         *更多用法请参考：[spin_box.xml](https://github.com/zlgopen/awtk/blob/master/design/default/ui/spinbox.xml)
         *
         *在c代码中使用函数spin_box\_create创建spinbox控件。如：
         *
         *
         *> 创建之后:
         *>
         *> 可以用edit相关函数去设置它的各种属性。
         *
         *> 完整示例请参考：[spin_box
         *demo](https://github.com/zlgopen/awtk-c-demos/blob/master/demos/spin_box.c)
         *
         *可用通过style来设置控件的显示风格，如背景和边框等。如：
         *
         *```xml
         *<spin_box>
         *<style name="default" border_color="#a0a0a0"  text_color="black" text_align_h="left">
         *<normal     bg_color="#f0f0f0" />
         *<focused    bg_color="#f0f0f0" border_color="black"/>
         *<disable    bg_color="gray" text_color="#d0d0d0" />
         *<error      bg_color="#f0f0f0" text_color="red" />
         *<empty      bg_color="#f0f0f0" text_color="#a0a0a0" />
         *</style>
         *</spin_box>
         *```
         *
         *> 更多用法请参考：[theme
         *default](https://github.com/zlgopen/awtk/blob/master/design/default/styles/default.xml#L128)
         *
         */
        var TSpinBox = /** @class */ (function(_super) {
          __extends(TSpinBox, _super);
          function TSpinBox(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建spin_box对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TSpinBox.create = function(parent, x, y, w, h) {
            return new TSpinBox(
              spin_box_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为spin_box对象(供脚本语言使用)。
           *
           * @param widget spin_box对象。
           *
           * @returns spin_box对象。
           */
          TSpinBox.cast = function(widget) {
            return new TSpinBox(
              spin_box_cast(widget != null ? widget.nativeObj || widget : null)
            );
          };
          return TSpinBox;
        })(TEdit);
        exports.TSpinBox = TSpinBox;
        /**
         * system\_bar窗口。
         *
         *system\_bar窗口是一种特殊的窗口，独占LCD顶部区域，用来显示当前窗口的标题和关闭按钮等内容。
         *
         *> system\_bar窗口需要在打开第一个应用程序窗口之前打开。
         *
         *system_bar对两个子控件会做特殊处理：
         *
         ** 1.名为"title"的label控件，自动显示当前主窗口的name或text。
         ** 2.名为"close"的button控件，点击之后向当前主窗口发送EVT\_REQUEST\_CLOSE\_WINDOW消息。
         *
         *system\_bar\_t是[window\_base\_t](window_base_t.md)的子类控件，
         *window\_base\_t的函数均适用于system\_bar\_t控件。
         *
         *在xml中使用"system\_bar"标签创建system\_bar窗口。如：
         *
         *```xml
         *<system_bar h="30">
         *<column x="0" y="0" w="-40" h="100%">
         *<label style="title" x="10" y="m" w="55%" h="100%" name="title"/>
         *<digit_clock style="time" x="r" y="m" w="40%" h="100%" format="hh:mm"/>
         *</column>
         *<button style="close" x="r:5" y="m" w="26" h="26" name="close" text="x"/>
         *</system_bar>
         *```
         *
         *> 更多用法请参考：
         *[system_bar](https://github.com/zlgopen/awtk/blob/master/design/default/ui/system_bar.xml)
         *
         *在c代码中使用函数system\_bar\_create创建system\_bar窗口。如：
         *
         *
         *> 创建之后，和使用普通窗口是一样的。
         *
         *可用通过style来设置控件的显示风格，如背景颜色等等。如：
         *
         *```xml
         *<system_bar>
         *<style name="default">
         *<normal bg_color="#a0a0a0"/>
         *</style>
         *</system_bar>
         *```
         *
         *> 更多用法请参考：
         *[system_bar.xml](https://github.com/zlgopen/awtk/blob/master/design/default/styles/system_bar.xml)
         *
         */
        var TSystemBar = /** @class */ (function(_super) {
          __extends(TSystemBar, _super);
          function TSystemBar(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建system_bar对象。
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns system_bar对象。
           */
          TSystemBar.create = function(parent, x, y, w, h) {
            return new TSystemBar(
              system_bar_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          /**
           * 转换为system_bar对象(供脚本语言使用)。
           *
           * @param widget system_bar对象。
           *
           * @returns system_bar对象。
           */
          TSystemBar.cast = function(widget) {
            return new TSystemBar(
              system_bar_cast(
                widget != null ? widget.nativeObj || widget : null
              )
            );
          };
          return TSystemBar;
        })(TWindowBase);
        exports.TSystemBar = TSystemBar;
        /**
         * 可滚动的combo_box控件。
         *
         */
        var TComboBoxEx = /** @class */ (function(_super) {
          __extends(TComboBoxEx, _super);
          function TComboBoxEx(nativeObj) {
            return _super.call(this, nativeObj) || this;
          }
          /**
           * 创建combo_box_ex对象
           *
           * @param parent 父控件
           * @param x x坐标
           * @param y y坐标
           * @param w 宽度
           * @param h 高度
           *
           * @returns 对象。
           */
          TComboBoxEx.create = function(parent, x, y, w, h) {
            return new TComboBoxEx(
              combo_box_ex_create(
                parent != null ? parent.nativeObj || parent : null,
                x,
                y,
                w,
                h
              )
            );
          };
          return TComboBoxEx;
        })(TComboBox);
        exports.TComboBoxEx = TComboBoxEx;
      },
      {},
    ],
    2: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            'use strict';
            Object.defineProperty(exports, '__esModule', { value: true });
            exports.App = exports.app = void 0;
            const React = require('react');
            const awtk = require('awtk-js');
            const backend = require('./backends/index');
            class HistoryItem {
              constructor(component, props) {
                this.component = component;
                this.props = props || {};
              }
            }
            class History {
              constructor() {
                this.root = null;
                this.history = [];
              }
              init(w, h, title) {
                backend.init(w, h, title);
              }
              quit() {
                backend.quit();
                process.exit(0);
              }
              goTo(component, props) {
                props = props || {};
                this.history.push(new HistoryItem(component, props));
                if (this.root) {
                  this.root.forceUpdate();
                }
                return true;
              }
              goBack() {
                let win = this.getTopWindow();
                if (win) {
                  win.back();
                }
                return true;
              }
              goHome() {
                if (this.history.length > 1) {
                  let last = this.history.length - 1;
                  this.history.forEach((iter, index) => {
                    if (index > 0) {
                      let item = this.history[index];
                      if (index === last) {
                        item.native.closeWindow();
                      } else {
                        item.native.closeWindowForce();
                      }
                    }
                  });
                  this.history.length = 1;
                }
                return true;
              }
              closeWindow() {
                let win = this.getTopWindow();
                if (win) {
                  win.closeWindow();
                }
                return true;
              }
              onWindowOpen(native) {
                if (this.history.length > 0) {
                  this.history[this.history.length - 1].native = native;
                  return true;
                } else {
                  throw new Error('history is empty');
                  return false;
                }
              }
              onWindowClose(native) {
                if (this.history.length > 0) {
                  this.history.forEach(function(iter, index, arr) {
                    if (iter.native === native) {
                      console.log(`remove ${native.name} from history`);
                      arr.splice(index, 1);
                    }
                  });
                  if (this.root) {
                    this.root.forceUpdate();
                  }
                }
                return true;
              }
              findWindow(name) {
                let item = this.history.find(function(iter, index, arr) {
                  return iter.native && iter.native.name === name;
                });
                return item ? item.native : null;
              }
              getTopWindow() {
                if (this.history.length > 0) {
                  return this.history[this.history.length - 1].native;
                }
                return null;
              }
              getPrevWindow() {
                if (this.history.length > 1) {
                  return this.history[this.history.length - 2].native;
                }
                return null;
              }
              confirm(title, content) {
                return awtk.TDialog.confirm(title, content) == awtk.TRet.OK;
              }
            }
            exports.app = new History();
            class App extends React.Component {
              constructor(props) {
                super(props);
                exports.app.root = this;
              }
              componentDidMount() {
                console.log('componentDidMount');
              }
              componentDidUpdate(prevProps, prevState, snapshot) {
                console.log('componentDidUpdate');
              }
              componentWillUnmount() {
                console.log('componentWillUnmount');
              }
              render() {
                if (exports.app.history.length > 0) {
                  const current =
                    exports.app.history[exports.app.history.length - 1];
                  const Page = current.component;
                  return React.createElement(
                    Page,
                    Object.assign({}, current.props)
                  );
                } else {
                  if (this.props.children) {
                    return this.props.children;
                  } else {
                    exports.app.quit();
                  }
                }
              }
            }
            exports.App = App;
          }.call(this));
        }.call(this, require('_process')));
      },
      { './backends/index': 5, _process: 112, 'awtk-js': 1, react: 131 },
    ],
    3: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.getCreateWidget = void 0;
        const awtk = require('awtk-js');
        let widgetFactory = new Map([
          ['RADIOBUTTON', awtk.TCheckButton.createRadio],
          ['CANVASWIDGET', awtk.TCanvasWidget.create],
          ['COLORCOMPONENT', awtk.TColorComponent.create],
          ['COLORPICKER', awtk.TColorPicker.create],
          ['DRAGGABLE', awtk.TDraggable.create],
          ['FILEBROWSERVIEW', awtk.TFileBrowserView.create],
          ['GAUGEPOINTER', awtk.TGaugePointer.create],
          ['GAUGE', awtk.TGauge.create],
          ['IMAGEANIMATION', awtk.TImageAnimation.create],
          ['IMAGEVALUE', awtk.TImageValue.create],
          ['CANDIDATES', awtk.TCandidates.create],
          ['LANGINDICATOR', awtk.TLangIndicator.create],
          ['LINENUMBER', awtk.TLineNumber.create],
          ['MLEDIT', awtk.TMledit.create],
          ['PROGRESSCIRCLE', awtk.TProgressCircle.create],
          ['RICHTEXTVIEW', awtk.TRichTextView.create],
          ['RICHTEXT', awtk.TRichText.create],
          ['HSCROLLLABEL', awtk.THscrollLabel.create],
          ['LISTITEM', awtk.TListItem.create],
          ['LISTVIEWH', awtk.TListViewH.create],
          ['LISTVIEW', awtk.TListView.create],
          ['SCROLLBAR', awtk.TScrollBar.create],
          ['SCROLLVIEW', awtk.TScrollView.create],
          ['SLIDEMENU', awtk.TSlideMenu.create],
          ['SLIDEINDICATOR', awtk.TSlideIndicator.create],
          ['SLIDEVIEW', awtk.TSlideView.create],
          ['SWITCH', awtk.TSwitch.create],
          ['TEXTSELECTOR', awtk.TTextSelector.create],
          ['TIMECLOCK', awtk.TTimeClock.create],
          ['VPAGE', awtk.TVpage.create],
          ['APPBAR', awtk.TAppBar.create],
          ['BUTTONGROUP', awtk.TButtonGroup.create],
          ['BUTTON', awtk.TButton.create],
          ['CHECKBUTTON', awtk.TCheckButton.create],
          ['CLIPVIEW', awtk.TClipView.create],
          ['COLORTILE', awtk.TColorTile.create],
          ['COLUMN', awtk.TColumn.create],
          ['COMBOBOXITEM', awtk.TComboBoxItem.create],
          ['DIALOGCLIENT', awtk.TDialogClient.create],
          ['DIALOGTITLE', awtk.TDialogTitle.create],
          ['DIGITCLOCK', awtk.TDigitClock.create],
          ['DRAGGER', awtk.TDragger.create],
          ['EDIT', awtk.TEdit.create],
          ['GRIDITEM', awtk.TGridItem.create],
          ['GRID', awtk.TGrid.create],
          ['GROUPBOX', awtk.TGroupBox.create],
          ['LABEL', awtk.TLabel.create],
          ['PAGES', awtk.TPages.create],
          ['PROGRESSBAR', awtk.TProgressBar.create],
          ['ROW', awtk.TRow.create],
          ['SLIDER', awtk.TSlider.create],
          ['TABBUTTONGROUP', awtk.TTabButtonGroup.create],
          ['TABBUTTON', awtk.TTabButton.create],
          ['TABCONTROL', awtk.TTabControl.create],
          ['VIEW', awtk.TView.create],
          ['DIALOG', awtk.TDialog.create],
          ['WINDOW', awtk.TWindow.create],
          ['GIFIMAGE', awtk.TGifImage.create],
          ['KEYBOARD', awtk.TKeyboard.create],
          ['MUTABLEIMAGE', awtk.TMutableImage.create],
          ['SVGIMAGE', awtk.TSvgImage.create],
          ['CALIBRATIONWIN', awtk.TCalibrationWin.create],
          ['COMBOBOX', awtk.TComboBox.create],
          ['IMAGE', awtk.TImage.create],
          ['OVERLAY', awtk.TOverlay.create],
          ['POPUP', awtk.TPopup.create],
          ['SPINBOX', awtk.TSpinBox.create],
          ['SYSTEMBAR', awtk.TSystemBar.create],
          ['COMBOBOXEX', awtk.TComboBoxEx.create],
        ]);
        function getCreateWidget(type) {
          let create = widgetFactory.get(type);
          if (create) {
            return create;
          } else {
            console.log('not found create for ' + type);
            return awtk.TView.create;
          }
        }
        exports.getCreateWidget = getCreateWidget;
      },
      { 'awtk-js': 1 },
    ],
    4: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.TWidgetWrapper = exports.TextElement = exports.BaseElement = exports.desktopSize = exports.quit = exports.init = void 0;
        const App_1 = require('../App');
        const awtk = require('awtk-js');
        const WidgetFactory_1 = require('./WidgetFactory');
        function init(w, h, title) {
          awtk.init(w || 320, h || 480, title || 'Hello-AWTK', true);
          //enable system bar
          let win = awtk.TWindow.open('system_bar');
          let close = win.lookup('close', true);
          //rename close button to prevent default action
          close.setName('back');
          close.on(
            awtk.TEventType.CLICK,
            evt => {
              console.log('back button on systembar is clicked');
              App_1.app.goBack();
              return awtk.TRet.STOP;
            },
            null
          );
        }
        exports.init = init;
        function quit() {
          awtk.TGlobal.quit();
        }
        exports.quit = quit;
        let eventMap = new Map([
          ['on_click', awtk.TEventType.CLICK],
          ['on_pointer_down', awtk.TEventType.POINTER_DOWN],
          ['on_pointer_move', awtk.TEventType.POINTER_MOVE],
          ['on_pointer_up', awtk.TEventType.POINTER_UP],
          ['on_key_down', awtk.TEventType.KEY_DOWN],
          ['on_key_up', awtk.TEventType.KEY_UP],
          ['on_changed', awtk.TEventType.VALUE_CHANGED],
          ['on_changing', awtk.TEventType.VALUE_CHANGING],
          ['on_window_open', awtk.TEventType.WINDOW_OPEN],
          ['on_window_will_open', awtk.TEventType.WINDOW_WILL_OPEN],
          ['on_request_close_window', awtk.TEventType.REQUEST_CLOSE_WINDOW],
          ['on_window_close', awtk.TEventType.WINDOW_CLOSE],
        ]);
        function fixPropName(str) {
          let name = str.replace(
            /[A-Z]/g,
            letter => `_${letter.toLowerCase()}`
          );
          return name;
        }
        function isUnsignedInteger(a) {
          let n = parseInt(a, 10);
          let s = n.toString();
          return n >= 0 && s == a.toString();
        }
        function desktopSize() {
          return { w: 320, h: 480 };
        }
        exports.desktopSize = desktopSize;
        class BaseElement {
          hasMouseTracking() {}
          setMouseTracking(v) {}
          setStyleSheet(obj) {
            let o = obj;
            let element = this.element;
            this.updateSelfLayout(obj);
            for (let prop in o) {
              let value = o[prop];
              let name = fixPropName(prop);
              if (name === 'font_size') {
                element.setStyleInt(name, parseInt(value, 10));
              } else if (name === 'text_color') {
                element.setStyleStr(name, value);
              }
            }
          }
          updateSelfLayout(payload) {
            let element = this.element;
            let x = element.x;
            let y = element.y;
            let w = element.w;
            let h = element.h;
            for (let prop in payload) {
              let value = payload[prop];
              if (prop === 'x' || prop === 'left') {
                x = value;
              } else if (prop === 'y' || prop === 'top') {
                y = value;
              } else if (prop === 'w' || prop === 'width') {
                w = value;
              } else if (prop === 'h' || prop === 'height') {
                h = value;
              }
            }
            if (
              x === element.x &&
              y === element.y &&
              w === element.w &&
              h === element.h
            ) {
              return;
            }
            let selfLayout = 'default(';
            if (isUnsignedInteger(x) && isUnsignedInteger(y)) {
              element.move(+x, +y);
            } else {
              selfLayout += `x=${x}, y=${y},`;
            }
            if (isUnsignedInteger(w) && isUnsignedInteger(h)) {
              element.resize(+w, +h);
            } else {
              selfLayout += `w=${w}, h=${h}`;
            }
            selfLayout += ')';
            if (selfLayout !== 'default()') {
              element.setSelfLayout(selfLayout);
              console.log(selfLayout);
            }
            console.log(element.x, element.y, element.w, element.h);
          }
          isUnsignedInteger(x) {
            throw new Error('Method not implemented.');
          }
          updateProps(payload) {
            let element = this.element;
            this.updateSelfLayout(payload);
            let props = [];
            let valueProp = null;
            for (let name in payload) {
              let prop = { name: fixPropName(name), value: payload[name] };
              if (name === 'value') {
                valueProp = prop;
              } else {
                props.push(prop);
              }
            }
            //keep the value be the last prop
            if (valueProp) {
              props.push(valueProp);
            }
            props.forEach(iter => {
              const name = iter.name;
              const value = iter.value;
              if (name === 'style' && typeof value !== 'string') {
                this.setStyleSheet(value);
              } else if (typeof value === 'function') {
                let etype = eventMap.get(name);
                if (etype) {
                  let obj = this;
                  if (!obj[name]) {
                    element.on(
                      etype,
                      evt => {
                        let e = awtk.TEvent.cast(evt);
                        let func = obj[name];
                        return func(element, e);
                      },
                      null
                    );
                  }
                  obj[name] = value;
                } else {
                  console.log(`not supported event type: ${name}`);
                }
              } else if (name === 'x' || name === 'left') {
              } else if (name === 'y' || name === 'top') {
              } else if (name === 'w' || name === 'width') {
              } else if (name === 'h' || name === 'height') {
              } else if (typeof value === 'string') {
                element.setPropStr(name, value);
              } else if (typeof value === 'number') {
                element.setPropInt(name, +value);
              } else if (typeof value === 'boolean') {
                element.setPropBool(name, value);
              }
            });
          }
          setParent(elem) {
            //console.log("Set parent", this.element, elem.element);
            if (elem.element) {
              elem.element.addChild(this.element);
            }
          }
          del() {
            if (this.element.isWindow()) {
              console.log(`keep window ${this.element.name}`);
            } else {
              this.element.destroy();
            }
          }
          resize(width, height) {
            this.element.resize(width, height);
          }
          move(left, top) {
            this.element.move(left, top);
          }
          minSize() {
            return { w: this.element.w, h: this.element.h };
          }
          show() {
            this.element.setVisible(true);
          }
          close() {
            this.element.destroy();
          }
          width() {
            return this.element.w;
          }
          height() {
            return this.element.h;
          }
        }
        exports.BaseElement = BaseElement;
        function nullTWidget() {
          return null;
        }
        class TextElement extends BaseElement {
          constructor() {
            super();
            this.element = awtk.TLabel.create(nullTWidget(), 0, 0, 100, 30);
          }
          setText(text) {
            const json = JSON.parse(text);
            const fontSize = json.style.fontSize || 0;
            if (fontSize > 0) {
              this.element.setStyleInt('normal:font_size', fontSize);
            }
            const textColor = json.style.color;
            if (textColor) {
              this.element.setStyleStr('normal:text_color', textColor);
            }
            this.element.setText(json.text);
          }
        }
        exports.TextElement = TextElement;
        const windowTags = ['WINDOW', 'OVERLAY', 'DIALOG', 'POPUP'];
        class TWidgetWrapper extends BaseElement {
          constructor() {
            super();
          }
          init(type, props) {
            let exist = false;
            const prevWindow = App_1.app.getPrevWindow();
            const create = WidgetFactory_1.getCreateWidget(type);
            const closeCurrent = props.closeCurrent || false;
            const isWindow = windowTags.indexOf(type) !== -1;
            const name = props.name;
            if (isWindow) {
              if (!name) {
                throw new Error('Window must have a unique name');
              }
              let win = App_1.app.findWindow(name);
              if (win) {
                console.log(`Window ${name} exist, reuse it`);
                this.element = win;
                win.destroyChildren();
                exist = true;
              }
            }
            if (!this.element) {
              this.element = create(nullTWidget(), 0, 0, 80, 32);
            }
            let element = this.element;
            if (isWindow && !exist) {
              element.on(
                awtk.TEventType.WINDOW_CLOSE,
                () => {
                  console.log(`${element.name} is closed`);
                  App_1.app.onWindowClose(element);
                  return awtk.TRet.REMOVE;
                },
                0
              );
              element.on(
                awtk.TEventType.WINDOW_OPEN,
                () => {
                  console.log(`${element.name} is open`);
                  if (prevWindow && closeCurrent) {
                    prevWindow.closeWindowForce();
                    console.log(
                      `closeCurrent is true, close ${prevWindow.name}`
                    );
                  }
                  App_1.app.onWindowOpen(element);
                  return awtk.TRet.REMOVE;
                },
                0
              );
            }
          }
          getClosed() {
            return this.element.isWindowOpened();
          }
        }
        exports.TWidgetWrapper = TWidgetWrapper;
      },
      { '../App': 2, './WidgetFactory': 3, 'awtk-js': 1 },
    ],
    5: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var awtk_1 = require('./awtk');
        Object.defineProperty(exports, 'BaseElement', {
          enumerable: true,
          get: function() {
            return awtk_1.BaseElement;
          },
        });
        Object.defineProperty(exports, 'TWidgetWrapper', {
          enumerable: true,
          get: function() {
            return awtk_1.TWidgetWrapper;
          },
        });
        Object.defineProperty(exports, 'TextElement', {
          enumerable: true,
          get: function() {
            return awtk_1.TextElement;
          },
        });
        Object.defineProperty(exports, 'init', {
          enumerable: true,
          get: function() {
            return awtk_1.init;
          },
        });
        Object.defineProperty(exports, 'quit', {
          enumerable: true,
          get: function() {
            return awtk_1.quit;
          },
        });
      },
      { './awtk': 4 },
    ],
    6: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const Container_1 = require('./Container');
        const backend = require('../backends/index');
        exports.default = (type, p) => {
          const TWidgetWrapper = backend.TWidgetWrapper;
          const element = new TWidgetWrapper();
          let props = { ...p };
          const containerProps = Container_1.Container(
            child => {
              child.element.setParent(element);
            },
            child => {
              child.element.del();
            },
            (child, i) => {
              child.element.setParent(element);
            }
          );
          function updateProps(changes) {
            element.updateProps(changes);
          }
          element.init(type, props);
          updateProps(props);
          return {
            ...containerProps,
            element,
            updateProps,
          };
        };
      },
      { '../backends/index': 5, './Container': 22 },
    ],
    7: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('APPBAR', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    8: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('BUTTON', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    9: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('BUTTONGROUP', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    10: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('CALIBRATIONWIN', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    11: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('CANDIDATES', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    12: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('CANVASWIDGET', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    13: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('CHECKBUTTON', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    14: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('CLIPVIEW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    15: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('COLORCOMPONENT', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    16: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('COLORPICKER', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    17: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('COLORTILE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    18: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('COLUMN', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    19: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('COMBOBOX', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    20: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('COMBOBOXEX', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    21: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('COMBOBOXITEM', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    22: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.Container = void 0;
        exports.Container = (addChild, deleteChild, inChild = addChild) => {
          const children = [];
          const appendChild = child => {
            children.push(child);
            addChild(child);
            //if (child.element) child.element.show();
          };
          const insertChild = (child, beforeChild) => {
            if (!children.includes(beforeChild)) {
              throw new Error(`Relative element does not exist`);
            }
            const i = children.indexOf(beforeChild);
            children.splice(i, 0, child);
            inChild(child, i, beforeChild);
            //if (child.element) child.element.show();
          };
          const removeChild = child => {
            if (!children.includes(child)) {
              throw new Error(`Can't remove a child that's not added`);
            }
            const i = children.indexOf(child);
            children.splice(i, 1);
            deleteChild(child);
          };
          return {
            appendChild,
            insertChild,
            removeChild,
            children,
          };
        };
      },
      {},
    ],
    23: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('DIALOG', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    24: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('DIALOGCLIENT', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    25: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('DIALOGTITLE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    26: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('DIGITCLOCK', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    27: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('DRAGGABLE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    28: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('DRAGGER', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    29: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('EDIT', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    30: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('FILEBROWSERVIEW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    31: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('GAUGE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    32: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('GAUGEPOINTER', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    33: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('GIFIMAGE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    34: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('GRID', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    35: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('GRIDITEM', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    36: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('GROUPBOX', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    37: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('HSCROLLLABEL', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    38: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('IMAGE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    39: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('IMAGEANIMATION', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    40: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('IMAGEVALUE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    41: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('KEYBOARD', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    42: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('LABEL', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    43: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('LANGINDICATOR', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    44: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('LINENUMBER', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    45: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('LISTITEM', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    46: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('LISTVIEW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    47: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('LISTVIEWH', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    48: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('MLEDIT', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    49: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('MUTABLEIMAGE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    50: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('OVERLAY', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    51: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('PAGES', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    52: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('POPUP', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    53: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('PROGRESSBAR', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    54: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('PROGRESSCIRCLE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    55: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('RADIOBUTTON', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    56: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('RICHTEXT', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    57: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('RICHTEXTVIEW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    58: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const Container_1 = require('./Container');
        exports.default = props => {
          const containerProps = Container_1.Container(
            () => {},
            () => {}
          );
          const afterCommit = host => {};
          return {
            ...containerProps,
            afterCommit,
          };
        };
      },
      { './Container': 22 },
    ],
    59: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const TextFuncs_1 = require('./TextFuncs');
        const Backend = require('../backends/index');
        exports.default = p => {
          const TextElement = Backend.TextElement;
          const element = new TextElement();
          let props = { ...p };
          const styleProp = { s: props.style };
          function updateProps(changes) {
            element.updateProps(changes);
          }
          const textProps = TextFuncs_1.TextFuncs(text => {
            element.setText(text);
          }, styleProp.s || {});
          updateProps(props);
          return {
            ...textProps,
            element,
            updateProps,
            type: 'fullText',
          };
        };
      },
      { '../backends/index': 5, './TextFuncs': 74 },
    ],
    60: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('ROW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    61: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SCROLLBAR', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    62: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SCROLLVIEW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    63: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SLIDEINDICATOR', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    64: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SLIDEMENU', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    65: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SLIDEVIEW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    66: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SLIDER', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    67: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SPINBOX', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    68: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SVGIMAGE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    69: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SWITCH', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    70: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('SYSTEMBAR', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    71: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('TABBUTTON', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    72: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('TABBUTTONGROUP', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    73: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('TABCONTROL', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    74: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.TextFuncs = void 0;
        exports.TextFuncs = (upText, styleProp) => {
          const children = [];
          const text = [''];
          const updateText = () => {
            const childText = [];
            for (let i = 0; i < children.length; i++) {
              childText.push(children[i].text);
            }
            const str = {
              style: styleProp,
              text: childText.join(''),
            };
            upText(JSON.stringify(str));
          };
          const appendChild = child => {
            if (child.type != 'text' && child.type !== 'fullText') {
              throw new Error(
                `Can't add a child to Text that isn't a string or Text`
              );
            }
            children.push(child);
            updateText();
          };
          const insertChild = (child, beforeChild) => {
            if (child.type !== 'text' && child.type !== 'fullText') {
              throw new Error(
                `Can't add a child to Text that isn't a string or Text`
              );
            }
            if (!children.includes(beforeChild)) {
              throw new Error(`Relative element does not exist`);
            }
            const i = children.indexOf(beforeChild);
            children.splice(i, 0, child);
            updateText();
          };
          const removeChild = child => {
            if (!children.includes(child)) {
              throw new Error(`Can't remove a child that's not added`);
            }
            const i = children.indexOf(child);
            children.splice(i, 1);
            updateText();
          };
          return {
            appendChild,
            insertChild,
            removeChild,
            children,
            updateText,
            text,
          };
        };
      },
      {},
    ],
    75: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('TEXTSELECTOR', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    76: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('TIMECLOCK', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    77: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('VIEW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    78: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('VPAGE', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    79: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const AnyWidget_1 = require('./AnyWidget');
        exports.default = p => {
          return AnyWidget_1.default('WINDOW', p);
        };
      },
      { './AnyWidget': 6 },
    ],
    80: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.RadioButton = exports.ComboBoxEx = exports.SystemBar = exports.SpinBox = exports.Popup = exports.Overlay = exports.Image = exports.ComboBox = exports.CalibrationWin = exports.SvgImage = exports.MutableImage = exports.Keyboard = exports.GifImage = exports.Window = exports.Dialog = exports.View = exports.TabControl = exports.TabButton = exports.TabButtonGroup = exports.Slider = exports.Row = exports.ProgressBar = exports.Pages = exports.Label = exports.GroupBox = exports.Grid = exports.GridItem = exports.Edit = exports.Dragger = exports.DigitClock = exports.DialogTitle = exports.DialogClient = exports.ComboBoxItem = exports.Column = exports.ColorTile = exports.ClipView = exports.CheckButton = exports.Button = exports.ButtonGroup = exports.AppBar = exports.Vpage = exports.TimeClock = exports.TextSelector = exports.Switch = exports.SlideView = exports.SlideIndicator = exports.SlideMenu = exports.ScrollView = exports.ScrollBar = exports.ListView = exports.ListViewH = exports.ListItem = exports.HscrollLabel = exports.RichText = exports.RichTextView = exports.ProgressCircle = exports.Mledit = exports.LineNumber = exports.LangIndicator = exports.Candidates = exports.ImageValue = exports.ImageAnimation = exports.Gauge = exports.GaugePointer = exports.FileBrowserView = exports.Draggable = exports.ColorPicker = exports.ColorComponent = exports.CanvasWidget = exports.RootText = exports.Root = void 0;
        const Root_1 = require('./Root');
        exports.Root = Root_1.default;
        const RootText_1 = require('./RootText');
        exports.RootText = RootText_1.default;
        const CanvasWidget_1 = require('./CanvasWidget');
        exports.CanvasWidget = CanvasWidget_1.default;
        const ColorComponent_1 = require('./ColorComponent');
        exports.ColorComponent = ColorComponent_1.default;
        const ColorPicker_1 = require('./ColorPicker');
        exports.ColorPicker = ColorPicker_1.default;
        const Draggable_1 = require('./Draggable');
        exports.Draggable = Draggable_1.default;
        const FileBrowserView_1 = require('./FileBrowserView');
        exports.FileBrowserView = FileBrowserView_1.default;
        const GaugePointer_1 = require('./GaugePointer');
        exports.GaugePointer = GaugePointer_1.default;
        const Gauge_1 = require('./Gauge');
        exports.Gauge = Gauge_1.default;
        const ImageAnimation_1 = require('./ImageAnimation');
        exports.ImageAnimation = ImageAnimation_1.default;
        const ImageValue_1 = require('./ImageValue');
        exports.ImageValue = ImageValue_1.default;
        const Candidates_1 = require('./Candidates');
        exports.Candidates = Candidates_1.default;
        const LangIndicator_1 = require('./LangIndicator');
        exports.LangIndicator = LangIndicator_1.default;
        const LineNumber_1 = require('./LineNumber');
        exports.LineNumber = LineNumber_1.default;
        const Mledit_1 = require('./Mledit');
        exports.Mledit = Mledit_1.default;
        const ProgressCircle_1 = require('./ProgressCircle');
        exports.ProgressCircle = ProgressCircle_1.default;
        const RichTextView_1 = require('./RichTextView');
        exports.RichTextView = RichTextView_1.default;
        const RichText_1 = require('./RichText');
        exports.RichText = RichText_1.default;
        const HscrollLabel_1 = require('./HscrollLabel');
        exports.HscrollLabel = HscrollLabel_1.default;
        const ListItem_1 = require('./ListItem');
        exports.ListItem = ListItem_1.default;
        const ListViewH_1 = require('./ListViewH');
        exports.ListViewH = ListViewH_1.default;
        const ListView_1 = require('./ListView');
        exports.ListView = ListView_1.default;
        const ScrollBar_1 = require('./ScrollBar');
        exports.ScrollBar = ScrollBar_1.default;
        const ScrollView_1 = require('./ScrollView');
        exports.ScrollView = ScrollView_1.default;
        const SlideMenu_1 = require('./SlideMenu');
        exports.SlideMenu = SlideMenu_1.default;
        const SlideIndicator_1 = require('./SlideIndicator');
        exports.SlideIndicator = SlideIndicator_1.default;
        const SlideView_1 = require('./SlideView');
        exports.SlideView = SlideView_1.default;
        const Switch_1 = require('./Switch');
        exports.Switch = Switch_1.default;
        const TextSelector_1 = require('./TextSelector');
        exports.TextSelector = TextSelector_1.default;
        const TimeClock_1 = require('./TimeClock');
        exports.TimeClock = TimeClock_1.default;
        const Vpage_1 = require('./Vpage');
        exports.Vpage = Vpage_1.default;
        const AppBar_1 = require('./AppBar');
        exports.AppBar = AppBar_1.default;
        const ButtonGroup_1 = require('./ButtonGroup');
        exports.ButtonGroup = ButtonGroup_1.default;
        const Button_1 = require('./Button');
        exports.Button = Button_1.default;
        const CheckButton_1 = require('./CheckButton');
        exports.CheckButton = CheckButton_1.default;
        const ClipView_1 = require('./ClipView');
        exports.ClipView = ClipView_1.default;
        const ColorTile_1 = require('./ColorTile');
        exports.ColorTile = ColorTile_1.default;
        const Column_1 = require('./Column');
        exports.Column = Column_1.default;
        const ComboBoxItem_1 = require('./ComboBoxItem');
        exports.ComboBoxItem = ComboBoxItem_1.default;
        const DialogClient_1 = require('./DialogClient');
        exports.DialogClient = DialogClient_1.default;
        const DialogTitle_1 = require('./DialogTitle');
        exports.DialogTitle = DialogTitle_1.default;
        const DigitClock_1 = require('./DigitClock');
        exports.DigitClock = DigitClock_1.default;
        const Dragger_1 = require('./Dragger');
        exports.Dragger = Dragger_1.default;
        const Edit_1 = require('./Edit');
        exports.Edit = Edit_1.default;
        const GridItem_1 = require('./GridItem');
        exports.GridItem = GridItem_1.default;
        const Grid_1 = require('./Grid');
        exports.Grid = Grid_1.default;
        const GroupBox_1 = require('./GroupBox');
        exports.GroupBox = GroupBox_1.default;
        const Label_1 = require('./Label');
        exports.Label = Label_1.default;
        const Pages_1 = require('./Pages');
        exports.Pages = Pages_1.default;
        const ProgressBar_1 = require('./ProgressBar');
        exports.ProgressBar = ProgressBar_1.default;
        const Row_1 = require('./Row');
        exports.Row = Row_1.default;
        const Slider_1 = require('./Slider');
        exports.Slider = Slider_1.default;
        const TabButtonGroup_1 = require('./TabButtonGroup');
        exports.TabButtonGroup = TabButtonGroup_1.default;
        const TabButton_1 = require('./TabButton');
        exports.TabButton = TabButton_1.default;
        const TabControl_1 = require('./TabControl');
        exports.TabControl = TabControl_1.default;
        const View_1 = require('./View');
        exports.View = View_1.default;
        const Dialog_1 = require('./Dialog');
        exports.Dialog = Dialog_1.default;
        const Window_1 = require('./Window');
        exports.Window = Window_1.default;
        const GifImage_1 = require('./GifImage');
        exports.GifImage = GifImage_1.default;
        const Keyboard_1 = require('./Keyboard');
        exports.Keyboard = Keyboard_1.default;
        const MutableImage_1 = require('./MutableImage');
        exports.MutableImage = MutableImage_1.default;
        const SvgImage_1 = require('./SvgImage');
        exports.SvgImage = SvgImage_1.default;
        const CalibrationWin_1 = require('./CalibrationWin');
        exports.CalibrationWin = CalibrationWin_1.default;
        const ComboBox_1 = require('./ComboBox');
        exports.ComboBox = ComboBox_1.default;
        const Image_1 = require('./Image');
        exports.Image = Image_1.default;
        const Overlay_1 = require('./Overlay');
        exports.Overlay = Overlay_1.default;
        const Popup_1 = require('./Popup');
        exports.Popup = Popup_1.default;
        const SpinBox_1 = require('./SpinBox');
        exports.SpinBox = SpinBox_1.default;
        const SystemBar_1 = require('./SystemBar');
        exports.SystemBar = SystemBar_1.default;
        const ComboBoxEx_1 = require('./ComboBoxEx');
        exports.ComboBoxEx = ComboBoxEx_1.default;
        const RadioButton_1 = require('./RadioButton');
        exports.RadioButton = RadioButton_1.default;
      },
      {
        './AppBar': 7,
        './Button': 8,
        './ButtonGroup': 9,
        './CalibrationWin': 10,
        './Candidates': 11,
        './CanvasWidget': 12,
        './CheckButton': 13,
        './ClipView': 14,
        './ColorComponent': 15,
        './ColorPicker': 16,
        './ColorTile': 17,
        './Column': 18,
        './ComboBox': 19,
        './ComboBoxEx': 20,
        './ComboBoxItem': 21,
        './Dialog': 23,
        './DialogClient': 24,
        './DialogTitle': 25,
        './DigitClock': 26,
        './Draggable': 27,
        './Dragger': 28,
        './Edit': 29,
        './FileBrowserView': 30,
        './Gauge': 31,
        './GaugePointer': 32,
        './GifImage': 33,
        './Grid': 34,
        './GridItem': 35,
        './GroupBox': 36,
        './HscrollLabel': 37,
        './Image': 38,
        './ImageAnimation': 39,
        './ImageValue': 40,
        './Keyboard': 41,
        './Label': 42,
        './LangIndicator': 43,
        './LineNumber': 44,
        './ListItem': 45,
        './ListView': 46,
        './ListViewH': 47,
        './Mledit': 48,
        './MutableImage': 49,
        './Overlay': 50,
        './Pages': 51,
        './Popup': 52,
        './ProgressBar': 53,
        './ProgressCircle': 54,
        './RadioButton': 55,
        './RichText': 56,
        './RichTextView': 57,
        './Root': 58,
        './RootText': 59,
        './Row': 60,
        './ScrollBar': 61,
        './ScrollView': 62,
        './SlideIndicator': 63,
        './SlideMenu': 64,
        './SlideView': 65,
        './Slider': 66,
        './SpinBox': 67,
        './SvgImage': 68,
        './Switch': 69,
        './SystemBar': 70,
        './TabButton': 71,
        './TabButtonGroup': 72,
        './TabControl': 73,
        './TextSelector': 75,
        './TimeClock': 76,
        './View': 77,
        './Vpage': 78,
        './Window': 79,
      },
    ],
    81: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.RadioButton = exports.ComboBoxEx = exports.SystemBar = exports.SpinBox = exports.Popup = exports.Overlay = exports.Image = exports.ComboBox = exports.CalibrationWin = exports.SvgImage = exports.MutableImage = exports.Keyboard = exports.GifImage = exports.Window = exports.Dialog = exports.View = exports.TabControl = exports.TabButton = exports.TabButtonGroup = exports.Slider = exports.Row = exports.ProgressBar = exports.Pages = exports.Label = exports.GroupBox = exports.Grid = exports.GridItem = exports.Edit = exports.Dragger = exports.DigitClock = exports.DialogTitle = exports.DialogClient = exports.ComboBoxItem = exports.Column = exports.ColorTile = exports.ClipView = exports.CheckButton = exports.Button = exports.ButtonGroup = exports.AppBar = exports.Vpage = exports.TimeClock = exports.TextSelector = exports.Switch = exports.SlideView = exports.SlideIndicator = exports.SlideMenu = exports.ScrollView = exports.ScrollBar = exports.ListView = exports.ListViewH = exports.ListItem = exports.HscrollLabel = exports.RichText = exports.RichTextView = exports.ProgressCircle = exports.Mledit = exports.LineNumber = exports.LangIndicator = exports.Candidates = exports.ImageValue = exports.ImageAnimation = exports.Gauge = exports.GaugePointer = exports.FileBrowserView = exports.Draggable = exports.ColorPicker = exports.ColorComponent = exports.CanvasWidget = exports.VirtualText = exports.AppRegistry = exports.RootText = exports.Text = exports.App = exports.app = void 0;
        const render_1 = require('./render');
        exports.AppRegistry = render_1.default;
        const App_1 = require('./App');
        Object.defineProperty(exports, 'app', {
          enumerable: true,
          get: function() {
            return App_1.app;
          },
        });
        Object.defineProperty(exports, 'App', {
          enumerable: true,
          get: function() {
            return App_1.App;
          },
        });
        const react_components_1 = require('./react-components');
        Object.defineProperty(exports, 'Text', {
          enumerable: true,
          get: function() {
            return react_components_1.Text;
          },
        });
        const RootText = 'ROOTTEXT';
        exports.RootText = RootText;
        const VirtualText = 'VIRTUALTEXT';
        exports.VirtualText = VirtualText;
        const CanvasWidget = 'CANVASWIDGET';
        exports.CanvasWidget = CanvasWidget;
        const ColorComponent = 'COLORCOMPONENT';
        exports.ColorComponent = ColorComponent;
        const ColorPicker = 'COLORPICKER';
        exports.ColorPicker = ColorPicker;
        const Draggable = 'DRAGGABLE';
        exports.Draggable = Draggable;
        const FileBrowserView = 'FILEBROWSERVIEW';
        exports.FileBrowserView = FileBrowserView;
        const GaugePointer = 'GAUGEPOINTER';
        exports.GaugePointer = GaugePointer;
        const Gauge = 'GAUGE';
        exports.Gauge = Gauge;
        const ImageAnimation = 'IMAGEANIMATION';
        exports.ImageAnimation = ImageAnimation;
        const ImageValue = 'IMAGEVALUE';
        exports.ImageValue = ImageValue;
        const Candidates = 'CANDIDATES';
        exports.Candidates = Candidates;
        const LangIndicator = 'LANGINDICATOR';
        exports.LangIndicator = LangIndicator;
        const LineNumber = 'LINENUMBER';
        exports.LineNumber = LineNumber;
        const Mledit = 'MLEDIT';
        exports.Mledit = Mledit;
        const ProgressCircle = 'PROGRESSCIRCLE';
        exports.ProgressCircle = ProgressCircle;
        const RichTextView = 'RICHTEXTVIEW';
        exports.RichTextView = RichTextView;
        const RichText = 'RICHTEXT';
        exports.RichText = RichText;
        const HscrollLabel = 'HSCROLLLABEL';
        exports.HscrollLabel = HscrollLabel;
        const ListItem = 'LISTITEM';
        exports.ListItem = ListItem;
        const ListViewH = 'LISTVIEWH';
        exports.ListViewH = ListViewH;
        const ListView = 'LISTVIEW';
        exports.ListView = ListView;
        const ScrollBar = 'SCROLLBAR';
        exports.ScrollBar = ScrollBar;
        const ScrollView = 'SCROLLVIEW';
        exports.ScrollView = ScrollView;
        const SlideMenu = 'SLIDEMENU';
        exports.SlideMenu = SlideMenu;
        const SlideIndicator = 'SLIDEINDICATOR';
        exports.SlideIndicator = SlideIndicator;
        const SlideView = 'SLIDEVIEW';
        exports.SlideView = SlideView;
        const Switch = 'SWITCH';
        exports.Switch = Switch;
        const TextSelector = 'TEXTSELECTOR';
        exports.TextSelector = TextSelector;
        const TimeClock = 'TIMECLOCK';
        exports.TimeClock = TimeClock;
        const Vpage = 'VPAGE';
        exports.Vpage = Vpage;
        const AppBar = 'APPBAR';
        exports.AppBar = AppBar;
        const ButtonGroup = 'BUTTONGROUP';
        exports.ButtonGroup = ButtonGroup;
        const Button = 'BUTTON';
        exports.Button = Button;
        const CheckButton = 'CHECKBUTTON';
        exports.CheckButton = CheckButton;
        const ClipView = 'CLIPVIEW';
        exports.ClipView = ClipView;
        const ColorTile = 'COLORTILE';
        exports.ColorTile = ColorTile;
        const Column = 'COLUMN';
        exports.Column = Column;
        const ComboBoxItem = 'COMBOBOXITEM';
        exports.ComboBoxItem = ComboBoxItem;
        const DialogClient = 'DIALOGCLIENT';
        exports.DialogClient = DialogClient;
        const DialogTitle = 'DIALOGTITLE';
        exports.DialogTitle = DialogTitle;
        const DigitClock = 'DIGITCLOCK';
        exports.DigitClock = DigitClock;
        const Dragger = 'DRAGGER';
        exports.Dragger = Dragger;
        const Edit = 'EDIT';
        exports.Edit = Edit;
        const GridItem = 'GRIDITEM';
        exports.GridItem = GridItem;
        const Grid = 'GRID';
        exports.Grid = Grid;
        const GroupBox = 'GROUPBOX';
        exports.GroupBox = GroupBox;
        const Label = 'LABEL';
        exports.Label = Label;
        const Pages = 'PAGES';
        exports.Pages = Pages;
        const ProgressBar = 'PROGRESSBAR';
        exports.ProgressBar = ProgressBar;
        const Row = 'ROW';
        exports.Row = Row;
        const Slider = 'SLIDER';
        exports.Slider = Slider;
        const TabButtonGroup = 'TABBUTTONGROUP';
        exports.TabButtonGroup = TabButtonGroup;
        const TabButton = 'TABBUTTON';
        exports.TabButton = TabButton;
        const TabControl = 'TABCONTROL';
        exports.TabControl = TabControl;
        const View = 'VIEW';
        exports.View = View;
        const Dialog = 'DIALOG';
        exports.Dialog = Dialog;
        const Window = 'WINDOW';
        exports.Window = Window;
        const GifImage = 'GIFIMAGE';
        exports.GifImage = GifImage;
        const Keyboard = 'KEYBOARD';
        exports.Keyboard = Keyboard;
        const MutableImage = 'MUTABLEIMAGE';
        exports.MutableImage = MutableImage;
        const SvgImage = 'SVGIMAGE';
        exports.SvgImage = SvgImage;
        const CalibrationWin = 'CALIBRATIONWIN';
        exports.CalibrationWin = CalibrationWin;
        const ComboBox = 'COMBOBOX';
        exports.ComboBox = ComboBox;
        const Image = 'IMAGE';
        exports.Image = Image;
        const Overlay = 'OVERLAY';
        exports.Overlay = Overlay;
        const Popup = 'POPUP';
        exports.Popup = Popup;
        const SpinBox = 'SPINBOX';
        exports.SpinBox = SpinBox;
        const SystemBar = 'SYSTEMBAR';
        exports.SystemBar = SystemBar;
        const ComboBoxEx = 'COMBOBOXEX';
        exports.ComboBoxEx = ComboBoxEx;
        const RadioButton = 'RADIOBUTTON';
        exports.RadioButton = RadioButton;
      },
      { './App': 2, './react-components': 83, './render': 85 },
    ],
    82: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const React = require('react');
        const __1 = require('..');
        const PropTypes = require('prop-types');
        const TextAncestor = React.createContext(false);
        class Text extends React.Component {
          render() {
            return React.createElement(
              TextAncestor.Consumer,
              null,
              hasTextAncestor =>
                hasTextAncestor
                  ? React.createElement(
                      __1.VirtualText,
                      Object.assign({}, this.props)
                    )
                  : React.createElement(
                      TextAncestor.Provider,
                      { value: true },
                      React.createElement(
                        __1.RootText,
                        Object.assign({}, this.props)
                      )
                    )
            );
          }
        }
        exports.default = Text;
        Text.defaultProps = {
          style: {},
        };
        Text.propTypes = {
          style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
        };
      },
      { '..': 81, 'prop-types': 121, react: 131 },
    ],
    83: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.Text = void 0;
        const Text_1 = require('./Text');
        exports.Text = Text_1.default;
      },
      { './Text': 82 },
    ],
    84: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        const createElement_1 = require('../utils/createElement');
        const lodash_1 = require('lodash');
        const Reconciler = require('react-reconciler');
        const DEBUG = false;
        const DesktopRenderer = Reconciler({
          appendInitialChild(parentInstance, child) {
            if (DEBUG) console.log('appendInitialChild');
            insertChild(parentInstance, child);
          },
          createInstance(type, props) {
            if (DEBUG) console.log('createInstance');
            return createElement_1.createElement(type, props);
          },
          createTextInstance(text) {
            if (DEBUG) console.log('createTextInstance');
            return { text, type: 'text' };
          },
          finalizeInitialChildren() {
            if (DEBUG) console.log('finalizeInitialChildren');
            return false;
          },
          getPublicInstance(inst) {
            if (DEBUG) console.log('getPublicInstance');
            return inst;
          },
          prepareForCommit() {
            if (DEBUG) console.log('prepareForCommit');
            // noop
          },
          prepareUpdate(wordElement, type, oldProps, newProps) {
            if (DEBUG) console.log('prepareUpdate');
            const propKeys = lodash_1.uniq(
              Object.keys(newProps).concat(Object.keys(oldProps))
            );
            const diff = {};
            for (let key of propKeys) {
              if (
                //key !== "children" && // children are already handled by react-reconciler
                oldProps[key] !== newProps[key]
              ) {
                diff[key] = newProps[key];
              }
            }
            // console.log(oldProps, newProps);
            // console.log("DIFF", diff);
            return diff;
          },
          resetAfterCommit(hostContext) {
            if (DEBUG) console.log('resetAfterCommit');
            hostContext.afterCommit(hostContext);
          },
          resetTextContent() {
            if (DEBUG) console.log('resetTextContent');
            // noop
          },
          getRootHostContext() {
            if (DEBUG) console.log('getRootHostContext');
            return {};
          },
          getChildHostContext() {
            if (DEBUG) console.log('getChildHostContext');
            return {};
          },
          shouldSetTextContent() {
            if (DEBUG) console.log('shouldSetTextContent');
            return false;
          },
          now: () => {},
          useSyncScheduling: true,
          // MUTATION
          appendChild(parentInstance, child) {
            if (DEBUG) console.log('appendChild');
            insertChild(parentInstance, child);
          },
          appendChildToContainer(parentInstance, child) {
            if (DEBUG) console.log('appendChildToContainer');
            insertChild(parentInstance, child);
          },
          removeChild(parentInstance, child) {
            if (DEBUG) console.log('removeChild');
            removeChild(parentInstance, child);
          },
          removeChildFromContainer(parentInstance, child) {
            if (DEBUG) console.log('removeChildFromContainer');
            removeChild(parentInstance, child);
          },
          insertBefore(parentInstance, child, beforeChild) {
            if (DEBUG) console.log('insertBefore');
            insertChild(parentInstance, child, beforeChild);
          },
          commitUpdate(instance, updatePayload) {
            if (DEBUG) console.log('commitUpdate');
            //console.log("UPDATE", instance, updatePayload);
            instance.updateProps(updatePayload);
          },
          commitMount() {
            if (DEBUG) console.log('commitMount');
            // noop
          },
          commitTextUpdate(textInstance, oldText, newText) {
            if (DEBUG) console.log('commitTextUpdate');
            //console.log("TEXT UPDATE", newText);
            textInstance.text = newText;
            textInstance.parent.updateText();
          },
          supportsMutation: true,
          supportsPersistence: false,
        });
        const removeChild = (container, child) => {
          //console.log("REMOVE", child);
          if (container.removeChild) {
            container.removeChild(child);
          } else {
            throw new Error(
              `Can't remove child from ${container.constructor.name}`
            );
          }
        };
        const insertChild = (container, child, beforeChild) => {
          const operation = beforeChild ? 'insertChild' : 'appendChild';
          const params = beforeChild ? [child, beforeChild] : [child];
          if (container[operation]) {
            setParent(container, child);
            //@ts-ignore
            container[operation](...params);
            child?.element?.show?.(); // TODO: Should this be here?
          } else {
            throw new Error(
              `Can't append child to ${container.constructor.name}`
            );
          }
        };
        const setParent = (container, child) => {
          if (typeof child == 'object') child.parent = container;
        };
        exports.default = DesktopRenderer;
      },
      { '../utils/createElement': 86, lodash: 116, 'react-reconciler': 128 },
    ],
    85: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.container = exports.ROOT_NODE = void 0;
        const reconciler_1 = require('../reconciler');
        const createElement_1 = require('../utils/createElement');
        exports.ROOT_NODE = {};
        const AppRegistry = {
          registerComponent: (name, component) => {
            const newComponent = component;
            exports.ROOT_NODE = createElement_1.createElement('ROOT', {});
            exports.container = reconciler_1.default.createContainer(
              exports.ROOT_NODE
            );
            reconciler_1.default.updateContainer(
              newComponent,
              exports.container,
              null
            );
          },
        };
        exports.default = AppRegistry;
      },
      { '../reconciler': 84, '../utils/createElement': 86 },
    ],
    86: [
      function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.createElement = void 0;
        const components_1 = require('../components/');
        // Creates an element with an element type, props and a root instance
        function createElement(type, props) {
          const COMPONENTS = {
            ROOT: () => components_1.Root(props),
            ROOTTEXT: () => components_1.RootText(props),
            CANVASWIDGET: () => components_1.CanvasWidget(props),
            canvas_widget: () => components_1.CanvasWidget(props),
            COLORCOMPONENT: () => components_1.ColorComponent(props),
            color_component: () => components_1.ColorComponent(props),
            COLORPICKER: () => components_1.ColorPicker(props),
            color_picker: () => components_1.ColorPicker(props),
            DRAGGABLE: () => components_1.Draggable(props),
            draggable: () => components_1.Draggable(props),
            FILEBROWSERVIEW: () => components_1.FileBrowserView(props),
            file_browser_view: () => components_1.FileBrowserView(props),
            GAUGEPOINTER: () => components_1.GaugePointer(props),
            gauge_pointer: () => components_1.GaugePointer(props),
            GAUGE: () => components_1.Gauge(props),
            gauge: () => components_1.Gauge(props),
            IMAGEANIMATION: () => components_1.ImageAnimation(props),
            image_animation: () => components_1.ImageAnimation(props),
            IMAGEVALUE: () => components_1.ImageValue(props),
            image_value: () => components_1.ImageValue(props),
            CANDIDATES: () => components_1.Candidates(props),
            candidates: () => components_1.Candidates(props),
            LANGINDICATOR: () => components_1.LangIndicator(props),
            lang_indicator: () => components_1.LangIndicator(props),
            LINENUMBER: () => components_1.LineNumber(props),
            line_number: () => components_1.LineNumber(props),
            MLEDIT: () => components_1.Mledit(props),
            mledit: () => components_1.Mledit(props),
            PROGRESSCIRCLE: () => components_1.ProgressCircle(props),
            progress_circle: () => components_1.ProgressCircle(props),
            RICHTEXTVIEW: () => components_1.RichTextView(props),
            rich_text_view: () => components_1.RichTextView(props),
            RICHTEXT: () => components_1.RichText(props),
            rich_text: () => components_1.RichText(props),
            HSCROLLLABEL: () => components_1.HscrollLabel(props),
            hscroll_label: () => components_1.HscrollLabel(props),
            LISTITEM: () => components_1.ListItem(props),
            list_item: () => components_1.ListItem(props),
            LISTVIEWH: () => components_1.ListViewH(props),
            list_view_h: () => components_1.ListViewH(props),
            LISTVIEW: () => components_1.ListView(props),
            list_view: () => components_1.ListView(props),
            SCROLLBAR: () => components_1.ScrollBar(props),
            scroll_bar: () => components_1.ScrollBar(props),
            SCROLLVIEW: () => components_1.ScrollView(props),
            scroll_view: () => components_1.ScrollView(props),
            SLIDEMENU: () => components_1.SlideMenu(props),
            slide_menu: () => components_1.SlideMenu(props),
            SLIDEINDICATOR: () => components_1.SlideIndicator(props),
            slide_indicator: () => components_1.SlideIndicator(props),
            SLIDEVIEW: () => components_1.SlideView(props),
            slide_view: () => components_1.SlideView(props),
            SWITCH: () => components_1.Switch(props),
            switch: () => components_1.Switch(props),
            TEXTSELECTOR: () => components_1.TextSelector(props),
            text_selector: () => components_1.TextSelector(props),
            TIMECLOCK: () => components_1.TimeClock(props),
            time_clock: () => components_1.TimeClock(props),
            VPAGE: () => components_1.Vpage(props),
            vpage: () => components_1.Vpage(props),
            APPBAR: () => components_1.AppBar(props),
            app_bar: () => components_1.AppBar(props),
            BUTTONGROUP: () => components_1.ButtonGroup(props),
            button_group: () => components_1.ButtonGroup(props),
            BUTTON: () => components_1.Button(props),
            button: () => components_1.Button(props),
            CHECKBUTTON: () => components_1.CheckButton(props),
            check_button: () => components_1.CheckButton(props),
            CLIPVIEW: () => components_1.ClipView(props),
            clip_view: () => components_1.ClipView(props),
            COLORTILE: () => components_1.ColorTile(props),
            color_tile: () => components_1.ColorTile(props),
            COLUMN: () => components_1.Column(props),
            column: () => components_1.Column(props),
            COMBOBOXITEM: () => components_1.ComboBoxItem(props),
            combo_box_item: () => components_1.ComboBoxItem(props),
            DIALOGCLIENT: () => components_1.DialogClient(props),
            dialog_client: () => components_1.DialogClient(props),
            DIALOGTITLE: () => components_1.DialogTitle(props),
            dialog_title: () => components_1.DialogTitle(props),
            DIGITCLOCK: () => components_1.DigitClock(props),
            digit_clock: () => components_1.DigitClock(props),
            DRAGGER: () => components_1.Dragger(props),
            dragger: () => components_1.Dragger(props),
            EDIT: () => components_1.Edit(props),
            edit: () => components_1.Edit(props),
            GRIDITEM: () => components_1.GridItem(props),
            grid_item: () => components_1.GridItem(props),
            GRID: () => components_1.Grid(props),
            grid: () => components_1.Grid(props),
            GROUPBOX: () => components_1.GroupBox(props),
            group_box: () => components_1.GroupBox(props),
            LABEL: () => components_1.Label(props),
            label: () => components_1.Label(props),
            PAGES: () => components_1.Pages(props),
            pages: () => components_1.Pages(props),
            PROGRESSBAR: () => components_1.ProgressBar(props),
            progress_bar: () => components_1.ProgressBar(props),
            ROW: () => components_1.Row(props),
            row: () => components_1.Row(props),
            SLIDER: () => components_1.Slider(props),
            slider: () => components_1.Slider(props),
            TABBUTTONGROUP: () => components_1.TabButtonGroup(props),
            tab_button_group: () => components_1.TabButtonGroup(props),
            TABBUTTON: () => components_1.TabButton(props),
            tab_button: () => components_1.TabButton(props),
            TABCONTROL: () => components_1.TabControl(props),
            tab_control: () => components_1.TabControl(props),
            VIEW: () => components_1.View(props),
            view: () => components_1.View(props),
            DIALOG: () => components_1.Dialog(props),
            dialog: () => components_1.Dialog(props),
            WINDOW: () => components_1.Window(props),
            window: () => components_1.Window(props),
            GIFIMAGE: () => components_1.GifImage(props),
            gif_image: () => components_1.GifImage(props),
            KEYBOARD: () => components_1.Keyboard(props),
            keyboard: () => components_1.Keyboard(props),
            MUTABLEIMAGE: () => components_1.MutableImage(props),
            mutable_image: () => components_1.MutableImage(props),
            SVGIMAGE: () => components_1.SvgImage(props),
            svg_image: () => components_1.SvgImage(props),
            CALIBRATIONWIN: () => components_1.CalibrationWin(props),
            calibration_win: () => components_1.CalibrationWin(props),
            COMBOBOX: () => components_1.ComboBox(props),
            combo_box: () => components_1.ComboBox(props),
            IMAGE: () => components_1.Image(props),
            image: () => components_1.Image(props),
            OVERLAY: () => components_1.Overlay(props),
            overlay: () => components_1.Overlay(props),
            POPUP: () => components_1.Popup(props),
            popup: () => components_1.Popup(props),
            SPINBOX: () => components_1.SpinBox(props),
            spin_box: () => components_1.SpinBox(props),
            SYSTEMBAR: () => components_1.SystemBar(props),
            system_bar: () => components_1.SystemBar(props),
            COMBOBOXEX: () => components_1.ComboBoxEx(props),
            combo_box_ex: () => components_1.ComboBoxEx(props),
            RADIOBUTTON: () => components_1.RadioButton(props),
            radio_button: () => components_1.RadioButton(props),
            default: components_1.View(props),
          };
          let func = COMPONENTS[type];
          if (!func) {
            console.log(`${type} is not supported!!!!!!!!!!!!!!!`);
            func = COMPONENTS.default;
          }
          return func();
        }
        exports.createElement = createElement;
      },
      { '../components/': 80 },
    ],
    87: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.AnimatorPage = AnimatorPage;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function AnimatorPage(props) {
          console.log('AnimatorPage');
          var closeCurrent = props ? props.closeCurrent : false;
          return /*#__PURE__*/ _react['default'].createElement(
            _reactAwtk.Window,
            {
              closable: 'no',
              closeCurrent: closeCurrent,
              animHint: 'htranslate',
              name: (0, _utils.toWindowName)('AnimatorPage'),
            },
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Image, {
              drawType: 'icon',
              image: 'earth',
              x: 'c',
              y: 'm',
              w: '40',
              h: '40',
              animation:
                'rotation(from=0, to=6.28, repeatTimes=0, duration=2000, easing=linear)',
            }),
            /*#__PURE__*/ _react['default'].createElement(
              _reactAwtk.ProgressBar,
              {
                x: 'c',
                y: '40',
                w: '90%',
                h: '40',
                animation:
                  'value(from=50, to=100, yoyo_times=1000, duration=1000, delay=1000)',
              }
            ),
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Button, {
              x: 'c',
              y: 'b:40',
              w: '90%',
              h: '40',
              text: 'Back',
              onClick: function onClick() {
                _reactAwtk.app.closeWindow();
              },
            })
          );
        }
      },
      { './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    88: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.BarPage = BarPage;

        var _react = _interopRequireWildcard(require('react'));

        var _LabelPage = require('./LabelPage');

        var _DialogPage = require('./DialogPage');

        var _OverlayPage = require('./OverlayPage');

        var _AnimatorPage = require('./AnimatorPage');

        var _reactAwtk = require('react-awtk');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function BarPage(props) {
          console.log('BarPage');
          var closeCurrent = props ? props.closeCurrent : false;
          return /*#__PURE__*/ _react['default'].createElement(
            _reactAwtk.Window,
            {
              closable: 'yes',
              closeCurrent: closeCurrent,
              animHint: 'htranslate',
              name: (0, _utils.toWindowName)('BarPage'),
            },
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Button, {
              x: 'c',
              y: 'm:-80',
              w: '90%',
              h: '40',
              text: 'Home',
              onClick: function onClick() {
                _reactAwtk.app.goHome();
              },
            }),
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Button, {
              x: 'c',
              y: 'm:80',
              w: '90%',
              h: '40',
              text: 'Dialog',
              onClick: function onClick() {
                _reactAwtk.app.goTo(_DialogPage.DialogPage);
              },
            }),
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Button, {
              x: 'c',
              y: 'm',
              w: '90%',
              h: '40',
              text: 'Close Current And Open',
              onClick: function onClick() {
                _reactAwtk.app.goTo(_LabelPage.LabelPage, {
                  closeCurrent: true,
                });
              },
            })
          );
        }
      },
      {
        './AnimatorPage': 87,
        './DialogPage': 91,
        './LabelPage': 99,
        './OverlayPage': 101,
        './utils': 110,
        react: 115,
        'react-awtk': 81,
      },
    ],
    89: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.CheckButtonPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var CheckButtonPage = /*#__PURE__*/ (function(_Component) {
          _inherits(CheckButtonPage, _Component);

          var _super = _createSuper(CheckButtonPage);

          function CheckButtonPage(props) {
            var _this;

            _classCallCheck(this, CheckButtonPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 1,
            };
            return _this;
          }

          _createClass(CheckButtonPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value % 2,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('CheckButtonPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                    closable: 'confirm',
                    onRequestCloseWindow: function onRequestCloseWindow(
                      element,
                      evt
                    ) {
                      console.log(element, evt);

                      if (_reactAwtk.app.confirm('Confirm', 'Are your sure?')) {
                        _reactAwtk.app.closeWindow();
                      }
                    },
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Label,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '30',
                      text: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.CheckButton,
                    {
                      x: 'c',
                      y: '160',
                      w: '100',
                      h: '22',
                      text: 'Click me',
                      value: this.state.value,
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: element.getValue(),
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return CheckButtonPage;
        })(_react.Component);

        exports.CheckButtonPage = CheckButtonPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    90: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.ComboBoxPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var ComboBoxPage = /*#__PURE__*/ (function(_Component) {
          _inherits(ComboBoxPage, _Component);

          var _super = _createSuper(ComboBoxPage);

          function ComboBoxPage(props) {
            var _this;

            _classCallCheck(this, ComboBoxPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 0,
            };
            return _this;
          }

          _createClass(ComboBoxPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('ComboBoxPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Label,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '30',
                      text: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.ComboBox,
                    {
                      x: 'c',
                      y: '160',
                      w: '160',
                      h: '22',
                      readonly: 'true',
                      options: 'left;center;right;',
                      value: Math.abs(this.state.value) % 3,
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: element.getValue(),
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return ComboBoxPage;
        })(_react.Component);

        exports.ComboBoxPage = ComboBoxPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    91: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.DialogPage = DialogPage;

        var _react = _interopRequireWildcard(require('react'));

        var _LabelPage = require('./LabelPage');

        var _reactAwtk = require('react-awtk');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function DialogPage(props) {
          console.log('DialogPage');
          return /*#__PURE__*/ _react['default'].createElement(
            'dialog',
            {
              anim_hint: 'popup',
              highlight: 'default(start_alpha=0, end_alpha=80)',
              name: (0, _utils.toWindowName)('DialogPage'),
              x: '0',
              y: 'bottom',
              w: '100%',
              h: '160',
            },
            /*#__PURE__*/ _react['default'].createElement('dialog_title', {
              x: '0',
              y: '0',
              w: '100%',
              h: '30',
              text: 'Hello AWTK',
            }),
            /*#__PURE__*/ _react['default'].createElement(
              'dialog_client',
              {
                x: '0',
                y: 'bottom',
                w: '100%',
                h: '-30',
              },
              /*#__PURE__*/ _react['default'].createElement('label', {
                name: '',
                x: 'center',
                y: 'middle:-20',
                w: '200',
                h: '30',
                text: 'Are you ready?',
              }),
              /*#__PURE__*/ _react['default'].createElement('button', {
                x: '10',
                y: 'bottom:10',
                w: '40%',
                h: '30',
                text: 'Yes',
                onClick: function onClick() {
                  _reactAwtk.app.goTo(_LabelPage.LabelPage, {
                    closeCurrent: true,
                  });
                },
              }),
              /*#__PURE__*/ _react['default'].createElement('button', {
                x: 'right:10',
                y: 'bottom:10',
                w: '40%',
                h: '30',
                text: 'No',
                onClick: function onClick() {
                  _reactAwtk.app.goBack();
                },
              })
            )
          );
        }
      },
      { './LabelPage': 99, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    92: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.EditPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var EditPage = /*#__PURE__*/ (function(_Component) {
          _inherits(EditPage, _Component);

          var _super = _createSuper(EditPage);

          function EditPage(props) {
            var _this;

            _classCallCheck(this, EditPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 1000,
            };
            return _this;
          }

          _createClass(EditPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('EditPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Label,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '30',
                      text: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Edit,
                    {
                      x: 'c',
                      y: '160',
                      w: '80%',
                      h: '30',
                      value: this.state.value,
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: element.getInt(),
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return EditPage;
        })(_react.Component);

        exports.EditPage = EditPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    93: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.FooPage = FooPage;

        var _react = _interopRequireWildcard(require('react'));

        var _BarPage = require('./BarPage');

        var _LabelPage = require('./LabelPage');

        var _DialogPage = require('./DialogPage');

        var _OverlayPage = require('./OverlayPage');

        var _AnimatorPage = require('./AnimatorPage');

        var _reactAwtk = require('react-awtk');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function FooPage(props) {
          console.log('FooPage');
          var closeCurrent = props ? props.closeCurrent : false;
          return /*#__PURE__*/ _react['default'].createElement(
            _reactAwtk.Window,
            {
              closable: 'yes',
              closeCurrent: closeCurrent,
              animHint: 'htranslate',
              name: (0, _utils.toWindowName)('FooPage'),
            },
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Button, {
              x: 'c',
              y: 'm:-80',
              w: '90%',
              h: '40',
              text: 'Overlay',
              onClick: function onClick() {
                _reactAwtk.app.goTo(_OverlayPage.OverlayPage);
              },
            }),
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Button, {
              x: 'c',
              y: 'm:80',
              w: '90%',
              h: '40',
              text: 'Dialog',
              onClick: function onClick() {
                _reactAwtk.app.goTo(_DialogPage.DialogPage);
              },
            }),
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Button, {
              x: 'c',
              y: 'm',
              w: '90%',
              h: '40',
              text: 'Close Current And Open',
              onClick: function onClick() {
                _reactAwtk.app.goTo(_LabelPage.LabelPage, {
                  closeCurrent: true,
                });
              },
            }),
            /*#__PURE__*/ _react['default'].createElement(_reactAwtk.Button, {
              x: 'c',
              y: 'b:50',
              w: '90%',
              h: '40',
              text: 'goTo(Bar)',
              onClick: function onClick() {
                _reactAwtk.app.goTo(_BarPage.BarPage, {
                  closeCurrent: true,
                });
              },
            })
          );
        }
      },
      {
        './AnimatorPage': 87,
        './BarPage': 88,
        './DialogPage': 91,
        './LabelPage': 99,
        './OverlayPage': 101,
        './utils': 110,
        react: 115,
        'react-awtk': 81,
      },
    ],
    94: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.GaugePage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var GaugePage = /*#__PURE__*/ (function(_Component) {
          _inherits(GaugePage, _Component);

          var _super = _createSuper(GaugePage);

          function GaugePage(props) {
            var _this;

            _classCallCheck(this, GaugePage);

            _this = _super.call(this, props);
            _this.state = {
              value: 0,
            };
            return _this;
          }

          _createClass(GaugePage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                    onWindowClose: function onWindowClose() {
                      if (_this2.props.onResult) {
                        _this2.props.onResult(_this2.state.value);
                      }
                    },
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Gauge,
                    {
                      x: 'c',
                      y: '10',
                      w: '240',
                      h: '240',
                      image: 'gauge_bg',
                    },
                    /*#__PURE__*/ _react['default'].createElement(
                      _reactAwtk.GaugePointer,
                      {
                        x: 'c',
                        y: '50',
                        w: '24',
                        h: '140',
                        image: 'gauge_pointer',
                        value: this.state.value,
                      }
                    )
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return GaugePage;
        })(_react.Component);

        exports.GaugePage = GaugePage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    95: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.HomePage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _utils = require('./utils');

        var _SwitchPage = require('./SwitchPage');

        var _SlideViewPage = require('./SlideViewPage');

        var _ListViewPage = require('./ListViewPage');

        var _CheckButtonPage = require('./CheckButtonPage');

        var _ComboBoxPage = require('./ComboBoxPage');

        var _TextSelectorPage = require('./TextSelectorPage');

        var _RadioButtonPage = require('./RadioButtonPage');

        var _GaugePage = require('./GaugePage');

        var _LabelPage = require('./LabelPage');

        var _FooPage = require('./FooPage');

        var _BarPage = require('./BarPage');

        var _DialogPage = require('./DialogPage');

        var _OverlayPage = require('./OverlayPage');

        var _AnimatorPage = require('./AnimatorPage');

        var _ProgressBarPage = require('./ProgressBarPage');

        var _EditPage = require('./EditPage');

        var _SliderPage = require('./SliderPage');

        var _ProgressCirclePage = require('./ProgressCirclePage');

        var _ImageValuePage = require('./ImageValuePage');

        var _ImageAnimationPage = require('./ImageAnimationPage');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var HomePage = /*#__PURE__*/ (function(_Component) {
          _inherits(HomePage, _Component);

          var _super = _createSuper(HomePage);

          function HomePage() {
            _classCallCheck(this, HomePage);

            return _super.apply(this, arguments);
          }

          _createClass(HomePage, [
            {
              key: 'componentDidMount',
              value: function componentDidMount() {
                console.log('componentDidMount '.concat(this.constructor.name));
              },
            },
            {
              key: 'componentDidUpdate',
              value: function componentDidUpdate(
                prevProps,
                prevState,
                snapshot
              ) {
                console.log(
                  'componentDidUpdate '.concat(this.constructor.name)
                );
              },
            },
            {
              key: 'componentWillUnmount',
              value: function componentWillUnmount() {
                console.log(
                  'componentWillUnmount '.concat(this.constructor.name)
                );
              },
            },
            {
              key: 'render',
              value: function render() {
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closable: 'no',
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                    childrenLayout: 'default(c=2, h=36, m=5, s=5)',
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Gauge',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_GaugePage.GaugePage, {
                          closeCurrent: false,
                          onResult: function onResult(value) {
                            console.log('result is '.concat(value));
                          },
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Label',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_LabelPage.LabelPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'ImageValue',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_ImageValuePage.ImageValuePage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'ProgressBar',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_ProgressBarPage.ProgressBarPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Edit',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_EditPage.EditPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'ProgressCircle',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(
                          _ProgressCirclePage.ProgressCirclePage
                        );
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Slider',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_SliderPage.SliderPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Switch',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_SwitchPage.SwitchPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'CheckButton',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_CheckButtonPage.CheckButtonPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'RadioButton',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_RadioButtonPage.RadioButtonPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'ComboBox',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_ComboBoxPage.ComboBoxPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'TextSelector',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_TextSelectorPage.TextSelectorPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'SlideView',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_SlideViewPage.SlideViewPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'ListView',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_ListViewPage.ListViewPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Animator',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_AnimatorPage.AnimatorPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Foo',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_FooPage.FooPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Bar',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_BarPage.BarPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'ImageAnimation',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(
                          _ImageAnimationPage.ImageAnimationPage
                        );
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Overlay',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_OverlayPage.OverlayPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Dialog',
                      onClick: function onClick() {
                        _reactAwtk.app.goTo(_DialogPage.DialogPage);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      floating: 'true',
                      x: 'c',
                      y: 'b:5',
                      w: '80',
                      h: '36',
                      text: 'Quit',
                      onClick: function onClick() {
                        _reactAwtk.app.quit();
                      },
                    }
                  )
                );
              },
            },
          ]);

          return HomePage;
        })(_react.Component);

        exports.HomePage = HomePage;
      },
      {
        './AnimatorPage': 87,
        './BarPage': 88,
        './CheckButtonPage': 89,
        './ComboBoxPage': 90,
        './DialogPage': 91,
        './EditPage': 92,
        './FooPage': 93,
        './GaugePage': 94,
        './ImageAnimationPage': 96,
        './ImageValuePage': 97,
        './LabelPage': 99,
        './ListViewPage': 100,
        './OverlayPage': 101,
        './ProgressBarPage': 102,
        './ProgressCirclePage': 103,
        './RadioButtonPage': 104,
        './SlideViewPage': 105,
        './SliderPage': 106,
        './SwitchPage': 107,
        './TextSelectorPage': 108,
        './utils': 110,
        react: 115,
        'react-awtk': 81,
      },
    ],
    96: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.ImageAnimationPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var ImageAnimationPage = /*#__PURE__*/ (function(_Component) {
          _inherits(ImageAnimationPage, _Component);

          var _super = _createSuper(ImageAnimationPage);

          function ImageAnimationPage(props) {
            _classCallCheck(this, ImageAnimationPage);

            return _super.call(this, props);
          }

          _createClass(ImageAnimationPage, [
            {
              key: 'componentDidMount',
              value: function componentDidMount() {
                console.log('componentDidMount '.concat(this.constructor.name));
              },
            },
            {
              key: 'componentDidUpdate',
              value: function componentDidUpdate(
                prevProps,
                prevState,
                snapshot
              ) {
                console.log(
                  'componentDidUpdate '.concat(this.constructor.name)
                );
              },
            },
            {
              key: 'componentWillUnmount',
              value: function componentWillUnmount() {
                console.log(
                  'componentWillUnmount '.concat(this.constructor.name)
                );
              },
            },
            {
              key: 'render',
              value: function render() {
                console.log('ImageAnimationPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  'window',
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    'view',
                    {
                      x: '0',
                      y: '0',
                      w: '100%',
                      h: '80%',
                      children_layout: 'default(r=4,c=4)',
                    },
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '9',
                        auto_play: 'true',
                        interval: '50',
                        delay: '100',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '9',
                        auto_play: 'true',
                        interval: '50',
                        delay: '200',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '9',
                        auto_play: 'true',
                        interval: '50',
                        delay: '300',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '9',
                        auto_play: 'true',
                        interval: '50',
                        delay: '400',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '500',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '600',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '700',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '800',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '900',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '1000',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '1100',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        sequence: '123456789abc',
                        auto_play: 'true',
                        interval: '50',
                        delay: '1200',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        reverse: 'true',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '1300',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        reverse: 'true',
                        sequence: '123456789abc',
                        auto_play: 'true',
                        interval: '50',
                        delay: '1400',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '12',
                        format: '%s%x',
                        show_when_done: 'true',
                        loop: 'false',
                        auto_play: 'true',
                        interval: '500',
                        delay: '1500',
                      }
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      'image_animation',
                      {
                        image: 'ani',
                        start_index: '1',
                        end_index: '100',
                        format: '%s%x',
                        auto_play: 'true',
                        interval: '50',
                        delay: '1600',
                      }
                    )
                  ),
                  /*#__PURE__*/ _react['default'].createElement('button', {
                    name: 'close',
                    x: 'center',
                    y: 'bottom:50',
                    w: '50%',
                    h: '50',
                    text: 'close',
                    onClick: function onClick() {
                      _reactAwtk.app.goBack();
                    },
                  })
                );
              },
            },
          ]);

          return ImageAnimationPage;
        })(_react.Component);

        exports.ImageAnimationPage = ImageAnimationPage;
      },
      { './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    97: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.ImageValuePage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var ImageValuePage = /*#__PURE__*/ (function(_Component) {
          _inherits(ImageValuePage, _Component);

          var _super = _createSuper(ImageValuePage);

          function ImageValuePage(props) {
            var _this;

            _classCallCheck(this, ImageValuePage);

            _this = _super.call(this, props);
            _this.state = {
              value: 0,
            };
            return _this;
          }

          _createClass(ImageValuePage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;

                if (value < 0) {
                  value = 100;
                }

                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.ImageValue,
                    {
                      x: 'c',
                      y: 'm',
                      w: '100',
                      h: '40',
                      format: '%02d',
                      image: 'num_',
                      value: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return ImageValuePage;
        })(_react.Component);

        exports.ImageValuePage = ImageValuePage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    98: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.IncDecClose = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var IncDecClose = /*#__PURE__*/ (function(_Component) {
          _inherits(IncDecClose, _Component);

          var _super = _createSuper(IncDecClose);

          function IncDecClose(props) {
            var _this;

            _classCallCheck(this, IncDecClose);

            _this = _super.call(this, props);
            _this.state = {
              count: 1,
            };
            return _this;
          }

          _createClass(IncDecClose, [
            {
              key: 'onChanged',
              value: function onChanged(delta) {
                if (this.props.onChanged) {
                  this.props.onChanged(delta);
                }
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('LabelPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.View,
                  {
                    x: 'c',
                    y: 'b',
                    w: '100%',
                    h: '40',
                    childrenLayout: 'default(r=1,c=3,s=5,m=5)',
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: '+',
                      onClick: function onClick() {
                        _this2.onChanged(1);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: '-',
                      count: this.state.count,
                      onClick: function onClick() {
                        _this2.onChanged(-1);
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Button,
                    {
                      text: 'Back',
                      onClick: function onClick() {
                        _reactAwtk.app.goBack();
                      },
                    }
                  )
                );
              },
            },
          ]);

          return IncDecClose;
        })(_react.Component);

        exports.IncDecClose = IncDecClose;
      },
      { react: 115, 'react-awtk': 81 },
    ],
    99: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.LabelPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var LabelPage = /*#__PURE__*/ (function(_Component) {
          _inherits(LabelPage, _Component);

          var _super = _createSuper(LabelPage);

          function LabelPage(props) {
            var _this;

            _classCallCheck(this, LabelPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 0,
            };
            return _this;
          }

          _createClass(LabelPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'getTextColor',
              value: function getTextColor() {
                var value = this.state.value;
                return value < 10 && value > -10 ? 'green' : 'red';
              },
            },
            {
              key: 'componentDidMount',
              value: function componentDidMount() {
                console.log('componentDidMount '.concat(this.constructor.name));
              },
            },
            {
              key: 'componentDidUpdate',
              value: function componentDidUpdate(
                prevProps,
                prevState,
                snapshot
              ) {
                console.log(
                  'componentDidUpdate '.concat(this.constructor.name)
                );
              },
            },
            {
              key: 'componentWillUnmount',
              value: function componentWillUnmount() {
                console.log(
                  'componentWillUnmount '.concat(this.constructor.name)
                );
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('LabelPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Text,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '80',
                      style: {
                        fontSize: 28,
                        textColor: this.getTextColor(),
                      },
                    },
                    'Count: ',
                    this.state.value
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return LabelPage;
        })(_react.Component);

        exports.LabelPage = LabelPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    100: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.ListViewPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var itemsNr = 100;

        var ListViewPage = /*#__PURE__*/ (function(_Component) {
          _inherits(ListViewPage, _Component);

          var _super = _createSuper(ListViewPage);

          function ListViewPage(props) {
            var _this;

            _classCallCheck(this, ListViewPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 1,
            };
            return _this;
          }

          _createClass(ListViewPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('ListViewPage');
                var pages = [];

                for (var i = 0; i < itemsNr; i++) {
                  pages.push(
                    /*#__PURE__*/ _react['default'].createElement(
                      _reactAwtk.ListItem,
                      {
                        style: i % 2 == 0 ? 'even' : 'odd',
                        children_layout: 'default(rows=1,cols=0)',
                      },
                      /*#__PURE__*/ _react['default'].createElement(
                        _reactAwtk.Image,
                        {
                          draw_type: 'icon',
                          w: '40',
                          image: 'earth',
                        }
                      ),
                      /*#__PURE__*/ _react['default'].createElement(
                        _reactAwtk.Label,
                        {
                          w: '-30',
                          text: i + '.Hello AWTK !',
                        },
                        /*#__PURE__*/ _react['default'].createElement(
                          _reactAwtk.Switch,
                          {
                            x: 'r:10',
                            y: 'm',
                            w: '60',
                            h: '20',
                            value: i % 2 === 0,
                          }
                        )
                      )
                    )
                  );
                }

                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.ListView,
                    {
                      w: '100%',
                      h: '80%',
                      itemHeight: '60',
                      value: Math.abs(this.state.value) % itemsNr,
                    },
                    /*#__PURE__*/ _react['default'].createElement(
                      _reactAwtk.ScrollView,
                      {
                        name: 'view',
                        x: '0',
                        y: '0',
                        w: '100%',
                        h: '100%',
                      },
                      pages
                    ),
                    /*#__PURE__*/ _react['default'].createElement(
                      _reactAwtk.ScrollBar,
                      {
                        isMobile: 'true',
                        name: 'bar',
                        x: 'right',
                        y: '0',
                        w: '6',
                        h: '100%',
                      }
                    )
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return ListViewPage;
        })(_react.Component);

        exports.ListViewPage = ListViewPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    101: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.OverlayPage = OverlayPage;

        var _react = _interopRequireWildcard(require('react'));

        var _LabelPage = require('./LabelPage');

        var _reactAwtk = require('react-awtk');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function OverlayPage(props) {
          console.log('OverlayPage');
          var closeCurrent = props ? props.closeCurrent : false;
          return /*#__PURE__*/ _react['default'].createElement(
            'overlay',
            {
              x: 'c',
              y: 'm',
              w: '80%',
              h: '80',
              name: (0, _utils.toWindowName)('OverlayPage'),
            },
            /*#__PURE__*/ _react['default'].createElement('button', {
              w: '100%',
              h: '100%',
              text: 'Close Current And Open',
              onClick: function onClick() {
                _reactAwtk.app.goTo(_LabelPage.LabelPage, {
                  closeCurrent: true,
                });
              },
            })
          );
        }
      },
      { './LabelPage': 99, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    102: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.ProgressBarPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var ProgressBarPage = /*#__PURE__*/ (function(_Component) {
          _inherits(ProgressBarPage, _Component);

          var _super = _createSuper(ProgressBarPage);

          function ProgressBarPage(props) {
            var _this;

            _classCallCheck(this, ProgressBarPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 0,
            };
            return _this;
          }

          _createClass(ProgressBarPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;

                if (value < 0) {
                  value = 100;
                }

                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('ProgressBarPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.ProgressBar,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '30',
                      value: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return ProgressBarPage;
        })(_react.Component);

        exports.ProgressBarPage = ProgressBarPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    103: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.ProgressCirclePage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var ProgressCirclePage = /*#__PURE__*/ (function(_Component) {
          _inherits(ProgressCirclePage, _Component);

          var _super = _createSuper(ProgressCirclePage);

          function ProgressCirclePage(props) {
            var _this;

            _classCallCheck(this, ProgressCirclePage);

            _this = _super.call(this, props);
            _this.state = {
              value: 100,
            };
            return _this;
          }

          _createClass(ProgressCirclePage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;

                if (value < 0) {
                  value = 360;
                }

                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('ProgressCirclePage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.ProgressCircle,
                    {
                      x: 'c',
                      y: 'm',
                      w: '100',
                      h: '100',
                      max: '360',
                      showText: 'true',
                      startAngle: '90',
                      lineCap: 'butt',
                      value: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return ProgressCirclePage;
        })(_react.Component);

        exports.ProgressCirclePage = ProgressCirclePage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    104: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.RadioButtonPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var RadioButtonPage = /*#__PURE__*/ (function(_Component) {
          _inherits(RadioButtonPage, _Component);

          var _super = _createSuper(RadioButtonPage);

          function RadioButtonPage(props) {
            var _this;

            _classCallCheck(this, RadioButtonPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 1,
            };
            return _this;
          }

          _createClass(RadioButtonPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;

                if (value < 0) {
                  value = 0;
                }

                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('RadioButtonPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Label,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '30',
                      text: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.CheckButton,
                    {
                      x: 'c',
                      y: '130',
                      w: '25%',
                      h: '22',
                      text: '1',
                      radio: 'true',
                      value: this.state.value === 1,
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: 1,
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.CheckButton,
                    {
                      x: 'c',
                      y: '160',
                      w: '25%',
                      h: '22',
                      text: '2',
                      radio: 'true',
                      value: this.state.value === 2,
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: 2,
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.CheckButton,
                    {
                      x: 'c',
                      y: '190',
                      w: '25%',
                      h: '22',
                      text: '3',
                      radio: 'true',
                      value: this.state.value === 3,
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: 3,
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return RadioButtonPage;
        })(_react.Component);

        exports.RadioButtonPage = RadioButtonPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    105: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.SlideViewPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var pagesNr = 10;

        var SlideViewPage = /*#__PURE__*/ (function(_Component) {
          _inherits(SlideViewPage, _Component);

          var _super = _createSuper(SlideViewPage);

          function SlideViewPage(props) {
            var _this;

            _classCallCheck(this, SlideViewPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 1,
            };
            return _this;
          }

          _createClass(SlideViewPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('SlideViewPage');
                var pages = [];

                for (var i = 0; i < pagesNr; i++) {
                  pages.push(
                    /*#__PURE__*/ _react['default'].createElement(
                      _reactAwtk.View,
                      {
                        w: '100%',
                        h: '100%',
                      },
                      /*#__PURE__*/ _react['default'].createElement(
                        _reactAwtk.Label,
                        {
                          w: '100%',
                          h: '100%',
                          text: 'page-' + i,
                        }
                      )
                    )
                  );
                }

                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.SlideView,
                    {
                      w: '100%',
                      h: '80%',
                      value: Math.abs(this.state.value) % pagesNr,
                    },
                    pages
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.SlideIndicator,
                    {
                      x: '0',
                      y: 'b:100',
                      w: '100%',
                      h: '20',
                      defaultPaint: 'stroke_rect',
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return SlideViewPage;
        })(_react.Component);

        exports.SlideViewPage = SlideViewPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    106: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.SliderPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var SliderPage = /*#__PURE__*/ (function(_Component) {
          _inherits(SliderPage, _Component);

          var _super = _createSuper(SliderPage);

          function SliderPage(props) {
            var _this;

            _classCallCheck(this, SliderPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 1000,
            };
            return _this;
          }

          _createClass(SliderPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('SliderPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Label,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '30',
                      text: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Slider,
                    {
                      x: 'c',
                      y: '160',
                      w: '80%',
                      h: '30',
                      value: this.state.value,
                      onChanging: function onChanging(element, evt) {
                        _this2.setState({
                          value: element.getValue(),
                        });
                      },
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: element.getValue(),
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return SliderPage;
        })(_react.Component);

        exports.SliderPage = SliderPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    107: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.SwitchPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var SwitchPage = /*#__PURE__*/ (function(_Component) {
          _inherits(SwitchPage, _Component);

          var _super = _createSuper(SwitchPage);

          function SwitchPage(props) {
            var _this;

            _classCallCheck(this, SwitchPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 1,
            };
            return _this;
          }

          _createClass(SwitchPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: value % 2,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('SwitchPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Label,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '30',
                      text: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Switch,
                    {
                      x: 'c',
                      y: '160',
                      w: '60',
                      h: '22',
                      value: this.state.value,
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: element.getValue(),
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return SwitchPage;
        })(_react.Component);

        exports.SwitchPage = SwitchPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    108: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.TextSelectorPage = void 0;

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        var _IncDecClose = require('./IncDecClose');

        var _utils = require('./utils');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var TextSelectorPage = /*#__PURE__*/ (function(_Component) {
          _inherits(TextSelectorPage, _Component);

          var _super = _createSuper(TextSelectorPage);

          function TextSelectorPage(props) {
            var _this;

            _classCallCheck(this, TextSelectorPage);

            _this = _super.call(this, props);
            _this.state = {
              value: 0,
            };
            return _this;
          }

          _createClass(TextSelectorPage, [
            {
              key: 'addValue',
              value: function addValue(delta) {
                var value = this.state.value + delta;
                this.setState({
                  value: Math.abs(value) % 31,
                });
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                console.log('TextSelectorPage');
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.Window,
                  {
                    closeCurrent: this.props.closeCurrent,
                    animHint: 'htranslate',
                    name: (0, _utils.toWindowName)(this),
                  },
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.Label,
                    {
                      x: 'c',
                      y: '100',
                      w: '80%',
                      h: '30',
                      text: this.state.value,
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _reactAwtk.TextSelector,
                    {
                      x: 'c',
                      y: 'm',
                      w: '200',
                      h: '200',
                      options: '1-31-%02d',
                      loopOptions: 'true',
                      enableValueAnimator: 'false',
                      selectedIndex: this.state.value,
                      onChanged: function onChanged(element, evt) {
                        _this2.setState({
                          value: element.selectedIndex,
                        });
                      },
                    }
                  ),
                  /*#__PURE__*/ _react['default'].createElement(
                    _IncDecClose.IncDecClose,
                    {
                      x: 'c',
                      y: 'b',
                      w: '100%',
                      h: '40',
                      onChanged: function onChanged(delta) {
                        _this2.addValue(delta);
                      },
                    }
                  )
                );
              },
            },
          ]);

          return TextSelectorPage;
        })(_react.Component);

        exports.TextSelectorPage = TextSelectorPage;
      },
      { './IncDecClose': 98, './utils': 110, react: 115, 'react-awtk': 81 },
    ],
    109: [
      function(require, module, exports) {
        'use strict';

        function _typeof(obj) {
          '@babel/helpers - typeof';
          if (
            typeof Symbol === 'function' &&
            typeof Symbol.iterator === 'symbol'
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports['default'] = void 0;

        var _HomePage = require('./HomePage');

        var _react = _interopRequireWildcard(require('react'));

        var _reactAwtk = require('react-awtk');

        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(
            nodeInterop
          ) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }

        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (_typeof(obj) !== 'object' && typeof obj !== 'function')
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj['default'] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === 'object' || typeof call === 'function')
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === 'undefined' || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === 'function') return true;
          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function() {})
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        var lcdW = 320;
        var lcdH = 480;
        var title = 'Hello';

        var Main = /*#__PURE__*/ (function(_Component) {
          _inherits(Main, _Component);

          var _super = _createSuper(Main);

          function Main() {
            _classCallCheck(this, Main);

            return _super.apply(this, arguments);
          }

          _createClass(Main, [
            {
              key: 'render',
              value: function render() {
                return /*#__PURE__*/ _react['default'].createElement(
                  _reactAwtk.App,
                  null
                );
              },
            },
          ]);

          return Main;
        })(_react.Component);

        exports['default'] = Main;

        _reactAwtk.app.init(lcdW, lcdH, title);

        _reactAwtk.app.goTo(_HomePage.HomePage);

        _reactAwtk.AppRegistry.registerComponent(
          title,
          /*#__PURE__*/ _react['default'].createElement(Main, null)
        );
      },
      { './HomePage': 95, react: 115, 'react-awtk': 81 },
    ],
    110: [
      function(require, module, exports) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.toWindowName = toWindowName;

        function toWindowName(obj) {
          var name = typeof obj === 'string' ? obj : obj.constructor.name;
          name = name.replace(/Page$/, '');
          return name.toLowerCase();
        }
      },
      {},
    ],
    111: [
      function(require, module, exports) {
        /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

        'use strict';
        /* eslint-disable no-unused-vars */
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
          if (val === null || val === undefined) {
            throw new TypeError(
              'Object.assign cannot be called with null or undefined'
            );
          }

          return Object(val);
        }

        function shouldUseNative() {
          try {
            if (!Object.assign) {
              return false;
            }

            // Detect buggy property enumeration order in older V8 versions.

            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
              test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
              return test2[n];
            });
            if (order2.join('') !== '0123456789') {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
              test3[letter] = letter;
            });
            if (
              Object.keys(Object.assign({}, test3)).join('') !==
              'abcdefghijklmnopqrst'
            ) {
              return false;
            }

            return true;
          } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
          }
        }

        module.exports = shouldUseNative()
          ? Object.assign
          : function(target, source) {
              var from;
              var to = toObject(target);
              var symbols;

              for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);

                for (var key in from) {
                  if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                  }
                }

                if (getOwnPropertySymbols) {
                  symbols = getOwnPropertySymbols(from);
                  for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                      to[symbols[i]] = from[symbols[i]];
                    }
                  }
                }
              }

              return to;
            };
      },
      {},
    ],
    112: [
      function(require, module, exports) {
        // shim for using process in browser
        var process = (module.exports = {});

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error('setTimeout has not been defined');
        }
        function defaultClearTimeout() {
          throw new Error('clearTimeout has not been defined');
        }
        (function() {
          try {
            if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          }
          // if setTimeout wasn't available but was latter defined
          if (
            (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
            setTimeout
          ) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          }
          // if clearTimeout wasn't available but was latter defined
          if (
            (cachedClearTimeout === defaultClearTimeout ||
              !cachedClearTimeout) &&
            clearTimeout
          ) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;

          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function(name) {
          return [];
        };

        process.binding = function(name) {
          throw new Error('process.binding is not supported');
        };

        process.cwd = function() {
          return '/';
        };
        process.chdir = function(dir) {
          throw new Error('process.chdir is not supported');
        };
        process.umask = function() {
          return 0;
        };
      },
      {},
    ],
    113: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /** @license React v17.0.2
             * react.development.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict';

            if (process.env.NODE_ENV !== 'production') {
              (function() {
                'use strict';

                var _assign = require('object-assign');

                // TODO: this is special because it gets imported during build.
                var ReactVersion = '17.0.2';

                // ATTENTION
                // When adding new symbols to this file,
                // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var REACT_ELEMENT_TYPE = 0xeac7;
                var REACT_PORTAL_TYPE = 0xeaca;
                exports.Fragment = 0xeacb;
                exports.StrictMode = 0xeacc;
                exports.Profiler = 0xead2;
                var REACT_PROVIDER_TYPE = 0xeacd;
                var REACT_CONTEXT_TYPE = 0xeace;
                var REACT_FORWARD_REF_TYPE = 0xead0;
                exports.Suspense = 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = 0xead8;
                var REACT_MEMO_TYPE = 0xead3;
                var REACT_LAZY_TYPE = 0xead4;
                var REACT_BLOCK_TYPE = 0xead9;
                var REACT_SERVER_BLOCK_TYPE = 0xeada;
                var REACT_FUNDAMENTAL_TYPE = 0xead5;
                var REACT_SCOPE_TYPE = 0xead7;
                var REACT_OPAQUE_ID_TYPE = 0xeae0;
                var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
                var REACT_OFFSCREEN_TYPE = 0xeae2;
                var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

                if (typeof Symbol === 'function' && Symbol.for) {
                  var symbolFor = Symbol.for;
                  REACT_ELEMENT_TYPE = symbolFor('react.element');
                  REACT_PORTAL_TYPE = symbolFor('react.portal');
                  exports.Fragment = symbolFor('react.fragment');
                  exports.StrictMode = symbolFor('react.strict_mode');
                  exports.Profiler = symbolFor('react.profiler');
                  REACT_PROVIDER_TYPE = symbolFor('react.provider');
                  REACT_CONTEXT_TYPE = symbolFor('react.context');
                  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
                  exports.Suspense = symbolFor('react.suspense');
                  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
                  REACT_MEMO_TYPE = symbolFor('react.memo');
                  REACT_LAZY_TYPE = symbolFor('react.lazy');
                  REACT_BLOCK_TYPE = symbolFor('react.block');
                  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
                  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
                  REACT_SCOPE_TYPE = symbolFor('react.scope');
                  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
                  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor(
                    'react.debug_trace_mode'
                  );
                  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
                  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
                }

                var MAYBE_ITERATOR_SYMBOL =
                  typeof Symbol === 'function' && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = '@@iterator';
                function getIteratorFn(maybeIterable) {
                  if (
                    maybeIterable === null ||
                    typeof maybeIterable !== 'object'
                  ) {
                    return null;
                  }

                  var maybeIterator =
                    (MAYBE_ITERATOR_SYMBOL &&
                      maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                    maybeIterable[FAUX_ITERATOR_SYMBOL];

                  if (typeof maybeIterator === 'function') {
                    return maybeIterator;
                  }

                  return null;
                }

                /**
                 * Keeps track of the current dispatcher.
                 */
                var ReactCurrentDispatcher = {
                  /**
                   * @internal
                   * @type {ReactComponent}
                   */
                  current: null,
                };

                /**
                 * Keeps track of the current batch's configuration such as how long an update
                 * should suspend for if it needs to.
                 */
                var ReactCurrentBatchConfig = {
                  transition: 0,
                };

                /**
                 * Keeps track of the current owner.
                 *
                 * The current owner is the component who should own any components that are
                 * currently being constructed.
                 */
                var ReactCurrentOwner = {
                  /**
                   * @internal
                   * @type {ReactComponent}
                   */
                  current: null,
                };

                var ReactDebugCurrentFrame = {};
                var currentExtraStackFrame = null;
                function setExtraStackFrame(stack) {
                  {
                    currentExtraStackFrame = stack;
                  }
                }

                {
                  ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
                    {
                      currentExtraStackFrame = stack;
                    }
                  }; // Stack implementation injected by the current renderer.

                  ReactDebugCurrentFrame.getCurrentStack = null;

                  ReactDebugCurrentFrame.getStackAddendum = function() {
                    var stack = ''; // Add an extra top frame while an element is being validated

                    if (currentExtraStackFrame) {
                      stack += currentExtraStackFrame;
                    } // Delegate to the injected renderer-specific implementation

                    var impl = ReactDebugCurrentFrame.getCurrentStack;

                    if (impl) {
                      stack += impl() || '';
                    }

                    return stack;
                  };
                }

                /**
                 * Used by act() to track whether you're inside an act() scope.
                 */
                var IsSomeRendererActing = {
                  current: false,
                };

                var ReactSharedInternals = {
                  ReactCurrentDispatcher: ReactCurrentDispatcher,
                  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
                  ReactCurrentOwner: ReactCurrentOwner,
                  IsSomeRendererActing: IsSomeRendererActing,
                  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
                  assign: _assign,
                };

                {
                  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
                }

                // by calls to these methods by a Babel plugin.
                //
                // In PROD (or in packages without access to React internals),
                // they are left as they are instead.

                function warn(format) {
                  {
                    for (
                      var _len = arguments.length,
                        args = new Array(_len > 1 ? _len - 1 : 0),
                        _key = 1;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 1] = arguments[_key];
                    }

                    printWarning('warn', format, args);
                  }
                }
                function error(format) {
                  {
                    for (
                      var _len2 = arguments.length,
                        args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                        _key2 = 1;
                      _key2 < _len2;
                      _key2++
                    ) {
                      args[_key2 - 1] = arguments[_key2];
                    }

                    printWarning('error', format, args);
                  }
                }

                function printWarning(level, format, args) {
                  // When changing this logic, you might want to also
                  // update consoleWithStackDev.www.js as well.
                  {
                    var ReactDebugCurrentFrame =
                      ReactSharedInternals.ReactDebugCurrentFrame;
                    var stack = ReactDebugCurrentFrame.getStackAddendum();

                    if (stack !== '') {
                      format += '%s';
                      args = args.concat([stack]);
                    }

                    var argsWithFormat = args.map(function(item) {
                      return '' + item;
                    }); // Careful: RN currently depends on this prefix

                    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                    // breaks IE9: https://github.com/facebook/react/issues/13610
                    // eslint-disable-next-line react-internal/no-production-logging

                    Function.prototype.apply.call(
                      console[level],
                      console,
                      argsWithFormat
                    );
                  }
                }

                var didWarnStateUpdateForUnmountedComponent = {};

                function warnNoop(publicInstance, callerName) {
                  {
                    var _constructor = publicInstance.constructor;
                    var componentName =
                      (_constructor &&
                        (_constructor.displayName || _constructor.name)) ||
                      'ReactClass';
                    var warningKey = componentName + '.' + callerName;

                    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                      return;
                    }

                    error(
                      "Can't call %s on a component that is not yet mounted. " +
                        'This is a no-op, but it might indicate a bug in your application. ' +
                        'Instead, assign to `this.state` directly or define a `state = {};` ' +
                        'class property with the desired state in the %s component.',
                      callerName,
                      componentName
                    );

                    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
                  }
                }
                /**
                 * This is the abstract API for an update queue.
                 */

                var ReactNoopUpdateQueue = {
                  /**
                   * Checks whether or not this composite component is mounted.
                   * @param {ReactClass} publicInstance The instance we want to test.
                   * @return {boolean} True if mounted, false otherwise.
                   * @protected
                   * @final
                   */
                  isMounted: function(publicInstance) {
                    return false;
                  },

                  /**
                   * Forces an update. This should only be invoked when it is known with
                   * certainty that we are **not** in a DOM transaction.
                   *
                   * You may want to call this when you know that some deeper aspect of the
                   * component's state has changed but `setState` was not called.
                   *
                   * This will not invoke `shouldComponentUpdate`, but it will invoke
                   * `componentWillUpdate` and `componentDidUpdate`.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} callerName name of the calling function in the public API.
                   * @internal
                   */
                  enqueueForceUpdate: function(
                    publicInstance,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'forceUpdate');
                  },

                  /**
                   * Replaces all of the state. Always use this or `setState` to mutate state.
                   * You should treat `this.state` as immutable.
                   *
                   * There is no guarantee that `this.state` will be immediately updated, so
                   * accessing `this.state` after calling this method may return the old value.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {object} completeState Next state.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} callerName name of the calling function in the public API.
                   * @internal
                   */
                  enqueueReplaceState: function(
                    publicInstance,
                    completeState,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'replaceState');
                  },

                  /**
                   * Sets a subset of the state. This only exists because _pendingState is
                   * internal. This provides a merging strategy that is not available to deep
                   * properties which is confusing. TODO: Expose pendingState or don't use it
                   * during the merge.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {object} partialState Next partial state to be merged with state.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} Name of the calling function in the public API.
                   * @internal
                   */
                  enqueueSetState: function(
                    publicInstance,
                    partialState,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'setState');
                  },
                };

                var emptyObject = {};

                {
                  Object.freeze(emptyObject);
                }
                /**
                 * Base class helpers for the updating state of a component.
                 */

                function Component(props, context, updater) {
                  this.props = props;
                  this.context = context; // If a component has string refs, we will assign a different object later.

                  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
                  // renderer.

                  this.updater = updater || ReactNoopUpdateQueue;
                }

                Component.prototype.isReactComponent = {};
                /**
                 * Sets a subset of the state. Always use this to mutate
                 * state. You should treat `this.state` as immutable.
                 *
                 * There is no guarantee that `this.state` will be immediately updated, so
                 * accessing `this.state` after calling this method may return the old value.
                 *
                 * There is no guarantee that calls to `setState` will run synchronously,
                 * as they may eventually be batched together.  You can provide an optional
                 * callback that will be executed when the call to setState is actually
                 * completed.
                 *
                 * When a function is provided to setState, it will be called at some point in
                 * the future (not synchronously). It will be called with the up to date
                 * component arguments (state, props, context). These values can be different
                 * from this.* because your function may be called after receiveProps but before
                 * shouldComponentUpdate, and this new state, props, and context will not yet be
                 * assigned to this.
                 *
                 * @param {object|function} partialState Next partial state or function to
                 *        produce next partial state to be merged with current state.
                 * @param {?function} callback Called after state is updated.
                 * @final
                 * @protected
                 */

                Component.prototype.setState = function(
                  partialState,
                  callback
                ) {
                  if (
                    !(
                      typeof partialState === 'object' ||
                      typeof partialState === 'function' ||
                      partialState == null
                    )
                  ) {
                    {
                      throw Error(
                        'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'
                      );
                    }
                  }

                  this.updater.enqueueSetState(
                    this,
                    partialState,
                    callback,
                    'setState'
                  );
                };
                /**
                 * Forces an update. This should only be invoked when it is known with
                 * certainty that we are **not** in a DOM transaction.
                 *
                 * You may want to call this when you know that some deeper aspect of the
                 * component's state has changed but `setState` was not called.
                 *
                 * This will not invoke `shouldComponentUpdate`, but it will invoke
                 * `componentWillUpdate` and `componentDidUpdate`.
                 *
                 * @param {?function} callback Called after update is complete.
                 * @final
                 * @protected
                 */

                Component.prototype.forceUpdate = function(callback) {
                  this.updater.enqueueForceUpdate(
                    this,
                    callback,
                    'forceUpdate'
                  );
                };
                /**
                 * Deprecated APIs. These APIs used to exist on classic React classes but since
                 * we would like to deprecate them, we're not going to move them over to this
                 * modern base class. Instead, we define a getter that warns if it's accessed.
                 */

                {
                  var deprecatedAPIs = {
                    isMounted: [
                      'isMounted',
                      'Instead, make sure to clean up subscriptions and pending requests in ' +
                        'componentWillUnmount to prevent memory leaks.',
                    ],
                    replaceState: [
                      'replaceState',
                      'Refactor your code to use setState instead (see ' +
                        'https://github.com/facebook/react/issues/3236).',
                    ],
                  };

                  var defineDeprecationWarning = function(methodName, info) {
                    Object.defineProperty(Component.prototype, methodName, {
                      get: function() {
                        warn(
                          '%s(...) is deprecated in plain JavaScript React classes. %s',
                          info[0],
                          info[1]
                        );

                        return undefined;
                      },
                    });
                  };

                  for (var fnName in deprecatedAPIs) {
                    if (deprecatedAPIs.hasOwnProperty(fnName)) {
                      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                    }
                  }
                }

                function ComponentDummy() {}

                ComponentDummy.prototype = Component.prototype;
                /**
                 * Convenience component with default shallow equality check for sCU.
                 */

                function PureComponent(props, context, updater) {
                  this.props = props;
                  this.context = context; // If a component has string refs, we will assign a different object later.

                  this.refs = emptyObject;
                  this.updater = updater || ReactNoopUpdateQueue;
                }

                var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
                pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

                _assign(pureComponentPrototype, Component.prototype);

                pureComponentPrototype.isPureReactComponent = true;

                // an immutable object with a single mutable value
                function createRef() {
                  var refObject = {
                    current: null,
                  };

                  {
                    Object.seal(refObject);
                  }

                  return refObject;
                }

                function getWrappedName(outerType, innerType, wrapperName) {
                  var functionName =
                    innerType.displayName || innerType.name || '';
                  return (
                    outerType.displayName ||
                    (functionName !== ''
                      ? wrapperName + '(' + functionName + ')'
                      : wrapperName)
                  );
                }

                function getContextName(type) {
                  return type.displayName || 'Context';
                }

                function getComponentName(type) {
                  if (type == null) {
                    // Host root, text node or just invalid type.
                    return null;
                  }

                  {
                    if (typeof type.tag === 'number') {
                      error(
                        'Received an unexpected object in getComponentName(). ' +
                          'This is likely a bug in React. Please file an issue.'
                      );
                    }
                  }

                  if (typeof type === 'function') {
                    return type.displayName || type.name || null;
                  }

                  if (typeof type === 'string') {
                    return type;
                  }

                  switch (type) {
                    case exports.Fragment:
                      return 'Fragment';

                    case REACT_PORTAL_TYPE:
                      return 'Portal';

                    case exports.Profiler:
                      return 'Profiler';

                    case exports.StrictMode:
                      return 'StrictMode';

                    case exports.Suspense:
                      return 'Suspense';

                    case REACT_SUSPENSE_LIST_TYPE:
                      return 'SuspenseList';
                  }

                  if (typeof type === 'object') {
                    switch (type.$$typeof) {
                      case REACT_CONTEXT_TYPE:
                        var context = type;
                        return getContextName(context) + '.Consumer';

                      case REACT_PROVIDER_TYPE:
                        var provider = type;
                        return getContextName(provider._context) + '.Provider';

                      case REACT_FORWARD_REF_TYPE:
                        return getWrappedName(type, type.render, 'ForwardRef');

                      case REACT_MEMO_TYPE:
                        return getComponentName(type.type);

                      case REACT_BLOCK_TYPE:
                        return getComponentName(type._render);

                      case REACT_LAZY_TYPE: {
                        var lazyComponent = type;
                        var payload = lazyComponent._payload;
                        var init = lazyComponent._init;

                        try {
                          return getComponentName(init(payload));
                        } catch (x) {
                          return null;
                        }
                      }
                    }
                  }

                  return null;
                }

                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var RESERVED_PROPS = {
                  key: true,
                  ref: true,
                  __self: true,
                  __source: true,
                };
                var specialPropKeyWarningShown,
                  specialPropRefWarningShown,
                  didWarnAboutStringRefs;

                {
                  didWarnAboutStringRefs = {};
                }

                function hasValidRef(config) {
                  {
                    if (hasOwnProperty.call(config, 'ref')) {
                      var getter = Object.getOwnPropertyDescriptor(
                        config,
                        'ref'
                      ).get;

                      if (getter && getter.isReactWarning) {
                        return false;
                      }
                    }
                  }

                  return config.ref !== undefined;
                }

                function hasValidKey(config) {
                  {
                    if (hasOwnProperty.call(config, 'key')) {
                      var getter = Object.getOwnPropertyDescriptor(
                        config,
                        'key'
                      ).get;

                      if (getter && getter.isReactWarning) {
                        return false;
                      }
                    }
                  }

                  return config.key !== undefined;
                }

                function defineKeyPropWarningGetter(props, displayName) {
                  var warnAboutAccessingKey = function() {
                    {
                      if (!specialPropKeyWarningShown) {
                        specialPropKeyWarningShown = true;

                        error(
                          '%s: `key` is not a prop. Trying to access it will result ' +
                            'in `undefined` being returned. If you need to access the same ' +
                            'value within the child component, you should pass it as a different ' +
                            'prop. (https://reactjs.org/link/special-props)',
                          displayName
                        );
                      }
                    }
                  };

                  warnAboutAccessingKey.isReactWarning = true;
                  Object.defineProperty(props, 'key', {
                    get: warnAboutAccessingKey,
                    configurable: true,
                  });
                }

                function defineRefPropWarningGetter(props, displayName) {
                  var warnAboutAccessingRef = function() {
                    {
                      if (!specialPropRefWarningShown) {
                        specialPropRefWarningShown = true;

                        error(
                          '%s: `ref` is not a prop. Trying to access it will result ' +
                            'in `undefined` being returned. If you need to access the same ' +
                            'value within the child component, you should pass it as a different ' +
                            'prop. (https://reactjs.org/link/special-props)',
                          displayName
                        );
                      }
                    }
                  };

                  warnAboutAccessingRef.isReactWarning = true;
                  Object.defineProperty(props, 'ref', {
                    get: warnAboutAccessingRef,
                    configurable: true,
                  });
                }

                function warnIfStringRefCannotBeAutoConverted(config) {
                  {
                    if (
                      typeof config.ref === 'string' &&
                      ReactCurrentOwner.current &&
                      config.__self &&
                      ReactCurrentOwner.current.stateNode !== config.__self
                    ) {
                      var componentName = getComponentName(
                        ReactCurrentOwner.current.type
                      );

                      if (!didWarnAboutStringRefs[componentName]) {
                        error(
                          'Component "%s" contains the string ref "%s". ' +
                            'Support for string refs will be removed in a future major release. ' +
                            'This case cannot be automatically converted to an arrow function. ' +
                            'We ask you to manually fix this case by using useRef() or createRef() instead. ' +
                            'Learn more about using refs safely here: ' +
                            'https://reactjs.org/link/strict-mode-string-ref',
                          componentName,
                          config.ref
                        );

                        didWarnAboutStringRefs[componentName] = true;
                      }
                    }
                  }
                }
                /**
                 * Factory method to create a new React element. This no longer adheres to
                 * the class pattern, so do not use new to call it. Also, instanceof check
                 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
                 * if something is a React Element.
                 *
                 * @param {*} type
                 * @param {*} props
                 * @param {*} key
                 * @param {string|object} ref
                 * @param {*} owner
                 * @param {*} self A *temporary* helper to detect places where `this` is
                 * different from the `owner` when React.createElement is called, so that we
                 * can warn. We want to get rid of owner and replace string `ref`s with arrow
                 * functions, and as long as `this` and owner are the same, there will be no
                 * change in behavior.
                 * @param {*} source An annotation object (added by a transpiler or otherwise)
                 * indicating filename, line number, and/or other information.
                 * @internal
                 */

                var ReactElement = function(
                  type,
                  key,
                  ref,
                  self,
                  source,
                  owner,
                  props
                ) {
                  var element = {
                    // This tag allows us to uniquely identify this as a React Element
                    $$typeof: REACT_ELEMENT_TYPE,
                    // Built-in properties that belong on the element
                    type: type,
                    key: key,
                    ref: ref,
                    props: props,
                    // Record the component responsible for creating this element.
                    _owner: owner,
                  };

                  {
                    // The validation flag is currently mutative. We put it on
                    // an external backing store so that we can freeze the whole object.
                    // This can be replaced with a WeakMap once they are implemented in
                    // commonly used development environments.
                    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
                    // the validation flag non-enumerable (where possible, which should
                    // include every environment we run tests in), so the test framework
                    // ignores it.

                    Object.defineProperty(element._store, 'validated', {
                      configurable: false,
                      enumerable: false,
                      writable: true,
                      value: false,
                    }); // self and source are DEV only properties.

                    Object.defineProperty(element, '_self', {
                      configurable: false,
                      enumerable: false,
                      writable: false,
                      value: self,
                    }); // Two elements created in two different places should be considered
                    // equal for testing purposes and therefore we hide it from enumeration.

                    Object.defineProperty(element, '_source', {
                      configurable: false,
                      enumerable: false,
                      writable: false,
                      value: source,
                    });

                    if (Object.freeze) {
                      Object.freeze(element.props);
                      Object.freeze(element);
                    }
                  }

                  return element;
                };
                /**
                 * Create and return a new ReactElement of the given type.
                 * See https://reactjs.org/docs/react-api.html#createelement
                 */

                function createElement(type, config, children) {
                  var propName; // Reserved names are extracted

                  var props = {};
                  var key = null;
                  var ref = null;
                  var self = null;
                  var source = null;

                  if (config != null) {
                    if (hasValidRef(config)) {
                      ref = config.ref;

                      {
                        warnIfStringRefCannotBeAutoConverted(config);
                      }
                    }

                    if (hasValidKey(config)) {
                      key = '' + config.key;
                    }

                    self = config.__self === undefined ? null : config.__self;
                    source =
                      config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

                    for (propName in config) {
                      if (
                        hasOwnProperty.call(config, propName) &&
                        !RESERVED_PROPS.hasOwnProperty(propName)
                      ) {
                        props[propName] = config[propName];
                      }
                    }
                  } // Children can be more than one argument, and those are transferred onto
                  // the newly allocated props object.

                  var childrenLength = arguments.length - 2;

                  if (childrenLength === 1) {
                    props.children = children;
                  } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength);

                    for (var i = 0; i < childrenLength; i++) {
                      childArray[i] = arguments[i + 2];
                    }

                    {
                      if (Object.freeze) {
                        Object.freeze(childArray);
                      }
                    }

                    props.children = childArray;
                  } // Resolve default props

                  if (type && type.defaultProps) {
                    var defaultProps = type.defaultProps;

                    for (propName in defaultProps) {
                      if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                      }
                    }
                  }

                  {
                    if (key || ref) {
                      var displayName =
                        typeof type === 'function'
                          ? type.displayName || type.name || 'Unknown'
                          : type;

                      if (key) {
                        defineKeyPropWarningGetter(props, displayName);
                      }

                      if (ref) {
                        defineRefPropWarningGetter(props, displayName);
                      }
                    }
                  }

                  return ReactElement(
                    type,
                    key,
                    ref,
                    self,
                    source,
                    ReactCurrentOwner.current,
                    props
                  );
                }
                function cloneAndReplaceKey(oldElement, newKey) {
                  var newElement = ReactElement(
                    oldElement.type,
                    newKey,
                    oldElement.ref,
                    oldElement._self,
                    oldElement._source,
                    oldElement._owner,
                    oldElement.props
                  );
                  return newElement;
                }
                /**
                 * Clone and return a new ReactElement using element as the starting point.
                 * See https://reactjs.org/docs/react-api.html#cloneelement
                 */

                function cloneElement(element, config, children) {
                  if (!!(element === null || element === undefined)) {
                    {
                      throw Error(
                        'React.cloneElement(...): The argument must be a React element, but you passed ' +
                          element +
                          '.'
                      );
                    }
                  }

                  var propName; // Original props are copied

                  var props = _assign({}, element.props); // Reserved names are extracted

                  var key = element.key;
                  var ref = element.ref; // Self is preserved since the owner is preserved.

                  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
                  // transpiler, and the original source is probably a better indicator of the
                  // true owner.

                  var source = element._source; // Owner will be preserved, unless ref is overridden

                  var owner = element._owner;

                  if (config != null) {
                    if (hasValidRef(config)) {
                      // Silently steal the ref from the parent.
                      ref = config.ref;
                      owner = ReactCurrentOwner.current;
                    }

                    if (hasValidKey(config)) {
                      key = '' + config.key;
                    } // Remaining properties override existing props

                    var defaultProps;

                    if (element.type && element.type.defaultProps) {
                      defaultProps = element.type.defaultProps;
                    }

                    for (propName in config) {
                      if (
                        hasOwnProperty.call(config, propName) &&
                        !RESERVED_PROPS.hasOwnProperty(propName)
                      ) {
                        if (
                          config[propName] === undefined &&
                          defaultProps !== undefined
                        ) {
                          // Resolve default props
                          props[propName] = defaultProps[propName];
                        } else {
                          props[propName] = config[propName];
                        }
                      }
                    }
                  } // Children can be more than one argument, and those are transferred onto
                  // the newly allocated props object.

                  var childrenLength = arguments.length - 2;

                  if (childrenLength === 1) {
                    props.children = children;
                  } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength);

                    for (var i = 0; i < childrenLength; i++) {
                      childArray[i] = arguments[i + 2];
                    }

                    props.children = childArray;
                  }

                  return ReactElement(
                    element.type,
                    key,
                    ref,
                    self,
                    source,
                    owner,
                    props
                  );
                }
                /**
                 * Verifies the object is a ReactElement.
                 * See https://reactjs.org/docs/react-api.html#isvalidelement
                 * @param {?object} object
                 * @return {boolean} True if `object` is a ReactElement.
                 * @final
                 */

                function isValidElement(object) {
                  return (
                    typeof object === 'object' &&
                    object !== null &&
                    object.$$typeof === REACT_ELEMENT_TYPE
                  );
                }

                var SEPARATOR = '.';
                var SUBSEPARATOR = ':';
                /**
                 * Escape and wrap key so it is safe to use as a reactid
                 *
                 * @param {string} key to be escaped.
                 * @return {string} the escaped key.
                 */

                function escape(key) {
                  var escapeRegex = /[=:]/g;
                  var escaperLookup = {
                    '=': '=0',
                    ':': '=2',
                  };
                  var escapedString = key.replace(escapeRegex, function(match) {
                    return escaperLookup[match];
                  });
                  return '$' + escapedString;
                }
                /**
                 * TODO: Test that a single child and an array with one item have the same key
                 * pattern.
                 */

                var didWarnAboutMaps = false;
                var userProvidedKeyEscapeRegex = /\/+/g;

                function escapeUserProvidedKey(text) {
                  return text.replace(userProvidedKeyEscapeRegex, '$&/');
                }
                /**
                 * Generate a key string that identifies a element within a set.
                 *
                 * @param {*} element A element that could contain a manual key.
                 * @param {number} index Index that is used if a manual key is not provided.
                 * @return {string}
                 */

                function getElementKey(element, index) {
                  // Do some typechecking here since we call this blindly. We want to ensure
                  // that we don't block potential future ES APIs.
                  if (
                    typeof element === 'object' &&
                    element !== null &&
                    element.key != null
                  ) {
                    // Explicit key
                    return escape('' + element.key);
                  } // Implicit key determined by the index in the set

                  return index.toString(36);
                }

                function mapIntoArray(
                  children,
                  array,
                  escapedPrefix,
                  nameSoFar,
                  callback
                ) {
                  var type = typeof children;

                  if (type === 'undefined' || type === 'boolean') {
                    // All of the above are perceived as null.
                    children = null;
                  }

                  var invokeCallback = false;

                  if (children === null) {
                    invokeCallback = true;
                  } else {
                    switch (type) {
                      case 'string':
                      case 'number':
                        invokeCallback = true;
                        break;

                      case 'object':
                        switch (children.$$typeof) {
                          case REACT_ELEMENT_TYPE:
                          case REACT_PORTAL_TYPE:
                            invokeCallback = true;
                        }
                    }
                  }

                  if (invokeCallback) {
                    var _child = children;
                    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
                    // so that it's consistent if the number of children grows:

                    var childKey =
                      nameSoFar === ''
                        ? SEPARATOR + getElementKey(_child, 0)
                        : nameSoFar;

                    if (Array.isArray(mappedChild)) {
                      var escapedChildKey = '';

                      if (childKey != null) {
                        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                      }

                      mapIntoArray(
                        mappedChild,
                        array,
                        escapedChildKey,
                        '',
                        function(c) {
                          return c;
                        }
                      );
                    } else if (mappedChild != null) {
                      if (isValidElement(mappedChild)) {
                        mappedChild = cloneAndReplaceKey(
                          mappedChild, // Keep both the (mapped) and old keys if they differ, just as
                          // traverseAllChildren used to do for objects as children
                          escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                            (mappedChild.key &&
                            (!_child || _child.key !== mappedChild.key) // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                              ? escapeUserProvidedKey('' + mappedChild.key) +
                                '/'
                              : '') +
                            childKey
                        );
                      }

                      array.push(mappedChild);
                    }

                    return 1;
                  }

                  var child;
                  var nextName;
                  var subtreeCount = 0; // Count of children found in the current subtree.

                  var nextNamePrefix =
                    nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

                  if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      child = children[i];
                      nextName = nextNamePrefix + getElementKey(child, i);
                      subtreeCount += mapIntoArray(
                        child,
                        array,
                        escapedPrefix,
                        nextName,
                        callback
                      );
                    }
                  } else {
                    var iteratorFn = getIteratorFn(children);

                    if (typeof iteratorFn === 'function') {
                      var iterableChildren = children;

                      {
                        // Warn about using Maps as children
                        if (iteratorFn === iterableChildren.entries) {
                          if (!didWarnAboutMaps) {
                            warn(
                              'Using Maps as children is not supported. ' +
                                'Use an array of keyed ReactElements instead.'
                            );
                          }

                          didWarnAboutMaps = true;
                        }
                      }

                      var iterator = iteratorFn.call(iterableChildren);
                      var step;
                      var ii = 0;

                      while (!(step = iterator.next()).done) {
                        child = step.value;
                        nextName = nextNamePrefix + getElementKey(child, ii++);
                        subtreeCount += mapIntoArray(
                          child,
                          array,
                          escapedPrefix,
                          nextName,
                          callback
                        );
                      }
                    } else if (type === 'object') {
                      var childrenString = '' + children;

                      {
                        {
                          throw Error(
                            'Objects are not valid as a React child (found: ' +
                              (childrenString === '[object Object]'
                                ? 'object with keys {' +
                                  Object.keys(children).join(', ') +
                                  '}'
                                : childrenString) +
                              '). If you meant to render a collection of children, use an array instead.'
                          );
                        }
                      }
                    }
                  }

                  return subtreeCount;
                }

                /**
                 * Maps children that are typically specified as `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
                 *
                 * The provided mapFunction(child, index) will be called for each
                 * leaf child.
                 *
                 * @param {?*} children Children tree container.
                 * @param {function(*, int)} func The map function.
                 * @param {*} context Context for mapFunction.
                 * @return {object} Object containing the ordered map of results.
                 */
                function mapChildren(children, func, context) {
                  if (children == null) {
                    return children;
                  }

                  var result = [];
                  var count = 0;
                  mapIntoArray(children, result, '', '', function(child) {
                    return func.call(context, child, count++);
                  });
                  return result;
                }
                /**
                 * Count the number of children that are typically specified as
                 * `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrencount
                 *
                 * @param {?*} children Children tree container.
                 * @return {number} The number of children.
                 */

                function countChildren(children) {
                  var n = 0;
                  mapChildren(children, function() {
                    n++; // Don't return anything
                  });
                  return n;
                }

                /**
                 * Iterates through children that are typically specified as `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
                 *
                 * The provided forEachFunc(child, index) will be called for each
                 * leaf child.
                 *
                 * @param {?*} children Children tree container.
                 * @param {function(*, int)} forEachFunc
                 * @param {*} forEachContext Context for forEachContext.
                 */
                function forEachChildren(
                  children,
                  forEachFunc,
                  forEachContext
                ) {
                  mapChildren(
                    children,
                    function() {
                      forEachFunc.apply(this, arguments); // Don't return anything.
                    },
                    forEachContext
                  );
                }
                /**
                 * Flatten a children object (typically specified as `props.children`) and
                 * return an array with appropriately re-keyed children.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
                 */

                function toArray(children) {
                  return (
                    mapChildren(children, function(child) {
                      return child;
                    }) || []
                  );
                }
                /**
                 * Returns the first child in a collection of children and verifies that there
                 * is only one child in the collection.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
                 *
                 * The current implementation of this function assumes that a single child gets
                 * passed without a wrapper, but the purpose of this helper function is to
                 * abstract away the particular structure of children.
                 *
                 * @param {?object} children Child collection structure.
                 * @return {ReactElement} The first and only `ReactElement` contained in the
                 * structure.
                 */

                function onlyChild(children) {
                  if (!isValidElement(children)) {
                    {
                      throw Error(
                        'React.Children.only expected to receive a single React element child.'
                      );
                    }
                  }

                  return children;
                }

                function createContext(defaultValue, calculateChangedBits) {
                  if (calculateChangedBits === undefined) {
                    calculateChangedBits = null;
                  } else {
                    {
                      if (
                        calculateChangedBits !== null &&
                        typeof calculateChangedBits !== 'function'
                      ) {
                        error(
                          'createContext: Expected the optional second argument to be a ' +
                            'function. Instead received: %s',
                          calculateChangedBits
                        );
                      }
                    }
                  }

                  var context = {
                    $$typeof: REACT_CONTEXT_TYPE,
                    _calculateChangedBits: calculateChangedBits,
                    // As a workaround to support multiple concurrent renderers, we categorize
                    // some renderers as primary and others as secondary. We only expect
                    // there to be two concurrent renderers at most: React Native (primary) and
                    // Fabric (secondary); React DOM (primary) and React ART (secondary).
                    // Secondary renderers store their context values on separate fields.
                    _currentValue: defaultValue,
                    _currentValue2: defaultValue,
                    // Used to track how many concurrent renderers this context currently
                    // supports within in a single renderer. Such as parallel server rendering.
                    _threadCount: 0,
                    // These are circular
                    Provider: null,
                    Consumer: null,
                  };
                  context.Provider = {
                    $$typeof: REACT_PROVIDER_TYPE,
                    _context: context,
                  };
                  var hasWarnedAboutUsingNestedContextConsumers = false;
                  var hasWarnedAboutUsingConsumerProvider = false;
                  var hasWarnedAboutDisplayNameOnConsumer = false;

                  {
                    // A separate object, but proxies back to the original context object for
                    // backwards compatibility. It has a different $$typeof, so we can properly
                    // warn for the incorrect usage of Context as a Consumer.
                    var Consumer = {
                      $$typeof: REACT_CONTEXT_TYPE,
                      _context: context,
                      _calculateChangedBits: context._calculateChangedBits,
                    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

                    Object.defineProperties(Consumer, {
                      Provider: {
                        get: function() {
                          if (!hasWarnedAboutUsingConsumerProvider) {
                            hasWarnedAboutUsingConsumerProvider = true;

                            error(
                              'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +
                                'a future major release. Did you mean to render <Context.Provider> instead?'
                            );
                          }

                          return context.Provider;
                        },
                        set: function(_Provider) {
                          context.Provider = _Provider;
                        },
                      },
                      _currentValue: {
                        get: function() {
                          return context._currentValue;
                        },
                        set: function(_currentValue) {
                          context._currentValue = _currentValue;
                        },
                      },
                      _currentValue2: {
                        get: function() {
                          return context._currentValue2;
                        },
                        set: function(_currentValue2) {
                          context._currentValue2 = _currentValue2;
                        },
                      },
                      _threadCount: {
                        get: function() {
                          return context._threadCount;
                        },
                        set: function(_threadCount) {
                          context._threadCount = _threadCount;
                        },
                      },
                      Consumer: {
                        get: function() {
                          if (!hasWarnedAboutUsingNestedContextConsumers) {
                            hasWarnedAboutUsingNestedContextConsumers = true;

                            error(
                              'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +
                                'a future major release. Did you mean to render <Context.Consumer> instead?'
                            );
                          }

                          return context.Consumer;
                        },
                      },
                      displayName: {
                        get: function() {
                          return context.displayName;
                        },
                        set: function(displayName) {
                          if (!hasWarnedAboutDisplayNameOnConsumer) {
                            warn(
                              'Setting `displayName` on Context.Consumer has no effect. ' +
                                "You should set it directly on the context with Context.displayName = '%s'.",
                              displayName
                            );

                            hasWarnedAboutDisplayNameOnConsumer = true;
                          }
                        },
                      },
                    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

                    context.Consumer = Consumer;
                  }

                  {
                    context._currentRenderer = null;
                    context._currentRenderer2 = null;
                  }

                  return context;
                }

                var Uninitialized = -1;
                var Pending = 0;
                var Resolved = 1;
                var Rejected = 2;

                function lazyInitializer(payload) {
                  if (payload._status === Uninitialized) {
                    var ctor = payload._result;
                    var thenable = ctor(); // Transition to the next state.

                    var pending = payload;
                    pending._status = Pending;
                    pending._result = thenable;
                    thenable.then(
                      function(moduleObject) {
                        if (payload._status === Pending) {
                          var defaultExport = moduleObject.default;

                          {
                            if (defaultExport === undefined) {
                              error(
                                'lazy: Expected the result of a dynamic import() call. ' +
                                'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
                                  'const MyComponent = lazy(() => imp' +
                                  "ort('./MyComponent'))",
                                moduleObject
                              );
                            }
                          } // Transition to the next state.

                          var resolved = payload;
                          resolved._status = Resolved;
                          resolved._result = defaultExport;
                        }
                      },
                      function(error) {
                        if (payload._status === Pending) {
                          // Transition to the next state.
                          var rejected = payload;
                          rejected._status = Rejected;
                          rejected._result = error;
                        }
                      }
                    );
                  }

                  if (payload._status === Resolved) {
                    return payload._result;
                  } else {
                    throw payload._result;
                  }
                }

                function lazy(ctor) {
                  var payload = {
                    // We use these fields to store the result.
                    _status: -1,
                    _result: ctor,
                  };
                  var lazyType = {
                    $$typeof: REACT_LAZY_TYPE,
                    _payload: payload,
                    _init: lazyInitializer,
                  };

                  {
                    // In production, this would just set it on the object.
                    var defaultProps;
                    var propTypes; // $FlowFixMe

                    Object.defineProperties(lazyType, {
                      defaultProps: {
                        configurable: true,
                        get: function() {
                          return defaultProps;
                        },
                        set: function(newDefaultProps) {
                          error(
                            'React.lazy(...): It is not supported to assign `defaultProps` to ' +
                              'a lazy component import. Either specify them where the component ' +
                              'is defined, or create a wrapping component around it.'
                          );

                          defaultProps = newDefaultProps; // Match production behavior more closely:
                          // $FlowFixMe

                          Object.defineProperty(lazyType, 'defaultProps', {
                            enumerable: true,
                          });
                        },
                      },
                      propTypes: {
                        configurable: true,
                        get: function() {
                          return propTypes;
                        },
                        set: function(newPropTypes) {
                          error(
                            'React.lazy(...): It is not supported to assign `propTypes` to ' +
                              'a lazy component import. Either specify them where the component ' +
                              'is defined, or create a wrapping component around it.'
                          );

                          propTypes = newPropTypes; // Match production behavior more closely:
                          // $FlowFixMe

                          Object.defineProperty(lazyType, 'propTypes', {
                            enumerable: true,
                          });
                        },
                      },
                    });
                  }

                  return lazyType;
                }

                function forwardRef(render) {
                  {
                    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                      error(
                        'forwardRef requires a render function but received a `memo` ' +
                          'component. Instead of forwardRef(memo(...)), use ' +
                          'memo(forwardRef(...)).'
                      );
                    } else if (typeof render !== 'function') {
                      error(
                        'forwardRef requires a render function but was given %s.',
                        render === null ? 'null' : typeof render
                      );
                    } else {
                      if (render.length !== 0 && render.length !== 2) {
                        error(
                          'forwardRef render functions accept exactly two parameters: props and ref. %s',
                          render.length === 1
                            ? 'Did you forget to use the ref parameter?'
                            : 'Any additional parameter will be undefined.'
                        );
                      }
                    }

                    if (render != null) {
                      if (
                        render.defaultProps != null ||
                        render.propTypes != null
                      ) {
                        error(
                          'forwardRef render functions do not support propTypes or defaultProps. ' +
                            'Did you accidentally pass a React component?'
                        );
                      }
                    }
                  }

                  var elementType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: render,
                  };

                  {
                    var ownName;
                    Object.defineProperty(elementType, 'displayName', {
                      enumerable: false,
                      configurable: true,
                      get: function() {
                        return ownName;
                      },
                      set: function(name) {
                        ownName = name;

                        if (render.displayName == null) {
                          render.displayName = name;
                        }
                      },
                    });
                  }

                  return elementType;
                }

                // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

                var enableScopeAPI = false; // Experimental Create Event Handle API.

                function isValidElementType(type) {
                  if (typeof type === 'string' || typeof type === 'function') {
                    return true;
                  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

                  if (
                    type === exports.Fragment ||
                    type === exports.Profiler ||
                    type === REACT_DEBUG_TRACING_MODE_TYPE ||
                    type === exports.StrictMode ||
                    type === exports.Suspense ||
                    type === REACT_SUSPENSE_LIST_TYPE ||
                    type === REACT_LEGACY_HIDDEN_TYPE ||
                    enableScopeAPI
                  ) {
                    return true;
                  }

                  if (typeof type === 'object' && type !== null) {
                    if (
                      type.$$typeof === REACT_LAZY_TYPE ||
                      type.$$typeof === REACT_MEMO_TYPE ||
                      type.$$typeof === REACT_PROVIDER_TYPE ||
                      type.$$typeof === REACT_CONTEXT_TYPE ||
                      type.$$typeof === REACT_FORWARD_REF_TYPE ||
                      type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                      type.$$typeof === REACT_BLOCK_TYPE ||
                      type[0] === REACT_SERVER_BLOCK_TYPE
                    ) {
                      return true;
                    }
                  }

                  return false;
                }

                function memo(type, compare) {
                  {
                    if (!isValidElementType(type)) {
                      error(
                        'memo: The first argument must be a component. Instead ' +
                          'received: %s',
                        type === null ? 'null' : typeof type
                      );
                    }
                  }

                  var elementType = {
                    $$typeof: REACT_MEMO_TYPE,
                    type: type,
                    compare: compare === undefined ? null : compare,
                  };

                  {
                    var ownName;
                    Object.defineProperty(elementType, 'displayName', {
                      enumerable: false,
                      configurable: true,
                      get: function() {
                        return ownName;
                      },
                      set: function(name) {
                        ownName = name;

                        if (type.displayName == null) {
                          type.displayName = name;
                        }
                      },
                    });
                  }

                  return elementType;
                }

                function resolveDispatcher() {
                  var dispatcher = ReactCurrentDispatcher.current;

                  if (!(dispatcher !== null)) {
                    {
                      throw Error(
                        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.'
                      );
                    }
                  }

                  return dispatcher;
                }

                function useContext(Context, unstable_observedBits) {
                  var dispatcher = resolveDispatcher();

                  {
                    if (unstable_observedBits !== undefined) {
                      error(
                        'useContext() second argument is reserved for future ' +
                          'use in React. Passing it is not supported. ' +
                          'You passed: %s.%s',
                        unstable_observedBits,
                        typeof unstable_observedBits === 'number' &&
                          Array.isArray(arguments[2])
                          ? '\n\nDid you call array.map(useContext)? ' +
                              'Calling Hooks inside a loop is not supported. ' +
                              'Learn more at https://reactjs.org/link/rules-of-hooks'
                          : ''
                      );
                    } // TODO: add a more generic warning for invalid values.

                    if (Context._context !== undefined) {
                      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
                      // and nobody should be using this in existing code.

                      if (realContext.Consumer === Context) {
                        error(
                          'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' +
                            'removed in a future major release. Did you mean to call useContext(Context) instead?'
                        );
                      } else if (realContext.Provider === Context) {
                        error(
                          'Calling useContext(Context.Provider) is not supported. ' +
                            'Did you mean to call useContext(Context) instead?'
                        );
                      }
                    }
                  }

                  return dispatcher.useContext(Context, unstable_observedBits);
                }
                function useState(initialState) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useState(initialState);
                }
                function useReducer(reducer, initialArg, init) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useReducer(reducer, initialArg, init);
                }
                function useRef(initialValue) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useRef(initialValue);
                }
                function useEffect(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useEffect(create, deps);
                }
                function useLayoutEffect(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useLayoutEffect(create, deps);
                }
                function useCallback(callback, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useCallback(callback, deps);
                }
                function useMemo(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useMemo(create, deps);
                }
                function useImperativeHandle(ref, create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useImperativeHandle(ref, create, deps);
                }
                function useDebugValue(value, formatterFn) {
                  {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useDebugValue(value, formatterFn);
                  }
                }

                // Helpers to patch console.logs to avoid logging during side-effect free
                // replaying on render function. This currently only patches the object
                // lazily which won't cover if the log function was extracted eagerly.
                // We could also eagerly patch the method.
                var disabledDepth = 0;
                var prevLog;
                var prevInfo;
                var prevWarn;
                var prevError;
                var prevGroup;
                var prevGroupCollapsed;
                var prevGroupEnd;

                function disabledLog() {}

                disabledLog.__reactDisabledLog = true;
                function disableLogs() {
                  {
                    if (disabledDepth === 0) {
                      /* eslint-disable react-internal/no-production-logging */
                      prevLog = console.log;
                      prevInfo = console.info;
                      prevWarn = console.warn;
                      prevError = console.error;
                      prevGroup = console.group;
                      prevGroupCollapsed = console.groupCollapsed;
                      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

                      var props = {
                        configurable: true,
                        enumerable: true,
                        value: disabledLog,
                        writable: true,
                      }; // $FlowFixMe Flow thinks console is immutable.

                      Object.defineProperties(console, {
                        info: props,
                        log: props,
                        warn: props,
                        error: props,
                        group: props,
                        groupCollapsed: props,
                        groupEnd: props,
                      });
                      /* eslint-enable react-internal/no-production-logging */
                    }

                    disabledDepth++;
                  }
                }
                function reenableLogs() {
                  {
                    disabledDepth--;

                    if (disabledDepth === 0) {
                      /* eslint-disable react-internal/no-production-logging */
                      var props = {
                        configurable: true,
                        enumerable: true,
                        writable: true,
                      }; // $FlowFixMe Flow thinks console is immutable.

                      Object.defineProperties(console, {
                        log: _assign({}, props, {
                          value: prevLog,
                        }),
                        info: _assign({}, props, {
                          value: prevInfo,
                        }),
                        warn: _assign({}, props, {
                          value: prevWarn,
                        }),
                        error: _assign({}, props, {
                          value: prevError,
                        }),
                        group: _assign({}, props, {
                          value: prevGroup,
                        }),
                        groupCollapsed: _assign({}, props, {
                          value: prevGroupCollapsed,
                        }),
                        groupEnd: _assign({}, props, {
                          value: prevGroupEnd,
                        }),
                      });
                      /* eslint-enable react-internal/no-production-logging */
                    }

                    if (disabledDepth < 0) {
                      error(
                        'disabledDepth fell below zero. ' +
                          'This is a bug in React. Please file an issue.'
                      );
                    }
                  }
                }

                var ReactCurrentDispatcher$1 =
                  ReactSharedInternals.ReactCurrentDispatcher;
                var prefix;
                function describeBuiltInComponentFrame(name, source, ownerFn) {
                  {
                    if (prefix === undefined) {
                      // Extract the VM specific prefix used by each line.
                      try {
                        throw Error();
                      } catch (x) {
                        var match = x.stack.trim().match(/\n( *(at )?)/);
                        prefix = (match && match[1]) || '';
                      }
                    } // We use the prefix to ensure our stacks line up with native stack frames.

                    return '\n' + prefix + name;
                  }
                }
                var reentry = false;
                var componentFrameCache;

                {
                  var PossiblyWeakMap =
                    typeof WeakMap === 'function' ? WeakMap : Map;
                  componentFrameCache = new PossiblyWeakMap();
                }

                function describeNativeComponentFrame(fn, construct) {
                  // If something asked for a stack inside a fake render, it should get ignored.
                  if (!fn || reentry) {
                    return '';
                  }

                  {
                    var frame = componentFrameCache.get(fn);

                    if (frame !== undefined) {
                      return frame;
                    }
                  }

                  var control;
                  reentry = true;
                  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

                  Error.prepareStackTrace = undefined;
                  var previousDispatcher;

                  {
                    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
                    // for warnings.

                    ReactCurrentDispatcher$1.current = null;
                    disableLogs();
                  }

                  try {
                    // This should throw.
                    if (construct) {
                      // Something should be setting the props in the constructor.
                      var Fake = function() {
                        throw Error();
                      }; // $FlowFixMe

                      Object.defineProperty(Fake.prototype, 'props', {
                        set: function() {
                          // We use a throwing setter instead of frozen or non-writable props
                          // because that won't throw in a non-strict mode function.
                          throw Error();
                        },
                      });

                      if (typeof Reflect === 'object' && Reflect.construct) {
                        // We construct a different control for this case to include any extra
                        // frames added by the construct call.
                        try {
                          Reflect.construct(Fake, []);
                        } catch (x) {
                          control = x;
                        }

                        Reflect.construct(fn, [], Fake);
                      } else {
                        try {
                          Fake.call();
                        } catch (x) {
                          control = x;
                        }

                        fn.call(Fake.prototype);
                      }
                    } else {
                      try {
                        throw Error();
                      } catch (x) {
                        control = x;
                      }

                      fn();
                    }
                  } catch (sample) {
                    // This is inlined manually because closure doesn't do it for us.
                    if (sample && control && typeof sample.stack === 'string') {
                      // This extracts the first frame from the sample that isn't also in the control.
                      // Skipping one frame that we assume is the frame that calls the two.
                      var sampleLines = sample.stack.split('\n');
                      var controlLines = control.stack.split('\n');
                      var s = sampleLines.length - 1;
                      var c = controlLines.length - 1;

                      while (
                        s >= 1 &&
                        c >= 0 &&
                        sampleLines[s] !== controlLines[c]
                      ) {
                        // We expect at least one stack frame to be shared.
                        // Typically this will be the root most one. However, stack frames may be
                        // cut off due to maximum stack limits. In this case, one maybe cut off
                        // earlier than the other. We assume that the sample is longer or the same
                        // and there for cut off earlier. So we should find the root most frame in
                        // the sample somewhere in the control.
                        c--;
                      }

                      for (; s >= 1 && c >= 0; s--, c--) {
                        // Next we find the first one that isn't the same which should be the
                        // frame that called our sample function and the control.
                        if (sampleLines[s] !== controlLines[c]) {
                          // In V8, the first line is describing the message but other VMs don't.
                          // If we're about to return the first line, and the control is also on the same
                          // line, that's a pretty good indicator that our sample threw at same line as
                          // the control. I.e. before we entered the sample frame. So we ignore this result.
                          // This can happen if you passed a class to function component, or non-function.
                          if (s !== 1 || c !== 1) {
                            do {
                              s--;
                              c--; // We may still have similar intermediate frames from the construct call.
                              // The next one that isn't the same should be our match though.

                              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                                var _frame =
                                  '\n' +
                                  sampleLines[s].replace(' at new ', ' at ');

                                {
                                  if (typeof fn === 'function') {
                                    componentFrameCache.set(fn, _frame);
                                  }
                                } // Return the line we found.

                                return _frame;
                              }
                            } while (s >= 1 && c >= 0);
                          }

                          break;
                        }
                      }
                    }
                  } finally {
                    reentry = false;

                    {
                      ReactCurrentDispatcher$1.current = previousDispatcher;
                      reenableLogs();
                    }

                    Error.prepareStackTrace = previousPrepareStackTrace;
                  } // Fallback to just using the name if we couldn't make it throw.

                  var name = fn ? fn.displayName || fn.name : '';
                  var syntheticFrame = name
                    ? describeBuiltInComponentFrame(name)
                    : '';

                  {
                    if (typeof fn === 'function') {
                      componentFrameCache.set(fn, syntheticFrame);
                    }
                  }

                  return syntheticFrame;
                }
                function describeFunctionComponentFrame(fn, source, ownerFn) {
                  {
                    return describeNativeComponentFrame(fn, false);
                  }
                }

                function shouldConstruct(Component) {
                  var prototype = Component.prototype;
                  return !!(prototype && prototype.isReactComponent);
                }

                function describeUnknownElementTypeFrameInDEV(
                  type,
                  source,
                  ownerFn
                ) {
                  if (type == null) {
                    return '';
                  }

                  if (typeof type === 'function') {
                    {
                      return describeNativeComponentFrame(
                        type,
                        shouldConstruct(type)
                      );
                    }
                  }

                  if (typeof type === 'string') {
                    return describeBuiltInComponentFrame(type);
                  }

                  switch (type) {
                    case exports.Suspense:
                      return describeBuiltInComponentFrame('Suspense');

                    case REACT_SUSPENSE_LIST_TYPE:
                      return describeBuiltInComponentFrame('SuspenseList');
                  }

                  if (typeof type === 'object') {
                    switch (type.$$typeof) {
                      case REACT_FORWARD_REF_TYPE:
                        return describeFunctionComponentFrame(type.render);

                      case REACT_MEMO_TYPE:
                        // Memo may contain any component type so we recursively resolve it.
                        return describeUnknownElementTypeFrameInDEV(
                          type.type,
                          source,
                          ownerFn
                        );

                      case REACT_BLOCK_TYPE:
                        return describeFunctionComponentFrame(type._render);

                      case REACT_LAZY_TYPE: {
                        var lazyComponent = type;
                        var payload = lazyComponent._payload;
                        var init = lazyComponent._init;

                        try {
                          // Lazy may contain any component type so we recursively resolve it.
                          return describeUnknownElementTypeFrameInDEV(
                            init(payload),
                            source,
                            ownerFn
                          );
                        } catch (x) {}
                      }
                    }
                  }

                  return '';
                }

                var loggedTypeFailures = {};
                var ReactDebugCurrentFrame$1 =
                  ReactSharedInternals.ReactDebugCurrentFrame;

                function setCurrentlyValidatingElement(element) {
                  {
                    if (element) {
                      var owner = element._owner;
                      var stack = describeUnknownElementTypeFrameInDEV(
                        element.type,
                        element._source,
                        owner ? owner.type : null
                      );
                      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                    } else {
                      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                    }
                  }
                }

                function checkPropTypes(
                  typeSpecs,
                  values,
                  location,
                  componentName,
                  element
                ) {
                  {
                    // $FlowFixMe This is okay but Flow doesn't know it.
                    var has = Function.call.bind(
                      Object.prototype.hasOwnProperty
                    );

                    for (var typeSpecName in typeSpecs) {
                      if (has(typeSpecs, typeSpecName)) {
                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                        // fail the render phase where it didn't fail before. So we log it.
                        // After these have been cleaned up, we'll let them throw.

                        try {
                          // This is intentionally an invariant that gets caught. It's the same
                          // behavior as without this statement except with a better message.
                          if (typeof typeSpecs[typeSpecName] !== 'function') {
                            var err = Error(
                              (componentName || 'React class') +
                                ': ' +
                                location +
                                ' type `' +
                                typeSpecName +
                                '` is invalid; ' +
                                'it must be a function, usually from the `prop-types` package, but received `' +
                                typeof typeSpecs[typeSpecName] +
                                '`.' +
                                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                            );
                            err.name = 'Invariant Violation';
                            throw err;
                          }

                          error$1 = typeSpecs[typeSpecName](
                            values,
                            typeSpecName,
                            componentName,
                            location,
                            null,
                            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
                          );
                        } catch (ex) {
                          error$1 = ex;
                        }

                        if (error$1 && !(error$1 instanceof Error)) {
                          setCurrentlyValidatingElement(element);

                          error(
                            '%s: type specification of %s' +
                              ' `%s` is invalid; the type checker ' +
                              'function must return `null` or an `Error` but returned a %s. ' +
                              'You may have forgotten to pass an argument to the type checker ' +
                              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                              'shape all require an argument).',
                            componentName || 'React class',
                            location,
                            typeSpecName,
                            typeof error$1
                          );

                          setCurrentlyValidatingElement(null);
                        }

                        if (
                          error$1 instanceof Error &&
                          !(error$1.message in loggedTypeFailures)
                        ) {
                          // Only monitor this failure once because there tends to be a lot of the
                          // same error.
                          loggedTypeFailures[error$1.message] = true;
                          setCurrentlyValidatingElement(element);

                          error(
                            'Failed %s type: %s',
                            location,
                            error$1.message
                          );

                          setCurrentlyValidatingElement(null);
                        }
                      }
                    }
                  }
                }

                function setCurrentlyValidatingElement$1(element) {
                  {
                    if (element) {
                      var owner = element._owner;
                      var stack = describeUnknownElementTypeFrameInDEV(
                        element.type,
                        element._source,
                        owner ? owner.type : null
                      );
                      setExtraStackFrame(stack);
                    } else {
                      setExtraStackFrame(null);
                    }
                  }
                }

                var propTypesMisspellWarningShown;

                {
                  propTypesMisspellWarningShown = false;
                }

                function getDeclarationErrorAddendum() {
                  if (ReactCurrentOwner.current) {
                    var name = getComponentName(ReactCurrentOwner.current.type);

                    if (name) {
                      return '\n\nCheck the render method of `' + name + '`.';
                    }
                  }

                  return '';
                }

                function getSourceInfoErrorAddendum(source) {
                  if (source !== undefined) {
                    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                    var lineNumber = source.lineNumber;
                    return (
                      '\n\nCheck your code at ' +
                      fileName +
                      ':' +
                      lineNumber +
                      '.'
                    );
                  }

                  return '';
                }

                function getSourceInfoErrorAddendumForProps(elementProps) {
                  if (elementProps !== null && elementProps !== undefined) {
                    return getSourceInfoErrorAddendum(elementProps.__source);
                  }

                  return '';
                }
                /**
                 * Warn if there's no key explicitly set on dynamic arrays of children or
                 * object keys are not valid. This allows us to keep track of children between
                 * updates.
                 */

                var ownerHasKeyUseWarning = {};

                function getCurrentComponentErrorInfo(parentType) {
                  var info = getDeclarationErrorAddendum();

                  if (!info) {
                    var parentName =
                      typeof parentType === 'string'
                        ? parentType
                        : parentType.displayName || parentType.name;

                    if (parentName) {
                      info =
                        '\n\nCheck the top-level render call using <' +
                        parentName +
                        '>.';
                    }
                  }

                  return info;
                }
                /**
                 * Warn if the element doesn't have an explicit key assigned to it.
                 * This element is in an array. The array could grow and shrink or be
                 * reordered. All children that haven't already been validated are required to
                 * have a "key" property assigned to it. Error statuses are cached so a warning
                 * will only be shown once.
                 *
                 * @internal
                 * @param {ReactElement} element Element that requires a key.
                 * @param {*} parentType element's parent's type.
                 */

                function validateExplicitKey(element, parentType) {
                  if (
                    !element._store ||
                    element._store.validated ||
                    element.key != null
                  ) {
                    return;
                  }

                  element._store.validated = true;
                  var currentComponentErrorInfo = getCurrentComponentErrorInfo(
                    parentType
                  );

                  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                    return;
                  }

                  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
                  // property, it may be the creator of the child that's responsible for
                  // assigning it a key.

                  var childOwner = '';

                  if (
                    element &&
                    element._owner &&
                    element._owner !== ReactCurrentOwner.current
                  ) {
                    // Give the component that originally created this child.
                    childOwner =
                      ' It was passed a child from ' +
                      getComponentName(element._owner.type) +
                      '.';
                  }

                  {
                    setCurrentlyValidatingElement$1(element);

                    error(
                      'Each child in a list should have a unique "key" prop.' +
                        '%s%s See https://reactjs.org/link/warning-keys for more information.',
                      currentComponentErrorInfo,
                      childOwner
                    );

                    setCurrentlyValidatingElement$1(null);
                  }
                }
                /**
                 * Ensure that every element either is passed in a static location, in an
                 * array with an explicit keys property defined, or in an object literal
                 * with valid key property.
                 *
                 * @internal
                 * @param {ReactNode} node Statically passed child of any type.
                 * @param {*} parentType node's parent's type.
                 */

                function validateChildKeys(node, parentType) {
                  if (typeof node !== 'object') {
                    return;
                  }

                  if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                      var child = node[i];

                      if (isValidElement(child)) {
                        validateExplicitKey(child, parentType);
                      }
                    }
                  } else if (isValidElement(node)) {
                    // This element was passed in a valid location.
                    if (node._store) {
                      node._store.validated = true;
                    }
                  } else if (node) {
                    var iteratorFn = getIteratorFn(node);

                    if (typeof iteratorFn === 'function') {
                      // Entry iterators used to provide implicit keys,
                      // but now we print a separate warning for them later.
                      if (iteratorFn !== node.entries) {
                        var iterator = iteratorFn.call(node);
                        var step;

                        while (!(step = iterator.next()).done) {
                          if (isValidElement(step.value)) {
                            validateExplicitKey(step.value, parentType);
                          }
                        }
                      }
                    }
                  }
                }
                /**
                 * Given an element, validate that its props follow the propTypes definition,
                 * provided by the type.
                 *
                 * @param {ReactElement} element
                 */

                function validatePropTypes(element) {
                  {
                    var type = element.type;

                    if (
                      type === null ||
                      type === undefined ||
                      typeof type === 'string'
                    ) {
                      return;
                    }

                    var propTypes;

                    if (typeof type === 'function') {
                      propTypes = type.propTypes;
                    } else if (
                      typeof type === 'object' &&
                      (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                        // Inner props are checked in the reconciler.
                        type.$$typeof === REACT_MEMO_TYPE)
                    ) {
                      propTypes = type.propTypes;
                    } else {
                      return;
                    }

                    if (propTypes) {
                      // Intentionally inside to avoid triggering lazy initializers:
                      var name = getComponentName(type);
                      checkPropTypes(
                        propTypes,
                        element.props,
                        'prop',
                        name,
                        element
                      );
                    } else if (
                      type.PropTypes !== undefined &&
                      !propTypesMisspellWarningShown
                    ) {
                      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

                      var _name = getComponentName(type);

                      error(
                        'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                        _name || 'Unknown'
                      );
                    }

                    if (
                      typeof type.getDefaultProps === 'function' &&
                      !type.getDefaultProps.isReactClassApproved
                    ) {
                      error(
                        'getDefaultProps is only used on classic React.createClass ' +
                          'definitions. Use a static property named `defaultProps` instead.'
                      );
                    }
                  }
                }
                /**
                 * Given a fragment, validate that it can only be provided with fragment props
                 * @param {ReactElement} fragment
                 */

                function validateFragmentProps(fragment) {
                  {
                    var keys = Object.keys(fragment.props);

                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];

                      if (key !== 'children' && key !== 'key') {
                        setCurrentlyValidatingElement$1(fragment);

                        error(
                          'Invalid prop `%s` supplied to `React.Fragment`. ' +
                            'React.Fragment can only have `key` and `children` props.',
                          key
                        );

                        setCurrentlyValidatingElement$1(null);
                        break;
                      }
                    }

                    if (fragment.ref !== null) {
                      setCurrentlyValidatingElement$1(fragment);

                      error(
                        'Invalid attribute `ref` supplied to `React.Fragment`.'
                      );

                      setCurrentlyValidatingElement$1(null);
                    }
                  }
                }
                function createElementWithValidation(type, props, children) {
                  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
                  // succeed and there will likely be errors in render.

                  if (!validType) {
                    var info = '';

                    if (
                      type === undefined ||
                      (typeof type === 'object' &&
                        type !== null &&
                        Object.keys(type).length === 0)
                    ) {
                      info +=
                        ' You likely forgot to export your component from the file ' +
                        "it's defined in, or you might have mixed up default and named imports.";
                    }

                    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

                    if (sourceInfo) {
                      info += sourceInfo;
                    } else {
                      info += getDeclarationErrorAddendum();
                    }

                    var typeString;

                    if (type === null) {
                      typeString = 'null';
                    } else if (Array.isArray(type)) {
                      typeString = 'array';
                    } else if (
                      type !== undefined &&
                      type.$$typeof === REACT_ELEMENT_TYPE
                    ) {
                      typeString =
                        '<' +
                        (getComponentName(type.type) || 'Unknown') +
                        ' />';
                      info =
                        ' Did you accidentally export a JSX literal instead of a component?';
                    } else {
                      typeString = typeof type;
                    }

                    {
                      error(
                        'React.createElement: type is invalid -- expected a string (for ' +
                          'built-in components) or a class/function (for composite ' +
                          'components) but got: %s.%s',
                        typeString,
                        info
                      );
                    }
                  }

                  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
                  // TODO: Drop this when these are no longer allowed as the type argument.

                  if (element == null) {
                    return element;
                  } // Skip key warning if the type isn't valid since our key validation logic
                  // doesn't expect a non-string/function type and can throw confusing errors.
                  // We don't want exception behavior to differ between dev and prod.
                  // (Rendering will throw with a helpful message and as soon as the type is
                  // fixed, the key warnings will appear.)

                  if (validType) {
                    for (var i = 2; i < arguments.length; i++) {
                      validateChildKeys(arguments[i], type);
                    }
                  }

                  if (type === exports.Fragment) {
                    validateFragmentProps(element);
                  } else {
                    validatePropTypes(element);
                  }

                  return element;
                }
                var didWarnAboutDeprecatedCreateFactory = false;
                function createFactoryWithValidation(type) {
                  var validatedFactory = createElementWithValidation.bind(
                    null,
                    type
                  );
                  validatedFactory.type = type;

                  {
                    if (!didWarnAboutDeprecatedCreateFactory) {
                      didWarnAboutDeprecatedCreateFactory = true;

                      warn(
                        'React.createFactory() is deprecated and will be removed in ' +
                          'a future major release. Consider using JSX ' +
                          'or use React.createElement() directly instead.'
                      );
                    } // Legacy hook: remove it

                    Object.defineProperty(validatedFactory, 'type', {
                      enumerable: false,
                      get: function() {
                        warn(
                          'Factory.type is deprecated. Access the class directly ' +
                            'before passing it to createFactory.'
                        );

                        Object.defineProperty(this, 'type', {
                          value: type,
                        });
                        return type;
                      },
                    });
                  }

                  return validatedFactory;
                }
                function cloneElementWithValidation(element, props, children) {
                  var newElement = cloneElement.apply(this, arguments);

                  for (var i = 2; i < arguments.length; i++) {
                    validateChildKeys(arguments[i], newElement.type);
                  }

                  validatePropTypes(newElement);
                  return newElement;
                }

                {
                  try {
                    var frozenObject = Object.freeze({});
                    /* eslint-disable no-new */

                    new Map([[frozenObject, null]]);
                    new Set([frozenObject]);
                    /* eslint-enable no-new */
                  } catch (e) {}
                }

                var createElement$1 = createElementWithValidation;
                var cloneElement$1 = cloneElementWithValidation;
                var createFactory = createFactoryWithValidation;
                var Children = {
                  map: mapChildren,
                  forEach: forEachChildren,
                  count: countChildren,
                  toArray: toArray,
                  only: onlyChild,
                };

                exports.Children = Children;
                exports.Component = Component;
                exports.PureComponent = PureComponent;
                exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
                exports.cloneElement = cloneElement$1;
                exports.createContext = createContext;
                exports.createElement = createElement$1;
                exports.createFactory = createFactory;
                exports.createRef = createRef;
                exports.forwardRef = forwardRef;
                exports.isValidElement = isValidElement;
                exports.lazy = lazy;
                exports.memo = memo;
                exports.useCallback = useCallback;
                exports.useContext = useContext;
                exports.useDebugValue = useDebugValue;
                exports.useEffect = useEffect;
                exports.useImperativeHandle = useImperativeHandle;
                exports.useLayoutEffect = useLayoutEffect;
                exports.useMemo = useMemo;
                exports.useReducer = useReducer;
                exports.useRef = useRef;
                exports.useState = useState;
                exports.version = ReactVersion;
              })();
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      { _process: 112, 'object-assign': 111 },
    ],
    114: [
      function(require, module, exports) {
        /** @license React v17.0.2
         * react.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        'use strict';
        var l = require('object-assign'),
          n = 60103,
          p = 60106;
        exports.Fragment = 60107;
        exports.StrictMode = 60108;
        exports.Profiler = 60114;
        var q = 60109,
          r = 60110,
          t = 60112;
        exports.Suspense = 60113;
        var u = 60115,
          v = 60116;
        if ('function' === typeof Symbol && Symbol.for) {
          var w = Symbol.for;
          n = w('react.element');
          p = w('react.portal');
          exports.Fragment = w('react.fragment');
          exports.StrictMode = w('react.strict_mode');
          exports.Profiler = w('react.profiler');
          q = w('react.provider');
          r = w('react.context');
          t = w('react.forward_ref');
          exports.Suspense = w('react.suspense');
          u = w('react.memo');
          v = w('react.lazy');
        }
        var x = 'function' === typeof Symbol && Symbol.iterator;
        function y(a) {
          if (null === a || 'object' !== typeof a) return null;
          a = (x && a[x]) || a['@@iterator'];
          return 'function' === typeof a ? a : null;
        }
        function z(a) {
          for (
            var b =
                'https://reactjs.org/docs/error-decoder.html?invariant=' + a,
              c = 1;
            c < arguments.length;
            c++
          )
            b += '&args[]=' + encodeURIComponent(arguments[c]);
          return (
            'Minified React error #' +
            a +
            '; visit ' +
            b +
            ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.'
          );
        }
        var A = {
            isMounted: function() {
              return !1;
            },
            enqueueForceUpdate: function() {},
            enqueueReplaceState: function() {},
            enqueueSetState: function() {},
          },
          B = {};
        function C(a, b, c) {
          this.props = a;
          this.context = b;
          this.refs = B;
          this.updater = c || A;
        }
        C.prototype.isReactComponent = {};
        C.prototype.setState = function(a, b) {
          if ('object' !== typeof a && 'function' !== typeof a && null != a)
            throw Error(z(85));
          this.updater.enqueueSetState(this, a, b, 'setState');
        };
        C.prototype.forceUpdate = function(a) {
          this.updater.enqueueForceUpdate(this, a, 'forceUpdate');
        };
        function D() {}
        D.prototype = C.prototype;
        function E(a, b, c) {
          this.props = a;
          this.context = b;
          this.refs = B;
          this.updater = c || A;
        }
        var F = (E.prototype = new D());
        F.constructor = E;
        l(F, C.prototype);
        F.isPureReactComponent = !0;
        var G = { current: null },
          H = Object.prototype.hasOwnProperty,
          I = { key: !0, ref: !0, __self: !0, __source: !0 };
        function J(a, b, c) {
          var e,
            d = {},
            k = null,
            h = null;
          if (null != b)
            for (e in (void 0 !== b.ref && (h = b.ref),
            void 0 !== b.key && (k = '' + b.key),
            b))
              H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
          var g = arguments.length - 2;
          if (1 === g) d.children = c;
          else if (1 < g) {
            for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
            d.children = f;
          }
          if (a && a.defaultProps)
            for (e in ((g = a.defaultProps), g))
              void 0 === d[e] && (d[e] = g[e]);
          return {
            $$typeof: n,
            type: a,
            key: k,
            ref: h,
            props: d,
            _owner: G.current,
          };
        }
        function K(a, b) {
          return {
            $$typeof: n,
            type: a.type,
            key: b,
            ref: a.ref,
            props: a.props,
            _owner: a._owner,
          };
        }
        function L(a) {
          return 'object' === typeof a && null !== a && a.$$typeof === n;
        }
        function escape(a) {
          var b = { '=': '=0', ':': '=2' };
          return (
            '$' +
            a.replace(/[=:]/g, function(a) {
              return b[a];
            })
          );
        }
        var M = /\/+/g;
        function N(a, b) {
          return 'object' === typeof a && null !== a && null != a.key
            ? escape('' + a.key)
            : b.toString(36);
        }
        function O(a, b, c, e, d) {
          var k = typeof a;
          if ('undefined' === k || 'boolean' === k) a = null;
          var h = !1;
          if (null === a) h = !0;
          else
            switch (k) {
              case 'string':
              case 'number':
                h = !0;
                break;
              case 'object':
                switch (a.$$typeof) {
                  case n:
                  case p:
                    h = !0;
                }
            }
          if (h)
            return (
              (h = a),
              (d = d(h)),
              (a = '' === e ? '.' + N(h, 0) : e),
              Array.isArray(d)
                ? ((c = ''),
                  null != a && (c = a.replace(M, '$&/') + '/'),
                  O(d, b, c, '', function(a) {
                    return a;
                  }))
                : null != d &&
                  (L(d) &&
                    (d = K(
                      d,
                      c +
                        (!d.key || (h && h.key === d.key)
                          ? ''
                          : ('' + d.key).replace(M, '$&/') + '/') +
                        a
                    )),
                  b.push(d)),
              1
            );
          h = 0;
          e = '' === e ? '.' : e + ':';
          if (Array.isArray(a))
            for (var g = 0; g < a.length; g++) {
              k = a[g];
              var f = e + N(k, g);
              h += O(k, b, c, f, d);
            }
          else if (((f = y(a)), 'function' === typeof f))
            for (a = f.call(a), g = 0; !(k = a.next()).done; )
              (k = k.value), (f = e + N(k, g++)), (h += O(k, b, c, f, d));
          else if ('object' === k)
            throw ((b = '' + a),
            Error(
              z(
                31,
                '[object Object]' === b
                  ? 'object with keys {' + Object.keys(a).join(', ') + '}'
                  : b
              )
            ));
          return h;
        }
        function P(a, b, c) {
          if (null == a) return a;
          var e = [],
            d = 0;
          O(a, e, '', '', function(a) {
            return b.call(c, a, d++);
          });
          return e;
        }
        function Q(a) {
          if (-1 === a._status) {
            var b = a._result;
            b = b();
            a._status = 0;
            a._result = b;
            b.then(
              function(b) {
                0 === a._status &&
                  ((b = b.default), (a._status = 1), (a._result = b));
              },
              function(b) {
                0 === a._status && ((a._status = 2), (a._result = b));
              }
            );
          }
          if (1 === a._status) return a._result;
          throw a._result;
        }
        var R = { current: null };
        function S() {
          var a = R.current;
          if (null === a) throw Error(z(321));
          return a;
        }
        var T = {
          ReactCurrentDispatcher: R,
          ReactCurrentBatchConfig: { transition: 0 },
          ReactCurrentOwner: G,
          IsSomeRendererActing: { current: !1 },
          assign: l,
        };
        exports.Children = {
          map: P,
          forEach: function(a, b, c) {
            P(
              a,
              function() {
                b.apply(this, arguments);
              },
              c
            );
          },
          count: function(a) {
            var b = 0;
            P(a, function() {
              b++;
            });
            return b;
          },
          toArray: function(a) {
            return (
              P(a, function(a) {
                return a;
              }) || []
            );
          },
          only: function(a) {
            if (!L(a)) throw Error(z(143));
            return a;
          },
        };
        exports.Component = C;
        exports.PureComponent = E;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
        exports.cloneElement = function(a, b, c) {
          if (null === a || void 0 === a) throw Error(z(267, a));
          var e = l({}, a.props),
            d = a.key,
            k = a.ref,
            h = a._owner;
          if (null != b) {
            void 0 !== b.ref && ((k = b.ref), (h = G.current));
            void 0 !== b.key && (d = '' + b.key);
            if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
            for (f in b)
              H.call(b, f) &&
                !I.hasOwnProperty(f) &&
                (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
          }
          var f = arguments.length - 2;
          if (1 === f) e.children = c;
          else if (1 < f) {
            g = Array(f);
            for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
            e.children = g;
          }
          return {
            $$typeof: n,
            type: a.type,
            key: d,
            ref: k,
            props: e,
            _owner: h,
          };
        };
        exports.createContext = function(a, b) {
          void 0 === b && (b = null);
          a = {
            $$typeof: r,
            _calculateChangedBits: b,
            _currentValue: a,
            _currentValue2: a,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
          };
          a.Provider = { $$typeof: q, _context: a };
          return (a.Consumer = a);
        };
        exports.createElement = J;
        exports.createFactory = function(a) {
          var b = J.bind(null, a);
          b.type = a;
          return b;
        };
        exports.createRef = function() {
          return { current: null };
        };
        exports.forwardRef = function(a) {
          return { $$typeof: t, render: a };
        };
        exports.isValidElement = L;
        exports.lazy = function(a) {
          return {
            $$typeof: v,
            _payload: { _status: -1, _result: a },
            _init: Q,
          };
        };
        exports.memo = function(a, b) {
          return { $$typeof: u, type: a, compare: void 0 === b ? null : b };
        };
        exports.useCallback = function(a, b) {
          return S().useCallback(a, b);
        };
        exports.useContext = function(a, b) {
          return S().useContext(a, b);
        };
        exports.useDebugValue = function() {};
        exports.useEffect = function(a, b) {
          return S().useEffect(a, b);
        };
        exports.useImperativeHandle = function(a, b, c) {
          return S().useImperativeHandle(a, b, c);
        };
        exports.useLayoutEffect = function(a, b) {
          return S().useLayoutEffect(a, b);
        };
        exports.useMemo = function(a, b) {
          return S().useMemo(a, b);
        };
        exports.useReducer = function(a, b, c) {
          return S().useReducer(a, b, c);
        };
        exports.useRef = function(a) {
          return S().useRef(a);
        };
        exports.useState = function(a) {
          return S().useState(a);
        };
        exports.version = '17.0.2';
      },
      { 'object-assign': 111 },
    ],
    115: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            'use strict';

            if (process.env.NODE_ENV === 'production') {
              module.exports = require('./cjs/react.production.min.js');
            } else {
              module.exports = require('./cjs/react.development.js');
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      {
        './cjs/react.development.js': 113,
        './cjs/react.production.min.js': 114,
        _process: 112,
      },
    ],
    116: [
      function(require, module, exports) {
        (function(global) {
          (function() {
            /**
             * @license
             * Lodash <https://lodash.com/>
             * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */
            (function() {
              /** Used as a safe reference for `undefined` in pre-ES5 environments. */
              var undefined;

              /** Used as the semantic version number. */
              var VERSION = '4.17.21';

              /** Used as the size to enable large array optimizations. */
              var LARGE_ARRAY_SIZE = 200;

              /** Error message constants. */
              var CORE_ERROR_TEXT =
                  'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                FUNC_ERROR_TEXT = 'Expected a function',
                INVALID_TEMPL_VAR_ERROR_TEXT =
                  'Invalid `variable` option passed into `_.template`';

              /** Used to stand-in for `undefined` hash values. */
              var HASH_UNDEFINED = '__lodash_hash_undefined__';

              /** Used as the maximum memoize cache size. */
              var MAX_MEMOIZE_SIZE = 500;

              /** Used as the internal argument placeholder. */
              var PLACEHOLDER = '__lodash_placeholder__';

              /** Used to compose bitmasks for cloning. */
              var CLONE_DEEP_FLAG = 1,
                CLONE_FLAT_FLAG = 2,
                CLONE_SYMBOLS_FLAG = 4;

              /** Used to compose bitmasks for value comparisons. */
              var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

              /** Used to compose bitmasks for function metadata. */
              var WRAP_BIND_FLAG = 1,
                WRAP_BIND_KEY_FLAG = 2,
                WRAP_CURRY_BOUND_FLAG = 4,
                WRAP_CURRY_FLAG = 8,
                WRAP_CURRY_RIGHT_FLAG = 16,
                WRAP_PARTIAL_FLAG = 32,
                WRAP_PARTIAL_RIGHT_FLAG = 64,
                WRAP_ARY_FLAG = 128,
                WRAP_REARG_FLAG = 256,
                WRAP_FLIP_FLAG = 512;

              /** Used as default options for `_.truncate`. */
              var DEFAULT_TRUNC_LENGTH = 30,
                DEFAULT_TRUNC_OMISSION = '...';

              /** Used to detect hot functions by number of calls within a span of milliseconds. */
              var HOT_COUNT = 800,
                HOT_SPAN = 16;

              /** Used to indicate the type of lazy iteratees. */
              var LAZY_FILTER_FLAG = 1,
                LAZY_MAP_FLAG = 2,
                LAZY_WHILE_FLAG = 3;

              /** Used as references for various `Number` constants. */
              var INFINITY = 1 / 0,
                MAX_SAFE_INTEGER = 9007199254740991,
                MAX_INTEGER = 1.7976931348623157e308,
                NAN = 0 / 0;

              /** Used as references for the maximum length and index of an array. */
              var MAX_ARRAY_LENGTH = 4294967295,
                MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

              /** Used to associate wrap methods with their bit flags. */
              var wrapFlags = [
                ['ary', WRAP_ARY_FLAG],
                ['bind', WRAP_BIND_FLAG],
                ['bindKey', WRAP_BIND_KEY_FLAG],
                ['curry', WRAP_CURRY_FLAG],
                ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                ['flip', WRAP_FLIP_FLAG],
                ['partial', WRAP_PARTIAL_FLAG],
                ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                ['rearg', WRAP_REARG_FLAG],
              ];

              /** `Object#toString` result references. */
              var argsTag = '[object Arguments]',
                arrayTag = '[object Array]',
                asyncTag = '[object AsyncFunction]',
                boolTag = '[object Boolean]',
                dateTag = '[object Date]',
                domExcTag = '[object DOMException]',
                errorTag = '[object Error]',
                funcTag = '[object Function]',
                genTag = '[object GeneratorFunction]',
                mapTag = '[object Map]',
                numberTag = '[object Number]',
                nullTag = '[object Null]',
                objectTag = '[object Object]',
                promiseTag = '[object Promise]',
                proxyTag = '[object Proxy]',
                regexpTag = '[object RegExp]',
                setTag = '[object Set]',
                stringTag = '[object String]',
                symbolTag = '[object Symbol]',
                undefinedTag = '[object Undefined]',
                weakMapTag = '[object WeakMap]',
                weakSetTag = '[object WeakSet]';

              var arrayBufferTag = '[object ArrayBuffer]',
                dataViewTag = '[object DataView]',
                float32Tag = '[object Float32Array]',
                float64Tag = '[object Float64Array]',
                int8Tag = '[object Int8Array]',
                int16Tag = '[object Int16Array]',
                int32Tag = '[object Int32Array]',
                uint8Tag = '[object Uint8Array]',
                uint8ClampedTag = '[object Uint8ClampedArray]',
                uint16Tag = '[object Uint16Array]',
                uint32Tag = '[object Uint32Array]';

              /** Used to match empty string literals in compiled template source. */
              var reEmptyStringLeading = /\b__p \+= '';/g,
                reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

              /** Used to match HTML entities and HTML characters. */
              var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                reUnescapedHtml = /[&<>"']/g,
                reHasEscapedHtml = RegExp(reEscapedHtml.source),
                reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

              /** Used to match template delimiters. */
              var reEscape = /<%-([\s\S]+?)%>/g,
                reEvaluate = /<%([\s\S]+?)%>/g,
                reInterpolate = /<%=([\s\S]+?)%>/g;

              /** Used to match property names within property paths. */
              var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/,
                rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

              /**
               * Used to match `RegExp`
               * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
               */
              var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                reHasRegExpChar = RegExp(reRegExpChar.source);

              /** Used to match leading whitespace. */
              var reTrimStart = /^\s+/;

              /** Used to match a single whitespace character. */
              var reWhitespace = /\s/;

              /** Used to match wrap detail comments. */
              var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                reSplitDetails = /,? & /;

              /** Used to match words composed of alphanumeric characters. */
              var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

              /**
               * Used to validate the `validate` option in `_.template` variable.
               *
               * Forbids characters which could potentially change the meaning of the function argument definition:
               * - "()," (modification of function parameters)
               * - "=" (default value)
               * - "[]{}" (destructuring of function parameters)
               * - "/" (beginning of a comment)
               * - whitespace
               */
              var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

              /** Used to match backslashes in property paths. */
              var reEscapeChar = /\\(\\)?/g;

              /**
               * Used to match
               * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
               */
              var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

              /** Used to match `RegExp` flags from their coerced string values. */
              var reFlags = /\w*$/;

              /** Used to detect bad signed hexadecimal string values. */
              var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

              /** Used to detect binary string values. */
              var reIsBinary = /^0b[01]+$/i;

              /** Used to detect host constructors (Safari). */
              var reIsHostCtor = /^\[object .+?Constructor\]$/;

              /** Used to detect octal string values. */
              var reIsOctal = /^0o[0-7]+$/i;

              /** Used to detect unsigned integer values. */
              var reIsUint = /^(?:0|[1-9]\d*)$/;

              /** Used to match Latin Unicode letters (excluding mathematical operators). */
              var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

              /** Used to ensure capturing order of template delimiters. */
              var reNoMatch = /($^)/;

              /** Used to match unescaped characters in compiled string literals. */
              var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

              /** Used to compose unicode character classes. */
              var rsAstralRange = '\\ud800-\\udfff',
                rsComboMarksRange = '\\u0300-\\u036f',
                reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                rsComboSymbolsRange = '\\u20d0-\\u20ff',
                rsComboRange =
                  rsComboMarksRange +
                  reComboHalfMarksRange +
                  rsComboSymbolsRange,
                rsDingbatRange = '\\u2700-\\u27bf',
                rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                rsPunctuationRange = '\\u2000-\\u206f',
                rsSpaceRange =
                  ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                rsVarRange = '\\ufe0e\\ufe0f',
                rsBreakRange =
                  rsMathOpRange +
                  rsNonCharRange +
                  rsPunctuationRange +
                  rsSpaceRange;

              /** Used to compose unicode capture groups. */
              var rsApos = "['\u2019]",
                rsAstral = '[' + rsAstralRange + ']',
                rsBreak = '[' + rsBreakRange + ']',
                rsCombo = '[' + rsComboRange + ']',
                rsDigits = '\\d+',
                rsDingbat = '[' + rsDingbatRange + ']',
                rsLower = '[' + rsLowerRange + ']',
                rsMisc =
                  '[^' +
                  rsAstralRange +
                  rsBreakRange +
                  rsDigits +
                  rsDingbatRange +
                  rsLowerRange +
                  rsUpperRange +
                  ']',
                rsFitz = '\\ud83c[\\udffb-\\udfff]',
                rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                rsNonAstral = '[^' + rsAstralRange + ']',
                rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                rsUpper = '[' + rsUpperRange + ']',
                rsZWJ = '\\u200d';

              /** Used to compose unicode regexes. */
              var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                reOptMod = rsModifier + '?',
                rsOptVar = '[' + rsVarRange + ']?',
                rsOptJoin =
                  '(?:' +
                  rsZWJ +
                  '(?:' +
                  [rsNonAstral, rsRegional, rsSurrPair].join('|') +
                  ')' +
                  rsOptVar +
                  reOptMod +
                  ')*',
                rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
                rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
                rsSeq = rsOptVar + reOptMod + rsOptJoin,
                rsEmoji =
                  '(?:' +
                  [rsDingbat, rsRegional, rsSurrPair].join('|') +
                  ')' +
                  rsSeq,
                rsSymbol =
                  '(?:' +
                  [
                    rsNonAstral + rsCombo + '?',
                    rsCombo,
                    rsRegional,
                    rsSurrPair,
                    rsAstral,
                  ].join('|') +
                  ')';

              /** Used to match apostrophes. */
              var reApos = RegExp(rsApos, 'g');

              /**
               * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
               * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
               */
              var reComboMark = RegExp(rsCombo, 'g');

              /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
              var reUnicode = RegExp(
                rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq,
                'g'
              );

              /** Used to match complex or compound words. */
              var reUnicodeWord = RegExp(
                [
                  rsUpper +
                    '?' +
                    rsLower +
                    '+' +
                    rsOptContrLower +
                    '(?=' +
                    [rsBreak, rsUpper, '$'].join('|') +
                    ')',
                  rsMiscUpper +
                    '+' +
                    rsOptContrUpper +
                    '(?=' +
                    [rsBreak, rsUpper + rsMiscLower, '$'].join('|') +
                    ')',
                  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                  rsUpper + '+' + rsOptContrUpper,
                  rsOrdUpper,
                  rsOrdLower,
                  rsDigits,
                  rsEmoji,
                ].join('|'),
                'g'
              );

              /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
              var reHasUnicode = RegExp(
                '[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']'
              );

              /** Used to detect strings that need a more robust regexp to match words. */
              var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

              /** Used to assign default `context` object properties. */
              var contextProps = [
                'Array',
                'Buffer',
                'DataView',
                'Date',
                'Error',
                'Float32Array',
                'Float64Array',
                'Function',
                'Int8Array',
                'Int16Array',
                'Int32Array',
                'Map',
                'Math',
                'Object',
                'Promise',
                'RegExp',
                'Set',
                'String',
                'Symbol',
                'TypeError',
                'Uint8Array',
                'Uint8ClampedArray',
                'Uint16Array',
                'Uint32Array',
                'WeakMap',
                '_',
                'clearTimeout',
                'isFinite',
                'parseInt',
                'setTimeout',
              ];

              /** Used to make template sourceURLs easier to identify. */
              var templateCounter = -1;

              /** Used to identify `toStringTag` values of typed arrays. */
              var typedArrayTags = {};
              typedArrayTags[float32Tag] = typedArrayTags[
                float64Tag
              ] = typedArrayTags[int8Tag] = typedArrayTags[
                int16Tag
              ] = typedArrayTags[int32Tag] = typedArrayTags[
                uint8Tag
              ] = typedArrayTags[uint8ClampedTag] = typedArrayTags[
                uint16Tag
              ] = typedArrayTags[uint32Tag] = true;
              typedArrayTags[argsTag] = typedArrayTags[
                arrayTag
              ] = typedArrayTags[arrayBufferTag] = typedArrayTags[
                boolTag
              ] = typedArrayTags[dataViewTag] = typedArrayTags[
                dateTag
              ] = typedArrayTags[errorTag] = typedArrayTags[
                funcTag
              ] = typedArrayTags[mapTag] = typedArrayTags[
                numberTag
              ] = typedArrayTags[objectTag] = typedArrayTags[
                regexpTag
              ] = typedArrayTags[setTag] = typedArrayTags[
                stringTag
              ] = typedArrayTags[weakMapTag] = false;

              /** Used to identify `toStringTag` values supported by `_.clone`. */
              var cloneableTags = {};
              cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[
                arrayBufferTag
              ] = cloneableTags[dataViewTag] = cloneableTags[
                boolTag
              ] = cloneableTags[dateTag] = cloneableTags[
                float32Tag
              ] = cloneableTags[float64Tag] = cloneableTags[
                int8Tag
              ] = cloneableTags[int16Tag] = cloneableTags[
                int32Tag
              ] = cloneableTags[mapTag] = cloneableTags[
                numberTag
              ] = cloneableTags[objectTag] = cloneableTags[
                regexpTag
              ] = cloneableTags[setTag] = cloneableTags[
                stringTag
              ] = cloneableTags[symbolTag] = cloneableTags[
                uint8Tag
              ] = cloneableTags[uint8ClampedTag] = cloneableTags[
                uint16Tag
              ] = cloneableTags[uint32Tag] = true;
              cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[
                weakMapTag
              ] = false;

              /** Used to map Latin Unicode letters to basic Latin letters. */
              var deburredLetters = {
                // Latin-1 Supplement block.
                À: 'A',
                Á: 'A',
                Â: 'A',
                Ã: 'A',
                Ä: 'A',
                Å: 'A',
                à: 'a',
                á: 'a',
                â: 'a',
                ã: 'a',
                ä: 'a',
                å: 'a',
                Ç: 'C',
                ç: 'c',
                Ð: 'D',
                ð: 'd',
                È: 'E',
                É: 'E',
                Ê: 'E',
                Ë: 'E',
                è: 'e',
                é: 'e',
                ê: 'e',
                ë: 'e',
                Ì: 'I',
                Í: 'I',
                Î: 'I',
                Ï: 'I',
                ì: 'i',
                í: 'i',
                î: 'i',
                ï: 'i',
                Ñ: 'N',
                ñ: 'n',
                Ò: 'O',
                Ó: 'O',
                Ô: 'O',
                Õ: 'O',
                Ö: 'O',
                Ø: 'O',
                ò: 'o',
                ó: 'o',
                ô: 'o',
                õ: 'o',
                ö: 'o',
                ø: 'o',
                Ù: 'U',
                Ú: 'U',
                Û: 'U',
                Ü: 'U',
                ù: 'u',
                ú: 'u',
                û: 'u',
                ü: 'u',
                Ý: 'Y',
                ý: 'y',
                ÿ: 'y',
                Æ: 'Ae',
                æ: 'ae',
                Þ: 'Th',
                þ: 'th',
                ß: 'ss',
                // Latin Extended-A block.
                Ā: 'A',
                Ă: 'A',
                Ą: 'A',
                ā: 'a',
                ă: 'a',
                ą: 'a',
                Ć: 'C',
                Ĉ: 'C',
                Ċ: 'C',
                Č: 'C',
                ć: 'c',
                ĉ: 'c',
                ċ: 'c',
                č: 'c',
                Ď: 'D',
                Đ: 'D',
                ď: 'd',
                đ: 'd',
                Ē: 'E',
                Ĕ: 'E',
                Ė: 'E',
                Ę: 'E',
                Ě: 'E',
                ē: 'e',
                ĕ: 'e',
                ė: 'e',
                ę: 'e',
                ě: 'e',
                Ĝ: 'G',
                Ğ: 'G',
                Ġ: 'G',
                Ģ: 'G',
                ĝ: 'g',
                ğ: 'g',
                ġ: 'g',
                ģ: 'g',
                Ĥ: 'H',
                Ħ: 'H',
                ĥ: 'h',
                ħ: 'h',
                Ĩ: 'I',
                Ī: 'I',
                Ĭ: 'I',
                Į: 'I',
                İ: 'I',
                ĩ: 'i',
                ī: 'i',
                ĭ: 'i',
                į: 'i',
                ı: 'i',
                Ĵ: 'J',
                ĵ: 'j',
                Ķ: 'K',
                ķ: 'k',
                ĸ: 'k',
                Ĺ: 'L',
                Ļ: 'L',
                Ľ: 'L',
                Ŀ: 'L',
                Ł: 'L',
                ĺ: 'l',
                ļ: 'l',
                ľ: 'l',
                ŀ: 'l',
                ł: 'l',
                Ń: 'N',
                Ņ: 'N',
                Ň: 'N',
                Ŋ: 'N',
                ń: 'n',
                ņ: 'n',
                ň: 'n',
                ŋ: 'n',
                Ō: 'O',
                Ŏ: 'O',
                Ő: 'O',
                ō: 'o',
                ŏ: 'o',
                ő: 'o',
                Ŕ: 'R',
                Ŗ: 'R',
                Ř: 'R',
                ŕ: 'r',
                ŗ: 'r',
                ř: 'r',
                Ś: 'S',
                Ŝ: 'S',
                Ş: 'S',
                Š: 'S',
                ś: 's',
                ŝ: 's',
                ş: 's',
                š: 's',
                Ţ: 'T',
                Ť: 'T',
                Ŧ: 'T',
                ţ: 't',
                ť: 't',
                ŧ: 't',
                Ũ: 'U',
                Ū: 'U',
                Ŭ: 'U',
                Ů: 'U',
                Ű: 'U',
                Ų: 'U',
                ũ: 'u',
                ū: 'u',
                ŭ: 'u',
                ů: 'u',
                ű: 'u',
                ų: 'u',
                Ŵ: 'W',
                ŵ: 'w',
                Ŷ: 'Y',
                ŷ: 'y',
                Ÿ: 'Y',
                Ź: 'Z',
                Ż: 'Z',
                Ž: 'Z',
                ź: 'z',
                ż: 'z',
                ž: 'z',
                Ĳ: 'IJ',
                ĳ: 'ij',
                Œ: 'Oe',
                œ: 'oe',
                ŉ: "'n",
                ſ: 's',
              };

              /** Used to map characters to HTML entities. */
              var htmlEscapes = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#39;',
              };

              /** Used to map HTML entities to characters. */
              var htmlUnescapes = {
                '&amp;': '&',
                '&lt;': '<',
                '&gt;': '>',
                '&quot;': '"',
                '&#39;': "'",
              };

              /** Used to escape characters for inclusion in compiled string literals. */
              var stringEscapes = {
                '\\': '\\',
                "'": "'",
                '\n': 'n',
                '\r': 'r',
                '\u2028': 'u2028',
                '\u2029': 'u2029',
              };

              /** Built-in method references without a dependency on `root`. */
              var freeParseFloat = parseFloat,
                freeParseInt = parseInt;

              /** Detect free variable `global` from Node.js. */
              var freeGlobal =
                typeof global == 'object' &&
                global &&
                global.Object === Object &&
                global;

              /** Detect free variable `self`. */
              var freeSelf =
                typeof self == 'object' &&
                self &&
                self.Object === Object &&
                self;

              /** Used as a reference to the global object. */
              var root = freeGlobal || freeSelf || Function('return this')();

              /** Detect free variable `exports`. */
              var freeExports =
                typeof exports == 'object' &&
                exports &&
                !exports.nodeType &&
                exports;

              /** Detect free variable `module`. */
              var freeModule =
                freeExports &&
                typeof module == 'object' &&
                module &&
                !module.nodeType &&
                module;

              /** Detect the popular CommonJS extension `module.exports`. */
              var moduleExports =
                freeModule && freeModule.exports === freeExports;

              /** Detect free variable `process` from Node.js. */
              var freeProcess = moduleExports && freeGlobal.process;

              /** Used to access faster Node.js helpers. */
              var nodeUtil = (function() {
                try {
                  // Use `util.types` for Node.js 10+.
                  var types =
                    freeModule &&
                    freeModule.require &&
                    freeModule.require('util').types;

                  if (types) {
                    return types;
                  }

                  // Legacy `process.binding('util')` for Node.js < 10.
                  return (
                    freeProcess &&
                    freeProcess.binding &&
                    freeProcess.binding('util')
                  );
                } catch (e) {}
              })();

              /* Node.js helper references. */
              var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                nodeIsDate = nodeUtil && nodeUtil.isDate,
                nodeIsMap = nodeUtil && nodeUtil.isMap,
                nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                nodeIsSet = nodeUtil && nodeUtil.isSet,
                nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

              /*--------------------------------------------------------------------------*/

              /**
               * A faster alternative to `Function#apply`, this function invokes `func`
               * with the `this` binding of `thisArg` and the arguments of `args`.
               *
               * @private
               * @param {Function} func The function to invoke.
               * @param {*} thisArg The `this` binding of `func`.
               * @param {Array} args The arguments to invoke `func` with.
               * @returns {*} Returns the result of `func`.
               */
              function apply(func, thisArg, args) {
                switch (args.length) {
                  case 0:
                    return func.call(thisArg);
                  case 1:
                    return func.call(thisArg, args[0]);
                  case 2:
                    return func.call(thisArg, args[0], args[1]);
                  case 3:
                    return func.call(thisArg, args[0], args[1], args[2]);
                }
                return func.apply(thisArg, args);
              }

              /**
               * A specialized version of `baseAggregator` for arrays.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} setter The function to set `accumulator` values.
               * @param {Function} iteratee The iteratee to transform keys.
               * @param {Object} accumulator The initial aggregated object.
               * @returns {Function} Returns `accumulator`.
               */
              function arrayAggregator(array, setter, iteratee, accumulator) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  var value = array[index];
                  setter(accumulator, value, iteratee(value), array);
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.forEach` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns `array`.
               */
              function arrayEach(array, iteratee) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (iteratee(array[index], index, array) === false) {
                    break;
                  }
                }
                return array;
              }

              /**
               * A specialized version of `_.forEachRight` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns `array`.
               */
              function arrayEachRight(array, iteratee) {
                var length = array == null ? 0 : array.length;

                while (length--) {
                  if (iteratee(array[length], length, array) === false) {
                    break;
                  }
                }
                return array;
              }

              /**
               * A specialized version of `_.every` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if all elements pass the predicate check,
               *  else `false`.
               */
              function arrayEvery(array, predicate) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (!predicate(array[index], index, array)) {
                    return false;
                  }
                }
                return true;
              }

              /**
               * A specialized version of `_.filter` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {Array} Returns the new filtered array.
               */
              function arrayFilter(array, predicate) {
                var index = -1,
                  length = array == null ? 0 : array.length,
                  resIndex = 0,
                  result = [];

                while (++index < length) {
                  var value = array[index];
                  if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                  }
                }
                return result;
              }

              /**
               * A specialized version of `_.includes` for arrays without support for
               * specifying an index to search from.
               *
               * @private
               * @param {Array} [array] The array to inspect.
               * @param {*} target The value to search for.
               * @returns {boolean} Returns `true` if `target` is found, else `false`.
               */
              function arrayIncludes(array, value) {
                var length = array == null ? 0 : array.length;
                return !!length && baseIndexOf(array, value, 0) > -1;
              }

              /**
               * This function is like `arrayIncludes` except that it accepts a comparator.
               *
               * @private
               * @param {Array} [array] The array to inspect.
               * @param {*} target The value to search for.
               * @param {Function} comparator The comparator invoked per element.
               * @returns {boolean} Returns `true` if `target` is found, else `false`.
               */
              function arrayIncludesWith(array, value, comparator) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (comparator(value, array[index])) {
                    return true;
                  }
                }
                return false;
              }

              /**
               * A specialized version of `_.map` for arrays without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the new mapped array.
               */
              function arrayMap(array, iteratee) {
                var index = -1,
                  length = array == null ? 0 : array.length,
                  result = Array(length);

                while (++index < length) {
                  result[index] = iteratee(array[index], index, array);
                }
                return result;
              }

              /**
               * Appends the elements of `values` to `array`.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {Array} values The values to append.
               * @returns {Array} Returns `array`.
               */
              function arrayPush(array, values) {
                var index = -1,
                  length = values.length,
                  offset = array.length;

                while (++index < length) {
                  array[offset + index] = values[index];
                }
                return array;
              }

              /**
               * A specialized version of `_.reduce` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @param {boolean} [initAccum] Specify using the first element of `array` as
               *  the initial value.
               * @returns {*} Returns the accumulated value.
               */
              function arrayReduce(array, iteratee, accumulator, initAccum) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                if (initAccum && length) {
                  accumulator = array[++index];
                }
                while (++index < length) {
                  accumulator = iteratee(
                    accumulator,
                    array[index],
                    index,
                    array
                  );
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.reduceRight` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @param {boolean} [initAccum] Specify using the last element of `array` as
               *  the initial value.
               * @returns {*} Returns the accumulated value.
               */
              function arrayReduceRight(
                array,
                iteratee,
                accumulator,
                initAccum
              ) {
                var length = array == null ? 0 : array.length;
                if (initAccum && length) {
                  accumulator = array[--length];
                }
                while (length--) {
                  accumulator = iteratee(
                    accumulator,
                    array[length],
                    length,
                    array
                  );
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.some` for arrays without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if any element passes the predicate check,
               *  else `false`.
               */
              function arraySome(array, predicate) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (predicate(array[index], index, array)) {
                    return true;
                  }
                }
                return false;
              }

              /**
               * Gets the size of an ASCII `string`.
               *
               * @private
               * @param {string} string The string inspect.
               * @returns {number} Returns the string size.
               */
              var asciiSize = baseProperty('length');

              /**
               * Converts an ASCII `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function asciiToArray(string) {
                return string.split('');
              }

              /**
               * Splits an ASCII `string` into an array of its words.
               *
               * @private
               * @param {string} The string to inspect.
               * @returns {Array} Returns the words of `string`.
               */
              function asciiWords(string) {
                return string.match(reAsciiWord) || [];
              }

              /**
               * The base implementation of methods like `_.findKey` and `_.findLastKey`,
               * without support for iteratee shorthands, which iterates over `collection`
               * using `eachFunc`.
               *
               * @private
               * @param {Array|Object} collection The collection to inspect.
               * @param {Function} predicate The function invoked per iteration.
               * @param {Function} eachFunc The function to iterate over `collection`.
               * @returns {*} Returns the found element or its key, else `undefined`.
               */
              function baseFindKey(collection, predicate, eachFunc) {
                var result;
                eachFunc(collection, function(value, key, collection) {
                  if (predicate(value, key, collection)) {
                    result = key;
                    return false;
                  }
                });
                return result;
              }

              /**
               * The base implementation of `_.findIndex` and `_.findLastIndex` without
               * support for iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {Function} predicate The function invoked per iteration.
               * @param {number} fromIndex The index to search from.
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseFindIndex(array, predicate, fromIndex, fromRight) {
                var length = array.length,
                  index = fromIndex + (fromRight ? 1 : -1);

                while (fromRight ? index-- : ++index < length) {
                  if (predicate(array[index], index, array)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseIndexOf(array, value, fromIndex) {
                return value === value
                  ? strictIndexOf(array, value, fromIndex)
                  : baseFindIndex(array, baseIsNaN, fromIndex);
              }

              /**
               * This function is like `baseIndexOf` except that it accepts a comparator.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @param {Function} comparator The comparator invoked per element.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseIndexOfWith(array, value, fromIndex, comparator) {
                var index = fromIndex - 1,
                  length = array.length;

                while (++index < length) {
                  if (comparator(array[index], value)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * The base implementation of `_.isNaN` without support for number objects.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
               */
              function baseIsNaN(value) {
                return value !== value;
              }

              /**
               * The base implementation of `_.mean` and `_.meanBy` without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {number} Returns the mean.
               */
              function baseMean(array, iteratee) {
                var length = array == null ? 0 : array.length;
                return length ? baseSum(array, iteratee) / length : NAN;
              }

              /**
               * The base implementation of `_.property` without support for deep paths.
               *
               * @private
               * @param {string} key The key of the property to get.
               * @returns {Function} Returns the new accessor function.
               */
              function baseProperty(key) {
                return function(object) {
                  return object == null ? undefined : object[key];
                };
              }

              /**
               * The base implementation of `_.propertyOf` without support for deep paths.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Function} Returns the new accessor function.
               */
              function basePropertyOf(object) {
                return function(key) {
                  return object == null ? undefined : object[key];
                };
              }

              /**
               * The base implementation of `_.reduce` and `_.reduceRight`, without support
               * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} accumulator The initial value.
               * @param {boolean} initAccum Specify using the first or last element of
               *  `collection` as the initial value.
               * @param {Function} eachFunc The function to iterate over `collection`.
               * @returns {*} Returns the accumulated value.
               */
              function baseReduce(
                collection,
                iteratee,
                accumulator,
                initAccum,
                eachFunc
              ) {
                eachFunc(collection, function(value, index, collection) {
                  accumulator = initAccum
                    ? ((initAccum = false), value)
                    : iteratee(accumulator, value, index, collection);
                });
                return accumulator;
              }

              /**
               * The base implementation of `_.sortBy` which uses `comparer` to define the
               * sort order of `array` and replaces criteria objects with their corresponding
               * values.
               *
               * @private
               * @param {Array} array The array to sort.
               * @param {Function} comparer The function to define sort order.
               * @returns {Array} Returns `array`.
               */
              function baseSortBy(array, comparer) {
                var length = array.length;

                array.sort(comparer);
                while (length--) {
                  array[length] = array[length].value;
                }
                return array;
              }

              /**
               * The base implementation of `_.sum` and `_.sumBy` without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {number} Returns the sum.
               */
              function baseSum(array, iteratee) {
                var result,
                  index = -1,
                  length = array.length;

                while (++index < length) {
                  var current = iteratee(array[index]);
                  if (current !== undefined) {
                    result = result === undefined ? current : result + current;
                  }
                }
                return result;
              }

              /**
               * The base implementation of `_.times` without support for iteratee shorthands
               * or max array length checks.
               *
               * @private
               * @param {number} n The number of times to invoke `iteratee`.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the array of results.
               */
              function baseTimes(n, iteratee) {
                var index = -1,
                  result = Array(n);

                while (++index < n) {
                  result[index] = iteratee(index);
                }
                return result;
              }

              /**
               * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
               * of key-value pairs for `object` corresponding to the property names of `props`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} props The property names to get values for.
               * @returns {Object} Returns the key-value pairs.
               */
              function baseToPairs(object, props) {
                return arrayMap(props, function(key) {
                  return [key, object[key]];
                });
              }

              /**
               * The base implementation of `_.trim`.
               *
               * @private
               * @param {string} string The string to trim.
               * @returns {string} Returns the trimmed string.
               */
              function baseTrim(string) {
                return string
                  ? string
                      .slice(0, trimmedEndIndex(string) + 1)
                      .replace(reTrimStart, '')
                  : string;
              }

              /**
               * The base implementation of `_.unary` without support for storing metadata.
               *
               * @private
               * @param {Function} func The function to cap arguments for.
               * @returns {Function} Returns the new capped function.
               */
              function baseUnary(func) {
                return function(value) {
                  return func(value);
                };
              }

              /**
               * The base implementation of `_.values` and `_.valuesIn` which creates an
               * array of `object` property values corresponding to the property names
               * of `props`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} props The property names to get values for.
               * @returns {Object} Returns the array of property values.
               */
              function baseValues(object, props) {
                return arrayMap(props, function(key) {
                  return object[key];
                });
              }

              /**
               * Checks if a `cache` value for `key` exists.
               *
               * @private
               * @param {Object} cache The cache to query.
               * @param {string} key The key of the entry to check.
               * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
               */
              function cacheHas(cache, key) {
                return cache.has(key);
              }

              /**
               * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
               * that is not found in the character symbols.
               *
               * @private
               * @param {Array} strSymbols The string symbols to inspect.
               * @param {Array} chrSymbols The character symbols to find.
               * @returns {number} Returns the index of the first unmatched string symbol.
               */
              function charsStartIndex(strSymbols, chrSymbols) {
                var index = -1,
                  length = strSymbols.length;

                while (
                  ++index < length &&
                  baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
                ) {}
                return index;
              }

              /**
               * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
               * that is not found in the character symbols.
               *
               * @private
               * @param {Array} strSymbols The string symbols to inspect.
               * @param {Array} chrSymbols The character symbols to find.
               * @returns {number} Returns the index of the last unmatched string symbol.
               */
              function charsEndIndex(strSymbols, chrSymbols) {
                var index = strSymbols.length;

                while (
                  index-- &&
                  baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
                ) {}
                return index;
              }

              /**
               * Gets the number of `placeholder` occurrences in `array`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} placeholder The placeholder to search for.
               * @returns {number} Returns the placeholder count.
               */
              function countHolders(array, placeholder) {
                var length = array.length,
                  result = 0;

                while (length--) {
                  if (array[length] === placeholder) {
                    ++result;
                  }
                }
                return result;
              }

              /**
               * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
               * letters to basic Latin letters.
               *
               * @private
               * @param {string} letter The matched letter to deburr.
               * @returns {string} Returns the deburred letter.
               */
              var deburrLetter = basePropertyOf(deburredLetters);

              /**
               * Used by `_.escape` to convert characters to HTML entities.
               *
               * @private
               * @param {string} chr The matched character to escape.
               * @returns {string} Returns the escaped character.
               */
              var escapeHtmlChar = basePropertyOf(htmlEscapes);

              /**
               * Used by `_.template` to escape characters for inclusion in compiled string literals.
               *
               * @private
               * @param {string} chr The matched character to escape.
               * @returns {string} Returns the escaped character.
               */
              function escapeStringChar(chr) {
                return '\\' + stringEscapes[chr];
              }

              /**
               * Gets the value at `key` of `object`.
               *
               * @private
               * @param {Object} [object] The object to query.
               * @param {string} key The key of the property to get.
               * @returns {*} Returns the property value.
               */
              function getValue(object, key) {
                return object == null ? undefined : object[key];
              }

              /**
               * Checks if `string` contains Unicode symbols.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {boolean} Returns `true` if a symbol is found, else `false`.
               */
              function hasUnicode(string) {
                return reHasUnicode.test(string);
              }

              /**
               * Checks if `string` contains a word composed of Unicode symbols.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {boolean} Returns `true` if a word is found, else `false`.
               */
              function hasUnicodeWord(string) {
                return reHasUnicodeWord.test(string);
              }

              /**
               * Converts `iterator` to an array.
               *
               * @private
               * @param {Object} iterator The iterator to convert.
               * @returns {Array} Returns the converted array.
               */
              function iteratorToArray(iterator) {
                var data,
                  result = [];

                while (!(data = iterator.next()).done) {
                  result.push(data.value);
                }
                return result;
              }

              /**
               * Converts `map` to its key-value pairs.
               *
               * @private
               * @param {Object} map The map to convert.
               * @returns {Array} Returns the key-value pairs.
               */
              function mapToArray(map) {
                var index = -1,
                  result = Array(map.size);

                map.forEach(function(value, key) {
                  result[++index] = [key, value];
                });
                return result;
              }

              /**
               * Creates a unary function that invokes `func` with its argument transformed.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {Function} transform The argument transform.
               * @returns {Function} Returns the new function.
               */
              function overArg(func, transform) {
                return function(arg) {
                  return func(transform(arg));
                };
              }

              /**
               * Replaces all `placeholder` elements in `array` with an internal placeholder
               * and returns an array of their indexes.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {*} placeholder The placeholder to replace.
               * @returns {Array} Returns the new array of placeholder indexes.
               */
              function replaceHolders(array, placeholder) {
                var index = -1,
                  length = array.length,
                  resIndex = 0,
                  result = [];

                while (++index < length) {
                  var value = array[index];
                  if (value === placeholder || value === PLACEHOLDER) {
                    array[index] = PLACEHOLDER;
                    result[resIndex++] = index;
                  }
                }
                return result;
              }

              /**
               * Converts `set` to an array of its values.
               *
               * @private
               * @param {Object} set The set to convert.
               * @returns {Array} Returns the values.
               */
              function setToArray(set) {
                var index = -1,
                  result = Array(set.size);

                set.forEach(function(value) {
                  result[++index] = value;
                });
                return result;
              }

              /**
               * Converts `set` to its value-value pairs.
               *
               * @private
               * @param {Object} set The set to convert.
               * @returns {Array} Returns the value-value pairs.
               */
              function setToPairs(set) {
                var index = -1,
                  result = Array(set.size);

                set.forEach(function(value) {
                  result[++index] = [value, value];
                });
                return result;
              }

              /**
               * A specialized version of `_.indexOf` which performs strict equality
               * comparisons of values, i.e. `===`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function strictIndexOf(array, value, fromIndex) {
                var index = fromIndex - 1,
                  length = array.length;

                while (++index < length) {
                  if (array[index] === value) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * A specialized version of `_.lastIndexOf` which performs strict equality
               * comparisons of values, i.e. `===`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function strictLastIndexOf(array, value, fromIndex) {
                var index = fromIndex + 1;
                while (index--) {
                  if (array[index] === value) {
                    return index;
                  }
                }
                return index;
              }

              /**
               * Gets the number of symbols in `string`.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {number} Returns the string size.
               */
              function stringSize(string) {
                return hasUnicode(string)
                  ? unicodeSize(string)
                  : asciiSize(string);
              }

              /**
               * Converts `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function stringToArray(string) {
                return hasUnicode(string)
                  ? unicodeToArray(string)
                  : asciiToArray(string);
              }

              /**
               * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
               * character of `string`.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {number} Returns the index of the last non-whitespace character.
               */
              function trimmedEndIndex(string) {
                var index = string.length;

                while (index-- && reWhitespace.test(string.charAt(index))) {}
                return index;
              }

              /**
               * Used by `_.unescape` to convert HTML entities to characters.
               *
               * @private
               * @param {string} chr The matched character to unescape.
               * @returns {string} Returns the unescaped character.
               */
              var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

              /**
               * Gets the size of a Unicode `string`.
               *
               * @private
               * @param {string} string The string inspect.
               * @returns {number} Returns the string size.
               */
              function unicodeSize(string) {
                var result = (reUnicode.lastIndex = 0);
                while (reUnicode.test(string)) {
                  ++result;
                }
                return result;
              }

              /**
               * Converts a Unicode `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function unicodeToArray(string) {
                return string.match(reUnicode) || [];
              }

              /**
               * Splits a Unicode `string` into an array of its words.
               *
               * @private
               * @param {string} The string to inspect.
               * @returns {Array} Returns the words of `string`.
               */
              function unicodeWords(string) {
                return string.match(reUnicodeWord) || [];
              }

              /*--------------------------------------------------------------------------*/

              /**
               * Create a new pristine `lodash` function using the `context` object.
               *
               * @static
               * @memberOf _
               * @since 1.1.0
               * @category Util
               * @param {Object} [context=root] The context object.
               * @returns {Function} Returns a new `lodash` function.
               * @example
               *
               * _.mixin({ 'foo': _.constant('foo') });
               *
               * var lodash = _.runInContext();
               * lodash.mixin({ 'bar': lodash.constant('bar') });
               *
               * _.isFunction(_.foo);
               * // => true
               * _.isFunction(_.bar);
               * // => false
               *
               * lodash.isFunction(lodash.foo);
               * // => false
               * lodash.isFunction(lodash.bar);
               * // => true
               *
               * // Create a suped-up `defer` in Node.js.
               * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
               */
              var runInContext = function runInContext(context) {
                context =
                  context == null
                    ? root
                    : _.defaults(
                        root.Object(),
                        context,
                        _.pick(root, contextProps)
                      );

                /** Built-in constructor references. */
                var Array = context.Array,
                  Date = context.Date,
                  Error = context.Error,
                  Function = context.Function,
                  Math = context.Math,
                  Object = context.Object,
                  RegExp = context.RegExp,
                  String = context.String,
                  TypeError = context.TypeError;

                /** Used for built-in method references. */
                var arrayProto = Array.prototype,
                  funcProto = Function.prototype,
                  objectProto = Object.prototype;

                /** Used to detect overreaching core-js shims. */
                var coreJsData = context['__core-js_shared__'];

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to generate unique IDs. */
                var idCounter = 0;

                /** Used to detect methods masquerading as native. */
                var maskSrcKey = (function() {
                  var uid = /[^.]+$/.exec(
                    (coreJsData &&
                      coreJsData.keys &&
                      coreJsData.keys.IE_PROTO) ||
                      ''
                  );
                  return uid ? 'Symbol(src)_1.' + uid : '';
                })();

                /**
                 * Used to resolve the
                 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var nativeObjectToString = objectProto.toString;

                /** Used to infer the `Object` constructor. */
                var objectCtorString = funcToString.call(Object);

                /** Used to restore the original `_` reference in `_.noConflict`. */
                var oldDash = root._;

                /** Used to detect if a method is native. */
                var reIsNative = RegExp(
                  '^' +
                    funcToString
                      .call(hasOwnProperty)
                      .replace(reRegExpChar, '\\$&')
                      .replace(
                        /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                        '$1.*?'
                      ) +
                    '$'
                );

                /** Built-in value references. */
                var Buffer = moduleExports ? context.Buffer : undefined,
                  Symbol = context.Symbol,
                  Uint8Array = context.Uint8Array,
                  allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                  getPrototype = overArg(Object.getPrototypeOf, Object),
                  objectCreate = Object.create,
                  propertyIsEnumerable = objectProto.propertyIsEnumerable,
                  splice = arrayProto.splice,
                  spreadableSymbol = Symbol
                    ? Symbol.isConcatSpreadable
                    : undefined,
                  symIterator = Symbol ? Symbol.iterator : undefined,
                  symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                var defineProperty = (function() {
                  try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                  } catch (e) {}
                })();

                /** Mocked built-ins. */
                var ctxClearTimeout =
                    context.clearTimeout !== root.clearTimeout &&
                    context.clearTimeout,
                  ctxNow = Date && Date.now !== root.Date.now && Date.now,
                  ctxSetTimeout =
                    context.setTimeout !== root.setTimeout &&
                    context.setTimeout;

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeCeil = Math.ceil,
                  nativeFloor = Math.floor,
                  nativeGetSymbols = Object.getOwnPropertySymbols,
                  nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                  nativeIsFinite = context.isFinite,
                  nativeJoin = arrayProto.join,
                  nativeKeys = overArg(Object.keys, Object),
                  nativeMax = Math.max,
                  nativeMin = Math.min,
                  nativeNow = Date.now,
                  nativeParseInt = context.parseInt,
                  nativeRandom = Math.random,
                  nativeReverse = arrayProto.reverse;

                /* Built-in method references that are verified to be native. */
                var DataView = getNative(context, 'DataView'),
                  Map = getNative(context, 'Map'),
                  Promise = getNative(context, 'Promise'),
                  Set = getNative(context, 'Set'),
                  WeakMap = getNative(context, 'WeakMap'),
                  nativeCreate = getNative(Object, 'create');

                /** Used to store function metadata. */
                var metaMap = WeakMap && new WeakMap();

                /** Used to lookup unminified function names. */
                var realNames = {};

                /** Used to detect maps, sets, and weakmaps. */
                var dataViewCtorString = toSource(DataView),
                  mapCtorString = toSource(Map),
                  promiseCtorString = toSource(Promise),
                  setCtorString = toSource(Set),
                  weakMapCtorString = toSource(WeakMap);

                /** Used to convert symbols to primitives and strings. */
                var symbolProto = Symbol ? Symbol.prototype : undefined,
                  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                  symbolToString = symbolProto
                    ? symbolProto.toString
                    : undefined;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` object which wraps `value` to enable implicit method
                 * chain sequences. Methods that operate on and return arrays, collections,
                 * and functions can be chained together. Methods that retrieve a single value
                 * or may return a primitive value will automatically end the chain sequence
                 * and return the unwrapped value. Otherwise, the value must be unwrapped
                 * with `_#value`.
                 *
                 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                 * enabled using `_.chain`.
                 *
                 * The execution of chained methods is lazy, that is, it's deferred until
                 * `_#value` is implicitly or explicitly called.
                 *
                 * Lazy evaluation allows several methods to support shortcut fusion.
                 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                 * the creation of intermediate arrays and can greatly reduce the number of
                 * iteratee executions. Sections of a chain sequence qualify for shortcut
                 * fusion if the section is applied to an array and iteratees accept only
                 * one argument. The heuristic for whether a section qualifies for shortcut
                 * fusion is subject to change.
                 *
                 * Chaining is supported in custom builds as long as the `_#value` method is
                 * directly or indirectly included in the build.
                 *
                 * In addition to lodash methods, wrappers have `Array` and `String` methods.
                 *
                 * The wrapper `Array` methods are:
                 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                 *
                 * The wrapper `String` methods are:
                 * `replace` and `split`
                 *
                 * The wrapper methods that support shortcut fusion are:
                 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                 *
                 * The chainable wrapper methods are:
                 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                 * `zipObject`, `zipObjectDeep`, and `zipWith`
                 *
                 * The wrapper methods that are **not** chainable by default are:
                 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                 * `upperFirst`, `value`, and `words`
                 *
                 * @name _
                 * @constructor
                 * @category Seq
                 * @param {*} value The value to wrap in a `lodash` instance.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var wrapped = _([1, 2, 3]);
                 *
                 * // Returns an unwrapped value.
                 * wrapped.reduce(_.add);
                 * // => 6
                 *
                 * // Returns a wrapped value.
                 * var squares = wrapped.map(square);
                 *
                 * _.isArray(squares);
                 * // => false
                 *
                 * _.isArray(squares.value());
                 * // => true
                 */
                function lodash(value) {
                  if (
                    isObjectLike(value) &&
                    !isArray(value) &&
                    !(value instanceof LazyWrapper)
                  ) {
                    if (value instanceof LodashWrapper) {
                      return value;
                    }
                    if (hasOwnProperty.call(value, '__wrapped__')) {
                      return wrapperClone(value);
                    }
                  }
                  return new LodashWrapper(value);
                }

                /**
                 * The base implementation of `_.create` without support for assigning
                 * properties to the created object.
                 *
                 * @private
                 * @param {Object} proto The object to inherit from.
                 * @returns {Object} Returns the new object.
                 */
                var baseCreate = (function() {
                  function object() {}
                  return function(proto) {
                    if (!isObject(proto)) {
                      return {};
                    }
                    if (objectCreate) {
                      return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object();
                    object.prototype = undefined;
                    return result;
                  };
                })();

                /**
                 * The function whose prototype chain sequence wrappers inherit from.
                 *
                 * @private
                 */
                function baseLodash() {
                  // No operation performed.
                }

                /**
                 * The base constructor for creating `lodash` wrapper objects.
                 *
                 * @private
                 * @param {*} value The value to wrap.
                 * @param {boolean} [chainAll] Enable explicit method chain sequences.
                 */
                function LodashWrapper(value, chainAll) {
                  this.__wrapped__ = value;
                  this.__actions__ = [];
                  this.__chain__ = !!chainAll;
                  this.__index__ = 0;
                  this.__values__ = undefined;
                }

                /**
                 * By default, the template delimiters used by lodash are like those in
                 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                 * following template settings to use alternative delimiters.
                 *
                 * @static
                 * @memberOf _
                 * @type {Object}
                 */
                lodash.templateSettings = {
                  /**
                   * Used to detect `data` property values to be HTML-escaped.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  escape: reEscape,

                  /**
                   * Used to detect code to be evaluated.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  evaluate: reEvaluate,

                  /**
                   * Used to detect `data` property values to inject.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  interpolate: reInterpolate,

                  /**
                   * Used to reference the data object in the template text.
                   *
                   * @memberOf _.templateSettings
                   * @type {string}
                   */
                  variable: '',

                  /**
                   * Used to import variables into the compiled template.
                   *
                   * @memberOf _.templateSettings
                   * @type {Object}
                   */
                  imports: {
                    /**
                     * A reference to the `lodash` function.
                     *
                     * @memberOf _.templateSettings.imports
                     * @type {Function}
                     */
                    _: lodash,
                  },
                };

                // Ensure wrappers are instances of `baseLodash`.
                lodash.prototype = baseLodash.prototype;
                lodash.prototype.constructor = lodash;

                LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                LodashWrapper.prototype.constructor = LodashWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                 *
                 * @private
                 * @constructor
                 * @param {*} value The value to wrap.
                 */
                function LazyWrapper(value) {
                  this.__wrapped__ = value;
                  this.__actions__ = [];
                  this.__dir__ = 1;
                  this.__filtered__ = false;
                  this.__iteratees__ = [];
                  this.__takeCount__ = MAX_ARRAY_LENGTH;
                  this.__views__ = [];
                }

                /**
                 * Creates a clone of the lazy wrapper object.
                 *
                 * @private
                 * @name clone
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the cloned `LazyWrapper` object.
                 */
                function lazyClone() {
                  var result = new LazyWrapper(this.__wrapped__);
                  result.__actions__ = copyArray(this.__actions__);
                  result.__dir__ = this.__dir__;
                  result.__filtered__ = this.__filtered__;
                  result.__iteratees__ = copyArray(this.__iteratees__);
                  result.__takeCount__ = this.__takeCount__;
                  result.__views__ = copyArray(this.__views__);
                  return result;
                }

                /**
                 * Reverses the direction of lazy iteration.
                 *
                 * @private
                 * @name reverse
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the new reversed `LazyWrapper` object.
                 */
                function lazyReverse() {
                  if (this.__filtered__) {
                    var result = new LazyWrapper(this);
                    result.__dir__ = -1;
                    result.__filtered__ = true;
                  } else {
                    result = this.clone();
                    result.__dir__ *= -1;
                  }
                  return result;
                }

                /**
                 * Extracts the unwrapped value from its lazy wrapper.
                 *
                 * @private
                 * @name value
                 * @memberOf LazyWrapper
                 * @returns {*} Returns the unwrapped value.
                 */
                function lazyValue() {
                  var array = this.__wrapped__.value(),
                    dir = this.__dir__,
                    isArr = isArray(array),
                    isRight = dir < 0,
                    arrLength = isArr ? array.length : 0,
                    view = getView(0, arrLength, this.__views__),
                    start = view.start,
                    end = view.end,
                    length = end - start,
                    index = isRight ? end : start - 1,
                    iteratees = this.__iteratees__,
                    iterLength = iteratees.length,
                    resIndex = 0,
                    takeCount = nativeMin(length, this.__takeCount__);

                  if (
                    !isArr ||
                    (!isRight && arrLength == length && takeCount == length)
                  ) {
                    return baseWrapperValue(array, this.__actions__);
                  }
                  var result = [];

                  outer: while (length-- && resIndex < takeCount) {
                    index += dir;

                    var iterIndex = -1,
                      value = array[index];

                    while (++iterIndex < iterLength) {
                      var data = iteratees[iterIndex],
                        iteratee = data.iteratee,
                        type = data.type,
                        computed = iteratee(value);

                      if (type == LAZY_MAP_FLAG) {
                        value = computed;
                      } else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) {
                          continue outer;
                        } else {
                          break outer;
                        }
                      }
                    }
                    result[resIndex++] = value;
                  }
                  return result;
                }

                // Ensure `LazyWrapper` is an instance of `baseLodash`.
                LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                LazyWrapper.prototype.constructor = LazyWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a hash object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Hash(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the hash.
                 *
                 * @private
                 * @name clear
                 * @memberOf Hash
                 */
                function hashClear() {
                  this.__data__ = nativeCreate ? nativeCreate(null) : {};
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the hash.
                 *
                 * @private
                 * @name delete
                 * @memberOf Hash
                 * @param {Object} hash The hash to modify.
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function hashDelete(key) {
                  var result = this.has(key) && delete this.__data__[key];
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the hash value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Hash
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function hashGet(key) {
                  var data = this.__data__;
                  if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined : result;
                  }
                  return hasOwnProperty.call(data, key) ? data[key] : undefined;
                }

                /**
                 * Checks if a hash value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Hash
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function hashHas(key) {
                  var data = this.__data__;
                  return nativeCreate
                    ? data[key] !== undefined
                    : hasOwnProperty.call(data, key);
                }

                /**
                 * Sets the hash `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Hash
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the hash instance.
                 */
                function hashSet(key, value) {
                  var data = this.__data__;
                  this.size += this.has(key) ? 0 : 1;
                  data[key] =
                    nativeCreate && value === undefined
                      ? HASH_UNDEFINED
                      : value;
                  return this;
                }

                // Add methods to `Hash`.
                Hash.prototype.clear = hashClear;
                Hash.prototype['delete'] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an list cache object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function ListCache(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the list cache.
                 *
                 * @private
                 * @name clear
                 * @memberOf ListCache
                 */
                function listCacheClear() {
                  this.__data__ = [];
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the list cache.
                 *
                 * @private
                 * @name delete
                 * @memberOf ListCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function listCacheDelete(key) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  if (index < 0) {
                    return false;
                  }
                  var lastIndex = data.length - 1;
                  if (index == lastIndex) {
                    data.pop();
                  } else {
                    splice.call(data, index, 1);
                  }
                  --this.size;
                  return true;
                }

                /**
                 * Gets the list cache value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf ListCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function listCacheGet(key) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  return index < 0 ? undefined : data[index][1];
                }

                /**
                 * Checks if a list cache value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf ListCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function listCacheHas(key) {
                  return assocIndexOf(this.__data__, key) > -1;
                }

                /**
                 * Sets the list cache `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf ListCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the list cache instance.
                 */
                function listCacheSet(key, value) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                  } else {
                    data[index][1] = value;
                  }
                  return this;
                }

                // Add methods to `ListCache`.
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype['delete'] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a map cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function MapCache(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the map.
                 *
                 * @private
                 * @name clear
                 * @memberOf MapCache
                 */
                function mapCacheClear() {
                  this.size = 0;
                  this.__data__ = {
                    hash: new Hash(),
                    map: new (Map || ListCache)(),
                    string: new Hash(),
                  };
                }

                /**
                 * Removes `key` and its value from the map.
                 *
                 * @private
                 * @name delete
                 * @memberOf MapCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function mapCacheDelete(key) {
                  var result = getMapData(this, key)['delete'](key);
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the map value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf MapCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function mapCacheGet(key) {
                  return getMapData(this, key).get(key);
                }

                /**
                 * Checks if a map value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf MapCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function mapCacheHas(key) {
                  return getMapData(this, key).has(key);
                }

                /**
                 * Sets the map `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf MapCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the map cache instance.
                 */
                function mapCacheSet(key, value) {
                  var data = getMapData(this, key),
                    size = data.size;

                  data.set(key, value);
                  this.size += data.size == size ? 0 : 1;
                  return this;
                }

                // Add methods to `MapCache`.
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype['delete'] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 *
                 * Creates an array cache object to store unique values.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [values] The values to cache.
                 */
                function SetCache(values) {
                  var index = -1,
                    length = values == null ? 0 : values.length;

                  this.__data__ = new MapCache();
                  while (++index < length) {
                    this.add(values[index]);
                  }
                }

                /**
                 * Adds `value` to the array cache.
                 *
                 * @private
                 * @name add
                 * @memberOf SetCache
                 * @alias push
                 * @param {*} value The value to cache.
                 * @returns {Object} Returns the cache instance.
                 */
                function setCacheAdd(value) {
                  this.__data__.set(value, HASH_UNDEFINED);
                  return this;
                }

                /**
                 * Checks if `value` is in the array cache.
                 *
                 * @private
                 * @name has
                 * @memberOf SetCache
                 * @param {*} value The value to search for.
                 * @returns {number} Returns `true` if `value` is found, else `false`.
                 */
                function setCacheHas(value) {
                  return this.__data__.has(value);
                }

                // Add methods to `SetCache`.
                SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                SetCache.prototype.has = setCacheHas;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a stack cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Stack(entries) {
                  var data = (this.__data__ = new ListCache(entries));
                  this.size = data.size;
                }

                /**
                 * Removes all key-value entries from the stack.
                 *
                 * @private
                 * @name clear
                 * @memberOf Stack
                 */
                function stackClear() {
                  this.__data__ = new ListCache();
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the stack.
                 *
                 * @private
                 * @name delete
                 * @memberOf Stack
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function stackDelete(key) {
                  var data = this.__data__,
                    result = data['delete'](key);

                  this.size = data.size;
                  return result;
                }

                /**
                 * Gets the stack value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Stack
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function stackGet(key) {
                  return this.__data__.get(key);
                }

                /**
                 * Checks if a stack value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Stack
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function stackHas(key) {
                  return this.__data__.has(key);
                }

                /**
                 * Sets the stack `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Stack
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the stack cache instance.
                 */
                function stackSet(key, value) {
                  var data = this.__data__;
                  if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                      pairs.push([key, value]);
                      this.size = ++data.size;
                      return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                  }
                  data.set(key, value);
                  this.size = data.size;
                  return this;
                }

                // Add methods to `Stack`.
                Stack.prototype.clear = stackClear;
                Stack.prototype['delete'] = stackDelete;
                Stack.prototype.get = stackGet;
                Stack.prototype.has = stackHas;
                Stack.prototype.set = stackSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of the enumerable property names of the array-like `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @param {boolean} inherited Specify returning inherited property names.
                 * @returns {Array} Returns the array of property names.
                 */
                function arrayLikeKeys(value, inherited) {
                  var isArr = isArray(value),
                    isArg = !isArr && isArguments(value),
                    isBuff = !isArr && !isArg && isBuffer(value),
                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                    skipIndexes = isArr || isArg || isBuff || isType,
                    result = skipIndexes ? baseTimes(value.length, String) : [],
                    length = result.length;

                  for (var key in value) {
                    if (
                      (inherited || hasOwnProperty.call(value, key)) &&
                      !(
                        skipIndexes &&
                        // Safari 9 has enumerable `arguments.length` in strict mode.
                        (key == 'length' ||
                          // Node.js 0.10 has enumerable non-index properties on buffers.
                          (isBuff && (key == 'offset' || key == 'parent')) ||
                          // PhantomJS 2 has enumerable non-index properties on typed arrays.
                          (isType &&
                            (key == 'buffer' ||
                              key == 'byteLength' ||
                              key == 'byteOffset')) ||
                          // Skip index properties.
                          isIndex(key, length))
                      )
                    ) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * A specialized version of `_.sample` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @returns {*} Returns the random element.
                 */
                function arraySample(array) {
                  var length = array.length;
                  return length ? array[baseRandom(0, length - 1)] : undefined;
                }

                /**
                 * A specialized version of `_.sampleSize` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function arraySampleSize(array, n) {
                  return shuffleSelf(
                    copyArray(array),
                    baseClamp(n, 0, array.length)
                  );
                }

                /**
                 * A specialized version of `_.shuffle` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function arrayShuffle(array) {
                  return shuffleSelf(copyArray(array));
                }

                /**
                 * This function is like `assignValue` except that it doesn't assign
                 * `undefined` values.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignMergeValue(object, key, value) {
                  if (
                    (value !== undefined && !eq(object[key], value)) ||
                    (value === undefined && !(key in object))
                  ) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Assigns `value` to `key` of `object` if the existing value is not equivalent
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignValue(object, key, value) {
                  var objValue = object[key];
                  if (
                    !(
                      hasOwnProperty.call(object, key) && eq(objValue, value)
                    ) ||
                    (value === undefined && !(key in object))
                  ) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Gets the index at which the `key` is found in `array` of key-value pairs.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} key The key to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function assocIndexOf(array, key) {
                  var length = array.length;
                  while (length--) {
                    if (eq(array[length][0], key)) {
                      return length;
                    }
                  }
                  return -1;
                }

                /**
                 * Aggregates elements of `collection` on `accumulator` with keys transformed
                 * by `iteratee` and values set by `setter`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform keys.
                 * @param {Object} accumulator The initial aggregated object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseAggregator(
                  collection,
                  setter,
                  iteratee,
                  accumulator
                ) {
                  baseEach(collection, function(value, key, collection) {
                    setter(accumulator, value, iteratee(value), collection);
                  });
                  return accumulator;
                }

                /**
                 * The base implementation of `_.assign` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssign(object, source) {
                  return object && copyObject(source, keys(source), object);
                }

                /**
                 * The base implementation of `_.assignIn` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssignIn(object, source) {
                  return object && copyObject(source, keysIn(source), object);
                }

                /**
                 * The base implementation of `assignValue` and `assignMergeValue` without
                 * value checks.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function baseAssignValue(object, key, value) {
                  if (key == '__proto__' && defineProperty) {
                    defineProperty(object, key, {
                      configurable: true,
                      enumerable: true,
                      value: value,
                      writable: true,
                    });
                  } else {
                    object[key] = value;
                  }
                }

                /**
                 * The base implementation of `_.at` without support for individual paths.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Array} Returns the picked elements.
                 */
                function baseAt(object, paths) {
                  var index = -1,
                    length = paths.length,
                    result = Array(length),
                    skip = object == null;

                  while (++index < length) {
                    result[index] = skip
                      ? undefined
                      : get(object, paths[index]);
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.clamp` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 */
                function baseClamp(number, lower, upper) {
                  if (number === number) {
                    if (upper !== undefined) {
                      number = number <= upper ? number : upper;
                    }
                    if (lower !== undefined) {
                      number = number >= lower ? number : lower;
                    }
                  }
                  return number;
                }

                /**
                 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                 * traversed objects.
                 *
                 * @private
                 * @param {*} value The value to clone.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Deep clone
                 *  2 - Flatten inherited properties
                 *  4 - Clone symbols
                 * @param {Function} [customizer] The function to customize cloning.
                 * @param {string} [key] The key of `value`.
                 * @param {Object} [object] The parent object of `value`.
                 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                 * @returns {*} Returns the cloned value.
                 */
                function baseClone(
                  value,
                  bitmask,
                  customizer,
                  key,
                  object,
                  stack
                ) {
                  var result,
                    isDeep = bitmask & CLONE_DEEP_FLAG,
                    isFlat = bitmask & CLONE_FLAT_FLAG,
                    isFull = bitmask & CLONE_SYMBOLS_FLAG;

                  if (customizer) {
                    result = object
                      ? customizer(value, key, object, stack)
                      : customizer(value);
                  }
                  if (result !== undefined) {
                    return result;
                  }
                  if (!isObject(value)) {
                    return value;
                  }
                  var isArr = isArray(value);
                  if (isArr) {
                    result = initCloneArray(value);
                    if (!isDeep) {
                      return copyArray(value, result);
                    }
                  } else {
                    var tag = getTag(value),
                      isFunc = tag == funcTag || tag == genTag;

                    if (isBuffer(value)) {
                      return cloneBuffer(value, isDeep);
                    }
                    if (
                      tag == objectTag ||
                      tag == argsTag ||
                      (isFunc && !object)
                    ) {
                      result = isFlat || isFunc ? {} : initCloneObject(value);
                      if (!isDeep) {
                        return isFlat
                          ? copySymbolsIn(value, baseAssignIn(result, value))
                          : copySymbols(value, baseAssign(result, value));
                      }
                    } else {
                      if (!cloneableTags[tag]) {
                        return object ? value : {};
                      }
                      result = initCloneByTag(value, tag, isDeep);
                    }
                  }
                  // Check for circular references and return its corresponding clone.
                  stack || (stack = new Stack());
                  var stacked = stack.get(value);
                  if (stacked) {
                    return stacked;
                  }
                  stack.set(value, result);

                  if (isSet(value)) {
                    value.forEach(function(subValue) {
                      result.add(
                        baseClone(
                          subValue,
                          bitmask,
                          customizer,
                          subValue,
                          value,
                          stack
                        )
                      );
                    });
                  } else if (isMap(value)) {
                    value.forEach(function(subValue, key) {
                      result.set(
                        key,
                        baseClone(
                          subValue,
                          bitmask,
                          customizer,
                          key,
                          value,
                          stack
                        )
                      );
                    });
                  }

                  var keysFunc = isFull
                    ? isFlat
                      ? getAllKeysIn
                      : getAllKeys
                    : isFlat
                    ? keysIn
                    : keys;

                  var props = isArr ? undefined : keysFunc(value);
                  arrayEach(props || value, function(subValue, key) {
                    if (props) {
                      key = subValue;
                      subValue = value[key];
                    }
                    // Recursively populate clone (susceptible to call stack limits).
                    assignValue(
                      result,
                      key,
                      baseClone(
                        subValue,
                        bitmask,
                        customizer,
                        key,
                        value,
                        stack
                      )
                    );
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.conforms` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseConforms(source) {
                  var props = keys(source);
                  return function(object) {
                    return baseConformsTo(object, source, props);
                  };
                }

                /**
                 * The base implementation of `_.conformsTo` which accepts `props` to check.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 */
                function baseConformsTo(object, source, props) {
                  var length = props.length;
                  if (object == null) {
                    return !length;
                  }
                  object = Object(object);
                  while (length--) {
                    var key = props[length],
                      predicate = source[key],
                      value = object[key];

                    if (
                      (value === undefined && !(key in object)) ||
                      !predicate(value)
                    ) {
                      return false;
                    }
                  }
                  return true;
                }

                /**
                 * The base implementation of `_.delay` and `_.defer` which accepts `args`
                 * to provide to `func`.
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {Array} args The arguments to provide to `func`.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                function baseDelay(func, wait, args) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return setTimeout(function() {
                    func.apply(undefined, args);
                  }, wait);
                }

                /**
                 * The base implementation of methods like `_.difference` without support
                 * for excluding multiple arrays or iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Array} values The values to exclude.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 */
                function baseDifference(array, values, iteratee, comparator) {
                  var index = -1,
                    includes = arrayIncludes,
                    isCommon = true,
                    length = array.length,
                    result = [],
                    valuesLength = values.length;

                  if (!length) {
                    return result;
                  }
                  if (iteratee) {
                    values = arrayMap(values, baseUnary(iteratee));
                  }
                  if (comparator) {
                    includes = arrayIncludesWith;
                    isCommon = false;
                  } else if (values.length >= LARGE_ARRAY_SIZE) {
                    includes = cacheHas;
                    isCommon = false;
                    values = new SetCache(values);
                  }
                  outer: while (++index < length) {
                    var value = array[index],
                      computed = iteratee == null ? value : iteratee(value);

                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                      var valuesIndex = valuesLength;
                      while (valuesIndex--) {
                        if (values[valuesIndex] === computed) {
                          continue outer;
                        }
                      }
                      result.push(value);
                    } else if (!includes(values, computed, comparator)) {
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.forEach` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEach = createBaseEach(baseForOwn);

                /**
                 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEachRight = createBaseEach(baseForOwnRight, true);

                /**
                 * The base implementation of `_.every` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`
                 */
                function baseEvery(collection, predicate) {
                  var result = true;
                  baseEach(collection, function(value, index, collection) {
                    result = !!predicate(value, index, collection);
                    return result;
                  });
                  return result;
                }

                /**
                 * The base implementation of methods like `_.max` and `_.min` which accepts a
                 * `comparator` to determine the extremum value.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The iteratee invoked per iteration.
                 * @param {Function} comparator The comparator used to compare values.
                 * @returns {*} Returns the extremum value.
                 */
                function baseExtremum(array, iteratee, comparator) {
                  var index = -1,
                    length = array.length;

                  while (++index < length) {
                    var value = array[index],
                      current = iteratee(value);

                    if (
                      current != null &&
                      (computed === undefined
                        ? current === current && !isSymbol(current)
                        : comparator(current, computed))
                    ) {
                      var computed = current,
                        result = value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.fill` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 */
                function baseFill(array, value, start, end) {
                  var length = array.length;

                  start = toInteger(start);
                  if (start < 0) {
                    start = -start > length ? 0 : length + start;
                  }
                  end =
                    end === undefined || end > length ? length : toInteger(end);
                  if (end < 0) {
                    end += length;
                  }
                  end = start > end ? 0 : toLength(end);
                  while (start < end) {
                    array[start++] = value;
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.filter` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 */
                function baseFilter(collection, predicate) {
                  var result = [];
                  baseEach(collection, function(value, index, collection) {
                    if (predicate(value, index, collection)) {
                      result.push(value);
                    }
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.flatten` with support for restricting flattening.
                 *
                 * @private
                 * @param {Array} array The array to flatten.
                 * @param {number} depth The maximum recursion depth.
                 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                 * @param {Array} [result=[]] The initial result value.
                 * @returns {Array} Returns the new flattened array.
                 */
                function baseFlatten(
                  array,
                  depth,
                  predicate,
                  isStrict,
                  result
                ) {
                  var index = -1,
                    length = array.length;

                  predicate || (predicate = isFlattenable);
                  result || (result = []);

                  while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                      if (depth > 1) {
                        // Recursively flatten arrays (susceptible to call stack limits).
                        baseFlatten(
                          value,
                          depth - 1,
                          predicate,
                          isStrict,
                          result
                        );
                      } else {
                        arrayPush(result, value);
                      }
                    } else if (!isStrict) {
                      result[result.length] = value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `baseForOwn` which iterates over `object`
                 * properties returned by `keysFunc` and invokes `iteratee` for each property.
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseFor = createBaseFor();

                /**
                 * This function is like `baseFor` except that it iterates over properties
                 * in the opposite order.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseForRight = createBaseFor(true);

                /**
                 * The base implementation of `_.forOwn` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwn(object, iteratee) {
                  return object && baseFor(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwnRight(object, iteratee) {
                  return object && baseForRight(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.functions` which creates an array of
                 * `object` function property names filtered from `props`.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Array} props The property names to filter.
                 * @returns {Array} Returns the function names.
                 */
                function baseFunctions(object, props) {
                  return arrayFilter(props, function(key) {
                    return isFunction(object[key]);
                  });
                }

                /**
                 * The base implementation of `_.get` without support for default values.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @returns {*} Returns the resolved value.
                 */
                function baseGet(object, path) {
                  path = castPath(path, object);

                  var index = 0,
                    length = path.length;

                  while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                  }
                  return index && index == length ? object : undefined;
                }

                /**
                 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @param {Function} symbolsFunc The function to get the symbols of `object`.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                  var result = keysFunc(object);
                  return isArray(object)
                    ? result
                    : arrayPush(result, symbolsFunc(object));
                }

                /**
                 * The base implementation of `getTag` without fallbacks for buggy environments.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                function baseGetTag(value) {
                  if (value == null) {
                    return value === undefined ? undefinedTag : nullTag;
                  }
                  return symToStringTag && symToStringTag in Object(value)
                    ? getRawTag(value)
                    : objectToString(value);
                }

                /**
                 * The base implementation of `_.gt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 */
                function baseGt(value, other) {
                  return value > other;
                }

                /**
                 * The base implementation of `_.has` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHas(object, key) {
                  return object != null && hasOwnProperty.call(object, key);
                }

                /**
                 * The base implementation of `_.hasIn` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHasIn(object, key) {
                  return object != null && key in Object(object);
                }

                /**
                 * The base implementation of `_.inRange` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to check.
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 */
                function baseInRange(number, start, end) {
                  return (
                    number >= nativeMin(start, end) &&
                    number < nativeMax(start, end)
                  );
                }

                /**
                 * The base implementation of methods like `_.intersection`, without support
                 * for iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of shared values.
                 */
                function baseIntersection(arrays, iteratee, comparator) {
                  var includes = comparator ? arrayIncludesWith : arrayIncludes,
                    length = arrays[0].length,
                    othLength = arrays.length,
                    othIndex = othLength,
                    caches = Array(othLength),
                    maxLength = Infinity,
                    result = [];

                  while (othIndex--) {
                    var array = arrays[othIndex];
                    if (othIndex && iteratee) {
                      array = arrayMap(array, baseUnary(iteratee));
                    }
                    maxLength = nativeMin(array.length, maxLength);
                    caches[othIndex] =
                      !comparator &&
                      (iteratee || (length >= 120 && array.length >= 120))
                        ? new SetCache(othIndex && array)
                        : undefined;
                  }
                  array = arrays[0];

                  var index = -1,
                    seen = caches[0];

                  outer: while (++index < length && result.length < maxLength) {
                    var value = array[index],
                      computed = iteratee ? iteratee(value) : value;

                    value = comparator || value !== 0 ? value : 0;
                    if (
                      !(seen
                        ? cacheHas(seen, computed)
                        : includes(result, computed, comparator))
                    ) {
                      othIndex = othLength;
                      while (--othIndex) {
                        var cache = caches[othIndex];
                        if (
                          !(cache
                            ? cacheHas(cache, computed)
                            : includes(arrays[othIndex], computed, comparator))
                        ) {
                          continue outer;
                        }
                      }
                      if (seen) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.invert` and `_.invertBy` which inverts
                 * `object` with values transformed by `iteratee` and set by `setter`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform values.
                 * @param {Object} accumulator The initial inverted object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseInverter(object, setter, iteratee, accumulator) {
                  baseForOwn(object, function(value, key, object) {
                    setter(accumulator, iteratee(value), key, object);
                  });
                  return accumulator;
                }

                /**
                 * The base implementation of `_.invoke` without support for individual
                 * method arguments.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {Array} args The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 */
                function baseInvoke(object, path, args) {
                  path = castPath(path, object);
                  object = parent(object, path);
                  var func =
                    object == null ? object : object[toKey(last(path))];
                  return func == null ? undefined : apply(func, object, args);
                }

                /**
                 * The base implementation of `_.isArguments`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 */
                function baseIsArguments(value) {
                  return isObjectLike(value) && baseGetTag(value) == argsTag;
                }

                /**
                 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 */
                function baseIsArrayBuffer(value) {
                  return (
                    isObjectLike(value) && baseGetTag(value) == arrayBufferTag
                  );
                }

                /**
                 * The base implementation of `_.isDate` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 */
                function baseIsDate(value) {
                  return isObjectLike(value) && baseGetTag(value) == dateTag;
                }

                /**
                 * The base implementation of `_.isEqual` which supports partial comparisons
                 * and tracks traversed objects.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Unordered comparison
                 *  2 - Partial comparison
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 */
                function baseIsEqual(value, other, bitmask, customizer, stack) {
                  if (value === other) {
                    return true;
                  }
                  if (
                    value == null ||
                    other == null ||
                    (!isObjectLike(value) && !isObjectLike(other))
                  ) {
                    return value !== value && other !== other;
                  }
                  return baseIsEqualDeep(
                    value,
                    other,
                    bitmask,
                    customizer,
                    baseIsEqual,
                    stack
                  );
                }

                /**
                 * A specialized version of `baseIsEqual` for arrays and objects which performs
                 * deep comparisons and tracks traversed objects enabling objects with circular
                 * references to be compared.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function baseIsEqualDeep(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                ) {
                  var objIsArr = isArray(object),
                    othIsArr = isArray(other),
                    objTag = objIsArr ? arrayTag : getTag(object),
                    othTag = othIsArr ? arrayTag : getTag(other);

                  objTag = objTag == argsTag ? objectTag : objTag;
                  othTag = othTag == argsTag ? objectTag : othTag;

                  var objIsObj = objTag == objectTag,
                    othIsObj = othTag == objectTag,
                    isSameTag = objTag == othTag;

                  if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                      return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                  }
                  if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack());
                    return objIsArr || isTypedArray(object)
                      ? equalArrays(
                          object,
                          other,
                          bitmask,
                          customizer,
                          equalFunc,
                          stack
                        )
                      : equalByTag(
                          object,
                          other,
                          objTag,
                          bitmask,
                          customizer,
                          equalFunc,
                          stack
                        );
                  }
                  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped =
                        objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                      othIsWrapped =
                        othIsObj && hasOwnProperty.call(other, '__wrapped__');

                    if (objIsWrapped || othIsWrapped) {
                      var objUnwrapped = objIsWrapped ? object.value() : object,
                        othUnwrapped = othIsWrapped ? other.value() : other;

                      stack || (stack = new Stack());
                      return equalFunc(
                        objUnwrapped,
                        othUnwrapped,
                        bitmask,
                        customizer,
                        stack
                      );
                    }
                  }
                  if (!isSameTag) {
                    return false;
                  }
                  stack || (stack = new Stack());
                  return equalObjects(
                    object,
                    other,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
                }

                /**
                 * The base implementation of `_.isMap` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 */
                function baseIsMap(value) {
                  return isObjectLike(value) && getTag(value) == mapTag;
                }

                /**
                 * The base implementation of `_.isMatch` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Array} matchData The property names, values, and compare flags to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 */
                function baseIsMatch(object, source, matchData, customizer) {
                  var index = matchData.length,
                    length = index,
                    noCustomizer = !customizer;

                  if (object == null) {
                    return !length;
                  }
                  object = Object(object);
                  while (index--) {
                    var data = matchData[index];
                    if (
                      noCustomizer && data[2]
                        ? data[1] !== object[data[0]]
                        : !(data[0] in object)
                    ) {
                      return false;
                    }
                  }
                  while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                      objValue = object[key],
                      srcValue = data[1];

                    if (noCustomizer && data[2]) {
                      if (objValue === undefined && !(key in object)) {
                        return false;
                      }
                    } else {
                      var stack = new Stack();
                      if (customizer) {
                        var result = customizer(
                          objValue,
                          srcValue,
                          key,
                          object,
                          source,
                          stack
                        );
                      }
                      if (
                        !(result === undefined
                          ? baseIsEqual(
                              srcValue,
                              objValue,
                              COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                              customizer,
                              stack
                            )
                          : result)
                      ) {
                        return false;
                      }
                    }
                  }
                  return true;
                }

                /**
                 * The base implementation of `_.isNative` without bad shim checks.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 */
                function baseIsNative(value) {
                  if (!isObject(value) || isMasked(value)) {
                    return false;
                  }
                  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                  return pattern.test(toSource(value));
                }

                /**
                 * The base implementation of `_.isRegExp` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 */
                function baseIsRegExp(value) {
                  return isObjectLike(value) && baseGetTag(value) == regexpTag;
                }

                /**
                 * The base implementation of `_.isSet` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 */
                function baseIsSet(value) {
                  return isObjectLike(value) && getTag(value) == setTag;
                }

                /**
                 * The base implementation of `_.isTypedArray` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 */
                function baseIsTypedArray(value) {
                  return (
                    isObjectLike(value) &&
                    isLength(value.length) &&
                    !!typedArrayTags[baseGetTag(value)]
                  );
                }

                /**
                 * The base implementation of `_.iteratee`.
                 *
                 * @private
                 * @param {*} [value=_.identity] The value to convert to an iteratee.
                 * @returns {Function} Returns the iteratee.
                 */
                function baseIteratee(value) {
                  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                  if (typeof value == 'function') {
                    return value;
                  }
                  if (value == null) {
                    return identity;
                  }
                  if (typeof value == 'object') {
                    return isArray(value)
                      ? baseMatchesProperty(value[0], value[1])
                      : baseMatches(value);
                  }
                  return property(value);
                }

                /**
                 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeys(object) {
                  if (!isPrototype(object)) {
                    return nativeKeys(object);
                  }
                  var result = [];
                  for (var key in Object(object)) {
                    if (
                      hasOwnProperty.call(object, key) &&
                      key != 'constructor'
                    ) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeysIn(object) {
                  if (!isObject(object)) {
                    return nativeKeysIn(object);
                  }
                  var isProto = isPrototype(object),
                    result = [];

                  for (var key in object) {
                    if (
                      !(
                        key == 'constructor' &&
                        (isProto || !hasOwnProperty.call(object, key))
                      )
                    ) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.lt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 */
                function baseLt(value, other) {
                  return value < other;
                }

                /**
                 * The base implementation of `_.map` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 */
                function baseMap(collection, iteratee) {
                  var index = -1,
                    result = isArrayLike(collection)
                      ? Array(collection.length)
                      : [];

                  baseEach(collection, function(value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.matches` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatches(source) {
                  var matchData = getMatchData(source);
                  if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(
                      matchData[0][0],
                      matchData[0][1]
                    );
                  }
                  return function(object) {
                    return (
                      object === source ||
                      baseIsMatch(object, source, matchData)
                    );
                  };
                }

                /**
                 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                 *
                 * @private
                 * @param {string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatchesProperty(path, srcValue) {
                  if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                  }
                  return function(object) {
                    var objValue = get(object, path);
                    return objValue === undefined && objValue === srcValue
                      ? hasIn(object, path)
                      : baseIsEqual(
                          srcValue,
                          objValue,
                          COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                        );
                  };
                }

                /**
                 * The base implementation of `_.merge` without support for multiple sources.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMerge(
                  object,
                  source,
                  srcIndex,
                  customizer,
                  stack
                ) {
                  if (object === source) {
                    return;
                  }
                  baseFor(
                    source,
                    function(srcValue, key) {
                      stack || (stack = new Stack());
                      if (isObject(srcValue)) {
                        baseMergeDeep(
                          object,
                          source,
                          key,
                          srcIndex,
                          baseMerge,
                          customizer,
                          stack
                        );
                      } else {
                        var newValue = customizer
                          ? customizer(
                              safeGet(object, key),
                              srcValue,
                              key + '',
                              object,
                              source,
                              stack
                            )
                          : undefined;

                        if (newValue === undefined) {
                          newValue = srcValue;
                        }
                        assignMergeValue(object, key, newValue);
                      }
                    },
                    keysIn
                  );
                }

                /**
                 * A specialized version of `baseMerge` for arrays and objects which performs
                 * deep merges and tracks traversed objects enabling objects with circular
                 * references to be merged.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {string} key The key of the value to merge.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} mergeFunc The function to merge values.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMergeDeep(
                  object,
                  source,
                  key,
                  srcIndex,
                  mergeFunc,
                  customizer,
                  stack
                ) {
                  var objValue = safeGet(object, key),
                    srcValue = safeGet(source, key),
                    stacked = stack.get(srcValue);

                  if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                  }
                  var newValue = customizer
                    ? customizer(
                        objValue,
                        srcValue,
                        key + '',
                        object,
                        source,
                        stack
                      )
                    : undefined;

                  var isCommon = newValue === undefined;

                  if (isCommon) {
                    var isArr = isArray(srcValue),
                      isBuff = !isArr && isBuffer(srcValue),
                      isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                      if (isArray(objValue)) {
                        newValue = objValue;
                      } else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                      } else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                      } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                      } else {
                        newValue = [];
                      }
                    } else if (
                      isPlainObject(srcValue) ||
                      isArguments(srcValue)
                    ) {
                      newValue = objValue;
                      if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                      } else if (!isObject(objValue) || isFunction(objValue)) {
                        newValue = initCloneObject(srcValue);
                      }
                    } else {
                      isCommon = false;
                    }
                  }
                  if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack['delete'](srcValue);
                  }
                  assignMergeValue(object, key, newValue);
                }

                /**
                 * The base implementation of `_.nth` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {number} n The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 */
                function baseNth(array, n) {
                  var length = array.length;
                  if (!length) {
                    return;
                  }
                  n += n < 0 ? length : 0;
                  return isIndex(n, length) ? array[n] : undefined;
                }

                /**
                 * The base implementation of `_.orderBy` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                 * @param {string[]} orders The sort orders of `iteratees`.
                 * @returns {Array} Returns the new sorted array.
                 */
                function baseOrderBy(collection, iteratees, orders) {
                  if (iteratees.length) {
                    iteratees = arrayMap(iteratees, function(iteratee) {
                      if (isArray(iteratee)) {
                        return function(value) {
                          return baseGet(
                            value,
                            iteratee.length === 1 ? iteratee[0] : iteratee
                          );
                        };
                      }
                      return iteratee;
                    });
                  } else {
                    iteratees = [identity];
                  }

                  var index = -1;
                  iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

                  var result = baseMap(collection, function(
                    value,
                    key,
                    collection
                  ) {
                    var criteria = arrayMap(iteratees, function(iteratee) {
                      return iteratee(value);
                    });
                    return { criteria: criteria, index: ++index, value: value };
                  });

                  return baseSortBy(result, function(object, other) {
                    return compareMultiple(object, other, orders);
                  });
                }

                /**
                 * The base implementation of `_.pick` without support for individual
                 * property identifiers.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Object} Returns the new object.
                 */
                function basePick(object, paths) {
                  return basePickBy(object, paths, function(value, path) {
                    return hasIn(object, path);
                  });
                }

                /**
                 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @param {Function} predicate The function invoked per property.
                 * @returns {Object} Returns the new object.
                 */
                function basePickBy(object, paths, predicate) {
                  var index = -1,
                    length = paths.length,
                    result = {};

                  while (++index < length) {
                    var path = paths[index],
                      value = baseGet(object, path);

                    if (predicate(value, path)) {
                      baseSet(result, castPath(path, object), value);
                    }
                  }
                  return result;
                }

                /**
                 * A specialized version of `baseProperty` which supports deep paths.
                 *
                 * @private
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 */
                function basePropertyDeep(path) {
                  return function(object) {
                    return baseGet(object, path);
                  };
                }

                /**
                 * The base implementation of `_.pullAllBy` without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAll(array, values, iteratee, comparator) {
                  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                    index = -1,
                    length = values.length,
                    seen = array;

                  if (array === values) {
                    values = copyArray(values);
                  }
                  if (iteratee) {
                    seen = arrayMap(array, baseUnary(iteratee));
                  }
                  while (++index < length) {
                    var fromIndex = 0,
                      value = values[index],
                      computed = iteratee ? iteratee(value) : value;

                    while (
                      (fromIndex = indexOf(
                        seen,
                        computed,
                        fromIndex,
                        comparator
                      )) > -1
                    ) {
                      if (seen !== array) {
                        splice.call(seen, fromIndex, 1);
                      }
                      splice.call(array, fromIndex, 1);
                    }
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.pullAt` without support for individual
                 * indexes or capturing the removed elements.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {number[]} indexes The indexes of elements to remove.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAt(array, indexes) {
                  var length = array ? indexes.length : 0,
                    lastIndex = length - 1;

                  while (length--) {
                    var index = indexes[length];
                    if (length == lastIndex || index !== previous) {
                      var previous = index;
                      if (isIndex(index)) {
                        splice.call(array, index, 1);
                      } else {
                        baseUnset(array, index);
                      }
                    }
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.random` without support for returning
                 * floating-point numbers.
                 *
                 * @private
                 * @param {number} lower The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the random number.
                 */
                function baseRandom(lower, upper) {
                  return (
                    lower + nativeFloor(nativeRandom() * (upper - lower + 1))
                  );
                }

                /**
                 * The base implementation of `_.range` and `_.rangeRight` which doesn't
                 * coerce arguments.
                 *
                 * @private
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} step The value to increment or decrement by.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the range of numbers.
                 */
                function baseRange(start, end, step, fromRight) {
                  var index = -1,
                    length = nativeMax(
                      nativeCeil((end - start) / (step || 1)),
                      0
                    ),
                    result = Array(length);

                  while (length--) {
                    result[fromRight ? length : ++index] = start;
                    start += step;
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.repeat` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {string} string The string to repeat.
                 * @param {number} n The number of times to repeat the string.
                 * @returns {string} Returns the repeated string.
                 */
                function baseRepeat(string, n) {
                  var result = '';
                  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                    return result;
                  }
                  // Leverage the exponentiation by squaring algorithm for a faster repeat.
                  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                  do {
                    if (n % 2) {
                      result += string;
                    }
                    n = nativeFloor(n / 2);
                    if (n) {
                      string += string;
                    }
                  } while (n);

                  return result;
                }

                /**
                 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 */
                function baseRest(func, start) {
                  return setToString(
                    overRest(func, start, identity),
                    func + ''
                  );
                }

                /**
                 * The base implementation of `_.sample`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 */
                function baseSample(collection) {
                  return arraySample(values(collection));
                }

                /**
                 * The base implementation of `_.sampleSize` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function baseSampleSize(collection, n) {
                  var array = values(collection);
                  return shuffleSelf(array, baseClamp(n, 0, array.length));
                }

                /**
                 * The base implementation of `_.set`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseSet(object, path, value, customizer) {
                  if (!isObject(object)) {
                    return object;
                  }
                  path = castPath(path, object);

                  var index = -1,
                    length = path.length,
                    lastIndex = length - 1,
                    nested = object;

                  while (nested != null && ++index < length) {
                    var key = toKey(path[index]),
                      newValue = value;

                    if (
                      key === '__proto__' ||
                      key === 'constructor' ||
                      key === 'prototype'
                    ) {
                      return object;
                    }

                    if (index != lastIndex) {
                      var objValue = nested[key];
                      newValue = customizer
                        ? customizer(objValue, key, nested)
                        : undefined;
                      if (newValue === undefined) {
                        newValue = isObject(objValue)
                          ? objValue
                          : isIndex(path[index + 1])
                          ? []
                          : {};
                      }
                    }
                    assignValue(nested, key, newValue);
                    nested = nested[key];
                  }
                  return object;
                }

                /**
                 * The base implementation of `setData` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetData = !metaMap
                  ? identity
                  : function(func, data) {
                      metaMap.set(func, data);
                      return func;
                    };

                /**
                 * The base implementation of `setToString` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetToString = !defineProperty
                  ? identity
                  : function(func, string) {
                      return defineProperty(func, 'toString', {
                        configurable: true,
                        enumerable: false,
                        value: constant(string),
                        writable: true,
                      });
                    };

                /**
                 * The base implementation of `_.shuffle`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function baseShuffle(collection) {
                  return shuffleSelf(values(collection));
                }

                /**
                 * The base implementation of `_.slice` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseSlice(array, start, end) {
                  var index = -1,
                    length = array.length;

                  if (start < 0) {
                    start = -start > length ? 0 : length + start;
                  }
                  end = end > length ? length : end;
                  if (end < 0) {
                    end += length;
                  }
                  length = start > end ? 0 : (end - start) >>> 0;
                  start >>>= 0;

                  var result = Array(length);
                  while (++index < length) {
                    result[index] = array[index + start];
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.some` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 */
                function baseSome(collection, predicate) {
                  var result;

                  baseEach(collection, function(value, index, collection) {
                    result = predicate(value, index, collection);
                    return !result;
                  });
                  return !!result;
                }

                /**
                 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                 * performs a binary search of `array` to determine the index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndex(array, value, retHighest) {
                  var low = 0,
                    high = array == null ? low : array.length;

                  if (
                    typeof value == 'number' &&
                    value === value &&
                    high <= HALF_MAX_ARRAY_LENGTH
                  ) {
                    while (low < high) {
                      var mid = (low + high) >>> 1,
                        computed = array[mid];

                      if (
                        computed !== null &&
                        !isSymbol(computed) &&
                        (retHighest ? computed <= value : computed < value)
                      ) {
                        low = mid + 1;
                      } else {
                        high = mid;
                      }
                    }
                    return high;
                  }
                  return baseSortedIndexBy(array, value, identity, retHighest);
                }

                /**
                 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                 * which invokes `iteratee` for `value` and each element of `array` to compute
                 * their sort ranking. The iteratee is invoked with one argument; (value).
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} iteratee The iteratee invoked per element.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndexBy(array, value, iteratee, retHighest) {
                  var low = 0,
                    high = array == null ? 0 : array.length;
                  if (high === 0) {
                    return 0;
                  }

                  value = iteratee(value);
                  var valIsNaN = value !== value,
                    valIsNull = value === null,
                    valIsSymbol = isSymbol(value),
                    valIsUndefined = value === undefined;

                  while (low < high) {
                    var mid = nativeFloor((low + high) / 2),
                      computed = iteratee(array[mid]),
                      othIsDefined = computed !== undefined,
                      othIsNull = computed === null,
                      othIsReflexive = computed === computed,
                      othIsSymbol = isSymbol(computed);

                    if (valIsNaN) {
                      var setLow = retHighest || othIsReflexive;
                    } else if (valIsUndefined) {
                      setLow = othIsReflexive && (retHighest || othIsDefined);
                    } else if (valIsNull) {
                      setLow =
                        othIsReflexive &&
                        othIsDefined &&
                        (retHighest || !othIsNull);
                    } else if (valIsSymbol) {
                      setLow =
                        othIsReflexive &&
                        othIsDefined &&
                        !othIsNull &&
                        (retHighest || !othIsSymbol);
                    } else if (othIsNull || othIsSymbol) {
                      setLow = false;
                    } else {
                      setLow = retHighest
                        ? computed <= value
                        : computed < value;
                    }
                    if (setLow) {
                      low = mid + 1;
                    } else {
                      high = mid;
                    }
                  }
                  return nativeMin(high, MAX_ARRAY_INDEX);
                }

                /**
                 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                 * support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseSortedUniq(array, iteratee) {
                  var index = -1,
                    length = array.length,
                    resIndex = 0,
                    result = [];

                  while (++index < length) {
                    var value = array[index],
                      computed = iteratee ? iteratee(value) : value;

                    if (!index || !eq(computed, seen)) {
                      var seen = computed;
                      result[resIndex++] = value === 0 ? 0 : value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.toNumber` which doesn't ensure correct
                 * conversions of binary, hexadecimal, or octal string values.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 */
                function baseToNumber(value) {
                  if (typeof value == 'number') {
                    return value;
                  }
                  if (isSymbol(value)) {
                    return NAN;
                  }
                  return +value;
                }

                /**
                 * The base implementation of `_.toString` which doesn't convert nullish
                 * values to empty strings.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {string} Returns the string.
                 */
                function baseToString(value) {
                  // Exit early for strings to avoid a performance hit in some environments.
                  if (typeof value == 'string') {
                    return value;
                  }
                  if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                  }
                  if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                  }
                  var result = value + '';
                  return result == '0' && 1 / value == -INFINITY
                    ? '-0'
                    : result;
                }

                /**
                 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseUniq(array, iteratee, comparator) {
                  var index = -1,
                    includes = arrayIncludes,
                    length = array.length,
                    isCommon = true,
                    result = [],
                    seen = result;

                  if (comparator) {
                    isCommon = false;
                    includes = arrayIncludesWith;
                  } else if (length >= LARGE_ARRAY_SIZE) {
                    var set = iteratee ? null : createSet(array);
                    if (set) {
                      return setToArray(set);
                    }
                    isCommon = false;
                    includes = cacheHas;
                    seen = new SetCache();
                  } else {
                    seen = iteratee ? [] : result;
                  }
                  outer: while (++index < length) {
                    var value = array[index],
                      computed = iteratee ? iteratee(value) : value;

                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                      var seenIndex = seen.length;
                      while (seenIndex--) {
                        if (seen[seenIndex] === computed) {
                          continue outer;
                        }
                      }
                      if (iteratee) {
                        seen.push(computed);
                      }
                      result.push(value);
                    } else if (!includes(seen, computed, comparator)) {
                      if (seen !== result) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.unset`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The property path to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 */
                function baseUnset(object, path) {
                  path = castPath(path, object);
                  object = parent(object, path);
                  return object == null || delete object[toKey(last(path))];
                }

                /**
                 * The base implementation of `_.update`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to update.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseUpdate(object, path, updater, customizer) {
                  return baseSet(
                    object,
                    path,
                    updater(baseGet(object, path)),
                    customizer
                  );
                }

                /**
                 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                 * without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseWhile(array, predicate, isDrop, fromRight) {
                  var length = array.length,
                    index = fromRight ? length : -1;

                  while (
                    (fromRight ? index-- : ++index < length) &&
                    predicate(array[index], index, array)
                  ) {}

                  return isDrop
                    ? baseSlice(
                        array,
                        fromRight ? 0 : index,
                        fromRight ? index + 1 : length
                      )
                    : baseSlice(
                        array,
                        fromRight ? index + 1 : 0,
                        fromRight ? length : index
                      );
                }

                /**
                 * The base implementation of `wrapperValue` which returns the result of
                 * performing a sequence of actions on the unwrapped `value`, where each
                 * successive action is supplied the return value of the previous.
                 *
                 * @private
                 * @param {*} value The unwrapped value.
                 * @param {Array} actions Actions to perform to resolve the unwrapped value.
                 * @returns {*} Returns the resolved value.
                 */
                function baseWrapperValue(value, actions) {
                  var result = value;
                  if (result instanceof LazyWrapper) {
                    result = result.value();
                  }
                  return arrayReduce(
                    actions,
                    function(result, action) {
                      return action.func.apply(
                        action.thisArg,
                        arrayPush([result], action.args)
                      );
                    },
                    result
                  );
                }

                /**
                 * The base implementation of methods like `_.xor`, without support for
                 * iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of values.
                 */
                function baseXor(arrays, iteratee, comparator) {
                  var length = arrays.length;
                  if (length < 2) {
                    return length ? baseUniq(arrays[0]) : [];
                  }
                  var index = -1,
                    result = Array(length);

                  while (++index < length) {
                    var array = arrays[index],
                      othIndex = -1;

                    while (++othIndex < length) {
                      if (othIndex != index) {
                        result[index] = baseDifference(
                          result[index] || array,
                          arrays[othIndex],
                          iteratee,
                          comparator
                        );
                      }
                    }
                  }
                  return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                }

                /**
                 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                 *
                 * @private
                 * @param {Array} props The property identifiers.
                 * @param {Array} values The property values.
                 * @param {Function} assignFunc The function to assign values.
                 * @returns {Object} Returns the new object.
                 */
                function baseZipObject(props, values, assignFunc) {
                  var index = -1,
                    length = props.length,
                    valsLength = values.length,
                    result = {};

                  while (++index < length) {
                    var value = index < valsLength ? values[index] : undefined;
                    assignFunc(result, props[index], value);
                  }
                  return result;
                }

                /**
                 * Casts `value` to an empty array if it's not an array like object.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Array|Object} Returns the cast array-like object.
                 */
                function castArrayLikeObject(value) {
                  return isArrayLikeObject(value) ? value : [];
                }

                /**
                 * Casts `value` to `identity` if it's not a function.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Function} Returns cast function.
                 */
                function castFunction(value) {
                  return typeof value == 'function' ? value : identity;
                }

                /**
                 * Casts `value` to a path array if it's not one.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {Array} Returns the cast property path array.
                 */
                function castPath(value, object) {
                  if (isArray(value)) {
                    return value;
                  }
                  return isKey(value, object)
                    ? [value]
                    : stringToPath(toString(value));
                }

                /**
                 * A `baseRest` alias which can be replaced with `identity` by module
                 * replacement plugins.
                 *
                 * @private
                 * @type {Function}
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                var castRest = baseRest;

                /**
                 * Casts `array` to a slice if it's needed.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {number} start The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the cast slice.
                 */
                function castSlice(array, start, end) {
                  var length = array.length;
                  end = end === undefined ? length : end;
                  return !start && end >= length
                    ? array
                    : baseSlice(array, start, end);
                }

                /**
                 * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                 *
                 * @private
                 * @param {number|Object} id The timer id or timeout object of the timer to clear.
                 */
                var clearTimeout =
                  ctxClearTimeout ||
                  function(id) {
                    return root.clearTimeout(id);
                  };

                /**
                 * Creates a clone of  `buffer`.
                 *
                 * @private
                 * @param {Buffer} buffer The buffer to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Buffer} Returns the cloned buffer.
                 */
                function cloneBuffer(buffer, isDeep) {
                  if (isDeep) {
                    return buffer.slice();
                  }
                  var length = buffer.length,
                    result = allocUnsafe
                      ? allocUnsafe(length)
                      : new buffer.constructor(length);

                  buffer.copy(result);
                  return result;
                }

                /**
                 * Creates a clone of `arrayBuffer`.
                 *
                 * @private
                 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                 * @returns {ArrayBuffer} Returns the cloned array buffer.
                 */
                function cloneArrayBuffer(arrayBuffer) {
                  var result = new arrayBuffer.constructor(
                    arrayBuffer.byteLength
                  );
                  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                  return result;
                }

                /**
                 * Creates a clone of `dataView`.
                 *
                 * @private
                 * @param {Object} dataView The data view to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned data view.
                 */
                function cloneDataView(dataView, isDeep) {
                  var buffer = isDeep
                    ? cloneArrayBuffer(dataView.buffer)
                    : dataView.buffer;
                  return new dataView.constructor(
                    buffer,
                    dataView.byteOffset,
                    dataView.byteLength
                  );
                }

                /**
                 * Creates a clone of `regexp`.
                 *
                 * @private
                 * @param {Object} regexp The regexp to clone.
                 * @returns {Object} Returns the cloned regexp.
                 */
                function cloneRegExp(regexp) {
                  var result = new regexp.constructor(
                    regexp.source,
                    reFlags.exec(regexp)
                  );
                  result.lastIndex = regexp.lastIndex;
                  return result;
                }

                /**
                 * Creates a clone of the `symbol` object.
                 *
                 * @private
                 * @param {Object} symbol The symbol object to clone.
                 * @returns {Object} Returns the cloned symbol object.
                 */
                function cloneSymbol(symbol) {
                  return symbolValueOf
                    ? Object(symbolValueOf.call(symbol))
                    : {};
                }

                /**
                 * Creates a clone of `typedArray`.
                 *
                 * @private
                 * @param {Object} typedArray The typed array to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned typed array.
                 */
                function cloneTypedArray(typedArray, isDeep) {
                  var buffer = isDeep
                    ? cloneArrayBuffer(typedArray.buffer)
                    : typedArray.buffer;
                  return new typedArray.constructor(
                    buffer,
                    typedArray.byteOffset,
                    typedArray.length
                  );
                }

                /**
                 * Compares values to sort them in ascending order.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {number} Returns the sort order indicator for `value`.
                 */
                function compareAscending(value, other) {
                  if (value !== other) {
                    var valIsDefined = value !== undefined,
                      valIsNull = value === null,
                      valIsReflexive = value === value,
                      valIsSymbol = isSymbol(value);

                    var othIsDefined = other !== undefined,
                      othIsNull = other === null,
                      othIsReflexive = other === other,
                      othIsSymbol = isSymbol(other);

                    if (
                      (!othIsNull &&
                        !othIsSymbol &&
                        !valIsSymbol &&
                        value > other) ||
                      (valIsSymbol &&
                        othIsDefined &&
                        othIsReflexive &&
                        !othIsNull &&
                        !othIsSymbol) ||
                      (valIsNull && othIsDefined && othIsReflexive) ||
                      (!valIsDefined && othIsReflexive) ||
                      !valIsReflexive
                    ) {
                      return 1;
                    }
                    if (
                      (!valIsNull &&
                        !valIsSymbol &&
                        !othIsSymbol &&
                        value < other) ||
                      (othIsSymbol &&
                        valIsDefined &&
                        valIsReflexive &&
                        !valIsNull &&
                        !valIsSymbol) ||
                      (othIsNull && valIsDefined && valIsReflexive) ||
                      (!othIsDefined && valIsReflexive) ||
                      !othIsReflexive
                    ) {
                      return -1;
                    }
                  }
                  return 0;
                }

                /**
                 * Used by `_.orderBy` to compare multiple properties of a value to another
                 * and stable sort them.
                 *
                 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                 * specify an order of "desc" for descending or "asc" for ascending sort order
                 * of corresponding values.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {boolean[]|string[]} orders The order to sort by for each property.
                 * @returns {number} Returns the sort order indicator for `object`.
                 */
                function compareMultiple(object, other, orders) {
                  var index = -1,
                    objCriteria = object.criteria,
                    othCriteria = other.criteria,
                    length = objCriteria.length,
                    ordersLength = orders.length;

                  while (++index < length) {
                    var result = compareAscending(
                      objCriteria[index],
                      othCriteria[index]
                    );
                    if (result) {
                      if (index >= ordersLength) {
                        return result;
                      }
                      var order = orders[index];
                      return result * (order == 'desc' ? -1 : 1);
                    }
                  }
                  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                  // that causes it, under certain circumstances, to provide the same value for
                  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                  // for more details.
                  //
                  // This also ensures a stable sort in V8 and other engines.
                  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                  return object.index - other.index;
                }

                /**
                 * Creates an array that is the composition of partially applied arguments,
                 * placeholders, and provided arguments into a single array of arguments.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to prepend to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgs(args, partials, holders, isCurried) {
                  var argsIndex = -1,
                    argsLength = args.length,
                    holdersLength = holders.length,
                    leftIndex = -1,
                    leftLength = partials.length,
                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                    result = Array(leftLength + rangeLength),
                    isUncurried = !isCurried;

                  while (++leftIndex < leftLength) {
                    result[leftIndex] = partials[leftIndex];
                  }
                  while (++argsIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                      result[holders[argsIndex]] = args[argsIndex];
                    }
                  }
                  while (rangeLength--) {
                    result[leftIndex++] = args[argsIndex++];
                  }
                  return result;
                }

                /**
                 * This function is like `composeArgs` except that the arguments composition
                 * is tailored for `_.partialRight`.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to append to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgsRight(args, partials, holders, isCurried) {
                  var argsIndex = -1,
                    argsLength = args.length,
                    holdersIndex = -1,
                    holdersLength = holders.length,
                    rightIndex = -1,
                    rightLength = partials.length,
                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                    result = Array(rangeLength + rightLength),
                    isUncurried = !isCurried;

                  while (++argsIndex < rangeLength) {
                    result[argsIndex] = args[argsIndex];
                  }
                  var offset = argsIndex;
                  while (++rightIndex < rightLength) {
                    result[offset + rightIndex] = partials[rightIndex];
                  }
                  while (++holdersIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                      result[offset + holders[holdersIndex]] =
                        args[argsIndex++];
                    }
                  }
                  return result;
                }

                /**
                 * Copies the values of `source` to `array`.
                 *
                 * @private
                 * @param {Array} source The array to copy values from.
                 * @param {Array} [array=[]] The array to copy values to.
                 * @returns {Array} Returns `array`.
                 */
                function copyArray(source, array) {
                  var index = -1,
                    length = source.length;

                  array || (array = Array(length));
                  while (++index < length) {
                    array[index] = source[index];
                  }
                  return array;
                }

                /**
                 * Copies properties of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy properties from.
                 * @param {Array} props The property identifiers to copy.
                 * @param {Object} [object={}] The object to copy properties to.
                 * @param {Function} [customizer] The function to customize copied values.
                 * @returns {Object} Returns `object`.
                 */
                function copyObject(source, props, object, customizer) {
                  var isNew = !object;
                  object || (object = {});

                  var index = -1,
                    length = props.length;

                  while (++index < length) {
                    var key = props[index];

                    var newValue = customizer
                      ? customizer(
                          object[key],
                          source[key],
                          key,
                          object,
                          source
                        )
                      : undefined;

                    if (newValue === undefined) {
                      newValue = source[key];
                    }
                    if (isNew) {
                      baseAssignValue(object, key, newValue);
                    } else {
                      assignValue(object, key, newValue);
                    }
                  }
                  return object;
                }

                /**
                 * Copies own symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbols(source, object) {
                  return copyObject(source, getSymbols(source), object);
                }

                /**
                 * Copies own and inherited symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbolsIn(source, object) {
                  return copyObject(source, getSymbolsIn(source), object);
                }

                /**
                 * Creates a function like `_.groupBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} [initializer] The accumulator object initializer.
                 * @returns {Function} Returns the new aggregator function.
                 */
                function createAggregator(setter, initializer) {
                  return function(collection, iteratee) {
                    var func = isArray(collection)
                        ? arrayAggregator
                        : baseAggregator,
                      accumulator = initializer ? initializer() : {};

                    return func(
                      collection,
                      setter,
                      getIteratee(iteratee, 2),
                      accumulator
                    );
                  };
                }

                /**
                 * Creates a function like `_.assign`.
                 *
                 * @private
                 * @param {Function} assigner The function to assign values.
                 * @returns {Function} Returns the new assigner function.
                 */
                function createAssigner(assigner) {
                  return baseRest(function(object, sources) {
                    var index = -1,
                      length = sources.length,
                      customizer = length > 1 ? sources[length - 1] : undefined,
                      guard = length > 2 ? sources[2] : undefined;

                    customizer =
                      assigner.length > 3 && typeof customizer == 'function'
                        ? (length--, customizer)
                        : undefined;

                    if (
                      guard &&
                      isIterateeCall(sources[0], sources[1], guard)
                    ) {
                      customizer = length < 3 ? undefined : customizer;
                      length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                      var source = sources[index];
                      if (source) {
                        assigner(object, source, index, customizer);
                      }
                    }
                    return object;
                  });
                }

                /**
                 * Creates a `baseEach` or `baseEachRight` function.
                 *
                 * @private
                 * @param {Function} eachFunc The function to iterate over a collection.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseEach(eachFunc, fromRight) {
                  return function(collection, iteratee) {
                    if (collection == null) {
                      return collection;
                    }
                    if (!isArrayLike(collection)) {
                      return eachFunc(collection, iteratee);
                    }
                    var length = collection.length,
                      index = fromRight ? length : -1,
                      iterable = Object(collection);

                    while (fromRight ? index-- : ++index < length) {
                      if (
                        iteratee(iterable[index], index, iterable) === false
                      ) {
                        break;
                      }
                    }
                    return collection;
                  };
                }

                /**
                 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseFor(fromRight) {
                  return function(object, iteratee, keysFunc) {
                    var index = -1,
                      iterable = Object(object),
                      props = keysFunc(object),
                      length = props.length;

                    while (length--) {
                      var key = props[fromRight ? length : ++index];
                      if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                      }
                    }
                    return object;
                  };
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the optional `this`
                 * binding of `thisArg`.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createBind(func, bitmask, thisArg) {
                  var isBind = bitmask & WRAP_BIND_FLAG,
                    Ctor = createCtor(func);

                  function wrapper() {
                    var fn =
                      this && this !== root && this instanceof wrapper
                        ? Ctor
                        : func;
                    return fn.apply(isBind ? thisArg : this, arguments);
                  }
                  return wrapper;
                }

                /**
                 * Creates a function like `_.lowerFirst`.
                 *
                 * @private
                 * @param {string} methodName The name of the `String` case method to use.
                 * @returns {Function} Returns the new case function.
                 */
                function createCaseFirst(methodName) {
                  return function(string) {
                    string = toString(string);

                    var strSymbols = hasUnicode(string)
                      ? stringToArray(string)
                      : undefined;

                    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                    var trailing = strSymbols
                      ? castSlice(strSymbols, 1).join('')
                      : string.slice(1);

                    return chr[methodName]() + trailing;
                  };
                }

                /**
                 * Creates a function like `_.camelCase`.
                 *
                 * @private
                 * @param {Function} callback The function to combine each word.
                 * @returns {Function} Returns the new compounder function.
                 */
                function createCompounder(callback) {
                  return function(string) {
                    return arrayReduce(
                      words(deburr(string).replace(reApos, '')),
                      callback,
                      ''
                    );
                  };
                }

                /**
                 * Creates a function that produces an instance of `Ctor` regardless of
                 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                 *
                 * @private
                 * @param {Function} Ctor The constructor to wrap.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCtor(Ctor) {
                  return function() {
                    // Use a `switch` statement to work with class constructors. See
                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                    // for more details.
                    var args = arguments;
                    switch (args.length) {
                      case 0:
                        return new Ctor();
                      case 1:
                        return new Ctor(args[0]);
                      case 2:
                        return new Ctor(args[0], args[1]);
                      case 3:
                        return new Ctor(args[0], args[1], args[2]);
                      case 4:
                        return new Ctor(args[0], args[1], args[2], args[3]);
                      case 5:
                        return new Ctor(
                          args[0],
                          args[1],
                          args[2],
                          args[3],
                          args[4]
                        );
                      case 6:
                        return new Ctor(
                          args[0],
                          args[1],
                          args[2],
                          args[3],
                          args[4],
                          args[5]
                        );
                      case 7:
                        return new Ctor(
                          args[0],
                          args[1],
                          args[2],
                          args[3],
                          args[4],
                          args[5],
                          args[6]
                        );
                    }
                    var thisBinding = baseCreate(Ctor.prototype),
                      result = Ctor.apply(thisBinding, args);

                    // Mimic the constructor's `return` behavior.
                    // See https://es5.github.io/#x13.2.2 for more details.
                    return isObject(result) ? result : thisBinding;
                  };
                }

                /**
                 * Creates a function that wraps `func` to enable currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {number} arity The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCurry(func, bitmask, arity) {
                  var Ctor = createCtor(func);

                  function wrapper() {
                    var length = arguments.length,
                      args = Array(length),
                      index = length,
                      placeholder = getHolder(wrapper);

                    while (index--) {
                      args[index] = arguments[index];
                    }
                    var holders =
                      length < 3 &&
                      args[0] !== placeholder &&
                      args[length - 1] !== placeholder
                        ? []
                        : replaceHolders(args, placeholder);

                    length -= holders.length;
                    if (length < arity) {
                      return createRecurry(
                        func,
                        bitmask,
                        createHybrid,
                        wrapper.placeholder,
                        undefined,
                        args,
                        holders,
                        undefined,
                        undefined,
                        arity - length
                      );
                    }
                    var fn =
                      this && this !== root && this instanceof wrapper
                        ? Ctor
                        : func;
                    return apply(fn, this, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a `_.find` or `_.findLast` function.
                 *
                 * @private
                 * @param {Function} findIndexFunc The function to find the collection index.
                 * @returns {Function} Returns the new find function.
                 */
                function createFind(findIndexFunc) {
                  return function(collection, predicate, fromIndex) {
                    var iterable = Object(collection);
                    if (!isArrayLike(collection)) {
                      var iteratee = getIteratee(predicate, 3);
                      collection = keys(collection);
                      predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                      };
                    }
                    var index = findIndexFunc(collection, predicate, fromIndex);
                    return index > -1
                      ? iterable[iteratee ? collection[index] : index]
                      : undefined;
                  };
                }

                /**
                 * Creates a `_.flow` or `_.flowRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new flow function.
                 */
                function createFlow(fromRight) {
                  return flatRest(function(funcs) {
                    var length = funcs.length,
                      index = length,
                      prereq = LodashWrapper.prototype.thru;

                    if (fromRight) {
                      funcs.reverse();
                    }
                    while (index--) {
                      var func = funcs[index];
                      if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                      }
                      if (
                        prereq &&
                        !wrapper &&
                        getFuncName(func) == 'wrapper'
                      ) {
                        var wrapper = new LodashWrapper([], true);
                      }
                    }
                    index = wrapper ? index : length;
                    while (++index < length) {
                      func = funcs[index];

                      var funcName = getFuncName(func),
                        data =
                          funcName == 'wrapper' ? getData(func) : undefined;

                      if (
                        data &&
                        isLaziable(data[0]) &&
                        data[1] ==
                          (WRAP_ARY_FLAG |
                            WRAP_CURRY_FLAG |
                            WRAP_PARTIAL_FLAG |
                            WRAP_REARG_FLAG) &&
                        !data[4].length &&
                        data[9] == 1
                      ) {
                        wrapper = wrapper[getFuncName(data[0])].apply(
                          wrapper,
                          data[3]
                        );
                      } else {
                        wrapper =
                          func.length == 1 && isLaziable(func)
                            ? wrapper[funcName]()
                            : wrapper.thru(func);
                      }
                    }
                    return function() {
                      var args = arguments,
                        value = args[0];

                      if (wrapper && args.length == 1 && isArray(value)) {
                        return wrapper.plant(value).value();
                      }
                      var index = 0,
                        result = length
                          ? funcs[index].apply(this, args)
                          : value;

                      while (++index < length) {
                        result = funcs[index].call(this, result);
                      }
                      return result;
                    };
                  });
                }

                /**
                 * Creates a function that wraps `func` to invoke it with optional `this`
                 * binding of `thisArg`, partial application, and currying.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [partialsRight] The arguments to append to those provided
                 *  to the new function.
                 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createHybrid(
                  func,
                  bitmask,
                  thisArg,
                  partials,
                  holders,
                  partialsRight,
                  holdersRight,
                  argPos,
                  ary,
                  arity
                ) {
                  var isAry = bitmask & WRAP_ARY_FLAG,
                    isBind = bitmask & WRAP_BIND_FLAG,
                    isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                    isCurried =
                      bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                    isFlip = bitmask & WRAP_FLIP_FLAG,
                    Ctor = isBindKey ? undefined : createCtor(func);

                  function wrapper() {
                    var length = arguments.length,
                      args = Array(length),
                      index = length;

                    while (index--) {
                      args[index] = arguments[index];
                    }
                    if (isCurried) {
                      var placeholder = getHolder(wrapper),
                        holdersCount = countHolders(args, placeholder);
                    }
                    if (partials) {
                      args = composeArgs(args, partials, holders, isCurried);
                    }
                    if (partialsRight) {
                      args = composeArgsRight(
                        args,
                        partialsRight,
                        holdersRight,
                        isCurried
                      );
                    }
                    length -= holdersCount;
                    if (isCurried && length < arity) {
                      var newHolders = replaceHolders(args, placeholder);
                      return createRecurry(
                        func,
                        bitmask,
                        createHybrid,
                        wrapper.placeholder,
                        thisArg,
                        args,
                        newHolders,
                        argPos,
                        ary,
                        arity - length
                      );
                    }
                    var thisBinding = isBind ? thisArg : this,
                      fn = isBindKey ? thisBinding[func] : func;

                    length = args.length;
                    if (argPos) {
                      args = reorder(args, argPos);
                    } else if (isFlip && length > 1) {
                      args.reverse();
                    }
                    if (isAry && ary < length) {
                      args.length = ary;
                    }
                    if (this && this !== root && this instanceof wrapper) {
                      fn = Ctor || createCtor(fn);
                    }
                    return fn.apply(thisBinding, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a function like `_.invertBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} toIteratee The function to resolve iteratees.
                 * @returns {Function} Returns the new inverter function.
                 */
                function createInverter(setter, toIteratee) {
                  return function(object, iteratee) {
                    return baseInverter(
                      object,
                      setter,
                      toIteratee(iteratee),
                      {}
                    );
                  };
                }

                /**
                 * Creates a function that performs a mathematical operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @param {number} [defaultValue] The value used for `undefined` arguments.
                 * @returns {Function} Returns the new mathematical operation function.
                 */
                function createMathOperation(operator, defaultValue) {
                  return function(value, other) {
                    var result;
                    if (value === undefined && other === undefined) {
                      return defaultValue;
                    }
                    if (value !== undefined) {
                      result = value;
                    }
                    if (other !== undefined) {
                      if (result === undefined) {
                        return other;
                      }
                      if (
                        typeof value == 'string' ||
                        typeof other == 'string'
                      ) {
                        value = baseToString(value);
                        other = baseToString(other);
                      } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                      }
                      result = operator(value, other);
                    }
                    return result;
                  };
                }

                /**
                 * Creates a function like `_.over`.
                 *
                 * @private
                 * @param {Function} arrayFunc The function to iterate over iteratees.
                 * @returns {Function} Returns the new over function.
                 */
                function createOver(arrayFunc) {
                  return flatRest(function(iteratees) {
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    return baseRest(function(args) {
                      var thisArg = this;
                      return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                      });
                    });
                  });
                }

                /**
                 * Creates the padding for `string` based on `length`. The `chars` string
                 * is truncated if the number of characters exceeds `length`.
                 *
                 * @private
                 * @param {number} length The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padding for `string`.
                 */
                function createPadding(length, chars) {
                  chars = chars === undefined ? ' ' : baseToString(chars);

                  var charsLength = chars.length;
                  if (charsLength < 2) {
                    return charsLength ? baseRepeat(chars, length) : chars;
                  }
                  var result = baseRepeat(
                    chars,
                    nativeCeil(length / stringSize(chars))
                  );
                  return hasUnicode(chars)
                    ? castSlice(stringToArray(result), 0, length).join('')
                    : result.slice(0, length);
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the `this` binding
                 * of `thisArg` and `partials` prepended to the arguments it receives.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} partials The arguments to prepend to those provided to
                 *  the new function.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createPartial(func, bitmask, thisArg, partials) {
                  var isBind = bitmask & WRAP_BIND_FLAG,
                    Ctor = createCtor(func);

                  function wrapper() {
                    var argsIndex = -1,
                      argsLength = arguments.length,
                      leftIndex = -1,
                      leftLength = partials.length,
                      args = Array(leftLength + argsLength),
                      fn =
                        this && this !== root && this instanceof wrapper
                          ? Ctor
                          : func;

                    while (++leftIndex < leftLength) {
                      args[leftIndex] = partials[leftIndex];
                    }
                    while (argsLength--) {
                      args[leftIndex++] = arguments[++argsIndex];
                    }
                    return apply(fn, isBind ? thisArg : this, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a `_.range` or `_.rangeRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new range function.
                 */
                function createRange(fromRight) {
                  return function(start, end, step) {
                    if (
                      step &&
                      typeof step != 'number' &&
                      isIterateeCall(start, end, step)
                    ) {
                      end = step = undefined;
                    }
                    // Ensure the sign of `-0` is preserved.
                    start = toFinite(start);
                    if (end === undefined) {
                      end = start;
                      start = 0;
                    } else {
                      end = toFinite(end);
                    }
                    step =
                      step === undefined
                        ? start < end
                          ? 1
                          : -1
                        : toFinite(step);
                    return baseRange(start, end, step, fromRight);
                  };
                }

                /**
                 * Creates a function that performs a relational operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @returns {Function} Returns the new relational operation function.
                 */
                function createRelationalOperation(operator) {
                  return function(value, other) {
                    if (
                      !(typeof value == 'string' && typeof other == 'string')
                    ) {
                      value = toNumber(value);
                      other = toNumber(other);
                    }
                    return operator(value, other);
                  };
                }

                /**
                 * Creates a function that wraps `func` to continue currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {Function} wrapFunc The function to create the `func` wrapper.
                 * @param {*} placeholder The placeholder value.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createRecurry(
                  func,
                  bitmask,
                  wrapFunc,
                  placeholder,
                  thisArg,
                  partials,
                  holders,
                  argPos,
                  ary,
                  arity
                ) {
                  var isCurry = bitmask & WRAP_CURRY_FLAG,
                    newHolders = isCurry ? holders : undefined,
                    newHoldersRight = isCurry ? undefined : holders,
                    newPartials = isCurry ? partials : undefined,
                    newPartialsRight = isCurry ? undefined : partials;

                  bitmask |= isCurry
                    ? WRAP_PARTIAL_FLAG
                    : WRAP_PARTIAL_RIGHT_FLAG;
                  bitmask &= ~(isCurry
                    ? WRAP_PARTIAL_RIGHT_FLAG
                    : WRAP_PARTIAL_FLAG);

                  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                  }
                  var newData = [
                    func,
                    bitmask,
                    thisArg,
                    newPartials,
                    newHolders,
                    newPartialsRight,
                    newHoldersRight,
                    argPos,
                    ary,
                    arity,
                  ];

                  var result = wrapFunc.apply(undefined, newData);
                  if (isLaziable(func)) {
                    setData(result, newData);
                  }
                  result.placeholder = placeholder;
                  return setWrapToString(result, func, bitmask);
                }

                /**
                 * Creates a function like `_.round`.
                 *
                 * @private
                 * @param {string} methodName The name of the `Math` method to use when rounding.
                 * @returns {Function} Returns the new round function.
                 */
                function createRound(methodName) {
                  var func = Math[methodName];
                  return function(number, precision) {
                    number = toNumber(number);
                    precision =
                      precision == null
                        ? 0
                        : nativeMin(toInteger(precision), 292);
                    if (precision && nativeIsFinite(number)) {
                      // Shift with exponential notation to avoid floating-point issues.
                      // See [MDN](https://mdn.io/round#Examples) for more details.
                      var pair = (toString(number) + 'e').split('e'),
                        value = func(pair[0] + 'e' + (+pair[1] + precision));

                      pair = (toString(value) + 'e').split('e');
                      return +(pair[0] + 'e' + (+pair[1] - precision));
                    }
                    return func(number);
                  };
                }

                /**
                 * Creates a set object of `values`.
                 *
                 * @private
                 * @param {Array} values The values to add to the set.
                 * @returns {Object} Returns the new set.
                 */
                var createSet = !(
                  Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
                )
                  ? noop
                  : function(values) {
                      return new Set(values);
                    };

                /**
                 * Creates a `_.toPairs` or `_.toPairsIn` function.
                 *
                 * @private
                 * @param {Function} keysFunc The function to get the keys of a given object.
                 * @returns {Function} Returns the new pairs function.
                 */
                function createToPairs(keysFunc) {
                  return function(object) {
                    var tag = getTag(object);
                    if (tag == mapTag) {
                      return mapToArray(object);
                    }
                    if (tag == setTag) {
                      return setToPairs(object);
                    }
                    return baseToPairs(object, keysFunc(object));
                  };
                }

                /**
                 * Creates a function that either curries or invokes `func` with optional
                 * `this` binding and partially applied arguments.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags.
                 *    1 - `_.bind`
                 *    2 - `_.bindKey`
                 *    4 - `_.curry` or `_.curryRight` of a bound function
                 *    8 - `_.curry`
                 *   16 - `_.curryRight`
                 *   32 - `_.partial`
                 *   64 - `_.partialRight`
                 *  128 - `_.rearg`
                 *  256 - `_.ary`
                 *  512 - `_.flip`
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to be partially applied.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createWrap(
                  func,
                  bitmask,
                  thisArg,
                  partials,
                  holders,
                  argPos,
                  ary,
                  arity
                ) {
                  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                  if (!isBindKey && typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  var length = partials ? partials.length : 0;
                  if (!length) {
                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                    partials = holders = undefined;
                  }
                  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                  arity = arity === undefined ? arity : toInteger(arity);
                  length -= holders ? holders.length : 0;

                  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                    var partialsRight = partials,
                      holdersRight = holders;

                    partials = holders = undefined;
                  }
                  var data = isBindKey ? undefined : getData(func);

                  var newData = [
                    func,
                    bitmask,
                    thisArg,
                    partials,
                    holders,
                    partialsRight,
                    holdersRight,
                    argPos,
                    ary,
                    arity,
                  ];

                  if (data) {
                    mergeData(newData, data);
                  }
                  func = newData[0];
                  bitmask = newData[1];
                  thisArg = newData[2];
                  partials = newData[3];
                  holders = newData[4];
                  arity = newData[9] =
                    newData[9] === undefined
                      ? isBindKey
                        ? 0
                        : func.length
                      : nativeMax(newData[9] - length, 0);

                  if (
                    !arity &&
                    bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
                  ) {
                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                  }
                  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                    var result = createBind(func, bitmask, thisArg);
                  } else if (
                    bitmask == WRAP_CURRY_FLAG ||
                    bitmask == WRAP_CURRY_RIGHT_FLAG
                  ) {
                    result = createCurry(func, bitmask, arity);
                  } else if (
                    (bitmask == WRAP_PARTIAL_FLAG ||
                      bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
                    !holders.length
                  ) {
                    result = createPartial(func, bitmask, thisArg, partials);
                  } else {
                    result = createHybrid.apply(undefined, newData);
                  }
                  var setter = data ? baseSetData : setData;
                  return setWrapToString(
                    setter(result, newData),
                    func,
                    bitmask
                  );
                }

                /**
                 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                 * of source objects to the destination object for all destination properties
                 * that resolve to `undefined`.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to assign.
                 * @param {Object} object The parent object of `objValue`.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsAssignIn(
                  objValue,
                  srcValue,
                  key,
                  object
                ) {
                  if (
                    objValue === undefined ||
                    (eq(objValue, objectProto[key]) &&
                      !hasOwnProperty.call(object, key))
                  ) {
                    return srcValue;
                  }
                  return objValue;
                }

                /**
                 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                 * objects into destination objects that are passed thru.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to merge.
                 * @param {Object} object The parent object of `objValue`.
                 * @param {Object} source The parent object of `srcValue`.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsMerge(
                  objValue,
                  srcValue,
                  key,
                  object,
                  source,
                  stack
                ) {
                  if (isObject(objValue) && isObject(srcValue)) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, objValue);
                    baseMerge(
                      objValue,
                      srcValue,
                      undefined,
                      customDefaultsMerge,
                      stack
                    );
                    stack['delete'](srcValue);
                  }
                  return objValue;
                }

                /**
                 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                 * objects.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {string} key The key of the property to inspect.
                 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                 */
                function customOmitClone(value) {
                  return isPlainObject(value) ? undefined : value;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for arrays with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Array} array The array to compare.
                 * @param {Array} other The other array to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `array` and `other` objects.
                 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                 */
                function equalArrays(
                  array,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                ) {
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    arrLength = array.length,
                    othLength = other.length;

                  if (
                    arrLength != othLength &&
                    !(isPartial && othLength > arrLength)
                  ) {
                    return false;
                  }
                  // Check that cyclic values are equal.
                  var arrStacked = stack.get(array);
                  var othStacked = stack.get(other);
                  if (arrStacked && othStacked) {
                    return arrStacked == other && othStacked == array;
                  }
                  var index = -1,
                    result = true,
                    seen =
                      bitmask & COMPARE_UNORDERED_FLAG
                        ? new SetCache()
                        : undefined;

                  stack.set(array, other);
                  stack.set(other, array);

                  // Ignore non-index properties.
                  while (++index < arrLength) {
                    var arrValue = array[index],
                      othValue = other[index];

                    if (customizer) {
                      var compared = isPartial
                        ? customizer(
                            othValue,
                            arrValue,
                            index,
                            other,
                            array,
                            stack
                          )
                        : customizer(
                            arrValue,
                            othValue,
                            index,
                            array,
                            other,
                            stack
                          );
                    }
                    if (compared !== undefined) {
                      if (compared) {
                        continue;
                      }
                      result = false;
                      break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                      if (
                        !arraySome(other, function(othValue, othIndex) {
                          if (
                            !cacheHas(seen, othIndex) &&
                            (arrValue === othValue ||
                              equalFunc(
                                arrValue,
                                othValue,
                                bitmask,
                                customizer,
                                stack
                              ))
                          ) {
                            return seen.push(othIndex);
                          }
                        })
                      ) {
                        result = false;
                        break;
                      }
                    } else if (
                      !(
                        arrValue === othValue ||
                        equalFunc(
                          arrValue,
                          othValue,
                          bitmask,
                          customizer,
                          stack
                        )
                      )
                    ) {
                      result = false;
                      break;
                    }
                  }
                  stack['delete'](array);
                  stack['delete'](other);
                  return result;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for comparing objects of
                 * the same `toStringTag`.
                 *
                 * **Note:** This function only supports comparing values with tags of
                 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {string} tag The `toStringTag` of the objects to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalByTag(
                  object,
                  other,
                  tag,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                ) {
                  switch (tag) {
                    case dataViewTag:
                      if (
                        object.byteLength != other.byteLength ||
                        object.byteOffset != other.byteOffset
                      ) {
                        return false;
                      }
                      object = object.buffer;
                      other = other.buffer;

                    case arrayBufferTag:
                      if (
                        object.byteLength != other.byteLength ||
                        !equalFunc(
                          new Uint8Array(object),
                          new Uint8Array(other)
                        )
                      ) {
                        return false;
                      }
                      return true;

                    case boolTag:
                    case dateTag:
                    case numberTag:
                      // Coerce booleans to `1` or `0` and dates to milliseconds.
                      // Invalid dates are coerced to `NaN`.
                      return eq(+object, +other);

                    case errorTag:
                      return (
                        object.name == other.name &&
                        object.message == other.message
                      );

                    case regexpTag:
                    case stringTag:
                      // Coerce regexes to strings and treat strings, primitives and objects,
                      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                      // for more details.
                      return object == other + '';

                    case mapTag:
                      var convert = mapToArray;

                    case setTag:
                      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                      convert || (convert = setToArray);

                      if (object.size != other.size && !isPartial) {
                        return false;
                      }
                      // Assume cyclic values are equal.
                      var stacked = stack.get(object);
                      if (stacked) {
                        return stacked == other;
                      }
                      bitmask |= COMPARE_UNORDERED_FLAG;

                      // Recursively compare objects (susceptible to call stack limits).
                      stack.set(object, other);
                      var result = equalArrays(
                        convert(object),
                        convert(other),
                        bitmask,
                        customizer,
                        equalFunc,
                        stack
                      );
                      stack['delete'](object);
                      return result;

                    case symbolTag:
                      if (symbolValueOf) {
                        return (
                          symbolValueOf.call(object) ==
                          symbolValueOf.call(other)
                        );
                      }
                  }
                  return false;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for objects with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalObjects(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                ) {
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    objProps = getAllKeys(object),
                    objLength = objProps.length,
                    othProps = getAllKeys(other),
                    othLength = othProps.length;

                  if (objLength != othLength && !isPartial) {
                    return false;
                  }
                  var index = objLength;
                  while (index--) {
                    var key = objProps[index];
                    if (
                      !(isPartial
                        ? key in other
                        : hasOwnProperty.call(other, key))
                    ) {
                      return false;
                    }
                  }
                  // Check that cyclic values are equal.
                  var objStacked = stack.get(object);
                  var othStacked = stack.get(other);
                  if (objStacked && othStacked) {
                    return objStacked == other && othStacked == object;
                  }
                  var result = true;
                  stack.set(object, other);
                  stack.set(other, object);

                  var skipCtor = isPartial;
                  while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                      othValue = other[key];

                    if (customizer) {
                      var compared = isPartial
                        ? customizer(
                            othValue,
                            objValue,
                            key,
                            other,
                            object,
                            stack
                          )
                        : customizer(
                            objValue,
                            othValue,
                            key,
                            object,
                            other,
                            stack
                          );
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (
                      !(compared === undefined
                        ? objValue === othValue ||
                          equalFunc(
                            objValue,
                            othValue,
                            bitmask,
                            customizer,
                            stack
                          )
                        : compared)
                    ) {
                      result = false;
                      break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                  }
                  if (result && !skipCtor) {
                    var objCtor = object.constructor,
                      othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (
                      objCtor != othCtor &&
                      'constructor' in object && 'constructor' in other &&
                      !(
                        typeof objCtor == 'function' &&
                        objCtor instanceof objCtor &&
                        typeof othCtor == 'function' &&
                        othCtor instanceof othCtor
                      )
                    ) {
                      result = false;
                    }
                  }
                  stack['delete'](object);
                  stack['delete'](other);
                  return result;
                }

                /**
                 * A specialized version of `baseRest` which flattens the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                function flatRest(func) {
                  return setToString(
                    overRest(func, undefined, flatten),
                    func + ''
                  );
                }

                /**
                 * Creates an array of own enumerable property names and symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeys(object) {
                  return baseGetAllKeys(object, keys, getSymbols);
                }

                /**
                 * Creates an array of own and inherited enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeysIn(object) {
                  return baseGetAllKeys(object, keysIn, getSymbolsIn);
                }

                /**
                 * Gets metadata for `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {*} Returns the metadata for `func`.
                 */
                var getData = !metaMap
                  ? noop
                  : function(func) {
                      return metaMap.get(func);
                    };

                /**
                 * Gets the name of `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {string} Returns the function name.
                 */
                function getFuncName(func) {
                  var result = func.name + '',
                    array = realNames[result],
                    length = hasOwnProperty.call(realNames, result)
                      ? array.length
                      : 0;

                  while (length--) {
                    var data = array[length],
                      otherFunc = data.func;
                    if (otherFunc == null || otherFunc == func) {
                      return data.name;
                    }
                  }
                  return result;
                }

                /**
                 * Gets the argument placeholder value for `func`.
                 *
                 * @private
                 * @param {Function} func The function to inspect.
                 * @returns {*} Returns the placeholder value.
                 */
                function getHolder(func) {
                  var object = hasOwnProperty.call(lodash, 'placeholder')
                    ? lodash
                    : func;
                  return object.placeholder;
                }

                /**
                 * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                 * this function returns the custom method, otherwise it returns `baseIteratee`.
                 * If arguments are provided, the chosen function is invoked with them and
                 * its result is returned.
                 *
                 * @private
                 * @param {*} [value] The value to convert to an iteratee.
                 * @param {number} [arity] The arity of the created iteratee.
                 * @returns {Function} Returns the chosen function or its result.
                 */
                function getIteratee() {
                  var result = lodash.iteratee || iteratee;
                  result = result === iteratee ? baseIteratee : result;
                  return arguments.length
                    ? result(arguments[0], arguments[1])
                    : result;
                }

                /**
                 * Gets the data for `map`.
                 *
                 * @private
                 * @param {Object} map The map to query.
                 * @param {string} key The reference key.
                 * @returns {*} Returns the map data.
                 */
                function getMapData(map, key) {
                  var data = map.__data__;
                  return isKeyable(key)
                    ? data[typeof key == 'string' ? 'string' : 'hash']
                    : data.map;
                }

                /**
                 * Gets the property names, values, and compare flags of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the match data of `object`.
                 */
                function getMatchData(object) {
                  var result = keys(object),
                    length = result.length;

                  while (length--) {
                    var key = result[length],
                      value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                  }
                  return result;
                }

                /**
                 * Gets the native function at `key` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the method to get.
                 * @returns {*} Returns the function if it's native, else `undefined`.
                 */
                function getNative(object, key) {
                  var value = getValue(object, key);
                  return baseIsNative(value) ? value : undefined;
                }

                /**
                 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the raw `toStringTag`.
                 */
                function getRawTag(value) {
                  var isOwn = hasOwnProperty.call(value, symToStringTag),
                    tag = value[symToStringTag];

                  try {
                    value[symToStringTag] = undefined;
                    var unmasked = true;
                  } catch (e) {}

                  var result = nativeObjectToString.call(value);
                  if (unmasked) {
                    if (isOwn) {
                      value[symToStringTag] = tag;
                    } else {
                      delete value[symToStringTag];
                    }
                  }
                  return result;
                }

                /**
                 * Creates an array of the own enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbols = !nativeGetSymbols
                  ? stubArray
                  : function(object) {
                      if (object == null) {
                        return [];
                      }
                      object = Object(object);
                      return arrayFilter(nativeGetSymbols(object), function(
                        symbol
                      ) {
                        return propertyIsEnumerable.call(object, symbol);
                      });
                    };

                /**
                 * Creates an array of the own and inherited enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbolsIn = !nativeGetSymbols
                  ? stubArray
                  : function(object) {
                      var result = [];
                      while (object) {
                        arrayPush(result, getSymbols(object));
                        object = getPrototype(object);
                      }
                      return result;
                    };

                /**
                 * Gets the `toStringTag` of `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                var getTag = baseGetTag;

                // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                if (
                  (DataView &&
                    getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                  (Map && getTag(new Map()) != mapTag) ||
                  (Promise && getTag(Promise.resolve()) != promiseTag) ||
                  (Set && getTag(new Set()) != setTag) ||
                  (WeakMap && getTag(new WeakMap()) != weakMapTag)
                ) {
                  getTag = function(value) {
                    var result = baseGetTag(value),
                      Ctor =
                        result == objectTag ? value.constructor : undefined,
                      ctorString = Ctor ? toSource(Ctor) : '';

                    if (ctorString) {
                      switch (ctorString) {
                        case dataViewCtorString:
                          return dataViewTag;
                        case mapCtorString:
                          return mapTag;
                        case promiseCtorString:
                          return promiseTag;
                        case setCtorString:
                          return setTag;
                        case weakMapCtorString:
                          return weakMapTag;
                      }
                    }
                    return result;
                  };
                }

                /**
                 * Gets the view, applying any `transforms` to the `start` and `end` positions.
                 *
                 * @private
                 * @param {number} start The start of the view.
                 * @param {number} end The end of the view.
                 * @param {Array} transforms The transformations to apply to the view.
                 * @returns {Object} Returns an object containing the `start` and `end`
                 *  positions of the view.
                 */
                function getView(start, end, transforms) {
                  var index = -1,
                    length = transforms.length;

                  while (++index < length) {
                    var data = transforms[index],
                      size = data.size;

                    switch (data.type) {
                      case 'drop':
                        start += size;
                        break;
                      case 'dropRight':
                        end -= size;
                        break;
                      case 'take':
                        end = nativeMin(end, start + size);
                        break;
                      case 'takeRight':
                        start = nativeMax(start, end - size);
                        break;
                    }
                  }
                  return { start: start, end: end };
                }

                /**
                 * Extracts wrapper details from the `source` body comment.
                 *
                 * @private
                 * @param {string} source The source to inspect.
                 * @returns {Array} Returns the wrapper details.
                 */
                function getWrapDetails(source) {
                  var match = source.match(reWrapDetails);
                  return match ? match[1].split(reSplitDetails) : [];
                }

                /**
                 * Checks if `path` exists on `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @param {Function} hasFunc The function to check properties.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 */
                function hasPath(object, path, hasFunc) {
                  path = castPath(path, object);

                  var index = -1,
                    length = path.length,
                    result = false;

                  while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                      break;
                    }
                    object = object[key];
                  }
                  if (result || ++index != length) {
                    return result;
                  }
                  length = object == null ? 0 : object.length;
                  return (
                    !!length &&
                    isLength(length) &&
                    isIndex(key, length) &&
                    (isArray(object) || isArguments(object))
                  );
                }

                /**
                 * Initializes an array clone.
                 *
                 * @private
                 * @param {Array} array The array to clone.
                 * @returns {Array} Returns the initialized clone.
                 */
                function initCloneArray(array) {
                  var length = array.length,
                    result = new array.constructor(length);

                  // Add properties assigned by `RegExp#exec`.
                  if (
                    length &&
                    typeof array[0] == 'string' &&
                    hasOwnProperty.call(array, 'index')
                  ) {
                    result.index = array.index;
                    result.input = array.input;
                  }
                  return result;
                }

                /**
                 * Initializes an object clone.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneObject(object) {
                  return typeof object.constructor == 'function' &&
                    !isPrototype(object)
                    ? baseCreate(getPrototype(object))
                    : {};
                }

                /**
                 * Initializes an object clone based on its `toStringTag`.
                 *
                 * **Note:** This function only supports cloning values with tags of
                 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @param {string} tag The `toStringTag` of the object to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneByTag(object, tag, isDeep) {
                  var Ctor = object.constructor;
                  switch (tag) {
                    case arrayBufferTag:
                      return cloneArrayBuffer(object);

                    case boolTag:
                    case dateTag:
                      return new Ctor(+object);

                    case dataViewTag:
                      return cloneDataView(object, isDeep);

                    case float32Tag:
                    case float64Tag:
                    case int8Tag:
                    case int16Tag:
                    case int32Tag:
                    case uint8Tag:
                    case uint8ClampedTag:
                    case uint16Tag:
                    case uint32Tag:
                      return cloneTypedArray(object, isDeep);

                    case mapTag:
                      return new Ctor();

                    case numberTag:
                    case stringTag:
                      return new Ctor(object);

                    case regexpTag:
                      return cloneRegExp(object);

                    case setTag:
                      return new Ctor();

                    case symbolTag:
                      return cloneSymbol(object);
                  }
                }

                /**
                 * Inserts wrapper `details` in a comment at the top of the `source` body.
                 *
                 * @private
                 * @param {string} source The source to modify.
                 * @returns {Array} details The details to insert.
                 * @returns {string} Returns the modified source.
                 */
                function insertWrapDetails(source, details) {
                  var length = details.length;
                  if (!length) {
                    return source;
                  }
                  var lastIndex = length - 1;
                  details[lastIndex] =
                    (length > 1 ? '& ' : '') + details[lastIndex];
                  details = details.join(length > 2 ? ', ' : ' ');
                  return source.replace(
                    reWrapComment,
                    '{\n/* [wrapped with ' + details + '] */\n'
                  );
                }

                /**
                 * Checks if `value` is a flattenable `arguments` object or array.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                 */
                function isFlattenable(value) {
                  return (
                    isArray(value) ||
                    isArguments(value) ||
                    !!(spreadableSymbol && value && value[spreadableSymbol])
                  );
                }

                /**
                 * Checks if `value` is a valid array-like index.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                 */
                function isIndex(value, length) {
                  var type = typeof value;
                  length = length == null ? MAX_SAFE_INTEGER : length;

                  return (
                    !!length &&
                    (type == 'number' ||
                      (type != 'symbol' && reIsUint.test(value))) &&
                    value > -1 && value % 1 == 0 && value < length
                  );
                }

                /**
                 * Checks if the given arguments are from an iteratee call.
                 *
                 * @private
                 * @param {*} value The potential iteratee value argument.
                 * @param {*} index The potential iteratee index or key argument.
                 * @param {*} object The potential iteratee object argument.
                 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                 *  else `false`.
                 */
                function isIterateeCall(value, index, object) {
                  if (!isObject(object)) {
                    return false;
                  }
                  var type = typeof index;
                  if (
                    type == 'number'
                      ? isArrayLike(object) && isIndex(index, object.length)
                      : type == 'string' && index in object
                  ) {
                    return eq(object[index], value);
                  }
                  return false;
                }

                /**
                 * Checks if `value` is a property name and not a property path.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                 */
                function isKey(value, object) {
                  if (isArray(value)) {
                    return false;
                  }
                  var type = typeof value;
                  if (
                    type == 'number' ||
                    type == 'symbol' ||
                    type == 'boolean' ||
                    value == null ||
                    isSymbol(value)
                  ) {
                    return true;
                  }
                  return (
                    reIsPlainProp.test(value) ||
                    !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object))
                  );
                }

                /**
                 * Checks if `value` is suitable for use as unique object key.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                 */
                function isKeyable(value) {
                  var type = typeof value;
                  return type == 'string' ||
                    type == 'number' ||
                    type == 'symbol' ||
                    type == 'boolean'
                    ? value !== '__proto__'
                    : value === null;
                }

                /**
                 * Checks if `func` has a lazy counterpart.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                 *  else `false`.
                 */
                function isLaziable(func) {
                  var funcName = getFuncName(func),
                    other = lodash[funcName];

                  if (
                    typeof other != 'function' ||
                    !(funcName in LazyWrapper.prototype)
                  ) {
                    return false;
                  }
                  if (func === other) {
                    return true;
                  }
                  var data = getData(other);
                  return !!data && func === data[0];
                }

                /**
                 * Checks if `func` has its source masked.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                 */
                function isMasked(func) {
                  return !!maskSrcKey && maskSrcKey in func;
                }

                /**
                 * Checks if `func` is capable of being masked.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                 */
                var isMaskable = coreJsData ? isFunction : stubFalse;

                /**
                 * Checks if `value` is likely a prototype object.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                 */
                function isPrototype(value) {
                  var Ctor = value && value.constructor,
                    proto =
                      (typeof Ctor == 'function' && Ctor.prototype) ||
                      objectProto;

                  return value === proto;
                }

                /**
                 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` if suitable for strict
                 *  equality comparisons, else `false`.
                 */
                function isStrictComparable(value) {
                  return value === value && !isObject(value);
                }

                /**
                 * A specialized version of `matchesProperty` for source values suitable
                 * for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function matchesStrictComparable(key, srcValue) {
                  return function(object) {
                    if (object == null) {
                      return false;
                    }
                    return (
                      object[key] === srcValue &&
                      (srcValue !== undefined || key in Object(object))
                    );
                  };
                }

                /**
                 * A specialized version of `_.memoize` which clears the memoized function's
                 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                 *
                 * @private
                 * @param {Function} func The function to have its output memoized.
                 * @returns {Function} Returns the new memoized function.
                 */
                function memoizeCapped(func) {
                  var result = memoize(func, function(key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                      cache.clear();
                    }
                    return key;
                  });

                  var cache = result.cache;
                  return result;
                }

                /**
                 * Merges the function metadata of `source` into `data`.
                 *
                 * Merging metadata reduces the number of wrappers used to invoke a function.
                 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                 * may be applied regardless of execution order. Methods like `_.ary` and
                 * `_.rearg` modify function arguments, making the order in which they are
                 * executed important, preventing the merging of metadata. However, we make
                 * an exception for a safe combined case where curried functions have `_.ary`
                 * and or `_.rearg` applied.
                 *
                 * @private
                 * @param {Array} data The destination metadata.
                 * @param {Array} source The source metadata.
                 * @returns {Array} Returns `data`.
                 */
                function mergeData(data, source) {
                  var bitmask = data[1],
                    srcBitmask = source[1],
                    newBitmask = bitmask | srcBitmask,
                    isCommon =
                      newBitmask <
                      (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                  var isCombo =
                    (srcBitmask == WRAP_ARY_FLAG &&
                      bitmask == WRAP_CURRY_FLAG) ||
                    (srcBitmask == WRAP_ARY_FLAG &&
                      bitmask == WRAP_REARG_FLAG &&
                      data[7].length <= source[8]) ||
                    (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                      source[7].length <= source[8] &&
                      bitmask == WRAP_CURRY_FLAG);

                  // Exit early if metadata can't be merged.
                  if (!(isCommon || isCombo)) {
                    return data;
                  }
                  // Use source `thisArg` if available.
                  if (srcBitmask & WRAP_BIND_FLAG) {
                    data[2] = source[2];
                    // Set when currying a bound function.
                    newBitmask |=
                      bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                  }
                  // Compose partial arguments.
                  var value = source[3];
                  if (value) {
                    var partials = data[3];
                    data[3] = partials
                      ? composeArgs(partials, value, source[4])
                      : value;
                    data[4] = partials
                      ? replaceHolders(data[3], PLACEHOLDER)
                      : source[4];
                  }
                  // Compose partial right arguments.
                  value = source[5];
                  if (value) {
                    partials = data[5];
                    data[5] = partials
                      ? composeArgsRight(partials, value, source[6])
                      : value;
                    data[6] = partials
                      ? replaceHolders(data[5], PLACEHOLDER)
                      : source[6];
                  }
                  // Use source `argPos` if available.
                  value = source[7];
                  if (value) {
                    data[7] = value;
                  }
                  // Use source `ary` if it's smaller.
                  if (srcBitmask & WRAP_ARY_FLAG) {
                    data[8] =
                      data[8] == null
                        ? source[8]
                        : nativeMin(data[8], source[8]);
                  }
                  // Use source `arity` if one is not provided.
                  if (data[9] == null) {
                    data[9] = source[9];
                  }
                  // Use source `func` and merge bitmasks.
                  data[0] = source[0];
                  data[1] = newBitmask;

                  return data;
                }

                /**
                 * This function is like
                 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * except that it includes inherited enumerable properties.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function nativeKeysIn(object) {
                  var result = [];
                  if (object != null) {
                    for (var key in Object(object)) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * Converts `value` to a string using `Object.prototype.toString`.
                 *
                 * @private
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 */
                function objectToString(value) {
                  return nativeObjectToString.call(value);
                }

                /**
                 * A specialized version of `baseRest` which transforms the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @param {Function} transform The rest array transform.
                 * @returns {Function} Returns the new function.
                 */
                function overRest(func, start, transform) {
                  start = nativeMax(
                    start === undefined ? func.length - 1 : start,
                    0
                  );
                  return function() {
                    var args = arguments,
                      index = -1,
                      length = nativeMax(args.length - start, 0),
                      array = Array(length);

                    while (++index < length) {
                      array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                      otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                  };
                }

                /**
                 * Gets the parent value at `path` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} path The path to get the parent value of.
                 * @returns {*} Returns the parent value.
                 */
                function parent(object, path) {
                  return path.length < 2
                    ? object
                    : baseGet(object, baseSlice(path, 0, -1));
                }

                /**
                 * Reorder `array` according to the specified indexes where the element at
                 * the first index is assigned as the first element, the element at
                 * the second index is assigned as the second element, and so on.
                 *
                 * @private
                 * @param {Array} array The array to reorder.
                 * @param {Array} indexes The arranged array indexes.
                 * @returns {Array} Returns `array`.
                 */
                function reorder(array, indexes) {
                  var arrLength = array.length,
                    length = nativeMin(indexes.length, arrLength),
                    oldArray = copyArray(array);

                  while (length--) {
                    var index = indexes[length];
                    array[length] = isIndex(index, arrLength)
                      ? oldArray[index]
                      : undefined;
                  }
                  return array;
                }

                /**
                 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function safeGet(object, key) {
                  if (
                    key === 'constructor' &&
                    typeof object[key] === 'function'
                  ) {
                    return;
                  }

                  if (key == '__proto__') {
                    return;
                  }

                  return object[key];
                }

                /**
                 * Sets metadata for `func`.
                 *
                 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                 * period of time, it will trip its breaker and transition to an identity
                 * function to avoid garbage collection pauses in V8. See
                 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                 * for more details.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var setData = shortOut(baseSetData);

                /**
                 * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                var setTimeout =
                  ctxSetTimeout ||
                  function(func, wait) {
                    return root.setTimeout(func, wait);
                  };

                /**
                 * Sets the `toString` method of `func` to return `string`.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var setToString = shortOut(baseSetToString);

                /**
                 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                 * with wrapper details in a comment at the top of the source body.
                 *
                 * @private
                 * @param {Function} wrapper The function to modify.
                 * @param {Function} reference The reference function.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Function} Returns `wrapper`.
                 */
                function setWrapToString(wrapper, reference, bitmask) {
                  var source = reference + '';
                  return setToString(
                    wrapper,
                    insertWrapDetails(
                      source,
                      updateWrapDetails(getWrapDetails(source), bitmask)
                    )
                  );
                }

                /**
                 * Creates a function that'll short out and invoke `identity` instead
                 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                 * milliseconds.
                 *
                 * @private
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new shortable function.
                 */
                function shortOut(func) {
                  var count = 0,
                    lastCalled = 0;

                  return function() {
                    var stamp = nativeNow(),
                      remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                      if (++count >= HOT_COUNT) {
                        return arguments[0];
                      }
                    } else {
                      count = 0;
                    }
                    return func.apply(undefined, arguments);
                  };
                }

                /**
                 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @param {number} [size=array.length] The size of `array`.
                 * @returns {Array} Returns `array`.
                 */
                function shuffleSelf(array, size) {
                  var index = -1,
                    length = array.length,
                    lastIndex = length - 1;

                  size = size === undefined ? length : size;
                  while (++index < size) {
                    var rand = baseRandom(index, lastIndex),
                      value = array[rand];

                    array[rand] = array[index];
                    array[index] = value;
                  }
                  array.length = size;
                  return array;
                }

                /**
                 * Converts `string` to a property path array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the property path array.
                 */
                var stringToPath = memoizeCapped(function(string) {
                  var result = [];
                  if (string.charCodeAt(0) === 46 /* . */) {
                    result.push('');
                  }
                  string.replace(rePropName, function(
                    match,
                    number,
                    quote,
                    subString
                  ) {
                    result.push(
                      quote
                        ? subString.replace(reEscapeChar, '$1')
                        : number || match
                    );
                  });
                  return result;
                });

                /**
                 * Converts `value` to a string key if it's not a string or symbol.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {string|symbol} Returns the key.
                 */
                function toKey(value) {
                  if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                  }
                  var result = value + '';
                  return result == '0' && 1 / value == -INFINITY
                    ? '-0'
                    : result;
                }

                /**
                 * Converts `func` to its source code.
                 *
                 * @private
                 * @param {Function} func The function to convert.
                 * @returns {string} Returns the source code.
                 */
                function toSource(func) {
                  if (func != null) {
                    try {
                      return funcToString.call(func);
                    } catch (e) {}
                    try {
                      return func + '';
                    } catch (e) {}
                  }
                  return '';
                }

                /**
                 * Updates wrapper `details` based on `bitmask` flags.
                 *
                 * @private
                 * @returns {Array} details The details to modify.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Array} Returns `details`.
                 */
                function updateWrapDetails(details, bitmask) {
                  arrayEach(wrapFlags, function(pair) {
                    var value = '_.' + pair[0];
                    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                      details.push(value);
                    }
                  });
                  return details.sort();
                }

                /**
                 * Creates a clone of `wrapper`.
                 *
                 * @private
                 * @param {Object} wrapper The wrapper to clone.
                 * @returns {Object} Returns the cloned wrapper.
                 */
                function wrapperClone(wrapper) {
                  if (wrapper instanceof LazyWrapper) {
                    return wrapper.clone();
                  }
                  var result = new LodashWrapper(
                    wrapper.__wrapped__,
                    wrapper.__chain__
                  );
                  result.__actions__ = copyArray(wrapper.__actions__);
                  result.__index__ = wrapper.__index__;
                  result.__values__ = wrapper.__values__;
                  return result;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of elements split into groups the length of `size`.
                 * If `array` can't be split evenly, the final chunk will be the remaining
                 * elements.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to process.
                 * @param {number} [size=1] The length of each chunk
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the new array of chunks.
                 * @example
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 2);
                 * // => [['a', 'b'], ['c', 'd']]
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 3);
                 * // => [['a', 'b', 'c'], ['d']]
                 */
                function chunk(array, size, guard) {
                  if (
                    guard
                      ? isIterateeCall(array, size, guard)
                      : size === undefined
                  ) {
                    size = 1;
                  } else {
                    size = nativeMax(toInteger(size), 0);
                  }
                  var length = array == null ? 0 : array.length;
                  if (!length || size < 1) {
                    return [];
                  }
                  var index = 0,
                    resIndex = 0,
                    result = Array(nativeCeil(length / size));

                  while (index < length) {
                    result[resIndex++] = baseSlice(
                      array,
                      index,
                      (index += size)
                    );
                  }
                  return result;
                }

                /**
                 * Creates an array with all falsey values removed. The values `false`, `null`,
                 * `0`, `""`, `undefined`, and `NaN` are falsey.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to compact.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.compact([0, 1, false, 2, '', 3]);
                 * // => [1, 2, 3]
                 */
                function compact(array) {
                  var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                  while (++index < length) {
                    var value = array[index];
                    if (value) {
                      result[resIndex++] = value;
                    }
                  }
                  return result;
                }

                /**
                 * Creates a new array concatenating `array` with any additional arrays
                 * and/or values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to concatenate.
                 * @param {...*} [values] The values to concatenate.
                 * @returns {Array} Returns the new concatenated array.
                 * @example
                 *
                 * var array = [1];
                 * var other = _.concat(array, 2, [3], [[4]]);
                 *
                 * console.log(other);
                 * // => [1, 2, 3, [4]]
                 *
                 * console.log(array);
                 * // => [1]
                 */
                function concat() {
                  var length = arguments.length;
                  if (!length) {
                    return [];
                  }
                  var args = Array(length - 1),
                    array = arguments[0],
                    index = length;

                  while (index--) {
                    args[index - 1] = arguments[index];
                  }
                  return arrayPush(
                    isArray(array) ? copyArray(array) : [array],
                    baseFlatten(args, 1)
                  );
                }

                /**
                 * Creates an array of `array` values not included in the other given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * **Note:** Unlike `_.pullAll`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.without, _.xor
                 * @example
                 *
                 * _.difference([2, 1], [2, 3]);
                 * // => [1]
                 */
                var difference = baseRest(function(array, values) {
                  return isArrayLikeObject(array)
                    ? baseDifference(
                        array,
                        baseFlatten(values, 1, isArrayLikeObject, true)
                      )
                    : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `iteratee` which
                 * is invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var differenceBy = baseRest(function(array, values) {
                  var iteratee = last(values);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return isArrayLikeObject(array)
                    ? baseDifference(
                        array,
                        baseFlatten(values, 1, isArrayLikeObject, true),
                        getIteratee(iteratee, 2)
                      )
                    : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `comparator`
                 * which is invoked to compare elements of `array` to `values`. The order and
                 * references of result values are determined by the first array. The comparator
                 * is invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 *
                 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }]
                 */
                var differenceWith = baseRest(function(array, values) {
                  var comparator = last(values);
                  if (isArrayLikeObject(comparator)) {
                    comparator = undefined;
                  }
                  return isArrayLikeObject(array)
                    ? baseDifference(
                        array,
                        baseFlatten(values, 1, isArrayLikeObject, true),
                        undefined,
                        comparator
                      )
                    : [];
                });

                /**
                 * Creates a slice of `array` with `n` elements dropped from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.drop([1, 2, 3]);
                 * // => [2, 3]
                 *
                 * _.drop([1, 2, 3], 2);
                 * // => [3]
                 *
                 * _.drop([1, 2, 3], 5);
                 * // => []
                 *
                 * _.drop([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function drop(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = guard || n === undefined ? 1 : toInteger(n);
                  return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with `n` elements dropped from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.dropRight([1, 2, 3]);
                 * // => [1, 2]
                 *
                 * _.dropRight([1, 2, 3], 2);
                 * // => [1]
                 *
                 * _.dropRight([1, 2, 3], 5);
                 * // => []
                 *
                 * _.dropRight([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function dropRight(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = guard || n === undefined ? 1 : toInteger(n);
                  n = length - n;
                  return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the end.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.dropRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropRightWhile(users, ['active', false]);
                 * // => objects for ['barney']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropRightWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropRightWhile(array, predicate) {
                  return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), true, true)
                    : [];
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the beginning.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.dropWhile(users, function(o) { return !o.active; });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropWhile(users, ['active', false]);
                 * // => objects for ['pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropWhile(array, predicate) {
                  return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), true)
                    : [];
                }

                /**
                 * Fills elements of `array` with `value` from `start` up to, but not
                 * including, `end`.
                 *
                 * **Note:** This method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Array
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.fill(array, 'a');
                 * console.log(array);
                 * // => ['a', 'a', 'a']
                 *
                 * _.fill(Array(3), 2);
                 * // => [2, 2, 2]
                 *
                 * _.fill([4, 6, 8, 10], '*', 1, 3);
                 * // => [4, '*', '*', 10]
                 */
                function fill(array, value, start, end) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  if (
                    start &&
                    typeof start != 'number' &&
                    isIterateeCall(array, value, start)
                  ) {
                    start = 0;
                    end = length;
                  }
                  return baseFill(array, value, start, end);
                }

                /**
                 * This method is like `_.find` except that it returns the index of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.findIndex(users, function(o) { return o.user == 'barney'; });
                 * // => 0
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findIndex(users, { 'user': 'fred', 'active': false });
                 * // => 1
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findIndex(users, ['active', false]);
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findIndex(users, 'active');
                 * // => 2
                 */
                function findIndex(array, predicate, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = fromIndex == null ? 0 : toInteger(fromIndex);
                  if (index < 0) {
                    index = nativeMax(length + index, 0);
                  }
                  return baseFindIndex(array, getIteratee(predicate, 3), index);
                }

                /**
                 * This method is like `_.findIndex` except that it iterates over elements
                 * of `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                 * // => 2
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                 * // => 0
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastIndex(users, ['active', false]);
                 * // => 2
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastIndex(users, 'active');
                 * // => 0
                 */
                function findLastIndex(array, predicate, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = length - 1;
                  if (fromIndex !== undefined) {
                    index = toInteger(fromIndex);
                    index =
                      fromIndex < 0
                        ? nativeMax(length + index, 0)
                        : nativeMin(index, length - 1);
                  }
                  return baseFindIndex(
                    array,
                    getIteratee(predicate, 3),
                    index,
                    true
                  );
                }

                /**
                 * Flattens `array` a single level deep.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flatten([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, [3, [4]], 5]
                 */
                function flatten(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseFlatten(array, 1) : [];
                }

                /**
                 * Recursively flattens `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flattenDeep([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, 3, 4, 5]
                 */
                function flattenDeep(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseFlatten(array, INFINITY) : [];
                }

                /**
                 * Recursively flatten `array` up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * var array = [1, [2, [3, [4]], 5]];
                 *
                 * _.flattenDepth(array, 1);
                 * // => [1, 2, [3, [4]], 5]
                 *
                 * _.flattenDepth(array, 2);
                 * // => [1, 2, 3, [4], 5]
                 */
                function flattenDepth(array, depth) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  depth = depth === undefined ? 1 : toInteger(depth);
                  return baseFlatten(array, depth);
                }

                /**
                 * The inverse of `_.toPairs`; this method returns an object composed
                 * from key-value `pairs`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} pairs The key-value pairs.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.fromPairs([['a', 1], ['b', 2]]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function fromPairs(pairs) {
                  var index = -1,
                    length = pairs == null ? 0 : pairs.length,
                    result = {};

                  while (++index < length) {
                    var pair = pairs[index];
                    result[pair[0]] = pair[1];
                  }
                  return result;
                }

                /**
                 * Gets the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias first
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the first element of `array`.
                 * @example
                 *
                 * _.head([1, 2, 3]);
                 * // => 1
                 *
                 * _.head([]);
                 * // => undefined
                 */
                function head(array) {
                  return array && array.length ? array[0] : undefined;
                }

                /**
                 * Gets the index at which the first occurrence of `value` is found in `array`
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. If `fromIndex` is negative, it's used as the
                 * offset from the end of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.indexOf([1, 2, 1, 2], 2);
                 * // => 1
                 *
                 * // Search from the `fromIndex`.
                 * _.indexOf([1, 2, 1, 2], 2, 2);
                 * // => 3
                 */
                function indexOf(array, value, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = fromIndex == null ? 0 : toInteger(fromIndex);
                  if (index < 0) {
                    index = nativeMax(length + index, 0);
                  }
                  return baseIndexOf(array, value, index);
                }

                /**
                 * Gets all but the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.initial([1, 2, 3]);
                 * // => [1, 2]
                 */
                function initial(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSlice(array, 0, -1) : [];
                }

                /**
                 * Creates an array of unique values that are included in all given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersection([2, 1], [2, 3]);
                 * // => [2]
                 */
                var intersection = baseRest(function(arrays) {
                  var mapped = arrayMap(arrays, castArrayLikeObject);
                  return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped)
                    : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `iteratee`
                 * which is invoked for each element of each `arrays` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [2.1]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }]
                 */
                var intersectionBy = baseRest(function(arrays) {
                  var iteratee = last(arrays),
                    mapped = arrayMap(arrays, castArrayLikeObject);

                  if (iteratee === last(mapped)) {
                    iteratee = undefined;
                  } else {
                    mapped.pop();
                  }
                  return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped, getIteratee(iteratee, 2))
                    : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `comparator`
                 * which is invoked to compare elements of `arrays`. The order and references
                 * of result values are determined by the first array. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.intersectionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }]
                 */
                var intersectionWith = baseRest(function(arrays) {
                  var comparator = last(arrays),
                    mapped = arrayMap(arrays, castArrayLikeObject);

                  comparator =
                    typeof comparator == 'function' ? comparator : undefined;
                  if (comparator) {
                    mapped.pop();
                  }
                  return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped, undefined, comparator)
                    : [];
                });

                /**
                 * Converts all elements in `array` into a string separated by `separator`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to convert.
                 * @param {string} [separator=','] The element separator.
                 * @returns {string} Returns the joined string.
                 * @example
                 *
                 * _.join(['a', 'b', 'c'], '~');
                 * // => 'a~b~c'
                 */
                function join(array, separator) {
                  return array == null ? '' : nativeJoin.call(array, separator);
                }

                /**
                 * Gets the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the last element of `array`.
                 * @example
                 *
                 * _.last([1, 2, 3]);
                 * // => 3
                 */
                function last(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? array[length - 1] : undefined;
                }

                /**
                 * This method is like `_.indexOf` except that it iterates over elements of
                 * `array` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.lastIndexOf([1, 2, 1, 2], 2);
                 * // => 3
                 *
                 * // Search from the `fromIndex`.
                 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                 * // => 1
                 */
                function lastIndexOf(array, value, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = length;
                  if (fromIndex !== undefined) {
                    index = toInteger(fromIndex);
                    index =
                      index < 0
                        ? nativeMax(length + index, 0)
                        : nativeMin(index, length - 1);
                  }
                  return value === value
                    ? strictLastIndexOf(array, value, index)
                    : baseFindIndex(array, baseIsNaN, index, true);
                }

                /**
                 * Gets the element at index `n` of `array`. If `n` is negative, the nth
                 * element from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.11.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=0] The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 *
                 * _.nth(array, 1);
                 * // => 'b'
                 *
                 * _.nth(array, -2);
                 * // => 'c';
                 */
                function nth(array, n) {
                  return array && array.length
                    ? baseNth(array, toInteger(n))
                    : undefined;
                }

                /**
                 * Removes all given values from `array` using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                 * to remove elements from an array by predicate.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...*} [values] The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pull(array, 'a', 'c');
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                var pull = baseRest(pullAll);

                /**
                 * This method is like `_.pull` except that it accepts an array of values to remove.
                 *
                 * **Note:** Unlike `_.difference`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pullAll(array, ['a', 'c']);
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                function pullAll(array, values) {
                  return array && array.length && values && values.length
                    ? basePullAll(array, values)
                    : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `iteratee` which is
                 * invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The iteratee is invoked with one argument: (value).
                 *
                 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                 *
                 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                 * console.log(array);
                 * // => [{ 'x': 2 }]
                 */
                function pullAllBy(array, values, iteratee) {
                  return array && array.length && values && values.length
                    ? basePullAll(array, values, getIteratee(iteratee, 2))
                    : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `comparator` which
                 * is invoked to compare elements of `array` to `values`. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                 *
                 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                 * console.log(array);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                 */
                function pullAllWith(array, values, comparator) {
                  return array && array.length && values && values.length
                    ? basePullAll(array, values, undefined, comparator)
                    : array;
                }

                /**
                 * Removes elements from `array` corresponding to `indexes` and returns an
                 * array of removed elements.
                 *
                 * **Note:** Unlike `_.at`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 * var pulled = _.pullAt(array, [1, 3]);
                 *
                 * console.log(array);
                 * // => ['a', 'c']
                 *
                 * console.log(pulled);
                 * // => ['b', 'd']
                 */
                var pullAt = flatRest(function(array, indexes) {
                  var length = array == null ? 0 : array.length,
                    result = baseAt(array, indexes);

                  basePullAt(
                    array,
                    arrayMap(indexes, function(index) {
                      return isIndex(index, length) ? +index : index;
                    }).sort(compareAscending)
                  );

                  return result;
                });

                /**
                 * Removes all elements from `array` that `predicate` returns truthy for
                 * and returns an array of the removed elements. The predicate is invoked
                 * with three arguments: (value, index, array).
                 *
                 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                 * to pull elements from an array by value.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = [1, 2, 3, 4];
                 * var evens = _.remove(array, function(n) {
                 *   return n % 2 == 0;
                 * });
                 *
                 * console.log(array);
                 * // => [1, 3]
                 *
                 * console.log(evens);
                 * // => [2, 4]
                 */
                function remove(array, predicate) {
                  var result = [];
                  if (!(array && array.length)) {
                    return result;
                  }
                  var index = -1,
                    indexes = [],
                    length = array.length;

                  predicate = getIteratee(predicate, 3);
                  while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                      result.push(value);
                      indexes.push(index);
                    }
                  }
                  basePullAt(array, indexes);
                  return result;
                }

                /**
                 * Reverses `array` so that the first element becomes the last, the second
                 * element becomes the second to last, and so on.
                 *
                 * **Note:** This method mutates `array` and is based on
                 * [`Array#reverse`](https://mdn.io/Array/reverse).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.reverse(array);
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function reverse(array) {
                  return array == null ? array : nativeReverse.call(array);
                }

                /**
                 * Creates a slice of `array` from `start` up to, but not including, `end`.
                 *
                 * **Note:** This method is used instead of
                 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                 * returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function slice(array, start, end) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  if (
                    end &&
                    typeof end != 'number' &&
                    isIterateeCall(array, start, end)
                  ) {
                    start = 0;
                    end = length;
                  } else {
                    start = start == null ? 0 : toInteger(start);
                    end = end === undefined ? length : toInteger(end);
                  }
                  return baseSlice(array, start, end);
                }

                /**
                 * Uses a binary search to determine the lowest index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedIndex([30, 50], 40);
                 * // => 1
                 */
                function sortedIndex(array, value) {
                  return baseSortedIndex(array, value);
                }

                /**
                 * This method is like `_.sortedIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 0
                 */
                function sortedIndexBy(array, value, iteratee) {
                  return baseSortedIndexBy(
                    array,
                    value,
                    getIteratee(iteratee, 2)
                  );
                }

                /**
                 * This method is like `_.indexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 1
                 */
                function sortedIndexOf(array, value) {
                  var length = array == null ? 0 : array.length;
                  if (length) {
                    var index = baseSortedIndex(array, value);
                    if (index < length && eq(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }

                /**
                 * This method is like `_.sortedIndex` except that it returns the highest
                 * index at which `value` should be inserted into `array` in order to
                 * maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                 * // => 4
                 */
                function sortedLastIndex(array, value) {
                  return baseSortedIndex(array, value, true);
                }

                /**
                 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 1
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 1
                 */
                function sortedLastIndexBy(array, value, iteratee) {
                  return baseSortedIndexBy(
                    array,
                    value,
                    getIteratee(iteratee, 2),
                    true
                  );
                }

                /**
                 * This method is like `_.lastIndexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 3
                 */
                function sortedLastIndexOf(array, value) {
                  var length = array == null ? 0 : array.length;
                  if (length) {
                    var index = baseSortedIndex(array, value, true) - 1;
                    if (eq(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }

                /**
                 * This method is like `_.uniq` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniq([1, 1, 2]);
                 * // => [1, 2]
                 */
                function sortedUniq(array) {
                  return array && array.length ? baseSortedUniq(array) : [];
                }

                /**
                 * This method is like `_.uniqBy` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                 * // => [1.1, 2.3]
                 */
                function sortedUniqBy(array, iteratee) {
                  return array && array.length
                    ? baseSortedUniq(array, getIteratee(iteratee, 2))
                    : [];
                }

                /**
                 * Gets all but the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.tail([1, 2, 3]);
                 * // => [2, 3]
                 */
                function tail(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSlice(array, 1, length) : [];
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.take([1, 2, 3]);
                 * // => [1]
                 *
                 * _.take([1, 2, 3], 2);
                 * // => [1, 2]
                 *
                 * _.take([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.take([1, 2, 3], 0);
                 * // => []
                 */
                function take(array, n, guard) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  n = guard || n === undefined ? 1 : toInteger(n);
                  return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.takeRight([1, 2, 3]);
                 * // => [3]
                 *
                 * _.takeRight([1, 2, 3], 2);
                 * // => [2, 3]
                 *
                 * _.takeRight([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.takeRight([1, 2, 3], 0);
                 * // => []
                 */
                function takeRight(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = guard || n === undefined ? 1 : toInteger(n);
                  n = length - n;
                  return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with elements taken from the end. Elements are
                 * taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.takeRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeRightWhile(users, ['active', false]);
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeRightWhile(users, 'active');
                 * // => []
                 */
                function takeRightWhile(array, predicate) {
                  return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), false, true)
                    : [];
                }

                /**
                 * Creates a slice of `array` with elements taken from the beginning. Elements
                 * are taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.takeWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeWhile(users, ['active', false]);
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeWhile(users, 'active');
                 * // => []
                 */
                function takeWhile(array, predicate) {
                  return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3))
                    : [];
                }

                /**
                 * Creates an array of unique values, in order, from all given arrays using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.union([2], [1, 2]);
                 * // => [2, 1]
                 */
                var union = baseRest(function(arrays) {
                  return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true)
                  );
                });

                /**
                 * This method is like `_.union` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which uniqueness is computed. Result values are chosen from the first
                 * array in which the value occurs. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                var unionBy = baseRest(function(arrays) {
                  var iteratee = last(arrays);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true),
                    getIteratee(iteratee, 2)
                  );
                });

                /**
                 * This method is like `_.union` except that it accepts `comparator` which
                 * is invoked to compare elements of `arrays`. Result values are chosen from
                 * the first array in which the value occurs. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.unionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var unionWith = baseRest(function(arrays) {
                  var comparator = last(arrays);
                  comparator =
                    typeof comparator == 'function' ? comparator : undefined;
                  return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true),
                    undefined,
                    comparator
                  );
                });

                /**
                 * Creates a duplicate-free version of an array, using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons, in which only the first occurrence of each element
                 * is kept. The order of result values is determined by the order they occur
                 * in the array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniq([2, 1, 2]);
                 * // => [2, 1]
                 */
                function uniq(array) {
                  return array && array.length ? baseUniq(array) : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * uniqueness is computed. The order of result values is determined by the
                 * order they occur in the array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                function uniqBy(array, iteratee) {
                  return array && array.length
                    ? baseUniq(array, getIteratee(iteratee, 2))
                    : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `comparator` which
                 * is invoked to compare elements of `array`. The order of result values is
                 * determined by the order they occur in the array.The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.uniqWith(objects, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                 */
                function uniqWith(array, comparator) {
                  comparator =
                    typeof comparator == 'function' ? comparator : undefined;
                  return array && array.length
                    ? baseUniq(array, undefined, comparator)
                    : [];
                }

                /**
                 * This method is like `_.zip` except that it accepts an array of grouped
                 * elements and creates an array regrouping the elements to their pre-zip
                 * configuration.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.2.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 *
                 * _.unzip(zipped);
                 * // => [['a', 'b'], [1, 2], [true, false]]
                 */
                function unzip(array) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  var length = 0;
                  array = arrayFilter(array, function(group) {
                    if (isArrayLikeObject(group)) {
                      length = nativeMax(group.length, length);
                      return true;
                    }
                  });
                  return baseTimes(length, function(index) {
                    return arrayMap(array, baseProperty(index));
                  });
                }

                /**
                 * This method is like `_.unzip` except that it accepts `iteratee` to specify
                 * how regrouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  regrouped values.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                 * // => [[1, 10, 100], [2, 20, 200]]
                 *
                 * _.unzipWith(zipped, _.add);
                 * // => [3, 30, 300]
                 */
                function unzipWith(array, iteratee) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  var result = unzip(array);
                  if (iteratee == null) {
                    return result;
                  }
                  return arrayMap(result, function(group) {
                    return apply(iteratee, undefined, group);
                  });
                }

                /**
                 * Creates an array excluding all given values using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.pull`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...*} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.xor
                 * @example
                 *
                 * _.without([2, 1, 2, 3], 1, 2);
                 * // => [3]
                 */
                var without = baseRest(function(array, values) {
                  return isArrayLikeObject(array)
                    ? baseDifference(array, values)
                    : [];
                });

                /**
                 * Creates an array of unique values that is the
                 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                 * of the given arrays. The order of result values is determined by the order
                 * they occur in the arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.without
                 * @example
                 *
                 * _.xor([2, 1], [2, 3]);
                 * // => [1, 3]
                 */
                var xor = baseRest(function(arrays) {
                  return baseXor(arrayFilter(arrays, isArrayLikeObject));
                });

                /**
                 * This method is like `_.xor` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which by which they're compared. The order of result values is determined
                 * by the order they occur in the arrays. The iteratee is invoked with one
                 * argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2, 3.4]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var xorBy = baseRest(function(arrays) {
                  var iteratee = last(arrays);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return baseXor(
                    arrayFilter(arrays, isArrayLikeObject),
                    getIteratee(iteratee, 2)
                  );
                });

                /**
                 * This method is like `_.xor` except that it accepts `comparator` which is
                 * invoked to compare elements of `arrays`. The order of result values is
                 * determined by the order they occur in the arrays. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.xorWith(objects, others, _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var xorWith = baseRest(function(arrays) {
                  var comparator = last(arrays);
                  comparator =
                    typeof comparator == 'function' ? comparator : undefined;
                  return baseXor(
                    arrayFilter(arrays, isArrayLikeObject),
                    undefined,
                    comparator
                  );
                });

                /**
                 * Creates an array of grouped elements, the first of which contains the
                 * first elements of the given arrays, the second of which contains the
                 * second elements of the given arrays, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 */
                var zip = baseRest(unzip);

                /**
                 * This method is like `_.fromPairs` except that it accepts two arrays,
                 * one of property identifiers and one of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.4.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObject(['a', 'b'], [1, 2]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function zipObject(props, values) {
                  return baseZipObject(props || [], values || [], assignValue);
                }

                /**
                 * This method is like `_.zipObject` except that it supports property paths.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                 */
                function zipObjectDeep(props, values) {
                  return baseZipObject(props || [], values || [], baseSet);
                }

                /**
                 * This method is like `_.zip` except that it accepts `iteratee` to specify
                 * how grouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  grouped values.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
                 *   return a + b + c;
                 * });
                 * // => [111, 222]
                 */
                var zipWith = baseRest(function(arrays) {
                  var length = arrays.length,
                    iteratee = length > 1 ? arrays[length - 1] : undefined;

                  iteratee =
                    typeof iteratee == 'function'
                      ? (arrays.pop(), iteratee)
                      : undefined;
                  return unzipWith(arrays, iteratee);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                 * chain sequences enabled. The result of such sequences must be unwrapped
                 * with `_#value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Seq
                 * @param {*} value The value to wrap.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36 },
                 *   { 'user': 'fred',    'age': 40 },
                 *   { 'user': 'pebbles', 'age': 1 }
                 * ];
                 *
                 * var youngest = _
                 *   .chain(users)
                 *   .sortBy('age')
                 *   .map(function(o) {
                 *     return o.user + ' is ' + o.age;
                 *   })
                 *   .head()
                 *   .value();
                 * // => 'pebbles is 1'
                 */
                function chain(value) {
                  var result = lodash(value);
                  result.__chain__ = true;
                  return result;
                }

                /**
                 * This method invokes `interceptor` and returns `value`. The interceptor
                 * is invoked with one argument; (value). The purpose of this method is to
                 * "tap into" a method chain sequence in order to modify intermediate results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * _([1, 2, 3])
                 *  .tap(function(array) {
                 *    // Mutate input array.
                 *    array.pop();
                 *  })
                 *  .reverse()
                 *  .value();
                 * // => [2, 1]
                 */
                function tap(value, interceptor) {
                  interceptor(value);
                  return value;
                }

                /**
                 * This method is like `_.tap` except that it returns the result of `interceptor`.
                 * The purpose of this method is to "pass thru" values replacing intermediate
                 * results in a method chain sequence.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns the result of `interceptor`.
                 * @example
                 *
                 * _('  abc  ')
                 *  .chain()
                 *  .trim()
                 *  .thru(function(value) {
                 *    return [value];
                 *  })
                 *  .value();
                 * // => ['abc']
                 */
                function thru(value, interceptor) {
                  return interceptor(value);
                }

                /**
                 * This method is the wrapper version of `_.at`.
                 *
                 * @name at
                 * @memberOf _
                 * @since 1.0.0
                 * @category Seq
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _(object).at(['a[0].b.c', 'a[1]']).value();
                 * // => [3, 4]
                 */
                var wrapperAt = flatRest(function(paths) {
                  var length = paths.length,
                    start = length ? paths[0] : 0,
                    value = this.__wrapped__,
                    interceptor = function(object) {
                      return baseAt(object, paths);
                    };

                  if (
                    length > 1 ||
                    this.__actions__.length ||
                    !(value instanceof LazyWrapper) ||
                    !isIndex(start)
                  ) {
                    return this.thru(interceptor);
                  }
                  value = value.slice(start, +start + (length ? 1 : 0));
                  value.__actions__.push({
                    func: thru,
                    args: [interceptor],
                    thisArg: undefined,
                  });
                  return new LodashWrapper(value, this.__chain__).thru(function(
                    array
                  ) {
                    if (length && !array.length) {
                      array.push(undefined);
                    }
                    return array;
                  });
                });

                /**
                 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                 *
                 * @name chain
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 40 }
                 * ];
                 *
                 * // A sequence without explicit chaining.
                 * _(users).head();
                 * // => { 'user': 'barney', 'age': 36 }
                 *
                 * // A sequence with explicit chaining.
                 * _(users)
                 *   .chain()
                 *   .head()
                 *   .pick('user')
                 *   .value();
                 * // => { 'user': 'barney' }
                 */
                function wrapperChain() {
                  return chain(this);
                }

                /**
                 * Executes the chain sequence and returns the wrapped result.
                 *
                 * @name commit
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2];
                 * var wrapped = _(array).push(3);
                 *
                 * console.log(array);
                 * // => [1, 2]
                 *
                 * wrapped = wrapped.commit();
                 * console.log(array);
                 * // => [1, 2, 3]
                 *
                 * wrapped.last();
                 * // => 3
                 *
                 * console.log(array);
                 * // => [1, 2, 3]
                 */
                function wrapperCommit() {
                  return new LodashWrapper(this.value(), this.__chain__);
                }

                /**
                 * Gets the next value on a wrapped object following the
                 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                 *
                 * @name next
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the next iterator value.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 1 }
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 2 }
                 *
                 * wrapped.next();
                 * // => { 'done': true, 'value': undefined }
                 */
                function wrapperNext() {
                  if (this.__values__ === undefined) {
                    this.__values__ = toArray(this.value());
                  }
                  var done = this.__index__ >= this.__values__.length,
                    value = done
                      ? undefined
                      : this.__values__[this.__index__++];

                  return { done: done, value: value };
                }

                /**
                 * Enables the wrapper to be iterable.
                 *
                 * @name Symbol.iterator
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the wrapper object.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped[Symbol.iterator]() === wrapped;
                 * // => true
                 *
                 * Array.from(wrapped);
                 * // => [1, 2]
                 */
                function wrapperToIterator() {
                  return this;
                }

                /**
                 * Creates a clone of the chain sequence planting `value` as the wrapped value.
                 *
                 * @name plant
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @param {*} value The value to plant.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var wrapped = _([1, 2]).map(square);
                 * var other = wrapped.plant([3, 4]);
                 *
                 * other.value();
                 * // => [9, 16]
                 *
                 * wrapped.value();
                 * // => [1, 4]
                 */
                function wrapperPlant(value) {
                  var result,
                    parent = this;

                  while (parent instanceof baseLodash) {
                    var clone = wrapperClone(parent);
                    clone.__index__ = 0;
                    clone.__values__ = undefined;
                    if (result) {
                      previous.__wrapped__ = clone;
                    } else {
                      result = clone;
                    }
                    var previous = clone;
                    parent = parent.__wrapped__;
                  }
                  previous.__wrapped__ = value;
                  return result;
                }

                /**
                 * This method is the wrapper version of `_.reverse`.
                 *
                 * **Note:** This method mutates the wrapped array.
                 *
                 * @name reverse
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _(array).reverse().value()
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function wrapperReverse() {
                  var value = this.__wrapped__;
                  if (value instanceof LazyWrapper) {
                    var wrapped = value;
                    if (this.__actions__.length) {
                      wrapped = new LazyWrapper(this);
                    }
                    wrapped = wrapped.reverse();
                    wrapped.__actions__.push({
                      func: thru,
                      args: [reverse],
                      thisArg: undefined,
                    });
                    return new LodashWrapper(wrapped, this.__chain__);
                  }
                  return this.thru(reverse);
                }

                /**
                 * Executes the chain sequence to resolve the unwrapped value.
                 *
                 * @name value
                 * @memberOf _
                 * @since 0.1.0
                 * @alias toJSON, valueOf
                 * @category Seq
                 * @returns {*} Returns the resolved unwrapped value.
                 * @example
                 *
                 * _([1, 2, 3]).value();
                 * // => [1, 2, 3]
                 */
                function wrapperValue() {
                  return baseWrapperValue(this.__wrapped__, this.__actions__);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the number of times the key was returned by `iteratee`. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.countBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': 1, '6': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.countBy(['one', 'two', 'three'], 'length');
                 * // => { '3': 2, '5': 1 }
                 */
                var countBy = createAggregator(function(result, value, key) {
                  if (hasOwnProperty.call(result, key)) {
                    ++result[key];
                  } else {
                    baseAssignValue(result, key, 1);
                  }
                });

                /**
                 * Checks if `predicate` returns truthy for **all** elements of `collection`.
                 * Iteration is stopped once `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * **Note:** This method returns `true` for
                 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                 * elements of empty collections.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.every([true, 1, null, 'yes'], Boolean);
                 * // => false
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.every(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.every(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.every(users, 'active');
                 * // => false
                 */
                function every(collection, predicate, guard) {
                  var func = isArray(collection) ? arrayEvery : baseEvery;
                  if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined;
                  }
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning an array of all elements
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * **Note:** Unlike `_.remove`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.reject
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * _.filter(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, { 'age': 36, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.filter(users, 'active');
                 * // => objects for ['barney']
                 *
                 * // Combining several predicates using `_.overEvery` or `_.overSome`.
                 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
                 * // => objects for ['fred', 'barney']
                 */
                function filter(collection, predicate) {
                  var func = isArray(collection) ? arrayFilter : baseFilter;
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning the first element
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': true },
                 *   { 'user': 'fred',    'age': 40, 'active': false },
                 *   { 'user': 'pebbles', 'age': 1,  'active': true }
                 * ];
                 *
                 * _.find(users, function(o) { return o.age < 40; });
                 * // => object for 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.find(users, { 'age': 1, 'active': true });
                 * // => object for 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.find(users, ['active', false]);
                 * // => object for 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.find(users, 'active');
                 * // => object for 'barney'
                 */
                var find = createFind(findIndex);

                /**
                 * This method is like `_.find` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=collection.length-1] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * _.findLast([1, 2, 3, 4], function(n) {
                 *   return n % 2 == 1;
                 * });
                 * // => 3
                 */
                var findLast = createFind(findLastIndex);

                /**
                 * Creates a flattened array of values by running each element in `collection`
                 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                 * with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [n, n];
                 * }
                 *
                 * _.flatMap([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMap(collection, iteratee) {
                  return baseFlatten(map(collection, iteratee), 1);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [[[n, n]]];
                 * }
                 *
                 * _.flatMapDeep([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMapDeep(collection, iteratee) {
                  return baseFlatten(map(collection, iteratee), INFINITY);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [[[n, n]]];
                 * }
                 *
                 * _.flatMapDepth([1, 2], duplicate, 2);
                 * // => [[1, 1], [2, 2]]
                 */
                function flatMapDepth(collection, iteratee, depth) {
                  depth = depth === undefined ? 1 : toInteger(depth);
                  return baseFlatten(map(collection, iteratee), depth);
                }

                /**
                 * Iterates over elements of `collection` and invokes `iteratee` for each element.
                 * The iteratee is invoked with three arguments: (value, index|key, collection).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * **Note:** As with other "Collections" methods, objects with a "length"
                 * property are iterated like arrays. To avoid this behavior use `_.forIn`
                 * or `_.forOwn` for object iteration.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias each
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEachRight
                 * @example
                 *
                 * _.forEach([1, 2], function(value) {
                 *   console.log(value);
                 * });
                 * // => Logs `1` then `2`.
                 *
                 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forEach(collection, iteratee) {
                  var func = isArray(collection) ? arrayEach : baseEach;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forEach` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @alias eachRight
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEach
                 * @example
                 *
                 * _.forEachRight([1, 2], function(value) {
                 *   console.log(value);
                 * });
                 * // => Logs `2` then `1`.
                 */
                function forEachRight(collection, iteratee) {
                  var func = isArray(collection)
                    ? arrayEachRight
                    : baseEachRight;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The order of grouped values
                 * is determined by the order they occur in `collection`. The corresponding
                 * value of each key is an array of elements responsible for generating the
                 * key. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': [4.2], '6': [6.1, 6.3] }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.groupBy(['one', 'two', 'three'], 'length');
                 * // => { '3': ['one', 'two'], '5': ['three'] }
                 */
                var groupBy = createAggregator(function(result, value, key) {
                  if (hasOwnProperty.call(result, key)) {
                    result[key].push(value);
                  } else {
                    baseAssignValue(result, key, [value]);
                  }
                });

                /**
                 * Checks if `value` is in `collection`. If `collection` is a string, it's
                 * checked for a substring of `value`, otherwise
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * is used for equality comparisons. If `fromIndex` is negative, it's used as
                 * the offset from the end of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {boolean} Returns `true` if `value` is found, else `false`.
                 * @example
                 *
                 * _.includes([1, 2, 3], 1);
                 * // => true
                 *
                 * _.includes([1, 2, 3], 1, 2);
                 * // => false
                 *
                 * _.includes({ 'a': 1, 'b': 2 }, 1);
                 * // => true
                 *
                 * _.includes('abcd', 'bc');
                 * // => true
                 */
                function includes(collection, value, fromIndex, guard) {
                  collection = isArrayLike(collection)
                    ? collection
                    : values(collection);
                  fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

                  var length = collection.length;
                  if (fromIndex < 0) {
                    fromIndex = nativeMax(length + fromIndex, 0);
                  }
                  return isString(collection)
                    ? fromIndex <= length &&
                        collection.indexOf(value, fromIndex) > -1
                    : !!length &&
                        baseIndexOf(collection, value, fromIndex) > -1;
                }

                /**
                 * Invokes the method at `path` of each element in `collection`, returning
                 * an array of the results of each invoked method. Any additional arguments
                 * are provided to each invoked method. If `path` is a function, it's invoked
                 * for, and `this` bound to, each element in `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array|Function|string} path The path of the method to invoke or
                 *  the function invoked per iteration.
                 * @param {...*} [args] The arguments to invoke each method with.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                 * // => [[1, 5, 7], [1, 2, 3]]
                 *
                 * _.invokeMap([123, 456], String.prototype.split, '');
                 * // => [['1', '2', '3'], ['4', '5', '6']]
                 */
                var invokeMap = baseRest(function(collection, path, args) {
                  var index = -1,
                    isFunc = typeof path == 'function',
                    result = isArrayLike(collection)
                      ? Array(collection.length)
                      : [];

                  baseEach(collection, function(value) {
                    result[++index] = isFunc
                      ? apply(path, value, args)
                      : baseInvoke(value, path, args);
                  });
                  return result;
                });

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the last element responsible for generating the key. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * var array = [
                 *   { 'dir': 'left', 'code': 97 },
                 *   { 'dir': 'right', 'code': 100 }
                 * ];
                 *
                 * _.keyBy(array, function(o) {
                 *   return String.fromCharCode(o.code);
                 * });
                 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                 *
                 * _.keyBy(array, 'dir');
                 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                 */
                var keyBy = createAggregator(function(result, value, key) {
                  baseAssignValue(result, key, value);
                });

                /**
                 * Creates an array of values by running each element in `collection` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                 *
                 * The guarded methods are:
                 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * _.map([4, 8], square);
                 * // => [16, 64]
                 *
                 * _.map({ 'a': 4, 'b': 8 }, square);
                 * // => [16, 64] (iteration order is not guaranteed)
                 *
                 * var users = [
                 *   { 'user': 'barney' },
                 *   { 'user': 'fred' }
                 * ];
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, 'user');
                 * // => ['barney', 'fred']
                 */
                function map(collection, iteratee) {
                  var func = isArray(collection) ? arrayMap : baseMap;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.sortBy` except that it allows specifying the sort
                 * orders of the iteratees to sort by. If `orders` is unspecified, all values
                 * are sorted in ascending order. Otherwise, specify an order of "desc" for
                 * descending or "asc" for ascending sort order of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @param {string[]} [orders] The sort orders of `iteratees`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 34 },
                 *   { 'user': 'fred',   'age': 40 },
                 *   { 'user': 'barney', 'age': 36 }
                 * ];
                 *
                 * // Sort by `user` in ascending order and by `age` in descending order.
                 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                 */
                function orderBy(collection, iteratees, orders, guard) {
                  if (collection == null) {
                    return [];
                  }
                  if (!isArray(iteratees)) {
                    iteratees = iteratees == null ? [] : [iteratees];
                  }
                  orders = guard ? undefined : orders;
                  if (!isArray(orders)) {
                    orders = orders == null ? [] : [orders];
                  }
                  return baseOrderBy(collection, iteratees, orders);
                }

                /**
                 * Creates an array of elements split into two groups, the first of which
                 * contains elements `predicate` returns truthy for, the second of which
                 * contains elements `predicate` returns falsey for. The predicate is
                 * invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of grouped elements.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': false },
                 *   { 'user': 'fred',    'age': 40, 'active': true },
                 *   { 'user': 'pebbles', 'age': 1,  'active': false }
                 * ];
                 *
                 * _.partition(users, function(o) { return o.active; });
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.partition(users, { 'age': 1, 'active': false });
                 * // => objects for [['pebbles'], ['barney', 'fred']]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.partition(users, ['active', false]);
                 * // => objects for [['barney', 'pebbles'], ['fred']]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.partition(users, 'active');
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 */
                var partition = createAggregator(
                  function(result, value, key) {
                    result[key ? 0 : 1].push(value);
                  },
                  function() {
                    return [[], []];
                  }
                );

                /**
                 * Reduces `collection` to a value which is the accumulated result of running
                 * each element in `collection` thru `iteratee`, where each successive
                 * invocation is supplied the return value of the previous. If `accumulator`
                 * is not given, the first element of `collection` is used as the initial
                 * value. The iteratee is invoked with four arguments:
                 * (accumulator, value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.reduce`, `_.reduceRight`, and `_.transform`.
                 *
                 * The guarded methods are:
                 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                 * and `sortBy`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduceRight
                 * @example
                 *
                 * _.reduce([1, 2], function(sum, n) {
                 *   return sum + n;
                 * }, 0);
                 * // => 3
                 *
                 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                 *   (result[value] || (result[value] = [])).push(key);
                 *   return result;
                 * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                 */
                function reduce(collection, iteratee, accumulator) {
                  var func = isArray(collection) ? arrayReduce : baseReduce,
                    initAccum = arguments.length < 3;

                  return func(
                    collection,
                    getIteratee(iteratee, 4),
                    accumulator,
                    initAccum,
                    baseEach
                  );
                }

                /**
                 * This method is like `_.reduce` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduce
                 * @example
                 *
                 * var array = [[0, 1], [2, 3], [4, 5]];
                 *
                 * _.reduceRight(array, function(flattened, other) {
                 *   return flattened.concat(other);
                 * }, []);
                 * // => [4, 5, 2, 3, 0, 1]
                 */
                function reduceRight(collection, iteratee, accumulator) {
                  var func = isArray(collection)
                      ? arrayReduceRight
                      : baseReduce,
                    initAccum = arguments.length < 3;

                  return func(
                    collection,
                    getIteratee(iteratee, 4),
                    accumulator,
                    initAccum,
                    baseEachRight
                  );
                }

                /**
                 * The opposite of `_.filter`; this method returns the elements of `collection`
                 * that `predicate` does **not** return truthy for.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.filter
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': true }
                 * ];
                 *
                 * _.reject(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.reject(users, { 'age': 40, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.reject(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.reject(users, 'active');
                 * // => objects for ['barney']
                 */
                function reject(collection, predicate) {
                  var func = isArray(collection) ? arrayFilter : baseFilter;
                  return func(collection, negate(getIteratee(predicate, 3)));
                }

                /**
                 * Gets a random element from `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 * @example
                 *
                 * _.sample([1, 2, 3, 4]);
                 * // => 2
                 */
                function sample(collection) {
                  var func = isArray(collection) ? arraySample : baseSample;
                  return func(collection);
                }

                /**
                 * Gets `n` random elements at unique keys from `collection` up to the
                 * size of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} [n=1] The number of elements to sample.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the random elements.
                 * @example
                 *
                 * _.sampleSize([1, 2, 3], 2);
                 * // => [3, 1]
                 *
                 * _.sampleSize([1, 2, 3], 4);
                 * // => [2, 3, 1]
                 */
                function sampleSize(collection, n, guard) {
                  if (
                    guard
                      ? isIterateeCall(collection, n, guard)
                      : n === undefined
                  ) {
                    n = 1;
                  } else {
                    n = toInteger(n);
                  }
                  var func = isArray(collection)
                    ? arraySampleSize
                    : baseSampleSize;
                  return func(collection, n);
                }

                /**
                 * Creates an array of shuffled values, using a version of the
                 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 * @example
                 *
                 * _.shuffle([1, 2, 3, 4]);
                 * // => [4, 1, 3, 2]
                 */
                function shuffle(collection) {
                  var func = isArray(collection) ? arrayShuffle : baseShuffle;
                  return func(collection);
                }

                /**
                 * Gets the size of `collection` by returning its length for array-like
                 * values or the number of own enumerable string keyed properties for objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @returns {number} Returns the collection size.
                 * @example
                 *
                 * _.size([1, 2, 3]);
                 * // => 3
                 *
                 * _.size({ 'a': 1, 'b': 2 });
                 * // => 2
                 *
                 * _.size('pebbles');
                 * // => 7
                 */
                function size(collection) {
                  if (collection == null) {
                    return 0;
                  }
                  if (isArrayLike(collection)) {
                    return isString(collection)
                      ? stringSize(collection)
                      : collection.length;
                  }
                  var tag = getTag(collection);
                  if (tag == mapTag || tag == setTag) {
                    return collection.size;
                  }
                  return baseKeys(collection).length;
                }

                /**
                 * Checks if `predicate` returns truthy for **any** element of `collection`.
                 * Iteration is stopped once `predicate` returns truthy. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.some([null, 0, 'yes', false], Boolean);
                 * // => true
                 *
                 * var users = [
                 *   { 'user': 'barney', 'active': true },
                 *   { 'user': 'fred',   'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.some(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.some(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.some(users, 'active');
                 * // => true
                 */
                function some(collection, predicate, guard) {
                  var func = isArray(collection) ? arraySome : baseSome;
                  if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined;
                  }
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Creates an array of elements, sorted in ascending order by the results of
                 * running each element in a collection thru each iteratee. This method
                 * performs a stable sort, that is, it preserves the original sort order of
                 * equal elements. The iteratees are invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 30 },
                 *   { 'user': 'barney', 'age': 34 }
                 * ];
                 *
                 * _.sortBy(users, [function(o) { return o.user; }]);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
                 *
                 * _.sortBy(users, ['user', 'age']);
                 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
                 */
                var sortBy = baseRest(function(collection, iteratees) {
                  if (collection == null) {
                    return [];
                  }
                  var length = iteratees.length;
                  if (
                    length > 1 &&
                    isIterateeCall(collection, iteratees[0], iteratees[1])
                  ) {
                    iteratees = [];
                  } else if (
                    length > 2 &&
                    isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
                  ) {
                    iteratees = [iteratees[0]];
                  }
                  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Gets the timestamp of the number of milliseconds that have elapsed since
                 * the Unix epoch (1 January 1970 00:00:00 UTC).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Date
                 * @returns {number} Returns the timestamp.
                 * @example
                 *
                 * _.defer(function(stamp) {
                 *   console.log(_.now() - stamp);
                 * }, _.now());
                 * // => Logs the number of milliseconds it took for the deferred invocation.
                 */
                var now =
                  ctxNow ||
                  function() {
                    return root.Date.now();
                  };

                /*------------------------------------------------------------------------*/

                /**
                 * The opposite of `_.before`; this method creates a function that invokes
                 * `func` once it's called `n` or more times.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {number} n The number of calls before `func` is invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var saves = ['profile', 'settings'];
                 *
                 * var done = _.after(saves.length, function() {
                 *   console.log('done saving!');
                 * });
                 *
                 * _.forEach(saves, function(type) {
                 *   asyncSave({ 'type': type, 'complete': done });
                 * });
                 * // => Logs 'done saving!' after the two async saves have completed.
                 */
                function after(n, func) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  n = toInteger(n);
                  return function() {
                    if (--n < 1) {
                      return func.apply(this, arguments);
                    }
                  };
                }

                /**
                 * Creates a function that invokes `func`, with up to `n` arguments,
                 * ignoring any additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @param {number} [n=func.length] The arity cap.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                 * // => [6, 8, 10]
                 */
                function ary(func, n, guard) {
                  n = guard ? undefined : n;
                  n = func && n == null ? func.length : n;
                  return createWrap(
                    func,
                    WRAP_ARY_FLAG,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    n
                  );
                }

                /**
                 * Creates a function that invokes `func`, with the `this` binding and arguments
                 * of the created function, while it's called less than `n` times. Subsequent
                 * calls to the created function return the result of the last `func` invocation.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {number} n The number of calls at which `func` is no longer invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * jQuery(element).on('click', _.before(5, addContactToList));
                 * // => Allows adding up to 4 contacts to the list.
                 */
                function before(n, func) {
                  var result;
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  n = toInteger(n);
                  return function() {
                    if (--n > 0) {
                      result = func.apply(this, arguments);
                    }
                    if (n <= 1) {
                      func = undefined;
                    }
                    return result;
                  };
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of `thisArg`
                 * and `partials` prepended to the arguments it receives.
                 *
                 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                 * property of bound functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to bind.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * function greet(greeting, punctuation) {
                 *   return greeting + ' ' + this.user + punctuation;
                 * }
                 *
                 * var object = { 'user': 'fred' };
                 *
                 * var bound = _.bind(greet, object, 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bind(greet, object, _, '!');
                 * bound('hi');
                 * // => 'hi fred!'
                 */
                var bind = baseRest(function(func, thisArg, partials) {
                  var bitmask = WRAP_BIND_FLAG;
                  if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bind));
                    bitmask |= WRAP_PARTIAL_FLAG;
                  }
                  return createWrap(func, bitmask, thisArg, partials, holders);
                });

                /**
                 * Creates a function that invokes the method at `object[key]` with `partials`
                 * prepended to the arguments it receives.
                 *
                 * This method differs from `_.bind` by allowing bound functions to reference
                 * methods that may be redefined or don't yet exist. See
                 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                 * for more details.
                 *
                 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Function
                 * @param {Object} object The object to invoke the method on.
                 * @param {string} key The key of the method.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * var object = {
                 *   'user': 'fred',
                 *   'greet': function(greeting, punctuation) {
                 *     return greeting + ' ' + this.user + punctuation;
                 *   }
                 * };
                 *
                 * var bound = _.bindKey(object, 'greet', 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * object.greet = function(greeting, punctuation) {
                 *   return greeting + 'ya ' + this.user + punctuation;
                 * };
                 *
                 * bound('!');
                 * // => 'hiya fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bindKey(object, 'greet', _, '!');
                 * bound('hi');
                 * // => 'hiya fred!'
                 */
                var bindKey = baseRest(function(object, key, partials) {
                  var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                  if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bindKey));
                    bitmask |= WRAP_PARTIAL_FLAG;
                  }
                  return createWrap(key, bitmask, object, partials, holders);
                });

                /**
                 * Creates a function that accepts arguments of `func` and either invokes
                 * `func` returning its result, if at least `arity` number of arguments have
                 * been provided, or returns a function that accepts the remaining `func`
                 * arguments, and so on. The arity of `func` may be specified if `func.length`
                 * is not sufficient.
                 *
                 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
                 *   return [a, b, c];
                 * };
                 *
                 * var curried = _.curry(abc);
                 *
                 * curried(1)(2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(1)(_, 3)(2);
                 * // => [1, 2, 3]
                 */
                function curry(func, arity, guard) {
                  arity = guard ? undefined : arity;
                  var result = createWrap(
                    func,
                    WRAP_CURRY_FLAG,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    arity
                  );
                  result.placeholder = curry.placeholder;
                  return result;
                }

                /**
                 * This method is like `_.curry` except that arguments are applied to `func`
                 * in the manner of `_.partialRight` instead of `_.partial`.
                 *
                 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
                 *   return [a, b, c];
                 * };
                 *
                 * var curried = _.curryRight(abc);
                 *
                 * curried(3)(2)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(2, 3)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(3)(1, _)(2);
                 * // => [1, 2, 3]
                 */
                function curryRight(func, arity, guard) {
                  arity = guard ? undefined : arity;
                  var result = createWrap(
                    func,
                    WRAP_CURRY_RIGHT_FLAG,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    arity
                  );
                  result.placeholder = curryRight.placeholder;
                  return result;
                }

                /**
                 * Creates a debounced function that delays invoking `func` until after `wait`
                 * milliseconds have elapsed since the last time the debounced function was
                 * invoked. The debounced function comes with a `cancel` method to cancel
                 * delayed `func` invocations and a `flush` method to immediately invoke them.
                 * Provide `options` to indicate whether `func` should be invoked on the
                 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                 * with the last arguments provided to the debounced function. Subsequent
                 * calls to the debounced function return the result of the last `func`
                 * invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the debounced function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.debounce` and `_.throttle`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to debounce.
                 * @param {number} [wait=0] The number of milliseconds to delay.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=false]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {number} [options.maxWait]
                 *  The maximum time `func` is allowed to be delayed before it's invoked.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new debounced function.
                 * @example
                 *
                 * // Avoid costly calculations while the window size is in flux.
                 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                 *
                 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                 * jQuery(element).on('click', _.debounce(sendMail, 300, {
                 *   'leading': true,
                 *   'trailing': false
                 * }));
                 *
                 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                 * var source = new EventSource('/stream');
                 * jQuery(source).on('message', debounced);
                 *
                 * // Cancel the trailing debounced invocation.
                 * jQuery(window).on('popstate', debounced.cancel);
                 */
                function debounce(func, wait, options) {
                  var lastArgs,
                    lastThis,
                    maxWait,
                    result,
                    timerId,
                    lastCallTime,
                    lastInvokeTime = 0,
                    leading = false,
                    maxing = false,
                    trailing = true;

                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  wait = toNumber(wait) || 0;
                  if (isObject(options)) {
                    leading = !!options.leading;
                    maxing = 'maxWait' in options;
                    maxWait = maxing
                      ? nativeMax(toNumber(options.maxWait) || 0, wait)
                      : maxWait;
                    trailing =
                      'trailing' in options ? !!options.trailing : trailing;
                  }

                  function invokeFunc(time) {
                    var args = lastArgs,
                      thisArg = lastThis;

                    lastArgs = lastThis = undefined;
                    lastInvokeTime = time;
                    result = func.apply(thisArg, args);
                    return result;
                  }

                  function leadingEdge(time) {
                    // Reset any `maxWait` timer.
                    lastInvokeTime = time;
                    // Start the timer for the trailing edge.
                    timerId = setTimeout(timerExpired, wait);
                    // Invoke the leading edge.
                    return leading ? invokeFunc(time) : result;
                  }

                  function remainingWait(time) {
                    var timeSinceLastCall = time - lastCallTime,
                      timeSinceLastInvoke = time - lastInvokeTime,
                      timeWaiting = wait - timeSinceLastCall;

                    return maxing
                      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                      : timeWaiting;
                  }

                  function shouldInvoke(time) {
                    var timeSinceLastCall = time - lastCallTime,
                      timeSinceLastInvoke = time - lastInvokeTime;

                    // Either this is the first call, activity has stopped and we're at the
                    // trailing edge, the system time has gone backwards and we're treating
                    // it as the trailing edge, or we've hit the `maxWait` limit.
                    return (
                      lastCallTime === undefined ||
                      timeSinceLastCall >= wait ||
                      timeSinceLastCall < 0 ||
                      (maxing && timeSinceLastInvoke >= maxWait)
                    );
                  }

                  function timerExpired() {
                    var time = now();
                    if (shouldInvoke(time)) {
                      return trailingEdge(time);
                    }
                    // Restart the timer.
                    timerId = setTimeout(timerExpired, remainingWait(time));
                  }

                  function trailingEdge(time) {
                    timerId = undefined;

                    // Only invoke if we have `lastArgs` which means `func` has been
                    // debounced at least once.
                    if (trailing && lastArgs) {
                      return invokeFunc(time);
                    }
                    lastArgs = lastThis = undefined;
                    return result;
                  }

                  function cancel() {
                    if (timerId !== undefined) {
                      clearTimeout(timerId);
                    }
                    lastInvokeTime = 0;
                    lastArgs = lastCallTime = lastThis = timerId = undefined;
                  }

                  function flush() {
                    return timerId === undefined ? result : trailingEdge(now());
                  }

                  function debounced() {
                    var time = now(),
                      isInvoking = shouldInvoke(time);

                    lastArgs = arguments;
                    lastThis = this;
                    lastCallTime = time;

                    if (isInvoking) {
                      if (timerId === undefined) {
                        return leadingEdge(lastCallTime);
                      }
                      if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                      }
                    }
                    if (timerId === undefined) {
                      timerId = setTimeout(timerExpired, wait);
                    }
                    return result;
                  }
                  debounced.cancel = cancel;
                  debounced.flush = flush;
                  return debounced;
                }

                /**
                 * Defers invoking the `func` until the current call stack has cleared. Any
                 * additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to defer.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.defer(function(text) {
                 *   console.log(text);
                 * }, 'deferred');
                 * // => Logs 'deferred' after one millisecond.
                 */
                var defer = baseRest(function(func, args) {
                  return baseDelay(func, 1, args);
                });

                /**
                 * Invokes `func` after `wait` milliseconds. Any additional arguments are
                 * provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.delay(function(text) {
                 *   console.log(text);
                 * }, 1000, 'later');
                 * // => Logs 'later' after one second.
                 */
                var delay = baseRest(function(func, wait, args) {
                  return baseDelay(func, toNumber(wait) || 0, args);
                });

                /**
                 * Creates a function that invokes `func` with arguments reversed.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to flip arguments for.
                 * @returns {Function} Returns the new flipped function.
                 * @example
                 *
                 * var flipped = _.flip(function() {
                 *   return _.toArray(arguments);
                 * });
                 *
                 * flipped('a', 'b', 'c', 'd');
                 * // => ['d', 'c', 'b', 'a']
                 */
                function flip(func) {
                  return createWrap(func, WRAP_FLIP_FLAG);
                }

                /**
                 * Creates a function that memoizes the result of `func`. If `resolver` is
                 * provided, it determines the cache key for storing the result based on the
                 * arguments provided to the memoized function. By default, the first argument
                 * provided to the memoized function is used as the map cache key. The `func`
                 * is invoked with the `this` binding of the memoized function.
                 *
                 * **Note:** The cache is exposed as the `cache` property on the memoized
                 * function. Its creation may be customized by replacing the `_.memoize.Cache`
                 * constructor with one whose instances implement the
                 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to have its output memoized.
                 * @param {Function} [resolver] The function to resolve the cache key.
                 * @returns {Function} Returns the new memoized function.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 * var other = { 'c': 3, 'd': 4 };
                 *
                 * var values = _.memoize(_.values);
                 * values(object);
                 * // => [1, 2]
                 *
                 * values(other);
                 * // => [3, 4]
                 *
                 * object.a = 2;
                 * values(object);
                 * // => [1, 2]
                 *
                 * // Modify the result cache.
                 * values.cache.set(object, ['a', 'b']);
                 * values(object);
                 * // => ['a', 'b']
                 *
                 * // Replace `_.memoize.Cache`.
                 * _.memoize.Cache = WeakMap;
                 */
                function memoize(func, resolver) {
                  if (
                    typeof func != 'function' ||
                    (resolver != null && typeof resolver != 'function')
                  ) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  var memoized = function() {
                    var args = arguments,
                      key = resolver ? resolver.apply(this, args) : args[0],
                      cache = memoized.cache;

                    if (cache.has(key)) {
                      return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                  };
                  memoized.cache = new (memoize.Cache || MapCache)();
                  return memoized;
                }

                // Expose `MapCache`.
                memoize.Cache = MapCache;

                /**
                 * Creates a function that negates the result of the predicate `func`. The
                 * `func` predicate is invoked with the `this` binding and arguments of the
                 * created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} predicate The predicate to negate.
                 * @returns {Function} Returns the new negated function.
                 * @example
                 *
                 * function isEven(n) {
                 *   return n % 2 == 0;
                 * }
                 *
                 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                 * // => [1, 3, 5]
                 */
                function negate(predicate) {
                  if (typeof predicate != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return function() {
                    var args = arguments;
                    switch (args.length) {
                      case 0:
                        return !predicate.call(this);
                      case 1:
                        return !predicate.call(this, args[0]);
                      case 2:
                        return !predicate.call(this, args[0], args[1]);
                      case 3:
                        return !predicate.call(this, args[0], args[1], args[2]);
                    }
                    return !predicate.apply(this, args);
                  };
                }

                /**
                 * Creates a function that is restricted to invoking `func` once. Repeat calls
                 * to the function return the value of the first invocation. The `func` is
                 * invoked with the `this` binding and arguments of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var initialize = _.once(createApplication);
                 * initialize();
                 * initialize();
                 * // => `createApplication` is invoked once
                 */
                function once(func) {
                  return before(2, func);
                }

                /**
                 * Creates a function that invokes `func` with its arguments transformed.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Function
                 * @param {Function} func The function to wrap.
                 * @param {...(Function|Function[])} [transforms=[_.identity]]
                 *  The argument transforms.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * function doubled(n) {
                 *   return n * 2;
                 * }
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var func = _.overArgs(function(x, y) {
                 *   return [x, y];
                 * }, [square, doubled]);
                 *
                 * func(9, 3);
                 * // => [81, 6]
                 *
                 * func(10, 5);
                 * // => [100, 10]
                 */
                var overArgs = castRest(function(func, transforms) {
                  transforms =
                    transforms.length == 1 && isArray(transforms[0])
                      ? arrayMap(transforms[0], baseUnary(getIteratee()))
                      : arrayMap(
                          baseFlatten(transforms, 1),
                          baseUnary(getIteratee())
                        );

                  var funcsLength = transforms.length;
                  return baseRest(function(args) {
                    var index = -1,
                      length = nativeMin(args.length, funcsLength);

                    while (++index < length) {
                      args[index] = transforms[index].call(this, args[index]);
                    }
                    return apply(func, this, args);
                  });
                });

                /**
                 * Creates a function that invokes `func` with `partials` prepended to the
                 * arguments it receives. This method is like `_.bind` except it does **not**
                 * alter the `this` binding.
                 *
                 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.2.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
                 *   return greeting + ' ' + name;
                 * }
                 *
                 * var sayHelloTo = _.partial(greet, 'hello');
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 *
                 * // Partially applied with placeholders.
                 * var greetFred = _.partial(greet, _, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 */
                var partial = baseRest(function(func, partials) {
                  var holders = replaceHolders(partials, getHolder(partial));
                  return createWrap(
                    func,
                    WRAP_PARTIAL_FLAG,
                    undefined,
                    partials,
                    holders
                  );
                });

                /**
                 * This method is like `_.partial` except that partially applied arguments
                 * are appended to the arguments it receives.
                 *
                 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
                 *   return greeting + ' ' + name;
                 * }
                 *
                 * var greetFred = _.partialRight(greet, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 *
                 * // Partially applied with placeholders.
                 * var sayHelloTo = _.partialRight(greet, 'hello', _);
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 */
                var partialRight = baseRest(function(func, partials) {
                  var holders = replaceHolders(
                    partials,
                    getHolder(partialRight)
                  );
                  return createWrap(
                    func,
                    WRAP_PARTIAL_RIGHT_FLAG,
                    undefined,
                    partials,
                    holders
                  );
                });

                /**
                 * Creates a function that invokes `func` with arguments arranged according
                 * to the specified `indexes` where the argument value at the first index is
                 * provided as the first argument, the argument value at the second index is
                 * provided as the second argument, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to rearrange arguments for.
                 * @param {...(number|number[])} indexes The arranged argument indexes.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var rearged = _.rearg(function(a, b, c) {
                 *   return [a, b, c];
                 * }, [2, 0, 1]);
                 *
                 * rearged('b', 'c', 'a')
                 * // => ['a', 'b', 'c']
                 */
                var rearg = flatRest(function(func, indexes) {
                  return createWrap(
                    func,
                    WRAP_REARG_FLAG,
                    undefined,
                    undefined,
                    undefined,
                    indexes
                  );
                });

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * created function and arguments from `start` and beyond provided as
                 * an array.
                 *
                 * **Note:** This method is based on the
                 * [rest parameter](https://mdn.io/rest_parameters).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.rest(function(what, names) {
                 *   return what + ' ' + _.initial(names).join(', ') +
                 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
                 * });
                 *
                 * say('hello', 'fred', 'barney', 'pebbles');
                 * // => 'hello fred, barney, & pebbles'
                 */
                function rest(func, start) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  start = start === undefined ? start : toInteger(start);
                  return baseRest(func, start);
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * create function and an array of arguments much like
                 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                 *
                 * **Note:** This method is based on the
                 * [spread operator](https://mdn.io/spread_operator).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Function
                 * @param {Function} func The function to spread arguments over.
                 * @param {number} [start=0] The start position of the spread.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.spread(function(who, what) {
                 *   return who + ' says ' + what;
                 * });
                 *
                 * say(['fred', 'hello']);
                 * // => 'fred says hello'
                 *
                 * var numbers = Promise.all([
                 *   Promise.resolve(40),
                 *   Promise.resolve(36)
                 * ]);
                 *
                 * numbers.then(_.spread(function(x, y) {
                 *   return x + y;
                 * }));
                 * // => a Promise of 76
                 */
                function spread(func, start) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  start = start == null ? 0 : nativeMax(toInteger(start), 0);
                  return baseRest(function(args) {
                    var array = args[start],
                      otherArgs = castSlice(args, 0, start);

                    if (array) {
                      arrayPush(otherArgs, array);
                    }
                    return apply(func, this, otherArgs);
                  });
                }

                /**
                 * Creates a throttled function that only invokes `func` at most once per
                 * every `wait` milliseconds. The throttled function comes with a `cancel`
                 * method to cancel delayed `func` invocations and a `flush` method to
                 * immediately invoke them. Provide `options` to indicate whether `func`
                 * should be invoked on the leading and/or trailing edge of the `wait`
                 * timeout. The `func` is invoked with the last arguments provided to the
                 * throttled function. Subsequent calls to the throttled function return the
                 * result of the last `func` invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the throttled function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.throttle` and `_.debounce`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to throttle.
                 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=true]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new throttled function.
                 * @example
                 *
                 * // Avoid excessively updating the position while scrolling.
                 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                 *
                 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                 * jQuery(element).on('click', throttled);
                 *
                 * // Cancel the trailing throttled invocation.
                 * jQuery(window).on('popstate', throttled.cancel);
                 */
                function throttle(func, wait, options) {
                  var leading = true,
                    trailing = true;

                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (isObject(options)) {
                    leading =
                      'leading' in options ? !!options.leading : leading;
                    trailing =
                      'trailing' in options ? !!options.trailing : trailing;
                  }
                  return debounce(func, wait, {
                    leading: leading,
                    maxWait: wait,
                    trailing: trailing,
                  });
                }

                /**
                 * Creates a function that accepts up to one argument, ignoring any
                 * additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.unary(parseInt));
                 * // => [6, 8, 10]
                 */
                function unary(func) {
                  return ary(func, 1);
                }

                /**
                 * Creates a function that provides `value` to `wrapper` as its first
                 * argument. Any additional arguments provided to the function are appended
                 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                 * binding of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {*} value The value to wrap.
                 * @param {Function} [wrapper=identity] The wrapper function.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var p = _.wrap(_.escape, function(func, text) {
                 *   return '<p>' + func(text) + '</p>';
                 * });
                 *
                 * p('fred, barney, & pebbles');
                 * // => '<p>fred, barney, &amp; pebbles</p>'
                 */
                function wrap(value, wrapper) {
                  return partial(castFunction(wrapper), value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Casts `value` as an array if it's not one.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Lang
                 * @param {*} value The value to inspect.
                 * @returns {Array} Returns the cast array.
                 * @example
                 *
                 * _.castArray(1);
                 * // => [1]
                 *
                 * _.castArray({ 'a': 1 });
                 * // => [{ 'a': 1 }]
                 *
                 * _.castArray('abc');
                 * // => ['abc']
                 *
                 * _.castArray(null);
                 * // => [null]
                 *
                 * _.castArray(undefined);
                 * // => [undefined]
                 *
                 * _.castArray();
                 * // => []
                 *
                 * var array = [1, 2, 3];
                 * console.log(_.castArray(array) === array);
                 * // => true
                 */
                function castArray() {
                  if (!arguments.length) {
                    return [];
                  }
                  var value = arguments[0];
                  return isArray(value) ? value : [value];
                }

                /**
                 * Creates a shallow clone of `value`.
                 *
                 * **Note:** This method is loosely based on the
                 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                 * and supports cloning arrays, array buffers, booleans, date objects, maps,
                 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                 * arrays. The own enumerable properties of `arguments` objects are cloned
                 * as plain objects. An empty object is returned for uncloneable values such
                 * as error objects, functions, DOM nodes, and WeakMaps.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeep
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var shallow = _.clone(objects);
                 * console.log(shallow[0] === objects[0]);
                 * // => true
                 */
                function clone(value) {
                  return baseClone(value, CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.clone` except that it accepts `customizer` which
                 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                 * cloning is handled by the method instead. The `customizer` is invoked with
                 * up to four arguments; (value [, index|key, object, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeepWith
                 * @example
                 *
                 * function customizer(value) {
                 *   if (_.isElement(value)) {
                 *     return value.cloneNode(false);
                 *   }
                 * }
                 *
                 * var el = _.cloneWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 0
                 */
                function cloneWith(value, customizer) {
                  customizer =
                    typeof customizer == 'function' ? customizer : undefined;
                  return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                }

                /**
                 * This method is like `_.clone` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.clone
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var deep = _.cloneDeep(objects);
                 * console.log(deep[0] === objects[0]);
                 * // => false
                 */
                function cloneDeep(value) {
                  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.cloneWith` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.cloneWith
                 * @example
                 *
                 * function customizer(value) {
                 *   if (_.isElement(value)) {
                 *     return value.cloneNode(true);
                 *   }
                 * }
                 *
                 * var el = _.cloneDeepWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 20
                 */
                function cloneDeepWith(value, customizer) {
                  customizer =
                    typeof customizer == 'function' ? customizer : undefined;
                  return baseClone(
                    value,
                    CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
                    customizer
                  );
                }

                /**
                 * Checks if `object` conforms to `source` by invoking the predicate
                 * properties of `source` with the corresponding property values of `object`.
                 *
                 * **Note:** This method is equivalent to `_.conforms` when `source` is
                 * partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                 * // => true
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                 * // => false
                 */
                function conformsTo(object, source) {
                  return (
                    source == null ||
                    baseConformsTo(object, source, keys(source))
                  );
                }

                /**
                 * Performs a
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * comparison between two values to determine if they are equivalent.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.eq(object, object);
                 * // => true
                 *
                 * _.eq(object, other);
                 * // => false
                 *
                 * _.eq('a', 'a');
                 * // => true
                 *
                 * _.eq('a', Object('a'));
                 * // => false
                 *
                 * _.eq(NaN, NaN);
                 * // => true
                 */
                function eq(value, other) {
                  return (
                    value === other || (value !== value && other !== other)
                  );
                }

                /**
                 * Checks if `value` is greater than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 * @see _.lt
                 * @example
                 *
                 * _.gt(3, 1);
                 * // => true
                 *
                 * _.gt(3, 3);
                 * // => false
                 *
                 * _.gt(1, 3);
                 * // => false
                 */
                var gt = createRelationalOperation(baseGt);

                /**
                 * Checks if `value` is greater than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than or equal to
                 *  `other`, else `false`.
                 * @see _.lte
                 * @example
                 *
                 * _.gte(3, 1);
                 * // => true
                 *
                 * _.gte(3, 3);
                 * // => true
                 *
                 * _.gte(1, 3);
                 * // => false
                 */
                var gte = createRelationalOperation(function(value, other) {
                  return value >= other;
                });

                /**
                 * Checks if `value` is likely an `arguments` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArguments(function() { return arguments; }());
                 * // => true
                 *
                 * _.isArguments([1, 2, 3]);
                 * // => false
                 */
                var isArguments = baseIsArguments(
                  (function() {
                    return arguments;
                  })()
                )
                  ? baseIsArguments
                  : function(value) {
                      return (
                        isObjectLike(value) &&
                        hasOwnProperty.call(value, 'callee') &&
                        !propertyIsEnumerable.call(value, 'callee')
                      );
                    };

                /**
                 * Checks if `value` is classified as an `Array` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                 * @example
                 *
                 * _.isArray([1, 2, 3]);
                 * // => true
                 *
                 * _.isArray(document.body.children);
                 * // => false
                 *
                 * _.isArray('abc');
                 * // => false
                 *
                 * _.isArray(_.noop);
                 * // => false
                 */
                var isArray = Array.isArray;

                /**
                 * Checks if `value` is classified as an `ArrayBuffer` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 * @example
                 *
                 * _.isArrayBuffer(new ArrayBuffer(2));
                 * // => true
                 *
                 * _.isArrayBuffer(new Array(2));
                 * // => false
                 */
                var isArrayBuffer = nodeIsArrayBuffer
                  ? baseUnary(nodeIsArrayBuffer)
                  : baseIsArrayBuffer;

                /**
                 * Checks if `value` is array-like. A value is considered array-like if it's
                 * not a function and has a `value.length` that's an integer greater than or
                 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                 * @example
                 *
                 * _.isArrayLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLike(document.body.children);
                 * // => true
                 *
                 * _.isArrayLike('abc');
                 * // => true
                 *
                 * _.isArrayLike(_.noop);
                 * // => false
                 */
                function isArrayLike(value) {
                  return (
                    value != null &&
                    isLength(value.length) &&
                    !isFunction(value)
                  );
                }

                /**
                 * This method is like `_.isArrayLike` except that it also checks if `value`
                 * is an object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array-like object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArrayLikeObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLikeObject(document.body.children);
                 * // => true
                 *
                 * _.isArrayLikeObject('abc');
                 * // => false
                 *
                 * _.isArrayLikeObject(_.noop);
                 * // => false
                 */
                function isArrayLikeObject(value) {
                  return isObjectLike(value) && isArrayLike(value);
                }

                /**
                 * Checks if `value` is classified as a boolean primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                 * @example
                 *
                 * _.isBoolean(false);
                 * // => true
                 *
                 * _.isBoolean(null);
                 * // => false
                 */
                function isBoolean(value) {
                  return (
                    value === true ||
                    value === false ||
                    (isObjectLike(value) && baseGetTag(value) == boolTag)
                  );
                }

                /**
                 * Checks if `value` is a buffer.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                 * @example
                 *
                 * _.isBuffer(new Buffer(2));
                 * // => true
                 *
                 * _.isBuffer(new Uint8Array(2));
                 * // => false
                 */
                var isBuffer = nativeIsBuffer || stubFalse;

                /**
                 * Checks if `value` is classified as a `Date` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 * @example
                 *
                 * _.isDate(new Date);
                 * // => true
                 *
                 * _.isDate('Mon April 23 2012');
                 * // => false
                 */
                var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                /**
                 * Checks if `value` is likely a DOM element.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                 * @example
                 *
                 * _.isElement(document.body);
                 * // => true
                 *
                 * _.isElement('<body>');
                 * // => false
                 */
                function isElement(value) {
                  return (
                    isObjectLike(value) &&
                    value.nodeType === 1 &&
                    !isPlainObject(value)
                  );
                }

                /**
                 * Checks if `value` is an empty object, collection, map, or set.
                 *
                 * Objects are considered empty if they have no own enumerable string keyed
                 * properties.
                 *
                 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                 * jQuery-like collections are considered empty if they have a `length` of `0`.
                 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                 * @example
                 *
                 * _.isEmpty(null);
                 * // => true
                 *
                 * _.isEmpty(true);
                 * // => true
                 *
                 * _.isEmpty(1);
                 * // => true
                 *
                 * _.isEmpty([1, 2, 3]);
                 * // => false
                 *
                 * _.isEmpty({ 'a': 1 });
                 * // => false
                 */
                function isEmpty(value) {
                  if (value == null) {
                    return true;
                  }
                  if (
                    isArrayLike(value) &&
                    (isArray(value) ||
                      typeof value == 'string' ||
                      typeof value.splice == 'function' ||
                      isBuffer(value) ||
                      isTypedArray(value) ||
                      isArguments(value))
                  ) {
                    return !value.length;
                  }
                  var tag = getTag(value);
                  if (tag == mapTag || tag == setTag) {
                    return !value.size;
                  }
                  if (isPrototype(value)) {
                    return !baseKeys(value).length;
                  }
                  for (var key in value) {
                    if (hasOwnProperty.call(value, key)) {
                      return false;
                    }
                  }
                  return true;
                }

                /**
                 * Performs a deep comparison between two values to determine if they are
                 * equivalent.
                 *
                 * **Note:** This method supports comparing arrays, array buffers, booleans,
                 * date objects, error objects, maps, numbers, `Object` objects, regexes,
                 * sets, strings, symbols, and typed arrays. `Object` objects are compared
                 * by their own, not inherited, enumerable properties. Functions and DOM
                 * nodes are compared by strict equality, i.e. `===`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.isEqual(object, other);
                 * // => true
                 *
                 * object === other;
                 * // => false
                 */
                function isEqual(value, other) {
                  return baseIsEqual(value, other);
                }

                /**
                 * This method is like `_.isEqual` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with up to
                 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
                 *   return /^h(?:i|ello)$/.test(value);
                 * }
                 *
                 * function customizer(objValue, othValue) {
                 *   if (isGreeting(objValue) && isGreeting(othValue)) {
                 *     return true;
                 *   }
                 * }
                 *
                 * var array = ['hello', 'goodbye'];
                 * var other = ['hi', 'goodbye'];
                 *
                 * _.isEqualWith(array, other, customizer);
                 * // => true
                 */
                function isEqualWith(value, other, customizer) {
                  customizer =
                    typeof customizer == 'function' ? customizer : undefined;
                  var result = customizer
                    ? customizer(value, other)
                    : undefined;
                  return result === undefined
                    ? baseIsEqual(value, other, undefined, customizer)
                    : !!result;
                }

                /**
                 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                 * `SyntaxError`, `TypeError`, or `URIError` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                 * @example
                 *
                 * _.isError(new Error);
                 * // => true
                 *
                 * _.isError(Error);
                 * // => false
                 */
                function isError(value) {
                  if (!isObjectLike(value)) {
                    return false;
                  }
                  var tag = baseGetTag(value);
                  return (
                    tag == errorTag ||
                    tag == domExcTag ||
                    (typeof value.message == 'string' &&
                      typeof value.name == 'string' &&
                      !isPlainObject(value))
                  );
                }

                /**
                 * Checks if `value` is a finite primitive number.
                 *
                 * **Note:** This method is based on
                 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                 * @example
                 *
                 * _.isFinite(3);
                 * // => true
                 *
                 * _.isFinite(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isFinite(Infinity);
                 * // => false
                 *
                 * _.isFinite('3');
                 * // => false
                 */
                function isFinite(value) {
                  return typeof value == 'number' && nativeIsFinite(value);
                }

                /**
                 * Checks if `value` is classified as a `Function` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                 * @example
                 *
                 * _.isFunction(_);
                 * // => true
                 *
                 * _.isFunction(/abc/);
                 * // => false
                 */
                function isFunction(value) {
                  if (!isObject(value)) {
                    return false;
                  }
                  // The use of `Object#toString` avoids issues with the `typeof` operator
                  // in Safari 9 which returns 'object' for typed arrays and other constructors.
                  var tag = baseGetTag(value);
                  return (
                    tag == funcTag ||
                    tag == genTag ||
                    tag == asyncTag ||
                    tag == proxyTag
                  );
                }

                /**
                 * Checks if `value` is an integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                 * @example
                 *
                 * _.isInteger(3);
                 * // => true
                 *
                 * _.isInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isInteger(Infinity);
                 * // => false
                 *
                 * _.isInteger('3');
                 * // => false
                 */
                function isInteger(value) {
                  return typeof value == 'number' && value == toInteger(value);
                }

                /**
                 * Checks if `value` is a valid array-like length.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                 * @example
                 *
                 * _.isLength(3);
                 * // => true
                 *
                 * _.isLength(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isLength(Infinity);
                 * // => false
                 *
                 * _.isLength('3');
                 * // => false
                 */
                function isLength(value) {
                  return (
                    typeof value == 'number' &&
                    value > -1 &&
                    value % 1 == 0 &&
                    value <= MAX_SAFE_INTEGER
                  );
                }

                /**
                 * Checks if `value` is the
                 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                 * @example
                 *
                 * _.isObject({});
                 * // => true
                 *
                 * _.isObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isObject(_.noop);
                 * // => true
                 *
                 * _.isObject(null);
                 * // => false
                 */
                function isObject(value) {
                  var type = typeof value;
                  return (
                    value != null && (type == 'object' || type == 'function')
                  );
                }

                /**
                 * Checks if `value` is object-like. A value is object-like if it's not `null`
                 * and has a `typeof` result of "object".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                 * @example
                 *
                 * _.isObjectLike({});
                 * // => true
                 *
                 * _.isObjectLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isObjectLike(_.noop);
                 * // => false
                 *
                 * _.isObjectLike(null);
                 * // => false
                 */
                function isObjectLike(value) {
                  return value != null && typeof value == 'object';
                }

                /**
                 * Checks if `value` is classified as a `Map` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 * @example
                 *
                 * _.isMap(new Map);
                 * // => true
                 *
                 * _.isMap(new WeakMap);
                 * // => false
                 */
                var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                /**
                 * Performs a partial deep comparison between `object` and `source` to
                 * determine if `object` contains equivalent property values.
                 *
                 * **Note:** This method is equivalent to `_.matches` when `source` is
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.isMatch(object, { 'b': 2 });
                 * // => true
                 *
                 * _.isMatch(object, { 'b': 1 });
                 * // => false
                 */
                function isMatch(object, source) {
                  return (
                    object === source ||
                    baseIsMatch(object, source, getMatchData(source))
                  );
                }

                /**
                 * This method is like `_.isMatch` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with five
                 * arguments: (objValue, srcValue, index|key, object, source).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
                 *   return /^h(?:i|ello)$/.test(value);
                 * }
                 *
                 * function customizer(objValue, srcValue) {
                 *   if (isGreeting(objValue) && isGreeting(srcValue)) {
                 *     return true;
                 *   }
                 * }
                 *
                 * var object = { 'greeting': 'hello' };
                 * var source = { 'greeting': 'hi' };
                 *
                 * _.isMatchWith(object, source, customizer);
                 * // => true
                 */
                function isMatchWith(object, source, customizer) {
                  customizer =
                    typeof customizer == 'function' ? customizer : undefined;
                  return baseIsMatch(
                    object,
                    source,
                    getMatchData(source),
                    customizer
                  );
                }

                /**
                 * Checks if `value` is `NaN`.
                 *
                 * **Note:** This method is based on
                 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                 * `undefined` and other non-number values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                 * @example
                 *
                 * _.isNaN(NaN);
                 * // => true
                 *
                 * _.isNaN(new Number(NaN));
                 * // => true
                 *
                 * isNaN(undefined);
                 * // => true
                 *
                 * _.isNaN(undefined);
                 * // => false
                 */
                function isNaN(value) {
                  // An `NaN` primitive is the only value that is not equal to itself.
                  // Perform the `toStringTag` check first to avoid errors with some
                  // ActiveX objects in IE.
                  return isNumber(value) && value != +value;
                }

                /**
                 * Checks if `value` is a pristine native function.
                 *
                 * **Note:** This method can't reliably detect native functions in the presence
                 * of the core-js package because core-js circumvents this kind of detection.
                 * Despite multiple requests, the core-js maintainer has made it clear: any
                 * attempt to fix the detection will be obstructed. As a result, we're left
                 * with little choice but to throw an error. Unfortunately, this also affects
                 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                 * which rely on core-js.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 * @example
                 *
                 * _.isNative(Array.prototype.push);
                 * // => true
                 *
                 * _.isNative(_);
                 * // => false
                 */
                function isNative(value) {
                  if (isMaskable(value)) {
                    throw new Error(CORE_ERROR_TEXT);
                  }
                  return baseIsNative(value);
                }

                /**
                 * Checks if `value` is `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                 * @example
                 *
                 * _.isNull(null);
                 * // => true
                 *
                 * _.isNull(void 0);
                 * // => false
                 */
                function isNull(value) {
                  return value === null;
                }

                /**
                 * Checks if `value` is `null` or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                 * @example
                 *
                 * _.isNil(null);
                 * // => true
                 *
                 * _.isNil(void 0);
                 * // => true
                 *
                 * _.isNil(NaN);
                 * // => false
                 */
                function isNil(value) {
                  return value == null;
                }

                /**
                 * Checks if `value` is classified as a `Number` primitive or object.
                 *
                 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                 * classified as numbers, use the `_.isFinite` method.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                 * @example
                 *
                 * _.isNumber(3);
                 * // => true
                 *
                 * _.isNumber(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isNumber(Infinity);
                 * // => true
                 *
                 * _.isNumber('3');
                 * // => false
                 */
                function isNumber(value) {
                  return (
                    typeof value == 'number' ||
                    (isObjectLike(value) && baseGetTag(value) == numberTag)
                  );
                }

                /**
                 * Checks if `value` is a plain object, that is, an object created by the
                 * `Object` constructor or one with a `[[Prototype]]` of `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.8.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * _.isPlainObject(new Foo);
                 * // => false
                 *
                 * _.isPlainObject([1, 2, 3]);
                 * // => false
                 *
                 * _.isPlainObject({ 'x': 0, 'y': 0 });
                 * // => true
                 *
                 * _.isPlainObject(Object.create(null));
                 * // => true
                 */
                function isPlainObject(value) {
                  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                  }
                  var proto = getPrototype(value);
                  if (proto === null) {
                    return true;
                  }
                  var Ctor =
                    hasOwnProperty.call(proto, 'constructor') &&
                    proto.constructor;
                  return (
                    typeof Ctor == 'function' &&
                    Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString
                  );
                }

                /**
                 * Checks if `value` is classified as a `RegExp` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 * @example
                 *
                 * _.isRegExp(/abc/);
                 * // => true
                 *
                 * _.isRegExp('/abc/');
                 * // => false
                 */
                var isRegExp = nodeIsRegExp
                  ? baseUnary(nodeIsRegExp)
                  : baseIsRegExp;

                /**
                 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                 * double precision number which isn't the result of a rounded unsafe integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                 * @example
                 *
                 * _.isSafeInteger(3);
                 * // => true
                 *
                 * _.isSafeInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isSafeInteger(Infinity);
                 * // => false
                 *
                 * _.isSafeInteger('3');
                 * // => false
                 */
                function isSafeInteger(value) {
                  return (
                    isInteger(value) &&
                    value >= -MAX_SAFE_INTEGER &&
                    value <= MAX_SAFE_INTEGER
                  );
                }

                /**
                 * Checks if `value` is classified as a `Set` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 * @example
                 *
                 * _.isSet(new Set);
                 * // => true
                 *
                 * _.isSet(new WeakSet);
                 * // => false
                 */
                var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                /**
                 * Checks if `value` is classified as a `String` primitive or object.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                 * @example
                 *
                 * _.isString('abc');
                 * // => true
                 *
                 * _.isString(1);
                 * // => false
                 */
                function isString(value) {
                  return (
                    typeof value == 'string' ||
                    (!isArray(value) &&
                      isObjectLike(value) &&
                      baseGetTag(value) == stringTag)
                  );
                }

                /**
                 * Checks if `value` is classified as a `Symbol` primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                 * @example
                 *
                 * _.isSymbol(Symbol.iterator);
                 * // => true
                 *
                 * _.isSymbol('abc');
                 * // => false
                 */
                function isSymbol(value) {
                  return (
                    typeof value == 'symbol' ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag)
                  );
                }

                /**
                 * Checks if `value` is classified as a typed array.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 * @example
                 *
                 * _.isTypedArray(new Uint8Array);
                 * // => true
                 *
                 * _.isTypedArray([]);
                 * // => false
                 */
                var isTypedArray = nodeIsTypedArray
                  ? baseUnary(nodeIsTypedArray)
                  : baseIsTypedArray;

                /**
                 * Checks if `value` is `undefined`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                 * @example
                 *
                 * _.isUndefined(void 0);
                 * // => true
                 *
                 * _.isUndefined(null);
                 * // => false
                 */
                function isUndefined(value) {
                  return value === undefined;
                }

                /**
                 * Checks if `value` is classified as a `WeakMap` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                 * @example
                 *
                 * _.isWeakMap(new WeakMap);
                 * // => true
                 *
                 * _.isWeakMap(new Map);
                 * // => false
                 */
                function isWeakMap(value) {
                  return isObjectLike(value) && getTag(value) == weakMapTag;
                }

                /**
                 * Checks if `value` is classified as a `WeakSet` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                 * @example
                 *
                 * _.isWeakSet(new WeakSet);
                 * // => true
                 *
                 * _.isWeakSet(new Set);
                 * // => false
                 */
                function isWeakSet(value) {
                  return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                }

                /**
                 * Checks if `value` is less than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 * @see _.gt
                 * @example
                 *
                 * _.lt(1, 3);
                 * // => true
                 *
                 * _.lt(3, 3);
                 * // => false
                 *
                 * _.lt(3, 1);
                 * // => false
                 */
                var lt = createRelationalOperation(baseLt);

                /**
                 * Checks if `value` is less than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than or equal to
                 *  `other`, else `false`.
                 * @see _.gte
                 * @example
                 *
                 * _.lte(1, 3);
                 * // => true
                 *
                 * _.lte(3, 3);
                 * // => true
                 *
                 * _.lte(3, 1);
                 * // => false
                 */
                var lte = createRelationalOperation(function(value, other) {
                  return value <= other;
                });

                /**
                 * Converts `value` to an array.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the converted array.
                 * @example
                 *
                 * _.toArray({ 'a': 1, 'b': 2 });
                 * // => [1, 2]
                 *
                 * _.toArray('abc');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toArray(1);
                 * // => []
                 *
                 * _.toArray(null);
                 * // => []
                 */
                function toArray(value) {
                  if (!value) {
                    return [];
                  }
                  if (isArrayLike(value)) {
                    return isString(value)
                      ? stringToArray(value)
                      : copyArray(value);
                  }
                  if (symIterator && value[symIterator]) {
                    return iteratorToArray(value[symIterator]());
                  }
                  var tag = getTag(value),
                    func =
                      tag == mapTag
                        ? mapToArray
                        : tag == setTag
                        ? setToArray
                        : values;

                  return func(value);
                }

                /**
                 * Converts `value` to a finite number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.12.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted number.
                 * @example
                 *
                 * _.toFinite(3.2);
                 * // => 3.2
                 *
                 * _.toFinite(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toFinite(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toFinite('3.2');
                 * // => 3.2
                 */
                function toFinite(value) {
                  if (!value) {
                    return value === 0 ? value : 0;
                  }
                  value = toNumber(value);
                  if (value === INFINITY || value === -INFINITY) {
                    var sign = value < 0 ? -1 : 1;
                    return sign * MAX_INTEGER;
                  }
                  return value === value ? value : 0;
                }

                /**
                 * Converts `value` to an integer.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toInteger(3.2);
                 * // => 3
                 *
                 * _.toInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toInteger(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toInteger('3.2');
                 * // => 3
                 */
                function toInteger(value) {
                  var result = toFinite(value),
                    remainder = result % 1;

                  return result === result
                    ? remainder
                      ? result - remainder
                      : result
                    : 0;
                }

                /**
                 * Converts `value` to an integer suitable for use as the length of an
                 * array-like object.
                 *
                 * **Note:** This method is based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toLength(3.2);
                 * // => 3
                 *
                 * _.toLength(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toLength(Infinity);
                 * // => 4294967295
                 *
                 * _.toLength('3.2');
                 * // => 3
                 */
                function toLength(value) {
                  return value
                    ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH)
                    : 0;
                }

                /**
                 * Converts `value` to a number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 * @example
                 *
                 * _.toNumber(3.2);
                 * // => 3.2
                 *
                 * _.toNumber(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toNumber(Infinity);
                 * // => Infinity
                 *
                 * _.toNumber('3.2');
                 * // => 3.2
                 */
                function toNumber(value) {
                  if (typeof value == 'number') {
                    return value;
                  }
                  if (isSymbol(value)) {
                    return NAN;
                  }
                  if (isObject(value)) {
                    var other =
                      typeof value.valueOf == 'function'
                        ? value.valueOf()
                        : value;
                    value = isObject(other) ? other + '' : other;
                  }
                  if (typeof value != 'string') {
                    return value === 0 ? value : +value;
                  }
                  value = baseTrim(value);
                  var isBinary = reIsBinary.test(value);
                  return isBinary || reIsOctal.test(value)
                    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                    : reIsBadHex.test(value)
                    ? NAN
                    : +value;
                }

                /**
                 * Converts `value` to a plain object flattening inherited enumerable string
                 * keyed properties of `value` to own properties of the plain object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Object} Returns the converted plain object.
                 * @example
                 *
                 * function Foo() {
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.assign({ 'a': 1 }, new Foo);
                 * // => { 'a': 1, 'b': 2 }
                 *
                 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                 * // => { 'a': 1, 'b': 2, 'c': 3 }
                 */
                function toPlainObject(value) {
                  return copyObject(value, keysIn(value));
                }

                /**
                 * Converts `value` to a safe integer. A safe integer can be compared and
                 * represented correctly.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toSafeInteger(3.2);
                 * // => 3
                 *
                 * _.toSafeInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toSafeInteger(Infinity);
                 * // => 9007199254740991
                 *
                 * _.toSafeInteger('3.2');
                 * // => 3
                 */
                function toSafeInteger(value) {
                  return value
                    ? baseClamp(
                        toInteger(value),
                        -MAX_SAFE_INTEGER,
                        MAX_SAFE_INTEGER
                      )
                    : value === 0
                    ? value
                    : 0;
                }

                /**
                 * Converts `value` to a string. An empty string is returned for `null`
                 * and `undefined` values. The sign of `-0` is preserved.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.toString(null);
                 * // => ''
                 *
                 * _.toString(-0);
                 * // => '-0'
                 *
                 * _.toString([1, 2, 3]);
                 * // => '1,2,3'
                 */
                function toString(value) {
                  return value == null ? '' : baseToString(value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Assigns own enumerable string keyed properties of source objects to the
                 * destination object. Source objects are applied from left to right.
                 * Subsequent sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object` and is loosely based on
                 * [`Object.assign`](https://mdn.io/Object/assign).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assignIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * function Bar() {
                 *   this.c = 3;
                 * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assign({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var assign = createAssigner(function(object, source) {
                  if (isPrototype(source) || isArrayLike(source)) {
                    copyObject(source, keys(source), object);
                    return;
                  }
                  for (var key in source) {
                    if (hasOwnProperty.call(source, key)) {
                      assignValue(object, key, source[key]);
                    }
                  }
                });

                /**
                 * This method is like `_.assign` except that it iterates over own and
                 * inherited source properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extend
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assign
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * function Bar() {
                 *   this.c = 3;
                 * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                 */
                var assignIn = createAssigner(function(object, source) {
                  copyObject(source, keysIn(source), object);
                });

                /**
                 * This method is like `_.assignIn` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extendWith
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   return _.isUndefined(objValue) ? srcValue : objValue;
                 * }
                 *
                 * var defaults = _.partialRight(_.assignInWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignInWith = createAssigner(function(
                  object,
                  source,
                  srcIndex,
                  customizer
                ) {
                  copyObject(source, keysIn(source), object, customizer);
                });

                /**
                 * This method is like `_.assign` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignInWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   return _.isUndefined(objValue) ? srcValue : objValue;
                 * }
                 *
                 * var defaults = _.partialRight(_.assignWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignWith = createAssigner(function(
                  object,
                  source,
                  srcIndex,
                  customizer
                ) {
                  copyObject(source, keys(source), object, customizer);
                });

                /**
                 * Creates an array of values corresponding to `paths` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Array} Returns the picked values.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _.at(object, ['a[0].b.c', 'a[1]']);
                 * // => [3, 4]
                 */
                var at = flatRest(baseAt);

                /**
                 * Creates an object that inherits from the `prototype` object. If a
                 * `properties` object is given, its own enumerable string keyed properties
                 * are assigned to the created object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Object
                 * @param {Object} prototype The object to inherit from.
                 * @param {Object} [properties] The properties to assign to the object.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * function Shape() {
                 *   this.x = 0;
                 *   this.y = 0;
                 * }
                 *
                 * function Circle() {
                 *   Shape.call(this);
                 * }
                 *
                 * Circle.prototype = _.create(Shape.prototype, {
                 *   'constructor': Circle
                 * });
                 *
                 * var circle = new Circle;
                 * circle instanceof Circle;
                 * // => true
                 *
                 * circle instanceof Shape;
                 * // => true
                 */
                function create(prototype, properties) {
                  var result = baseCreate(prototype);
                  return properties == null
                    ? result
                    : baseAssign(result, properties);
                }

                /**
                 * Assigns own and inherited enumerable string keyed properties of source
                 * objects to the destination object for all destination properties that
                 * resolve to `undefined`. Source objects are applied from left to right.
                 * Once a property is set, additional values of the same property are ignored.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaultsDeep
                 * @example
                 *
                 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var defaults = baseRest(function(object, sources) {
                  object = Object(object);

                  var index = -1;
                  var length = sources.length;
                  var guard = length > 2 ? sources[2] : undefined;

                  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    length = 1;
                  }

                  while (++index < length) {
                    var source = sources[index];
                    var props = keysIn(source);
                    var propsIndex = -1;
                    var propsLength = props.length;

                    while (++propsIndex < propsLength) {
                      var key = props[propsIndex];
                      var value = object[key];

                      if (
                        value === undefined ||
                        (eq(value, objectProto[key]) &&
                          !hasOwnProperty.call(object, key))
                      ) {
                        object[key] = source[key];
                      }
                    }
                  }

                  return object;
                });

                /**
                 * This method is like `_.defaults` except that it recursively assigns
                 * default properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaults
                 * @example
                 *
                 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                 * // => { 'a': { 'b': 2, 'c': 3 } }
                 */
                var defaultsDeep = baseRest(function(args) {
                  args.push(undefined, customDefaultsMerge);
                  return apply(mergeWith, undefined, args);
                });

                /**
                 * This method is like `_.find` except that it returns the key of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
                 *   'barney':  { 'age': 36, 'active': true },
                 *   'fred':    { 'age': 40, 'active': false },
                 *   'pebbles': { 'age': 1,  'active': true }
                 * };
                 *
                 * _.findKey(users, function(o) { return o.age < 40; });
                 * // => 'barney' (iteration order is not guaranteed)
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findKey(users, { 'age': 1, 'active': true });
                 * // => 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findKey(users, 'active');
                 * // => 'barney'
                 */
                function findKey(object, predicate) {
                  return baseFindKey(
                    object,
                    getIteratee(predicate, 3),
                    baseForOwn
                  );
                }

                /**
                 * This method is like `_.findKey` except that it iterates over elements of
                 * a collection in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
                 *   'barney':  { 'age': 36, 'active': true },
                 *   'fred':    { 'age': 40, 'active': false },
                 *   'pebbles': { 'age': 1,  'active': true }
                 * };
                 *
                 * _.findLastKey(users, function(o) { return o.age < 40; });
                 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastKey(users, { 'age': 36, 'active': true });
                 * // => 'barney'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastKey(users, 'active');
                 * // => 'pebbles'
                 */
                function findLastKey(object, predicate) {
                  return baseFindKey(
                    object,
                    getIteratee(predicate, 3),
                    baseForOwnRight
                  );
                }

                /**
                 * Iterates over own and inherited enumerable string keyed properties of an
                 * object and invokes `iteratee` for each property. The iteratee is invoked
                 * with three arguments: (value, key, object). Iteratee functions may exit
                 * iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forInRight
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forIn(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                 */
                function forIn(object, iteratee) {
                  return object == null
                    ? object
                    : baseFor(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * This method is like `_.forIn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forInRight(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                 */
                function forInRight(object, iteratee) {
                  return object == null
                    ? object
                    : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * Iterates over own enumerable string keyed properties of an object and
                 * invokes `iteratee` for each property. The iteratee is invoked with three
                 * arguments: (value, key, object). Iteratee functions may exit iteration
                 * early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwnRight
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwn(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forOwn(object, iteratee) {
                  return object && baseForOwn(object, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forOwn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwnRight(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                 */
                function forOwnRight(object, iteratee) {
                  return (
                    object && baseForOwnRight(object, getIteratee(iteratee, 3))
                  );
                }

                /**
                 * Creates an array of function property names from own enumerable properties
                 * of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functionsIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = _.constant('a');
                 *   this.b = _.constant('b');
                 * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functions(new Foo);
                 * // => ['a', 'b']
                 */
                function functions(object) {
                  return object == null
                    ? []
                    : baseFunctions(object, keys(object));
                }

                /**
                 * Creates an array of function property names from own and inherited
                 * enumerable properties of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functions
                 * @example
                 *
                 * function Foo() {
                 *   this.a = _.constant('a');
                 *   this.b = _.constant('b');
                 * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functionsIn(new Foo);
                 * // => ['a', 'b', 'c']
                 */
                function functionsIn(object) {
                  return object == null
                    ? []
                    : baseFunctions(object, keysIn(object));
                }

                /**
                 * Gets the value at `path` of `object`. If the resolved value is
                 * `undefined`, the `defaultValue` is returned in its place.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.get(object, 'a[0].b.c');
                 * // => 3
                 *
                 * _.get(object, ['a', '0', 'b', 'c']);
                 * // => 3
                 *
                 * _.get(object, 'a.b.c', 'default');
                 * // => 'default'
                 */
                function get(object, path, defaultValue) {
                  var result =
                    object == null ? undefined : baseGet(object, path);
                  return result === undefined ? defaultValue : result;
                }

                /**
                 * Checks if `path` is a direct property of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = { 'a': { 'b': 2 } };
                 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.has(object, 'a');
                 * // => true
                 *
                 * _.has(object, 'a.b');
                 * // => true
                 *
                 * _.has(object, ['a', 'b']);
                 * // => true
                 *
                 * _.has(other, 'a');
                 * // => false
                 */
                function has(object, path) {
                  return object != null && hasPath(object, path, baseHas);
                }

                /**
                 * Checks if `path` is a direct or inherited property of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.hasIn(object, 'a');
                 * // => true
                 *
                 * _.hasIn(object, 'a.b');
                 * // => true
                 *
                 * _.hasIn(object, ['a', 'b']);
                 * // => true
                 *
                 * _.hasIn(object, 'b');
                 * // => false
                 */
                function hasIn(object, path) {
                  return object != null && hasPath(object, path, baseHasIn);
                }

                /**
                 * Creates an object composed of the inverted keys and values of `object`.
                 * If `object` contains duplicate values, subsequent values overwrite
                 * property assignments of previous values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invert(object);
                 * // => { '1': 'c', '2': 'b' }
                 */
                var invert = createInverter(function(result, value, key) {
                  if (value != null && typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                  }

                  result[value] = key;
                }, constant(identity));

                /**
                 * This method is like `_.invert` except that the inverted object is generated
                 * from the results of running each element of `object` thru `iteratee`. The
                 * corresponding inverted value of each inverted key is an array of keys
                 * responsible for generating the inverted value. The iteratee is invoked
                 * with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invertBy(object);
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 *
                 * _.invertBy(object, function(value) {
                 *   return 'group' + value;
                 * });
                 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                 */
                var invertBy = createInverter(function(result, value, key) {
                  if (value != null && typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                  }

                  if (hasOwnProperty.call(result, value)) {
                    result[value].push(key);
                  } else {
                    result[value] = [key];
                  }
                }, getIteratee);

                /**
                 * Invokes the method at `path` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                 *
                 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                 * // => [2, 3]
                 */
                var invoke = baseRest(baseInvoke);

                /**
                 * Creates an array of the own enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects. See the
                 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * for more details.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keys(new Foo);
                 * // => ['a', 'b'] (iteration order is not guaranteed)
                 *
                 * _.keys('hi');
                 * // => ['0', '1']
                 */
                function keys(object) {
                  return isArrayLike(object)
                    ? arrayLikeKeys(object)
                    : baseKeys(object);
                }

                /**
                 * Creates an array of the own and inherited enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keysIn(new Foo);
                 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                 */
                function keysIn(object) {
                  return isArrayLike(object)
                    ? arrayLikeKeys(object, true)
                    : baseKeysIn(object);
                }

                /**
                 * The opposite of `_.mapValues`; this method creates an object with the
                 * same values as `object` and keys generated by running each own enumerable
                 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                 * with three arguments: (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapValues
                 * @example
                 *
                 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
                 *   return key + value;
                 * });
                 * // => { 'a1': 1, 'b2': 2 }
                 */
                function mapKeys(object, iteratee) {
                  var result = {};
                  iteratee = getIteratee(iteratee, 3);

                  baseForOwn(object, function(value, key, object) {
                    baseAssignValue(
                      result,
                      iteratee(value, key, object),
                      value
                    );
                  });
                  return result;
                }

                /**
                 * Creates an object with the same keys as `object` and values generated
                 * by running each own enumerable string keyed property of `object` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapKeys
                 * @example
                 *
                 * var users = {
                 *   'fred':    { 'user': 'fred',    'age': 40 },
                 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
                 * };
                 *
                 * _.mapValues(users, function(o) { return o.age; });
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.mapValues(users, 'age');
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 */
                function mapValues(object, iteratee) {
                  var result = {};
                  iteratee = getIteratee(iteratee, 3);

                  baseForOwn(object, function(value, key, object) {
                    baseAssignValue(result, key, iteratee(value, key, object));
                  });
                  return result;
                }

                /**
                 * This method is like `_.assign` except that it recursively merges own and
                 * inherited enumerable string keyed properties of source objects into the
                 * destination object. Source properties that resolve to `undefined` are
                 * skipped if a destination value exists. Array and plain object properties
                 * are merged recursively. Other objects and value types are overridden by
                 * assignment. Source objects are applied from left to right. Subsequent
                 * sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {
                 *   'a': [{ 'b': 2 }, { 'd': 4 }]
                 * };
                 *
                 * var other = {
                 *   'a': [{ 'c': 3 }, { 'e': 5 }]
                 * };
                 *
                 * _.merge(object, other);
                 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                 */
                var merge = createAssigner(function(object, source, srcIndex) {
                  baseMerge(object, source, srcIndex);
                });

                /**
                 * This method is like `_.merge` except that it accepts `customizer` which
                 * is invoked to produce the merged values of the destination and source
                 * properties. If `customizer` returns `undefined`, merging is handled by the
                 * method instead. The `customizer` is invoked with six arguments:
                 * (objValue, srcValue, key, object, source, stack).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} customizer The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   if (_.isArray(objValue)) {
                 *     return objValue.concat(srcValue);
                 *   }
                 * }
                 *
                 * var object = { 'a': [1], 'b': [2] };
                 * var other = { 'a': [3], 'b': [4] };
                 *
                 * _.mergeWith(object, other, customizer);
                 * // => { 'a': [1, 3], 'b': [2, 4] }
                 */
                var mergeWith = createAssigner(function(
                  object,
                  source,
                  srcIndex,
                  customizer
                ) {
                  baseMerge(object, source, srcIndex, customizer);
                });

                /**
                 * The opposite of `_.pick`; this method creates an object composed of the
                 * own and inherited enumerable property paths of `object` that are not omitted.
                 *
                 * **Note:** This method is considerably slower than `_.pick`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to omit.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omit(object, ['a', 'c']);
                 * // => { 'b': '2' }
                 */
                var omit = flatRest(function(object, paths) {
                  var result = {};
                  if (object == null) {
                    return result;
                  }
                  var isDeep = false;
                  paths = arrayMap(paths, function(path) {
                    path = castPath(path, object);
                    isDeep || (isDeep = path.length > 1);
                    return path;
                  });
                  copyObject(object, getAllKeysIn(object), result);
                  if (isDeep) {
                    result = baseClone(
                      result,
                      CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                      customOmitClone
                    );
                  }
                  var length = paths.length;
                  while (length--) {
                    baseUnset(result, paths[length]);
                  }
                  return result;
                });

                /**
                 * The opposite of `_.pickBy`; this method creates an object composed of
                 * the own and inherited enumerable string keyed properties of `object` that
                 * `predicate` doesn't return truthy for. The predicate is invoked with two
                 * arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omitBy(object, _.isNumber);
                 * // => { 'b': '2' }
                 */
                function omitBy(object, predicate) {
                  return pickBy(object, negate(getIteratee(predicate)));
                }

                /**
                 * Creates an object composed of the picked `object` properties.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pick(object, ['a', 'c']);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var pick = flatRest(function(object, paths) {
                  return object == null ? {} : basePick(object, paths);
                });

                /**
                 * Creates an object composed of the `object` properties `predicate` returns
                 * truthy for. The predicate is invoked with two arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pickBy(object, _.isNumber);
                 * // => { 'a': 1, 'c': 3 }
                 */
                function pickBy(object, predicate) {
                  if (object == null) {
                    return {};
                  }
                  var props = arrayMap(getAllKeysIn(object), function(prop) {
                    return [prop];
                  });
                  predicate = getIteratee(predicate);
                  return basePickBy(object, props, function(value, path) {
                    return predicate(value, path[0]);
                  });
                }

                /**
                 * This method is like `_.get` except that if the resolved value is a
                 * function it's invoked with the `this` binding of its parent object and
                 * its result is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to resolve.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                 *
                 * _.result(object, 'a[0].b.c1');
                 * // => 3
                 *
                 * _.result(object, 'a[0].b.c2');
                 * // => 4
                 *
                 * _.result(object, 'a[0].b.c3', 'default');
                 * // => 'default'
                 *
                 * _.result(object, 'a[0].b.c3', _.constant('default'));
                 * // => 'default'
                 */
                function result(object, path, defaultValue) {
                  path = castPath(path, object);

                  var index = -1,
                    length = path.length;

                  // Ensure the loop is entered when path is empty.
                  if (!length) {
                    length = 1;
                    object = undefined;
                  }
                  while (++index < length) {
                    var value =
                      object == null ? undefined : object[toKey(path[index])];
                    if (value === undefined) {
                      index = length;
                      value = defaultValue;
                    }
                    object = isFunction(value) ? value.call(object) : value;
                  }
                  return object;
                }

                /**
                 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                 * it's created. Arrays are created for missing index properties while objects
                 * are created for all other missing properties. Use `_.setWith` to customize
                 * `path` creation.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.set(object, 'a[0].b.c', 4);
                 * console.log(object.a[0].b.c);
                 * // => 4
                 *
                 * _.set(object, ['x', '0', 'y', 'z'], 5);
                 * console.log(object.x[0].y.z);
                 * // => 5
                 */
                function set(object, path, value) {
                  return object == null ? object : baseSet(object, path, value);
                }

                /**
                 * This method is like `_.set` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.setWith(object, '[0][1]', 'a', Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function setWith(object, path, value, customizer) {
                  customizer =
                    typeof customizer == 'function' ? customizer : undefined;
                  return object == null
                    ? object
                    : baseSet(object, path, value, customizer);
                }

                /**
                 * Creates an array of own enumerable string keyed-value pairs for `object`
                 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                 * entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entries
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairs(new Foo);
                 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                 */
                var toPairs = createToPairs(keys);

                /**
                 * Creates an array of own and inherited enumerable string keyed-value pairs
                 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                 * or set, its entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entriesIn
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairsIn(new Foo);
                 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                 */
                var toPairsIn = createToPairs(keysIn);

                /**
                 * An alternative to `_.reduce`; this method transforms `object` to a new
                 * `accumulator` object which is the result of running each of its own
                 * enumerable string keyed properties thru `iteratee`, with each invocation
                 * potentially mutating the `accumulator` object. If `accumulator` is not
                 * provided, a new object with the same `[[Prototype]]` will be used. The
                 * iteratee is invoked with four arguments: (accumulator, value, key, object).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The custom accumulator value.
                 * @returns {*} Returns the accumulated value.
                 * @example
                 *
                 * _.transform([2, 3, 4], function(result, n) {
                 *   result.push(n *= n);
                 *   return n % 2 == 0;
                 * }, []);
                 * // => [4, 9]
                 *
                 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                 *   (result[value] || (result[value] = [])).push(key);
                 * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 */
                function transform(object, iteratee, accumulator) {
                  var isArr = isArray(object),
                    isArrLike =
                      isArr || isBuffer(object) || isTypedArray(object);

                  iteratee = getIteratee(iteratee, 4);
                  if (accumulator == null) {
                    var Ctor = object && object.constructor;
                    if (isArrLike) {
                      accumulator = isArr ? new Ctor() : [];
                    } else if (isObject(object)) {
                      accumulator = isFunction(Ctor)
                        ? baseCreate(getPrototype(object))
                        : {};
                    } else {
                      accumulator = {};
                    }
                  }
                  (isArrLike ? arrayEach : baseForOwn)(object, function(
                    value,
                    index,
                    object
                  ) {
                    return iteratee(accumulator, value, index, object);
                  });
                  return accumulator;
                }

                /**
                 * Removes the property at `path` of `object`.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                 * _.unset(object, 'a[0].b.c');
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 *
                 * _.unset(object, ['a', '0', 'b', 'c']);
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 */
                function unset(object, path) {
                  return object == null ? true : baseUnset(object, path);
                }

                /**
                 * This method is like `_.set` except that accepts `updater` to produce the
                 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                 * is invoked with one argument: (value).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                 * console.log(object.a[0].b.c);
                 * // => 9
                 *
                 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                 * console.log(object.x[0].y.z);
                 * // => 0
                 */
                function update(object, path, updater) {
                  return object == null
                    ? object
                    : baseUpdate(object, path, castFunction(updater));
                }

                /**
                 * This method is like `_.update` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function updateWith(object, path, updater, customizer) {
                  customizer =
                    typeof customizer == 'function' ? customizer : undefined;
                  return object == null
                    ? object
                    : baseUpdate(
                        object,
                        path,
                        castFunction(updater),
                        customizer
                      );
                }

                /**
                 * Creates an array of the own enumerable string keyed property values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.values(new Foo);
                 * // => [1, 2] (iteration order is not guaranteed)
                 *
                 * _.values('hi');
                 * // => ['h', 'i']
                 */
                function values(object) {
                  return object == null ? [] : baseValues(object, keys(object));
                }

                /**
                 * Creates an array of the own and inherited enumerable string keyed property
                 * values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.valuesIn(new Foo);
                 * // => [1, 2, 3] (iteration order is not guaranteed)
                 */
                function valuesIn(object) {
                  return object == null
                    ? []
                    : baseValues(object, keysIn(object));
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Clamps `number` within the inclusive `lower` and `upper` bounds.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Number
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 * @example
                 *
                 * _.clamp(-10, -5, 5);
                 * // => -5
                 *
                 * _.clamp(10, -5, 5);
                 * // => 5
                 */
                function clamp(number, lower, upper) {
                  if (upper === undefined) {
                    upper = lower;
                    lower = undefined;
                  }
                  if (upper !== undefined) {
                    upper = toNumber(upper);
                    upper = upper === upper ? upper : 0;
                  }
                  if (lower !== undefined) {
                    lower = toNumber(lower);
                    lower = lower === lower ? lower : 0;
                  }
                  return baseClamp(toNumber(number), lower, upper);
                }

                /**
                 * Checks if `n` is between `start` and up to, but not including, `end`. If
                 * `end` is not specified, it's set to `start` with `start` then set to `0`.
                 * If `start` is greater than `end` the params are swapped to support
                 * negative ranges.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.3.0
                 * @category Number
                 * @param {number} number The number to check.
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 * @see _.range, _.rangeRight
                 * @example
                 *
                 * _.inRange(3, 2, 4);
                 * // => true
                 *
                 * _.inRange(4, 8);
                 * // => true
                 *
                 * _.inRange(4, 2);
                 * // => false
                 *
                 * _.inRange(2, 2);
                 * // => false
                 *
                 * _.inRange(1.2, 2);
                 * // => true
                 *
                 * _.inRange(5.2, 4);
                 * // => false
                 *
                 * _.inRange(-3, -2, -6);
                 * // => true
                 */
                function inRange(number, start, end) {
                  start = toFinite(start);
                  if (end === undefined) {
                    end = start;
                    start = 0;
                  } else {
                    end = toFinite(end);
                  }
                  number = toNumber(number);
                  return baseInRange(number, start, end);
                }

                /**
                 * Produces a random number between the inclusive `lower` and `upper` bounds.
                 * If only one argument is provided a number between `0` and the given number
                 * is returned. If `floating` is `true`, or either `lower` or `upper` are
                 * floats, a floating-point number is returned instead of an integer.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Number
                 * @param {number} [lower=0] The lower bound.
                 * @param {number} [upper=1] The upper bound.
                 * @param {boolean} [floating] Specify returning a floating-point number.
                 * @returns {number} Returns the random number.
                 * @example
                 *
                 * _.random(0, 5);
                 * // => an integer between 0 and 5
                 *
                 * _.random(5);
                 * // => also an integer between 0 and 5
                 *
                 * _.random(5, true);
                 * // => a floating-point number between 0 and 5
                 *
                 * _.random(1.2, 5.2);
                 * // => a floating-point number between 1.2 and 5.2
                 */
                function random(lower, upper, floating) {
                  if (
                    floating &&
                    typeof floating != 'boolean' &&
                    isIterateeCall(lower, upper, floating)
                  ) {
                    upper = floating = undefined;
                  }
                  if (floating === undefined) {
                    if (typeof upper == 'boolean') {
                      floating = upper;
                      upper = undefined;
                    } else if (typeof lower == 'boolean') {
                      floating = lower;
                      lower = undefined;
                    }
                  }
                  if (lower === undefined && upper === undefined) {
                    lower = 0;
                    upper = 1;
                  } else {
                    lower = toFinite(lower);
                    if (upper === undefined) {
                      upper = lower;
                      lower = 0;
                    } else {
                      upper = toFinite(upper);
                    }
                  }
                  if (lower > upper) {
                    var temp = lower;
                    lower = upper;
                    upper = temp;
                  }
                  if (floating || lower % 1 || upper % 1) {
                    var rand = nativeRandom();
                    return nativeMin(
                      lower +
                        rand *
                          (upper -
                            lower +
                            freeParseFloat('1e-' + ((rand + '').length - 1))),
                      upper
                    );
                  }
                  return baseRandom(lower, upper);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the camel cased string.
                 * @example
                 *
                 * _.camelCase('Foo Bar');
                 * // => 'fooBar'
                 *
                 * _.camelCase('--foo-bar--');
                 * // => 'fooBar'
                 *
                 * _.camelCase('__FOO_BAR__');
                 * // => 'fooBar'
                 */
                var camelCase = createCompounder(function(result, word, index) {
                  word = word.toLowerCase();
                  return result + (index ? capitalize(word) : word);
                });

                /**
                 * Converts the first character of `string` to upper case and the remaining
                 * to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to capitalize.
                 * @returns {string} Returns the capitalized string.
                 * @example
                 *
                 * _.capitalize('FRED');
                 * // => 'Fred'
                 */
                function capitalize(string) {
                  return upperFirst(toString(string).toLowerCase());
                }

                /**
                 * Deburrs `string` by converting
                 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                 * letters to basic Latin letters and removing
                 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to deburr.
                 * @returns {string} Returns the deburred string.
                 * @example
                 *
                 * _.deburr('déjà vu');
                 * // => 'deja vu'
                 */
                function deburr(string) {
                  string = toString(string);
                  return (
                    string &&
                    string
                      .replace(reLatin, deburrLetter)
                      .replace(reComboMark, '')
                  );
                }

                /**
                 * Checks if `string` ends with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=string.length] The position to search up to.
                 * @returns {boolean} Returns `true` if `string` ends with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.endsWith('abc', 'c');
                 * // => true
                 *
                 * _.endsWith('abc', 'b');
                 * // => false
                 *
                 * _.endsWith('abc', 'b', 2);
                 * // => true
                 */
                function endsWith(string, target, position) {
                  string = toString(string);
                  target = baseToString(target);

                  var length = string.length;
                  position =
                    position === undefined
                      ? length
                      : baseClamp(toInteger(position), 0, length);

                  var end = position;
                  position -= target.length;
                  return position >= 0 && string.slice(position, end) == target;
                }

                /**
                 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                 * corresponding HTML entities.
                 *
                 * **Note:** No other characters are escaped. To escape additional
                 * characters use a third-party library like [_he_](https://mths.be/he).
                 *
                 * Though the ">" character is escaped for symmetry, characters like
                 * ">" and "/" don't need escaping in HTML and have no special meaning
                 * unless they're part of a tag or unquoted attribute value. See
                 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                 * (under "semi-related fun fact") for more details.
                 *
                 * When working with HTML you should always
                 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                 * XSS vectors.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escape('fred, barney, & pebbles');
                 * // => 'fred, barney, &amp; pebbles'
                 */
                function escape(string) {
                  string = toString(string);
                  return string && reHasUnescapedHtml.test(string)
                    ? string.replace(reUnescapedHtml, escapeHtmlChar)
                    : string;
                }

                /**
                 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escapeRegExp('[lodash](https://lodash.com/)');
                 * // => '\[lodash\]\(https://lodash\.com/\)'
                 */
                function escapeRegExp(string) {
                  string = toString(string);
                  return string && reHasRegExpChar.test(string)
                    ? string.replace(reRegExpChar, '\\$&')
                    : string;
                }

                /**
                 * Converts `string` to
                 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the kebab cased string.
                 * @example
                 *
                 * _.kebabCase('Foo Bar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('fooBar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('__FOO_BAR__');
                 * // => 'foo-bar'
                 */
                var kebabCase = createCompounder(function(result, word, index) {
                  return result + (index ? '-' : '') + word.toLowerCase();
                });

                /**
                 * Converts `string`, as space separated words, to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.lowerCase('--Foo-Bar--');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('fooBar');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('__FOO_BAR__');
                 * // => 'foo bar'
                 */
                var lowerCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + word.toLowerCase();
                });

                /**
                 * Converts the first character of `string` to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.lowerFirst('Fred');
                 * // => 'fred'
                 *
                 * _.lowerFirst('FRED');
                 * // => 'fRED'
                 */
                var lowerFirst = createCaseFirst('toLowerCase');

                /**
                 * Pads `string` on the left and right sides if it's shorter than `length`.
                 * Padding characters are truncated if they can't be evenly divided by `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.pad('abc', 8);
                 * // => '  abc   '
                 *
                 * _.pad('abc', 8, '_-');
                 * // => '_-abc_-_'
                 *
                 * _.pad('abc', 3);
                 * // => 'abc'
                 */
                function pad(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  if (!length || strLength >= length) {
                    return string;
                  }
                  var mid = (length - strLength) / 2;
                  return (
                    createPadding(nativeFloor(mid), chars) +
                    string +
                    createPadding(nativeCeil(mid), chars)
                  );
                }

                /**
                 * Pads `string` on the right side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padEnd('abc', 6);
                 * // => 'abc   '
                 *
                 * _.padEnd('abc', 6, '_-');
                 * // => 'abc_-_'
                 *
                 * _.padEnd('abc', 3);
                 * // => 'abc'
                 */
                function padEnd(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  return length && strLength < length
                    ? string + createPadding(length - strLength, chars)
                    : string;
                }

                /**
                 * Pads `string` on the left side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padStart('abc', 6);
                 * // => '   abc'
                 *
                 * _.padStart('abc', 6, '_-');
                 * // => '_-_abc'
                 *
                 * _.padStart('abc', 3);
                 * // => 'abc'
                 */
                function padStart(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  return length && strLength < length
                    ? createPadding(length - strLength, chars) + string
                    : string;
                }

                /**
                 * Converts `string` to an integer of the specified radix. If `radix` is
                 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                 * hexadecimal, in which case a `radix` of `16` is used.
                 *
                 * **Note:** This method aligns with the
                 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category String
                 * @param {string} string The string to convert.
                 * @param {number} [radix=10] The radix to interpret `value` by.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.parseInt('08');
                 * // => 8
                 *
                 * _.map(['6', '08', '10'], _.parseInt);
                 * // => [6, 8, 10]
                 */
                function parseInt(string, radix, guard) {
                  if (guard || radix == null) {
                    radix = 0;
                  } else if (radix) {
                    radix = +radix;
                  }
                  return nativeParseInt(
                    toString(string).replace(reTrimStart, ''),
                    radix || 0
                  );
                }

                /**
                 * Repeats the given string `n` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to repeat.
                 * @param {number} [n=1] The number of times to repeat the string.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the repeated string.
                 * @example
                 *
                 * _.repeat('*', 3);
                 * // => '***'
                 *
                 * _.repeat('abc', 2);
                 * // => 'abcabc'
                 *
                 * _.repeat('abc', 0);
                 * // => ''
                 */
                function repeat(string, n, guard) {
                  if (
                    guard ? isIterateeCall(string, n, guard) : n === undefined
                  ) {
                    n = 1;
                  } else {
                    n = toInteger(n);
                  }
                  return baseRepeat(toString(string), n);
                }

                /**
                 * Replaces matches for `pattern` in `string` with `replacement`.
                 *
                 * **Note:** This method is based on
                 * [`String#replace`](https://mdn.io/String/replace).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to modify.
                 * @param {RegExp|string} pattern The pattern to replace.
                 * @param {Function|string} replacement The match replacement.
                 * @returns {string} Returns the modified string.
                 * @example
                 *
                 * _.replace('Hi Fred', 'Fred', 'Barney');
                 * // => 'Hi Barney'
                 */
                function replace() {
                  var args = arguments,
                    string = toString(args[0]);

                  return args.length < 3
                    ? string
                    : string.replace(args[1], args[2]);
                }

                /**
                 * Converts `string` to
                 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the snake cased string.
                 * @example
                 *
                 * _.snakeCase('Foo Bar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('fooBar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('--FOO-BAR--');
                 * // => 'foo_bar'
                 */
                var snakeCase = createCompounder(function(result, word, index) {
                  return result + (index ? '_' : '') + word.toLowerCase();
                });

                /**
                 * Splits `string` by `separator`.
                 *
                 * **Note:** This method is based on
                 * [`String#split`](https://mdn.io/String/split).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to split.
                 * @param {RegExp|string} separator The separator pattern to split by.
                 * @param {number} [limit] The length to truncate results to.
                 * @returns {Array} Returns the string segments.
                 * @example
                 *
                 * _.split('a-b-c', '-', 2);
                 * // => ['a', 'b']
                 */
                function split(string, separator, limit) {
                  if (
                    limit &&
                    typeof limit != 'number' &&
                    isIterateeCall(string, separator, limit)
                  ) {
                    separator = limit = undefined;
                  }
                  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                  if (!limit) {
                    return [];
                  }
                  string = toString(string);
                  if (
                    string &&
                    (typeof separator == 'string' ||
                      (separator != null && !isRegExp(separator)))
                  ) {
                    separator = baseToString(separator);
                    if (!separator && hasUnicode(string)) {
                      return castSlice(stringToArray(string), 0, limit);
                    }
                  }
                  return string.split(separator, limit);
                }

                /**
                 * Converts `string` to
                 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.1.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the start cased string.
                 * @example
                 *
                 * _.startCase('--foo-bar--');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('fooBar');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('__FOO_BAR__');
                 * // => 'FOO BAR'
                 */
                var startCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + upperFirst(word);
                });

                /**
                 * Checks if `string` starts with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=0] The position to search from.
                 * @returns {boolean} Returns `true` if `string` starts with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.startsWith('abc', 'a');
                 * // => true
                 *
                 * _.startsWith('abc', 'b');
                 * // => false
                 *
                 * _.startsWith('abc', 'b', 1);
                 * // => true
                 */
                function startsWith(string, target, position) {
                  string = toString(string);
                  position =
                    position == null
                      ? 0
                      : baseClamp(toInteger(position), 0, string.length);

                  target = baseToString(target);
                  return (
                    string.slice(position, position + target.length) == target
                  );
                }

                /**
                 * Creates a compiled template function that can interpolate data properties
                 * in "interpolate" delimiters, HTML-escape interpolated data properties in
                 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                 * properties may be accessed as free variables in the template. If a setting
                 * object is given, it takes precedence over `_.templateSettings` values.
                 *
                 * **Note:** In the development build `_.template` utilizes
                 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                 * for easier debugging.
                 *
                 * For more information on precompiling templates see
                 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                 *
                 * For more information on Chrome extension sandboxes see
                 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The template string.
                 * @param {Object} [options={}] The options object.
                 * @param {RegExp} [options.escape=_.templateSettings.escape]
                 *  The HTML "escape" delimiter.
                 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                 *  The "evaluate" delimiter.
                 * @param {Object} [options.imports=_.templateSettings.imports]
                 *  An object to import into the template as free variables.
                 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                 *  The "interpolate" delimiter.
                 * @param {string} [options.sourceURL='lodash.templateSources[n]']
                 *  The sourceURL of the compiled template.
                 * @param {string} [options.variable='obj']
                 *  The data object variable name.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the compiled template function.
                 * @example
                 *
                 * // Use the "interpolate" delimiter to create a compiled template.
                 * var compiled = _.template('hello <%= user %>!');
                 * compiled({ 'user': 'fred' });
                 * // => 'hello fred!'
                 *
                 * // Use the HTML "escape" delimiter to escape data property values.
                 * var compiled = _.template('<b><%- value %></b>');
                 * compiled({ 'value': '<script>' });
                 * // => '<b>&lt;script&gt;</b>'
                 *
                 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the internal `print` function in "evaluate" delimiters.
                 * var compiled = _.template('<% print("hello " + user); %>!');
                 * compiled({ 'user': 'barney' });
                 * // => 'hello barney!'
                 *
                 * // Use the ES template literal delimiter as an "interpolate" delimiter.
                 * // Disable support by replacing the "interpolate" delimiter.
                 * var compiled = _.template('hello ${ user }!');
                 * compiled({ 'user': 'pebbles' });
                 * // => 'hello pebbles!'
                 *
                 * // Use backslashes to treat delimiters as plain text.
                 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                 * compiled({ 'value': 'ignored' });
                 * // => '<%- value %>'
                 *
                 * // Use the `imports` option to import `jQuery` as `jq`.
                 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                 * compiled(data);
                 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                 *
                 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                 * compiled.source;
                 * // => function(data) {
                 * //   var __t, __p = '';
                 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
                 * //   return __p;
                 * // }
                 *
                 * // Use custom template delimiters.
                 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                 * var compiled = _.template('hello {{ user }}!');
                 * compiled({ 'user': 'mustache' });
                 * // => 'hello mustache!'
                 *
                 * // Use the `source` property to inline compiled templates for meaningful
                 * // line numbers in error messages and stack traces.
                 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                 *   var JST = {\
                 *     "main": ' + _.template(mainText).source + '\
                 *   };\
                 * ');
                 */
                function template(string, options, guard) {
                  // Based on John Resig's `tmpl` implementation
                  // (http://ejohn.org/blog/javascript-micro-templating/)
                  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                  var settings = lodash.templateSettings;

                  if (guard && isIterateeCall(string, options, guard)) {
                    options = undefined;
                  }
                  string = toString(string);
                  options = assignInWith(
                    {},
                    options,
                    settings,
                    customDefaultsAssignIn
                  );

                  var imports = assignInWith(
                      {},
                      options.imports,
                      settings.imports,
                      customDefaultsAssignIn
                    ),
                    importsKeys = keys(imports),
                    importsValues = baseValues(imports, importsKeys);

                  var isEscaping,
                    isEvaluating,
                    index = 0,
                    interpolate = options.interpolate || reNoMatch,
                    source = "__p += '";

                  // Compile the regexp to match each delimiter.
                  var reDelimiters = RegExp(
                    (options.escape || reNoMatch).source +
                      '|' +
                      interpolate.source +
                      '|' +
                      (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                        .source +
                      '|' +
                      (options.evaluate || reNoMatch).source +
                      '|$',
                    'g'
                  );

                  // Use a sourceURL for easier debugging.
                  // The sourceURL gets injected into the source that's eval-ed, so be careful
                  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
                  // and escape the comment, thus injecting code that gets evaled.
                  var sourceURL =
                    '//# sourceURL=' +
                    (hasOwnProperty.call(options, 'sourceURL')
                      ? (options.sourceURL + '').replace(/\s/g, ' ')
                      : 'lodash.templateSources[' + ++templateCounter + ']') +
                    '\n';

                  string.replace(reDelimiters, function(
                    match,
                    escapeValue,
                    interpolateValue,
                    esTemplateValue,
                    evaluateValue,
                    offset
                  ) {
                    interpolateValue || (interpolateValue = esTemplateValue);

                    // Escape characters that can't be included in string literals.
                    source += string
                      .slice(index, offset)
                      .replace(reUnescapedString, escapeStringChar);

                    // Replace delimiters with snippets.
                    if (escapeValue) {
                      isEscaping = true;
                      source += "' +\n__e(" + escapeValue + ") +\n'";
                    }
                    if (evaluateValue) {
                      isEvaluating = true;
                      source += "';\n" + evaluateValue + ";\n__p += '";
                    }
                    if (interpolateValue) {
                      source +=
                        "' +\n((__t = (" +
                        interpolateValue +
                        ")) == null ? '' : __t) +\n'";
                    }
                    index = offset + match.length;

                    // The JS engine embedded in Adobe products needs `match` returned in
                    // order to produce the correct `offset` value.
                    return match;
                  });

                  source += "';\n";

                  // If `variable` is not specified wrap a with-statement around the generated
                  // code to add the data object to the top of the scope chain.
                  var variable =
                    hasOwnProperty.call(options, 'variable') &&
                    options.variable;
                  if (!variable) {
                    source = 'with (obj) {\n' + source + '\n}\n';
                  }
                  // Throw an error if a forbidden character was found in `variable`, to prevent
                  // potential command injection attacks.
                  else if (reForbiddenIdentifierChars.test(variable)) {
                    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
                  }

                  // Cleanup code by stripping empty strings.
                  source = (isEvaluating
                    ? source.replace(reEmptyStringLeading, '')
                    : source
                  )
                    .replace(reEmptyStringMiddle, '$1')
                    .replace(reEmptyStringTrailing, '$1;');

                  // Frame code as the function body.
                  source =
                    'function(' +
                    (variable || 'obj') +
                    ') {\n' +
                    (variable ? '' : 'obj || (obj = {});\n') +
                    "var __t, __p = ''" +
                    (isEscaping ? ', __e = _.escape' : '') +
                    (isEvaluating
                      ? ', __j = Array.prototype.join;\n' +
                        "function print() { __p += __j.call(arguments, '') }\n"
                      : ';\n') +
                    source +
                    'return __p\n}';

                  var result = attempt(function() {
                    return Function(
                      importsKeys,
                      sourceURL + 'return ' + source
                    ).apply(undefined, importsValues);
                  });

                  // Provide the compiled function's source by its `toString` method or
                  // the `source` property as a convenience for inlining compiled templates.
                  result.source = source;
                  if (isError(result)) {
                    throw result;
                  }
                  return result;
                }

                /**
                 * Converts `string`, as a whole, to lower case just like
                 * [String#toLowerCase](https://mdn.io/toLowerCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.toLower('--Foo-Bar--');
                 * // => '--foo-bar--'
                 *
                 * _.toLower('fooBar');
                 * // => 'foobar'
                 *
                 * _.toLower('__FOO_BAR__');
                 * // => '__foo_bar__'
                 */
                function toLower(value) {
                  return toString(value).toLowerCase();
                }

                /**
                 * Converts `string`, as a whole, to upper case just like
                 * [String#toUpperCase](https://mdn.io/toUpperCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.toUpper('--foo-bar--');
                 * // => '--FOO-BAR--'
                 *
                 * _.toUpper('fooBar');
                 * // => 'FOOBAR'
                 *
                 * _.toUpper('__foo_bar__');
                 * // => '__FOO_BAR__'
                 */
                function toUpper(value) {
                  return toString(value).toUpperCase();
                }

                /**
                 * Removes leading and trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trim('  abc  ');
                 * // => 'abc'
                 *
                 * _.trim('-_-abc-_-', '_-');
                 * // => 'abc'
                 *
                 * _.map(['  foo  ', '  bar  '], _.trim);
                 * // => ['foo', 'bar']
                 */
                function trim(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return baseTrim(string);
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                    chrSymbols = stringToArray(chars),
                    start = charsStartIndex(strSymbols, chrSymbols),
                    end = charsEndIndex(strSymbols, chrSymbols) + 1;

                  return castSlice(strSymbols, start, end).join('');
                }

                /**
                 * Removes trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimEnd('  abc  ');
                 * // => '  abc'
                 *
                 * _.trimEnd('-_-abc-_-', '_-');
                 * // => '-_-abc'
                 */
                function trimEnd(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return string.slice(0, trimmedEndIndex(string) + 1);
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                  return castSlice(strSymbols, 0, end).join('');
                }

                /**
                 * Removes leading whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimStart('  abc  ');
                 * // => 'abc  '
                 *
                 * _.trimStart('-_-abc-_-', '_-');
                 * // => 'abc-_-'
                 */
                function trimStart(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return string.replace(reTrimStart, '');
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                    start = charsStartIndex(strSymbols, stringToArray(chars));

                  return castSlice(strSymbols, start).join('');
                }

                /**
                 * Truncates `string` if it's longer than the given maximum string length.
                 * The last characters of the truncated string are replaced with the omission
                 * string which defaults to "...".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to truncate.
                 * @param {Object} [options={}] The options object.
                 * @param {number} [options.length=30] The maximum string length.
                 * @param {string} [options.omission='...'] The string to indicate text is omitted.
                 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                 * @returns {string} Returns the truncated string.
                 * @example
                 *
                 * _.truncate('hi-diddly-ho there, neighborino');
                 * // => 'hi-diddly-ho there, neighbo...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'length': 24,
                 *   'separator': ' '
                 * });
                 * // => 'hi-diddly-ho there,...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'length': 24,
                 *   'separator': /,? +/
                 * });
                 * // => 'hi-diddly-ho there...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'omission': ' [...]'
                 * });
                 * // => 'hi-diddly-ho there, neig [...]'
                 */
                function truncate(string, options) {
                  var length = DEFAULT_TRUNC_LENGTH,
                    omission = DEFAULT_TRUNC_OMISSION;

                  if (isObject(options)) {
                    var separator =
                      'separator' in options ? options.separator : separator;
                    length =
                      'length' in options ? toInteger(options.length) : length;
                    omission =
                      'omission' in options
                        ? baseToString(options.omission)
                        : omission;
                  }
                  string = toString(string);

                  var strLength = string.length;
                  if (hasUnicode(string)) {
                    var strSymbols = stringToArray(string);
                    strLength = strSymbols.length;
                  }
                  if (length >= strLength) {
                    return string;
                  }
                  var end = length - stringSize(omission);
                  if (end < 1) {
                    return omission;
                  }
                  var result = strSymbols
                    ? castSlice(strSymbols, 0, end).join('')
                    : string.slice(0, end);

                  if (separator === undefined) {
                    return result + omission;
                  }
                  if (strSymbols) {
                    end += result.length - end;
                  }
                  if (isRegExp(separator)) {
                    if (string.slice(end).search(separator)) {
                      var match,
                        substring = result;

                      if (!separator.global) {
                        separator = RegExp(
                          separator.source,
                          toString(reFlags.exec(separator)) + 'g'
                        );
                      }
                      separator.lastIndex = 0;
                      while ((match = separator.exec(substring))) {
                        var newEnd = match.index;
                      }
                      result = result.slice(
                        0,
                        newEnd === undefined ? end : newEnd
                      );
                    }
                  } else if (
                    string.indexOf(baseToString(separator), end) != end
                  ) {
                    var index = result.lastIndexOf(separator);
                    if (index > -1) {
                      result = result.slice(0, index);
                    }
                  }
                  return result + omission;
                }

                /**
                 * The inverse of `_.escape`; this method converts the HTML entities
                 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                 * their corresponding characters.
                 *
                 * **Note:** No other HTML entities are unescaped. To unescape additional
                 * HTML entities use a third-party library like [_he_](https://mths.be/he).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.6.0
                 * @category String
                 * @param {string} [string=''] The string to unescape.
                 * @returns {string} Returns the unescaped string.
                 * @example
                 *
                 * _.unescape('fred, barney, &amp; pebbles');
                 * // => 'fred, barney, & pebbles'
                 */
                function unescape(string) {
                  string = toString(string);
                  return string && reHasEscapedHtml.test(string)
                    ? string.replace(reEscapedHtml, unescapeHtmlChar)
                    : string;
                }

                /**
                 * Converts `string`, as space separated words, to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.upperCase('--foo-bar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('fooBar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('__foo_bar__');
                 * // => 'FOO BAR'
                 */
                var upperCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + word.toUpperCase();
                });

                /**
                 * Converts the first character of `string` to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.upperFirst('fred');
                 * // => 'Fred'
                 *
                 * _.upperFirst('FRED');
                 * // => 'FRED'
                 */
                var upperFirst = createCaseFirst('toUpperCase');

                /**
                 * Splits `string` into an array of its words.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {RegExp|string} [pattern] The pattern to match words.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the words of `string`.
                 * @example
                 *
                 * _.words('fred, barney, & pebbles');
                 * // => ['fred', 'barney', 'pebbles']
                 *
                 * _.words('fred, barney, & pebbles', /[^, ]+/g);
                 * // => ['fred', 'barney', '&', 'pebbles']
                 */
                function words(string, pattern, guard) {
                  string = toString(string);
                  pattern = guard ? undefined : pattern;

                  if (pattern === undefined) {
                    return hasUnicodeWord(string)
                      ? unicodeWords(string)
                      : asciiWords(string);
                  }
                  return string.match(pattern) || [];
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Attempts to invoke `func`, returning either the result or the caught error
                 * object. Any additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Function} func The function to attempt.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {*} Returns the `func` result or error object.
                 * @example
                 *
                 * // Avoid throwing errors for invalid selectors.
                 * var elements = _.attempt(function(selector) {
                 *   return document.querySelectorAll(selector);
                 * }, '>_>');
                 *
                 * if (_.isError(elements)) {
                 *   elements = [];
                 * }
                 */
                var attempt = baseRest(function(func, args) {
                  try {
                    return apply(func, undefined, args);
                  } catch (e) {
                    return isError(e) ? e : new Error(e);
                  }
                });

                /**
                 * Binds methods of an object to the object itself, overwriting the existing
                 * method.
                 *
                 * **Note:** This method doesn't set the "length" property of bound functions.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Object} object The object to bind and assign the bound methods to.
                 * @param {...(string|string[])} methodNames The object method names to bind.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var view = {
                 *   'label': 'docs',
                 *   'click': function() {
                 *     console.log('clicked ' + this.label);
                 *   }
                 * };
                 *
                 * _.bindAll(view, ['click']);
                 * jQuery(element).on('click', view.click);
                 * // => Logs 'clicked docs' when clicked.
                 */
                var bindAll = flatRest(function(object, methodNames) {
                  arrayEach(methodNames, function(key) {
                    key = toKey(key);
                    baseAssignValue(object, key, bind(object[key], object));
                  });
                  return object;
                });

                /**
                 * Creates a function that iterates over `pairs` and invokes the corresponding
                 * function of the first predicate to return truthy. The predicate-function
                 * pairs are invoked with the `this` binding and arguments of the created
                 * function.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Array} pairs The predicate-function pairs.
                 * @returns {Function} Returns the new composite function.
                 * @example
                 *
                 * var func = _.cond([
                 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                 *   [_.stubTrue,                      _.constant('no match')]
                 * ]);
                 *
                 * func({ 'a': 1, 'b': 2 });
                 * // => 'matches A'
                 *
                 * func({ 'a': 0, 'b': 1 });
                 * // => 'matches B'
                 *
                 * func({ 'a': '1', 'b': '2' });
                 * // => 'no match'
                 */
                function cond(pairs) {
                  var length = pairs == null ? 0 : pairs.length,
                    toIteratee = getIteratee();

                  pairs = !length
                    ? []
                    : arrayMap(pairs, function(pair) {
                        if (typeof pair[1] != 'function') {
                          throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return [toIteratee(pair[0]), pair[1]];
                      });

                  return baseRest(function(args) {
                    var index = -1;
                    while (++index < length) {
                      var pair = pairs[index];
                      if (apply(pair[0], this, args)) {
                        return apply(pair[1], this, args);
                      }
                    }
                  });
                }

                /**
                 * Creates a function that invokes the predicate properties of `source` with
                 * the corresponding property values of a given object, returning `true` if
                 * all predicates return truthy, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.conformsTo` with
                 * `source` partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 2, 'b': 1 },
                 *   { 'a': 1, 'b': 2 }
                 * ];
                 *
                 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                 * // => [{ 'a': 1, 'b': 2 }]
                 */
                function conforms(source) {
                  return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that returns `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {*} value The value to return from the new function.
                 * @returns {Function} Returns the new constant function.
                 * @example
                 *
                 * var objects = _.times(2, _.constant({ 'a': 1 }));
                 *
                 * console.log(objects);
                 * // => [{ 'a': 1 }, { 'a': 1 }]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => true
                 */
                function constant(value) {
                  return function() {
                    return value;
                  };
                }

                /**
                 * Checks `value` to determine whether a default value should be returned in
                 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                 * or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Util
                 * @param {*} value The value to check.
                 * @param {*} defaultValue The default value.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * _.defaultTo(1, 10);
                 * // => 1
                 *
                 * _.defaultTo(undefined, 10);
                 * // => 10
                 */
                function defaultTo(value, defaultValue) {
                  return value == null || value !== value
                    ? defaultValue
                    : value;
                }

                /**
                 * Creates a function that returns the result of invoking the given functions
                 * with the `this` binding of the created function, where each successive
                 * invocation is supplied the return value of the previous.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flowRight
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var addSquare = _.flow([_.add, square]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flow = createFlow();

                /**
                 * This method is like `_.flow` except that it creates a function that
                 * invokes the given functions from right to left.
                 *
                 * @static
                 * @since 3.0.0
                 * @memberOf _
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flow
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var addSquare = _.flowRight([square, _.add]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flowRight = createFlow(true);

                /**
                 * This method returns the first argument it receives.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {*} value Any value.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 *
                 * console.log(_.identity(object) === object);
                 * // => true
                 */
                function identity(value) {
                  return value;
                }

                /**
                 * Creates a function that invokes `func` with the arguments of the created
                 * function. If `func` is a property name, the created function returns the
                 * property value for a given element. If `func` is an array or object, the
                 * created function returns `true` for elements that contain the equivalent
                 * source properties, otherwise it returns `false`.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Util
                 * @param {*} [func=_.identity] The value to convert to a callback.
                 * @returns {Function} Returns the callback.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, _.iteratee(['user', 'fred']));
                 * // => [{ 'user': 'fred', 'age': 40 }]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, _.iteratee('user'));
                 * // => ['barney', 'fred']
                 *
                 * // Create custom iteratee shorthands.
                 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
                 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
                 *     return func.test(string);
                 *   };
                 * });
                 *
                 * _.filter(['abc', 'def'], /ef/);
                 * // => ['def']
                 */
                function iteratee(func) {
                  return baseIteratee(
                    typeof func == 'function'
                      ? func
                      : baseClone(func, CLONE_DEEP_FLAG)
                  );
                }

                /**
                 * Creates a function that performs a partial deep comparison between a given
                 * object and `source`, returning `true` if the given object has equivalent
                 * property values, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.isMatch` with `source`
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * **Note:** Multiple values can be checked by combining several matchers
                 * using `_.overSome`
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                 *
                 * // Checking for several possible values
                 * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
                 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
                 */
                function matches(source) {
                  return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that performs a partial deep comparison between the
                 * value at `path` of a given object to `srcValue`, returning `true` if the
                 * object value is equivalent, else `false`.
                 *
                 * **Note:** Partial comparisons will match empty array and empty object
                 * `srcValue` values against any array or object value, respectively. See
                 * `_.isEqual` for a list of supported value comparisons.
                 *
                 * **Note:** Multiple values can be checked by combining several matchers
                 * using `_.overSome`
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.find(objects, _.matchesProperty('a', 4));
                 * // => { 'a': 4, 'b': 5, 'c': 6 }
                 *
                 * // Checking for several possible values
                 * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
                 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
                 */
                function matchesProperty(path, srcValue) {
                  return baseMatchesProperty(
                    path,
                    baseClone(srcValue, CLONE_DEEP_FLAG)
                  );
                }

                /**
                 * Creates a function that invokes the method at `path` of a given object.
                 * Any additional arguments are provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': _.constant(2) } },
                 *   { 'a': { 'b': _.constant(1) } }
                 * ];
                 *
                 * _.map(objects, _.method('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(objects, _.method(['a', 'b']));
                 * // => [2, 1]
                 */
                var method = baseRest(function(path, args) {
                  return function(object) {
                    return baseInvoke(object, path, args);
                  };
                });

                /**
                 * The opposite of `_.method`; this method creates a function that invokes
                 * the method at a given path of `object`. Any additional arguments are
                 * provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var array = _.times(3, _.constant),
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                 * // => [2, 0]
                 */
                var methodOf = baseRest(function(object, args) {
                  return function(path) {
                    return baseInvoke(object, path, args);
                  };
                });

                /**
                 * Adds all own enumerable string keyed function properties of a source
                 * object to the destination object. If `object` is a function, then methods
                 * are added to its prototype as well.
                 *
                 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                 * avoid conflicts caused by modifying the original.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Function|Object} [object=lodash] The destination object.
                 * @param {Object} source The object of functions to add.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                 * @returns {Function|Object} Returns `object`.
                 * @example
                 *
                 * function vowels(string) {
                 *   return _.filter(string, function(v) {
                 *     return /[aeiou]/i.test(v);
                 *   });
                 * }
                 *
                 * _.mixin({ 'vowels': vowels });
                 * _.vowels('fred');
                 * // => ['e']
                 *
                 * _('fred').vowels().value();
                 * // => ['e']
                 *
                 * _.mixin({ 'vowels': vowels }, { 'chain': false });
                 * _('fred').vowels();
                 * // => ['e']
                 */
                function mixin(object, source, options) {
                  var props = keys(source),
                    methodNames = baseFunctions(source, props);

                  if (
                    options == null &&
                    !(isObject(source) && (methodNames.length || !props.length))
                  ) {
                    options = source;
                    source = object;
                    object = this;
                    methodNames = baseFunctions(source, keys(source));
                  }
                  var chain =
                      !(isObject(options) && 'chain' in options) ||
                      !!options.chain,
                    isFunc = isFunction(object);

                  arrayEach(methodNames, function(methodName) {
                    var func = source[methodName];
                    object[methodName] = func;
                    if (isFunc) {
                      object.prototype[methodName] = function() {
                        var chainAll = this.__chain__;
                        if (chain || chainAll) {
                          var result = object(this.__wrapped__),
                            actions = (result.__actions__ = copyArray(
                              this.__actions__
                            ));

                          actions.push({
                            func: func,
                            args: arguments,
                            thisArg: object,
                          });
                          result.__chain__ = chainAll;
                          return result;
                        }
                        return func.apply(
                          object,
                          arrayPush([this.value()], arguments)
                        );
                      };
                    }
                  });

                  return object;
                }

                /**
                 * Reverts the `_` variable to its previous value and returns a reference to
                 * the `lodash` function.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @returns {Function} Returns the `lodash` function.
                 * @example
                 *
                 * var lodash = _.noConflict();
                 */
                function noConflict() {
                  if (root._ === this) {
                    root._ = oldDash;
                  }
                  return this;
                }

                /**
                 * This method returns `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Util
                 * @example
                 *
                 * _.times(2, _.noop);
                 * // => [undefined, undefined]
                 */
                function noop() {
                  // No operation performed.
                }

                /**
                 * Creates a function that gets the argument at index `n`. If `n` is negative,
                 * the nth argument from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [n=0] The index of the argument to return.
                 * @returns {Function} Returns the new pass-thru function.
                 * @example
                 *
                 * var func = _.nthArg(1);
                 * func('a', 'b', 'c', 'd');
                 * // => 'b'
                 *
                 * var func = _.nthArg(-2);
                 * func('a', 'b', 'c', 'd');
                 * // => 'c'
                 */
                function nthArg(n) {
                  n = toInteger(n);
                  return baseRest(function(args) {
                    return baseNth(args, n);
                  });
                }

                /**
                 * Creates a function that invokes `iteratees` with the arguments it receives
                 * and returns their results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to invoke.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.over([Math.max, Math.min]);
                 *
                 * func(1, 2, 3, 4);
                 * // => [4, 1]
                 */
                var over = createOver(arrayMap);

                /**
                 * Creates a function that checks if **all** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * Following shorthands are possible for providing predicates.
                 * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
                 * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overEvery([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => false
                 *
                 * func(NaN);
                 * // => false
                 */
                var overEvery = createOver(arrayEvery);

                /**
                 * Creates a function that checks if **any** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * Following shorthands are possible for providing predicates.
                 * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
                 * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overSome([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => true
                 *
                 * func(NaN);
                 * // => false
                 *
                 * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
                 * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
                 */
                var overSome = createOver(arraySome);

                /**
                 * Creates a function that returns the value at `path` of a given object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': 2 } },
                 *   { 'a': { 'b': 1 } }
                 * ];
                 *
                 * _.map(objects, _.property('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                 * // => [1, 2]
                 */
                function property(path) {
                  return isKey(path)
                    ? baseProperty(toKey(path))
                    : basePropertyDeep(path);
                }

                /**
                 * The opposite of `_.property`; this method creates a function that returns
                 * the value at a given path of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var array = [0, 1, 2],
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                 * // => [2, 0]
                 */
                function propertyOf(object) {
                  return function(path) {
                    return object == null ? undefined : baseGet(object, path);
                  };
                }

                /**
                 * Creates an array of numbers (positive and/or negative) progressing from
                 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                 * `start` is specified without an `end` or `step`. If `end` is not specified,
                 * it's set to `start` with `start` then set to `0`.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.rangeRight
                 * @example
                 *
                 * _.range(4);
                 * // => [0, 1, 2, 3]
                 *
                 * _.range(-4);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 5);
                 * // => [1, 2, 3, 4]
                 *
                 * _.range(0, 20, 5);
                 * // => [0, 5, 10, 15]
                 *
                 * _.range(0, -4, -1);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.range(0);
                 * // => []
                 */
                var range = createRange();

                /**
                 * This method is like `_.range` except that it populates values in
                 * descending order.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.range
                 * @example
                 *
                 * _.rangeRight(4);
                 * // => [3, 2, 1, 0]
                 *
                 * _.rangeRight(-4);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 5);
                 * // => [4, 3, 2, 1]
                 *
                 * _.rangeRight(0, 20, 5);
                 * // => [15, 10, 5, 0]
                 *
                 * _.rangeRight(0, -4, -1);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.rangeRight(0);
                 * // => []
                 */
                var rangeRight = createRange(true);

                /**
                 * This method returns a new empty array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Array} Returns the new empty array.
                 * @example
                 *
                 * var arrays = _.times(2, _.stubArray);
                 *
                 * console.log(arrays);
                 * // => [[], []]
                 *
                 * console.log(arrays[0] === arrays[1]);
                 * // => false
                 */
                function stubArray() {
                  return [];
                }

                /**
                 * This method returns `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `false`.
                 * @example
                 *
                 * _.times(2, _.stubFalse);
                 * // => [false, false]
                 */
                function stubFalse() {
                  return false;
                }

                /**
                 * This method returns a new empty object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Object} Returns the new empty object.
                 * @example
                 *
                 * var objects = _.times(2, _.stubObject);
                 *
                 * console.log(objects);
                 * // => [{}, {}]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => false
                 */
                function stubObject() {
                  return {};
                }

                /**
                 * This method returns an empty string.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {string} Returns the empty string.
                 * @example
                 *
                 * _.times(2, _.stubString);
                 * // => ['', '']
                 */
                function stubString() {
                  return '';
                }

                /**
                 * This method returns `true`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `true`.
                 * @example
                 *
                 * _.times(2, _.stubTrue);
                 * // => [true, true]
                 */
                function stubTrue() {
                  return true;
                }

                /**
                 * Invokes the iteratee `n` times, returning an array of the results of
                 * each invocation. The iteratee is invoked with one argument; (index).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.times(3, String);
                 * // => ['0', '1', '2']
                 *
                 *  _.times(4, _.constant(0));
                 * // => [0, 0, 0, 0]
                 */
                function times(n, iteratee) {
                  n = toInteger(n);
                  if (n < 1 || n > MAX_SAFE_INTEGER) {
                    return [];
                  }
                  var index = MAX_ARRAY_LENGTH,
                    length = nativeMin(n, MAX_ARRAY_LENGTH);

                  iteratee = getIteratee(iteratee);
                  n -= MAX_ARRAY_LENGTH;

                  var result = baseTimes(length, iteratee);
                  while (++index < n) {
                    iteratee(index);
                  }
                  return result;
                }

                /**
                 * Converts `value` to a property path array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the new property path array.
                 * @example
                 *
                 * _.toPath('a.b.c');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toPath('a[0].b.c');
                 * // => ['a', '0', 'b', 'c']
                 */
                function toPath(value) {
                  if (isArray(value)) {
                    return arrayMap(value, toKey);
                  }
                  return isSymbol(value)
                    ? [value]
                    : copyArray(stringToPath(toString(value)));
                }

                /**
                 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {string} [prefix=''] The value to prefix the ID with.
                 * @returns {string} Returns the unique ID.
                 * @example
                 *
                 * _.uniqueId('contact_');
                 * // => 'contact_104'
                 *
                 * _.uniqueId();
                 * // => '105'
                 */
                function uniqueId(prefix) {
                  var id = ++idCounter;
                  return toString(prefix) + id;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Adds two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {number} augend The first number in an addition.
                 * @param {number} addend The second number in an addition.
                 * @returns {number} Returns the total.
                 * @example
                 *
                 * _.add(6, 4);
                 * // => 10
                 */
                var add = createMathOperation(function(augend, addend) {
                  return augend + addend;
                }, 0);

                /**
                 * Computes `number` rounded up to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round up.
                 * @param {number} [precision=0] The precision to round up to.
                 * @returns {number} Returns the rounded up number.
                 * @example
                 *
                 * _.ceil(4.006);
                 * // => 5
                 *
                 * _.ceil(6.004, 2);
                 * // => 6.01
                 *
                 * _.ceil(6040, -2);
                 * // => 6100
                 */
                var ceil = createRound('ceil');

                /**
                 * Divide two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} dividend The first number in a division.
                 * @param {number} divisor The second number in a division.
                 * @returns {number} Returns the quotient.
                 * @example
                 *
                 * _.divide(6, 4);
                 * // => 1.5
                 */
                var divide = createMathOperation(function(dividend, divisor) {
                  return dividend / divisor;
                }, 1);

                /**
                 * Computes `number` rounded down to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round down.
                 * @param {number} [precision=0] The precision to round down to.
                 * @returns {number} Returns the rounded down number.
                 * @example
                 *
                 * _.floor(4.006);
                 * // => 4
                 *
                 * _.floor(0.046, 2);
                 * // => 0.04
                 *
                 * _.floor(4060, -2);
                 * // => 4000
                 */
                var floor = createRound('floor');

                /**
                 * Computes the maximum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * _.max([4, 2, 8, 6]);
                 * // => 8
                 *
                 * _.max([]);
                 * // => undefined
                 */
                function max(array) {
                  return array && array.length
                    ? baseExtremum(array, identity, baseGt)
                    : undefined;
                }

                /**
                 * This method is like `_.max` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.maxBy(objects, function(o) { return o.n; });
                 * // => { 'n': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.maxBy(objects, 'n');
                 * // => { 'n': 2 }
                 */
                function maxBy(array, iteratee) {
                  return array && array.length
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                    : undefined;
                }

                /**
                 * Computes the mean of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * _.mean([4, 2, 8, 6]);
                 * // => 5
                 */
                function mean(array) {
                  return baseMean(array, identity);
                }

                /**
                 * This method is like `_.mean` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be averaged.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.meanBy(objects, function(o) { return o.n; });
                 * // => 5
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.meanBy(objects, 'n');
                 * // => 5
                 */
                function meanBy(array, iteratee) {
                  return baseMean(array, getIteratee(iteratee, 2));
                }

                /**
                 * Computes the minimum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * _.min([4, 2, 8, 6]);
                 * // => 2
                 *
                 * _.min([]);
                 * // => undefined
                 */
                function min(array) {
                  return array && array.length
                    ? baseExtremum(array, identity, baseLt)
                    : undefined;
                }

                /**
                 * This method is like `_.min` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.minBy(objects, function(o) { return o.n; });
                 * // => { 'n': 1 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.minBy(objects, 'n');
                 * // => { 'n': 1 }
                 */
                function minBy(array, iteratee) {
                  return array && array.length
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                    : undefined;
                }

                /**
                 * Multiply two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} multiplier The first number in a multiplication.
                 * @param {number} multiplicand The second number in a multiplication.
                 * @returns {number} Returns the product.
                 * @example
                 *
                 * _.multiply(6, 4);
                 * // => 24
                 */
                var multiply = createMathOperation(function(
                  multiplier,
                  multiplicand
                ) {
                  return multiplier * multiplicand;
                },
                1);

                /**
                 * Computes `number` rounded to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round.
                 * @param {number} [precision=0] The precision to round to.
                 * @returns {number} Returns the rounded number.
                 * @example
                 *
                 * _.round(4.006);
                 * // => 4
                 *
                 * _.round(4.006, 2);
                 * // => 4.01
                 *
                 * _.round(4060, -2);
                 * // => 4100
                 */
                var round = createRound('round');

                /**
                 * Subtract two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {number} minuend The first number in a subtraction.
                 * @param {number} subtrahend The second number in a subtraction.
                 * @returns {number} Returns the difference.
                 * @example
                 *
                 * _.subtract(6, 4);
                 * // => 2
                 */
                var subtract = createMathOperation(function(
                  minuend,
                  subtrahend
                ) {
                  return minuend - subtrahend;
                },
                0);

                /**
                 * Computes the sum of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * _.sum([4, 2, 8, 6]);
                 * // => 20
                 */
                function sum(array) {
                  return array && array.length ? baseSum(array, identity) : 0;
                }

                /**
                 * This method is like `_.sum` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be summed.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.sumBy(objects, function(o) { return o.n; });
                 * // => 20
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sumBy(objects, 'n');
                 * // => 20
                 */
                function sumBy(array, iteratee) {
                  return array && array.length
                    ? baseSum(array, getIteratee(iteratee, 2))
                    : 0;
                }

                /*------------------------------------------------------------------------*/

                // Add methods that return wrapped values in chain sequences.
                lodash.after = after;
                lodash.ary = ary;
                lodash.assign = assign;
                lodash.assignIn = assignIn;
                lodash.assignInWith = assignInWith;
                lodash.assignWith = assignWith;
                lodash.at = at;
                lodash.before = before;
                lodash.bind = bind;
                lodash.bindAll = bindAll;
                lodash.bindKey = bindKey;
                lodash.castArray = castArray;
                lodash.chain = chain;
                lodash.chunk = chunk;
                lodash.compact = compact;
                lodash.concat = concat;
                lodash.cond = cond;
                lodash.conforms = conforms;
                lodash.constant = constant;
                lodash.countBy = countBy;
                lodash.create = create;
                lodash.curry = curry;
                lodash.curryRight = curryRight;
                lodash.debounce = debounce;
                lodash.defaults = defaults;
                lodash.defaultsDeep = defaultsDeep;
                lodash.defer = defer;
                lodash.delay = delay;
                lodash.difference = difference;
                lodash.differenceBy = differenceBy;
                lodash.differenceWith = differenceWith;
                lodash.drop = drop;
                lodash.dropRight = dropRight;
                lodash.dropRightWhile = dropRightWhile;
                lodash.dropWhile = dropWhile;
                lodash.fill = fill;
                lodash.filter = filter;
                lodash.flatMap = flatMap;
                lodash.flatMapDeep = flatMapDeep;
                lodash.flatMapDepth = flatMapDepth;
                lodash.flatten = flatten;
                lodash.flattenDeep = flattenDeep;
                lodash.flattenDepth = flattenDepth;
                lodash.flip = flip;
                lodash.flow = flow;
                lodash.flowRight = flowRight;
                lodash.fromPairs = fromPairs;
                lodash.functions = functions;
                lodash.functionsIn = functionsIn;
                lodash.groupBy = groupBy;
                lodash.initial = initial;
                lodash.intersection = intersection;
                lodash.intersectionBy = intersectionBy;
                lodash.intersectionWith = intersectionWith;
                lodash.invert = invert;
                lodash.invertBy = invertBy;
                lodash.invokeMap = invokeMap;
                lodash.iteratee = iteratee;
                lodash.keyBy = keyBy;
                lodash.keys = keys;
                lodash.keysIn = keysIn;
                lodash.map = map;
                lodash.mapKeys = mapKeys;
                lodash.mapValues = mapValues;
                lodash.matches = matches;
                lodash.matchesProperty = matchesProperty;
                lodash.memoize = memoize;
                lodash.merge = merge;
                lodash.mergeWith = mergeWith;
                lodash.method = method;
                lodash.methodOf = methodOf;
                lodash.mixin = mixin;
                lodash.negate = negate;
                lodash.nthArg = nthArg;
                lodash.omit = omit;
                lodash.omitBy = omitBy;
                lodash.once = once;
                lodash.orderBy = orderBy;
                lodash.over = over;
                lodash.overArgs = overArgs;
                lodash.overEvery = overEvery;
                lodash.overSome = overSome;
                lodash.partial = partial;
                lodash.partialRight = partialRight;
                lodash.partition = partition;
                lodash.pick = pick;
                lodash.pickBy = pickBy;
                lodash.property = property;
                lodash.propertyOf = propertyOf;
                lodash.pull = pull;
                lodash.pullAll = pullAll;
                lodash.pullAllBy = pullAllBy;
                lodash.pullAllWith = pullAllWith;
                lodash.pullAt = pullAt;
                lodash.range = range;
                lodash.rangeRight = rangeRight;
                lodash.rearg = rearg;
                lodash.reject = reject;
                lodash.remove = remove;
                lodash.rest = rest;
                lodash.reverse = reverse;
                lodash.sampleSize = sampleSize;
                lodash.set = set;
                lodash.setWith = setWith;
                lodash.shuffle = shuffle;
                lodash.slice = slice;
                lodash.sortBy = sortBy;
                lodash.sortedUniq = sortedUniq;
                lodash.sortedUniqBy = sortedUniqBy;
                lodash.split = split;
                lodash.spread = spread;
                lodash.tail = tail;
                lodash.take = take;
                lodash.takeRight = takeRight;
                lodash.takeRightWhile = takeRightWhile;
                lodash.takeWhile = takeWhile;
                lodash.tap = tap;
                lodash.throttle = throttle;
                lodash.thru = thru;
                lodash.toArray = toArray;
                lodash.toPairs = toPairs;
                lodash.toPairsIn = toPairsIn;
                lodash.toPath = toPath;
                lodash.toPlainObject = toPlainObject;
                lodash.transform = transform;
                lodash.unary = unary;
                lodash.union = union;
                lodash.unionBy = unionBy;
                lodash.unionWith = unionWith;
                lodash.uniq = uniq;
                lodash.uniqBy = uniqBy;
                lodash.uniqWith = uniqWith;
                lodash.unset = unset;
                lodash.unzip = unzip;
                lodash.unzipWith = unzipWith;
                lodash.update = update;
                lodash.updateWith = updateWith;
                lodash.values = values;
                lodash.valuesIn = valuesIn;
                lodash.without = without;
                lodash.words = words;
                lodash.wrap = wrap;
                lodash.xor = xor;
                lodash.xorBy = xorBy;
                lodash.xorWith = xorWith;
                lodash.zip = zip;
                lodash.zipObject = zipObject;
                lodash.zipObjectDeep = zipObjectDeep;
                lodash.zipWith = zipWith;

                // Add aliases.
                lodash.entries = toPairs;
                lodash.entriesIn = toPairsIn;
                lodash.extend = assignIn;
                lodash.extendWith = assignInWith;

                // Add methods to `lodash.prototype`.
                mixin(lodash, lodash);

                /*------------------------------------------------------------------------*/

                // Add methods that return unwrapped values in chain sequences.
                lodash.add = add;
                lodash.attempt = attempt;
                lodash.camelCase = camelCase;
                lodash.capitalize = capitalize;
                lodash.ceil = ceil;
                lodash.clamp = clamp;
                lodash.clone = clone;
                lodash.cloneDeep = cloneDeep;
                lodash.cloneDeepWith = cloneDeepWith;
                lodash.cloneWith = cloneWith;
                lodash.conformsTo = conformsTo;
                lodash.deburr = deburr;
                lodash.defaultTo = defaultTo;
                lodash.divide = divide;
                lodash.endsWith = endsWith;
                lodash.eq = eq;
                lodash.escape = escape;
                lodash.escapeRegExp = escapeRegExp;
                lodash.every = every;
                lodash.find = find;
                lodash.findIndex = findIndex;
                lodash.findKey = findKey;
                lodash.findLast = findLast;
                lodash.findLastIndex = findLastIndex;
                lodash.findLastKey = findLastKey;
                lodash.floor = floor;
                lodash.forEach = forEach;
                lodash.forEachRight = forEachRight;
                lodash.forIn = forIn;
                lodash.forInRight = forInRight;
                lodash.forOwn = forOwn;
                lodash.forOwnRight = forOwnRight;
                lodash.get = get;
                lodash.gt = gt;
                lodash.gte = gte;
                lodash.has = has;
                lodash.hasIn = hasIn;
                lodash.head = head;
                lodash.identity = identity;
                lodash.includes = includes;
                lodash.indexOf = indexOf;
                lodash.inRange = inRange;
                lodash.invoke = invoke;
                lodash.isArguments = isArguments;
                lodash.isArray = isArray;
                lodash.isArrayBuffer = isArrayBuffer;
                lodash.isArrayLike = isArrayLike;
                lodash.isArrayLikeObject = isArrayLikeObject;
                lodash.isBoolean = isBoolean;
                lodash.isBuffer = isBuffer;
                lodash.isDate = isDate;
                lodash.isElement = isElement;
                lodash.isEmpty = isEmpty;
                lodash.isEqual = isEqual;
                lodash.isEqualWith = isEqualWith;
                lodash.isError = isError;
                lodash.isFinite = isFinite;
                lodash.isFunction = isFunction;
                lodash.isInteger = isInteger;
                lodash.isLength = isLength;
                lodash.isMap = isMap;
                lodash.isMatch = isMatch;
                lodash.isMatchWith = isMatchWith;
                lodash.isNaN = isNaN;
                lodash.isNative = isNative;
                lodash.isNil = isNil;
                lodash.isNull = isNull;
                lodash.isNumber = isNumber;
                lodash.isObject = isObject;
                lodash.isObjectLike = isObjectLike;
                lodash.isPlainObject = isPlainObject;
                lodash.isRegExp = isRegExp;
                lodash.isSafeInteger = isSafeInteger;
                lodash.isSet = isSet;
                lodash.isString = isString;
                lodash.isSymbol = isSymbol;
                lodash.isTypedArray = isTypedArray;
                lodash.isUndefined = isUndefined;
                lodash.isWeakMap = isWeakMap;
                lodash.isWeakSet = isWeakSet;
                lodash.join = join;
                lodash.kebabCase = kebabCase;
                lodash.last = last;
                lodash.lastIndexOf = lastIndexOf;
                lodash.lowerCase = lowerCase;
                lodash.lowerFirst = lowerFirst;
                lodash.lt = lt;
                lodash.lte = lte;
                lodash.max = max;
                lodash.maxBy = maxBy;
                lodash.mean = mean;
                lodash.meanBy = meanBy;
                lodash.min = min;
                lodash.minBy = minBy;
                lodash.stubArray = stubArray;
                lodash.stubFalse = stubFalse;
                lodash.stubObject = stubObject;
                lodash.stubString = stubString;
                lodash.stubTrue = stubTrue;
                lodash.multiply = multiply;
                lodash.nth = nth;
                lodash.noConflict = noConflict;
                lodash.noop = noop;
                lodash.now = now;
                lodash.pad = pad;
                lodash.padEnd = padEnd;
                lodash.padStart = padStart;
                lodash.parseInt = parseInt;
                lodash.random = random;
                lodash.reduce = reduce;
                lodash.reduceRight = reduceRight;
                lodash.repeat = repeat;
                lodash.replace = replace;
                lodash.result = result;
                lodash.round = round;
                lodash.runInContext = runInContext;
                lodash.sample = sample;
                lodash.size = size;
                lodash.snakeCase = snakeCase;
                lodash.some = some;
                lodash.sortedIndex = sortedIndex;
                lodash.sortedIndexBy = sortedIndexBy;
                lodash.sortedIndexOf = sortedIndexOf;
                lodash.sortedLastIndex = sortedLastIndex;
                lodash.sortedLastIndexBy = sortedLastIndexBy;
                lodash.sortedLastIndexOf = sortedLastIndexOf;
                lodash.startCase = startCase;
                lodash.startsWith = startsWith;
                lodash.subtract = subtract;
                lodash.sum = sum;
                lodash.sumBy = sumBy;
                lodash.template = template;
                lodash.times = times;
                lodash.toFinite = toFinite;
                lodash.toInteger = toInteger;
                lodash.toLength = toLength;
                lodash.toLower = toLower;
                lodash.toNumber = toNumber;
                lodash.toSafeInteger = toSafeInteger;
                lodash.toString = toString;
                lodash.toUpper = toUpper;
                lodash.trim = trim;
                lodash.trimEnd = trimEnd;
                lodash.trimStart = trimStart;
                lodash.truncate = truncate;
                lodash.unescape = unescape;
                lodash.uniqueId = uniqueId;
                lodash.upperCase = upperCase;
                lodash.upperFirst = upperFirst;

                // Add aliases.
                lodash.each = forEach;
                lodash.eachRight = forEachRight;
                lodash.first = head;

                mixin(
                  lodash,
                  (function() {
                    var source = {};
                    baseForOwn(lodash, function(func, methodName) {
                      if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                        source[methodName] = func;
                      }
                    });
                    return source;
                  })(),
                  { chain: false }
                );

                /*------------------------------------------------------------------------*/

                /**
                 * The semantic version number.
                 *
                 * @static
                 * @memberOf _
                 * @type {string}
                 */
                lodash.VERSION = VERSION;

                // Assign default placeholders.
                arrayEach(
                  [
                    'bind',
                    'bindKey',
                    'curry',
                    'curryRight',
                    'partial',
                    'partialRight',
                  ],
                  function(methodName) {
                    lodash[methodName].placeholder = lodash;
                  }
                );

                // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                arrayEach(['drop', 'take'], function(methodName, index) {
                  LazyWrapper.prototype[methodName] = function(n) {
                    n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                    var result =
                      this.__filtered__ && !index
                        ? new LazyWrapper(this)
                        : this.clone();

                    if (result.__filtered__) {
                      result.__takeCount__ = nativeMin(n, result.__takeCount__);
                    } else {
                      result.__views__.push({
                        size: nativeMin(n, MAX_ARRAY_LENGTH),
                        type: methodName + (result.__dir__ < 0 ? 'Right' : ''),
                      });
                    }
                    return result;
                  };

                  LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                    return this.reverse()
                      [methodName](n)
                      .reverse();
                  };
                });

                // Add `LazyWrapper` methods that accept an `iteratee` value.
                arrayEach(['filter', 'map', 'takeWhile'], function(
                  methodName,
                  index
                ) {
                  var type = index + 1,
                    isFilter =
                      type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                  LazyWrapper.prototype[methodName] = function(iteratee) {
                    var result = this.clone();
                    result.__iteratees__.push({
                      iteratee: getIteratee(iteratee, 3),
                      type: type,
                    });
                    result.__filtered__ = result.__filtered__ || isFilter;
                    return result;
                  };
                });

                // Add `LazyWrapper` methods for `_.head` and `_.last`.
                arrayEach(['head', 'last'], function(methodName, index) {
                  var takeName = 'take' + (index ? 'Right' : '');

                  LazyWrapper.prototype[methodName] = function() {
                    return this[takeName](1).value()[0];
                  };
                });

                // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                arrayEach(['initial', 'tail'], function(methodName, index) {
                  var dropName = 'drop' + (index ? '' : 'Right');

                  LazyWrapper.prototype[methodName] = function() {
                    return this.__filtered__
                      ? new LazyWrapper(this)
                      : this[dropName](1);
                  };
                });

                LazyWrapper.prototype.compact = function() {
                  return this.filter(identity);
                };

                LazyWrapper.prototype.find = function(predicate) {
                  return this.filter(predicate).head();
                };

                LazyWrapper.prototype.findLast = function(predicate) {
                  return this.reverse().find(predicate);
                };

                LazyWrapper.prototype.invokeMap = baseRest(function(
                  path,
                  args
                ) {
                  if (typeof path == 'function') {
                    return new LazyWrapper(this);
                  }
                  return this.map(function(value) {
                    return baseInvoke(value, path, args);
                  });
                });

                LazyWrapper.prototype.reject = function(predicate) {
                  return this.filter(negate(getIteratee(predicate)));
                };

                LazyWrapper.prototype.slice = function(start, end) {
                  start = toInteger(start);

                  var result = this;
                  if (result.__filtered__ && (start > 0 || end < 0)) {
                    return new LazyWrapper(result);
                  }
                  if (start < 0) {
                    result = result.takeRight(-start);
                  } else if (start) {
                    result = result.drop(start);
                  }
                  if (end !== undefined) {
                    end = toInteger(end);
                    result =
                      end < 0
                        ? result.dropRight(-end)
                        : result.take(end - start);
                  }
                  return result;
                };

                LazyWrapper.prototype.takeRightWhile = function(predicate) {
                  return this.reverse()
                    .takeWhile(predicate)
                    .reverse();
                };

                LazyWrapper.prototype.toArray = function() {
                  return this.take(MAX_ARRAY_LENGTH);
                };

                // Add `LazyWrapper` methods to `lodash.prototype`.
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                  var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
                      methodName
                    ),
                    isTaker = /^(?:head|last)$/.test(methodName),
                    lodashFunc =
                      lodash[
                        isTaker
                          ? 'take' + (methodName == 'last' ? 'Right' : '')
                          : methodName
                      ],
                    retUnwrapped = isTaker || /^find/.test(methodName);

                  if (!lodashFunc) {
                    return;
                  }
                  lodash.prototype[methodName] = function() {
                    var value = this.__wrapped__,
                      args = isTaker ? [1] : arguments,
                      isLazy = value instanceof LazyWrapper,
                      iteratee = args[0],
                      useLazy = isLazy || isArray(value);

                    var interceptor = function(value) {
                      var result = lodashFunc.apply(
                        lodash,
                        arrayPush([value], args)
                      );
                      return isTaker && chainAll ? result[0] : result;
                    };

                    if (
                      useLazy &&
                      checkIteratee &&
                      typeof iteratee == 'function' &&
                      iteratee.length != 1
                    ) {
                      // Avoid lazy use if the iteratee has a "length" value other than `1`.
                      isLazy = useLazy = false;
                    }
                    var chainAll = this.__chain__,
                      isHybrid = !!this.__actions__.length,
                      isUnwrapped = retUnwrapped && !chainAll,
                      onlyLazy = isLazy && !isHybrid;

                    if (!retUnwrapped && useLazy) {
                      value = onlyLazy ? value : new LazyWrapper(this);
                      var result = func.apply(value, args);
                      result.__actions__.push({
                        func: thru,
                        args: [interceptor],
                        thisArg: undefined,
                      });
                      return new LodashWrapper(result, chainAll);
                    }
                    if (isUnwrapped && onlyLazy) {
                      return func.apply(this, args);
                    }
                    result = this.thru(interceptor);
                    return isUnwrapped
                      ? isTaker
                        ? result.value()[0]
                        : result.value()
                      : result;
                  };
                });

                // Add `Array` methods to `lodash.prototype`.
                arrayEach(
                  ['pop', 'push', 'shift', 'sort', 'splice', 'unshift'],
                  function(methodName) {
                    var func = arrayProto[methodName],
                      chainName = /^(?:push|sort|unshift)$/.test(methodName)
                        ? 'tap'
                        : 'thru',
                      retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                    lodash.prototype[methodName] = function() {
                      var args = arguments;
                      if (retUnwrapped && !this.__chain__) {
                        var value = this.value();
                        return func.apply(isArray(value) ? value : [], args);
                      }
                      return this[chainName](function(value) {
                        return func.apply(isArray(value) ? value : [], args);
                      });
                    };
                  }
                );

                // Map minified method names to their real names.
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                  var lodashFunc = lodash[methodName];
                  if (lodashFunc) {
                    var key = lodashFunc.name + '';
                    if (!hasOwnProperty.call(realNames, key)) {
                      realNames[key] = [];
                    }
                    realNames[key].push({ name: methodName, func: lodashFunc });
                  }
                });

                realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
                  {
                    name: 'wrapper',
                    func: undefined,
                  },
                ];

                // Add methods to `LazyWrapper`.
                LazyWrapper.prototype.clone = lazyClone;
                LazyWrapper.prototype.reverse = lazyReverse;
                LazyWrapper.prototype.value = lazyValue;

                // Add chain sequence methods to the `lodash` wrapper.
                lodash.prototype.at = wrapperAt;
                lodash.prototype.chain = wrapperChain;
                lodash.prototype.commit = wrapperCommit;
                lodash.prototype.next = wrapperNext;
                lodash.prototype.plant = wrapperPlant;
                lodash.prototype.reverse = wrapperReverse;
                lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                // Add lazy aliases.
                lodash.prototype.first = lodash.prototype.head;

                if (symIterator) {
                  lodash.prototype[symIterator] = wrapperToIterator;
                }
                return lodash;
              };

              /*--------------------------------------------------------------------------*/

              // Export lodash.
              var _ = runInContext();

              // Some AMD build optimizers, like r.js, check for condition patterns like:
              if (
                typeof define == 'function' &&
                typeof define.amd == 'object' &&
                define.amd
              ) {
                // Expose Lodash on the global object to prevent errors when Lodash is
                // loaded by a script tag in the presence of an AMD loader.
                // See http://requirejs.org/docs/errors.html#mismatch for more details.
                // Use `_.noConflict` to remove Lodash from the global object.
                root._ = _;

                // Define as an anonymous module so, through path mapping, it can be
                // referenced as the "underscore" module.
                define(function() {
                  return _;
                });
              }
              // Check for `exports` after `define` in case a build optimizer adds it.
              else if (freeModule) {
                // Export for Node.js.
                (freeModule.exports = _)._ = _;
                // Export for CommonJS support.
                freeExports._ = _;
              } else {
                // Export to the global object.
                root._ = _;
              }
            }.call(this));
          }.call(this));
        }.call(
          this,
          typeof global !== 'undefined'
            ? global
            : typeof self !== 'undefined'
            ? self
            : typeof window !== 'undefined'
            ? window
            : {}
        ));
      },
      {},
    ],
    117: [
      function(require, module, exports) {
        arguments[4][111][0].apply(exports, arguments);
      },
      { dup: 111 },
    ],
    118: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict';

            var printWarning = function() {};

            if (process.env.NODE_ENV !== 'production') {
              var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
              var loggedTypeFailures = {};
              var has = Function.call.bind(Object.prototype.hasOwnProperty);

              printWarning = function(text) {
                var message = 'Warning: ' + text;
                if (typeof console !== 'undefined') {
                  console.error(message);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };
            }

            /**
             * Assert that the values match with the type specs.
             * Error messages are memorized and will only be shown once.
             *
             * @param {object} typeSpecs Map of name to a ReactPropType
             * @param {object} values Runtime values that need to be type-checked
             * @param {string} location e.g. "prop", "context", "child context"
             * @param {string} componentName Name of the component for error messages.
             * @param {?Function} getStack Returns the component stack.
             * @private
             */
            function checkPropTypes(
              typeSpecs,
              values,
              location,
              componentName,
              getStack
            ) {
              if (process.env.NODE_ENV !== 'production') {
                for (var typeSpecName in typeSpecs) {
                  if (has(typeSpecs, typeSpecName)) {
                    var error;
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                      // This is intentionally an invariant that gets caught. It's the same
                      // behavior as without this statement except with a better message.
                      if (typeof typeSpecs[typeSpecName] !== 'function') {
                        var err = Error(
                          (componentName || 'React class') +
                            ': ' +
                            location +
                            ' type `' +
                            typeSpecName +
                            '` is invalid; ' +
                            'it must be a function, usually from the `prop-types` package, but received `' +
                            typeof typeSpecs[typeSpecName] +
                            '`.'
                        );
                        err.name = 'Invariant Violation';
                        throw err;
                      }
                      error = typeSpecs[typeSpecName](
                        values,
                        typeSpecName,
                        componentName,
                        location,
                        null,
                        ReactPropTypesSecret
                      );
                    } catch (ex) {
                      error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                      printWarning(
                        (componentName || 'React class') +
                          ': type specification of ' +
                          location +
                          ' `' +
                          typeSpecName +
                          '` is invalid; the type checker ' +
                          'function must return `null` or an `Error` but returned a ' +
                          typeof error +
                          '. ' +
                          'You may have forgotten to pass an argument to the type checker ' +
                          'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                          'shape all require an argument).'
                      );
                    }
                    if (
                      error instanceof Error &&
                      !(error.message in loggedTypeFailures)
                    ) {
                      // Only monitor this failure once because there tends to be a lot of the
                      // same error.
                      loggedTypeFailures[error.message] = true;

                      var stack = getStack ? getStack() : '';

                      printWarning(
                        'Failed ' +
                          location +
                          ' type: ' +
                          error.message +
                          (stack != null ? stack : '')
                      );
                    }
                  }
                }
              }
            }

            /**
             * Resets warning cache when testing.
             *
             * @private
             */
            checkPropTypes.resetWarningCache = function() {
              if (process.env.NODE_ENV !== 'production') {
                loggedTypeFailures = {};
              }
            };

            module.exports = checkPropTypes;
          }.call(this));
        }.call(this, require('_process')));
      },
      { './lib/ReactPropTypesSecret': 122, _process: 112 },
    ],
    119: [
      function(require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        'use strict';

        var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

        function emptyFunction() {}
        function emptyFunctionWithReset() {}
        emptyFunctionWithReset.resetWarningCache = emptyFunction;

        module.exports = function() {
          function shim(
            props,
            propName,
            componentName,
            location,
            propFullName,
            secret
          ) {
            if (secret === ReactPropTypesSecret) {
              // It is still safe when called from React.
              return;
            }
            var err = new Error(
              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use PropTypes.checkPropTypes() to call them. ' +
                'Read more at http://fb.me/use-check-prop-types'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          shim.isRequired = shim;
          function getShim() {
            return shim;
          }
          // Important!
          // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
          var ReactPropTypes = {
            array: shim,
            bool: shim,
            func: shim,
            number: shim,
            object: shim,
            string: shim,
            symbol: shim,

            any: shim,
            arrayOf: getShim,
            element: shim,
            elementType: shim,
            instanceOf: getShim,
            node: shim,
            objectOf: getShim,
            oneOf: getShim,
            oneOfType: getShim,
            shape: getShim,
            exact: getShim,

            checkPropTypes: emptyFunctionWithReset,
            resetWarningCache: emptyFunction,
          };

          ReactPropTypes.PropTypes = ReactPropTypes;

          return ReactPropTypes;
        };
      },
      { './lib/ReactPropTypesSecret': 122 },
    ],
    120: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict';

            var ReactIs = require('react-is');
            var assign = require('object-assign');

            var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
            var checkPropTypes = require('./checkPropTypes');

            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            var printWarning = function() {};

            if (process.env.NODE_ENV !== 'production') {
              printWarning = function(text) {
                var message = 'Warning: ' + text;
                if (typeof console !== 'undefined') {
                  console.error(message);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };
            }

            function emptyFunctionThatReturnsNull() {
              return null;
            }

            module.exports = function(isValidElement, throwOnDirectAccess) {
              /* global Symbol */
              var ITERATOR_SYMBOL =
                typeof Symbol === 'function' && Symbol.iterator;
              var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

              /**
               * Returns the iterator method function contained on the iterable object.
               *
               * Be sure to invoke the function with the iterable as context:
               *
               *     var iteratorFn = getIteratorFn(myIterable);
               *     if (iteratorFn) {
               *       var iterator = iteratorFn.call(myIterable);
               *       ...
               *     }
               *
               * @param {?object} maybeIterable
               * @return {?function}
               */
              function getIteratorFn(maybeIterable) {
                var iteratorFn =
                  maybeIterable &&
                  ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
                    maybeIterable[FAUX_ITERATOR_SYMBOL]);
                if (typeof iteratorFn === 'function') {
                  return iteratorFn;
                }
              }

              /**
               * Collection of methods that allow declaration and validation of props that are
               * supplied to React components. Example usage:
               *
               *   var Props = require('ReactPropTypes');
               *   var MyArticle = React.createClass({
               *     propTypes: {
               *       // An optional string prop named "description".
               *       description: Props.string,
               *
               *       // A required enum prop named "category".
               *       category: Props.oneOf(['News','Photos']).isRequired,
               *
               *       // A prop named "dialog" that requires an instance of Dialog.
               *       dialog: Props.instanceOf(Dialog).isRequired
               *     },
               *     render: function() { ... }
               *   });
               *
               * A more formal specification of how these methods are used:
               *
               *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
               *   decl := ReactPropTypes.{type}(.isRequired)?
               *
               * Each and every declaration produces a function with the same signature. This
               * allows the creation of custom validation functions. For example:
               *
               *  var MyLink = React.createClass({
               *    propTypes: {
               *      // An optional string or URI prop named "href".
               *      href: function(props, propName, componentName) {
               *        var propValue = props[propName];
               *        if (propValue != null && typeof propValue !== 'string' &&
               *            !(propValue instanceof URI)) {
               *          return new Error(
               *            'Expected a string or an URI for ' + propName + ' in ' +
               *            componentName
               *          );
               *        }
               *      }
               *    },
               *    render: function() {...}
               *  });
               *
               * @internal
               */

              var ANONYMOUS = '<<anonymous>>';

              // Important!
              // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
              var ReactPropTypes = {
                array: createPrimitiveTypeChecker('array'),
                bool: createPrimitiveTypeChecker('boolean'),
                func: createPrimitiveTypeChecker('function'),
                number: createPrimitiveTypeChecker('number'),
                object: createPrimitiveTypeChecker('object'),
                string: createPrimitiveTypeChecker('string'),
                symbol: createPrimitiveTypeChecker('symbol'),

                any: createAnyTypeChecker(),
                arrayOf: createArrayOfTypeChecker,
                element: createElementTypeChecker(),
                elementType: createElementTypeTypeChecker(),
                instanceOf: createInstanceTypeChecker,
                node: createNodeChecker(),
                objectOf: createObjectOfTypeChecker,
                oneOf: createEnumTypeChecker,
                oneOfType: createUnionTypeChecker,
                shape: createShapeTypeChecker,
                exact: createStrictShapeTypeChecker,
              };

              /**
               * inlined Object.is polyfill to avoid requiring consumers ship their own
               * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
               */
              /*eslint-disable no-self-compare*/
              function is(x, y) {
                // SameValue algorithm
                if (x === y) {
                  // Steps 1-5, 7-10
                  // Steps 6.b-6.e: +0 != -0
                  return x !== 0 || 1 / x === 1 / y;
                } else {
                  // Step 6.a: NaN == NaN
                  return x !== x && y !== y;
                }
              }
              /*eslint-enable no-self-compare*/

              /**
               * We use an Error-like object for backward compatibility as people may call
               * PropTypes directly and inspect their output. However, we don't use real
               * Errors anymore. We don't inspect their stack anyway, and creating them
               * is prohibitively expensive if they are created too often, such as what
               * happens in oneOfType() for any type before the one that matched.
               */
              function PropTypeError(message) {
                this.message = message;
                this.stack = '';
              }
              // Make `instanceof Error` still work for returned errors.
              PropTypeError.prototype = Error.prototype;

              function createChainableTypeChecker(validate) {
                if (process.env.NODE_ENV !== 'production') {
                  var manualPropTypeCallCache = {};
                  var manualPropTypeWarningCount = 0;
                }
                function checkType(
                  isRequired,
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName,
                  secret
                ) {
                  componentName = componentName || ANONYMOUS;
                  propFullName = propFullName || propName;

                  if (secret !== ReactPropTypesSecret) {
                    if (throwOnDirectAccess) {
                      // New behavior only for users of `prop-types` package
                      var err = new Error(
                        'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                          'Use `PropTypes.checkPropTypes()` to call them. ' +
                          'Read more at http://fb.me/use-check-prop-types'
                      );
                      err.name = 'Invariant Violation';
                      throw err;
                    } else if (
                      process.env.NODE_ENV !== 'production' &&
                      typeof console !== 'undefined'
                    ) {
                      // Old behavior for people using React.PropTypes
                      var cacheKey = componentName + ':' + propName;
                      if (
                        !manualPropTypeCallCache[cacheKey] &&
                        // Avoid spamming the console because they are often not actionable except for lib authors
                        manualPropTypeWarningCount < 3
                      ) {
                        printWarning(
                          'You are manually calling a React.PropTypes validation ' +
                            'function for the `' +
                            propFullName +
                            '` prop on `' +
                            componentName +
                            '`. This is deprecated ' +
                            'and will throw in the standalone `prop-types` package. ' +
                            'You may be seeing this warning due to a third-party PropTypes ' +
                            'library. See https://fb.me/react-warning-dont-call-proptypes ' +
                            'for details.'
                        );
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                      }
                    }
                  }
                  if (props[propName] == null) {
                    if (isRequired) {
                      if (props[propName] === null) {
                        return new PropTypeError(
                          'The ' +
                            location +
                            ' `' +
                            propFullName +
                            '` is marked as required ' +
                            ('in `' +
                              componentName +
                              '`, but its value is `null`.')
                        );
                      }
                      return new PropTypeError(
                        'The ' +
                          location +
                          ' `' +
                          propFullName +
                          '` is marked as required in ' +
                          ('`' +
                            componentName +
                            '`, but its value is `undefined`.')
                      );
                    }
                    return null;
                  } else {
                    return validate(
                      props,
                      propName,
                      componentName,
                      location,
                      propFullName
                    );
                  }
                }

                var chainedCheckType = checkType.bind(null, false);
                chainedCheckType.isRequired = checkType.bind(null, true);

                return chainedCheckType;
              }

              function createPrimitiveTypeChecker(expectedType) {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName,
                  secret
                ) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== expectedType) {
                    // `propValue` being instance of, say, date/regexp, pass the 'object'
                    // check, but we can offer a more precise error message here rather than
                    // 'of type `object`'.
                    var preciseType = getPreciseType(propValue);

                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` of type ' +
                        ('`' +
                          preciseType +
                          '` supplied to `' +
                          componentName +
                          '`, expected ') +
                        ('`' + expectedType + '`.')
                    );
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createAnyTypeChecker() {
                return createChainableTypeChecker(emptyFunctionThatReturnsNull);
              }

              function createArrayOfTypeChecker(typeChecker) {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  if (typeof typeChecker !== 'function') {
                    return new PropTypeError(
                      'Property `' +
                        propFullName +
                        '` of component `' +
                        componentName +
                        '` has invalid PropType notation inside arrayOf.'
                    );
                  }
                  var propValue = props[propName];
                  if (!Array.isArray(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` of type ' +
                        ('`' +
                          propType +
                          '` supplied to `' +
                          componentName +
                          '`, expected an array.')
                    );
                  }
                  for (var i = 0; i < propValue.length; i++) {
                    var error = typeChecker(
                      propValue,
                      i,
                      componentName,
                      location,
                      propFullName + '[' + i + ']',
                      ReactPropTypesSecret
                    );
                    if (error instanceof Error) {
                      return error;
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createElementTypeChecker() {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  var propValue = props[propName];
                  if (!isValidElement(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` of type ' +
                        ('`' +
                          propType +
                          '` supplied to `' +
                          componentName +
                          '`, expected a single ReactElement.')
                    );
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createElementTypeTypeChecker() {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  var propValue = props[propName];
                  if (!ReactIs.isValidElementType(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` of type ' +
                        ('`' +
                          propType +
                          '` supplied to `' +
                          componentName +
                          '`, expected a single ReactElement type.')
                    );
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createInstanceTypeChecker(expectedClass) {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  if (!(props[propName] instanceof expectedClass)) {
                    var expectedClassName = expectedClass.name || ANONYMOUS;
                    var actualClassName = getClassName(props[propName]);
                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` of type ' +
                        ('`' +
                          actualClassName +
                          '` supplied to `' +
                          componentName +
                          '`, expected ') +
                        ('instance of `' + expectedClassName + '`.')
                    );
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createEnumTypeChecker(expectedValues) {
                if (!Array.isArray(expectedValues)) {
                  if (process.env.NODE_ENV !== 'production') {
                    if (arguments.length > 1) {
                      printWarning(
                        'Invalid arguments supplied to oneOf, expected an array, got ' +
                          arguments.length +
                          ' arguments. ' +
                          'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
                      );
                    } else {
                      printWarning(
                        'Invalid argument supplied to oneOf, expected an array.'
                      );
                    }
                  }
                  return emptyFunctionThatReturnsNull;
                }

                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  var propValue = props[propName];
                  for (var i = 0; i < expectedValues.length; i++) {
                    if (is(propValue, expectedValues[i])) {
                      return null;
                    }
                  }

                  var valuesString = JSON.stringify(
                    expectedValues,
                    function replacer(key, value) {
                      var type = getPreciseType(value);
                      if (type === 'symbol') {
                        return String(value);
                      }
                      return value;
                    }
                  );
                  return new PropTypeError(
                    'Invalid ' +
                      location +
                      ' `' +
                      propFullName +
                      '` of value `' +
                      String(propValue) +
                      '` ' +
                      ('supplied to `' +
                        componentName +
                        '`, expected one of ' +
                        valuesString +
                        '.')
                  );
                }
                return createChainableTypeChecker(validate);
              }

              function createObjectOfTypeChecker(typeChecker) {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  if (typeof typeChecker !== 'function') {
                    return new PropTypeError(
                      'Property `' +
                        propFullName +
                        '` of component `' +
                        componentName +
                        '` has invalid PropType notation inside objectOf.'
                    );
                  }
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== 'object') {
                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` of type ' +
                        ('`' +
                          propType +
                          '` supplied to `' +
                          componentName +
                          '`, expected an object.')
                    );
                  }
                  for (var key in propValue) {
                    if (has(propValue, key)) {
                      var error = typeChecker(
                        propValue,
                        key,
                        componentName,
                        location,
                        propFullName + '.' + key,
                        ReactPropTypesSecret
                      );
                      if (error instanceof Error) {
                        return error;
                      }
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createUnionTypeChecker(arrayOfTypeCheckers) {
                if (!Array.isArray(arrayOfTypeCheckers)) {
                  process.env.NODE_ENV !== 'production'
                    ? printWarning(
                        'Invalid argument supplied to oneOfType, expected an instance of array.'
                      )
                    : void 0;
                  return emptyFunctionThatReturnsNull;
                }

                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                  var checker = arrayOfTypeCheckers[i];
                  if (typeof checker !== 'function') {
                    printWarning(
                      'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                        'received ' +
                        getPostfixForTypeWarning(checker) +
                        ' at index ' +
                        i +
                        '.'
                    );
                    return emptyFunctionThatReturnsNull;
                  }
                }

                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (
                      checker(
                        props,
                        propName,
                        componentName,
                        location,
                        propFullName,
                        ReactPropTypesSecret
                      ) == null
                    ) {
                      return null;
                    }
                  }

                  return new PropTypeError(
                    'Invalid ' +
                      location +
                      ' `' +
                      propFullName +
                      '` supplied to ' +
                      ('`' + componentName + '`.')
                  );
                }
                return createChainableTypeChecker(validate);
              }

              function createNodeChecker() {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  if (!isNode(props[propName])) {
                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` supplied to ' +
                        ('`' + componentName + '`, expected a ReactNode.')
                    );
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createShapeTypeChecker(shapeTypes) {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== 'object') {
                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` of type `' +
                        propType +
                        '` ' +
                        ('supplied to `' +
                          componentName +
                          '`, expected `object`.')
                    );
                  }
                  for (var key in shapeTypes) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                      continue;
                    }
                    var error = checker(
                      propValue,
                      key,
                      componentName,
                      location,
                      propFullName + '.' + key,
                      ReactPropTypesSecret
                    );
                    if (error) {
                      return error;
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createStrictShapeTypeChecker(shapeTypes) {
                function validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                ) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== 'object') {
                    return new PropTypeError(
                      'Invalid ' +
                        location +
                        ' `' +
                        propFullName +
                        '` of type `' +
                        propType +
                        '` ' +
                        ('supplied to `' +
                          componentName +
                          '`, expected `object`.')
                    );
                  }
                  // We need to check all keys in case some are required but missing from
                  // props.
                  var allKeys = assign({}, props[propName], shapeTypes);
                  for (var key in allKeys) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                      return new PropTypeError(
                        'Invalid ' +
                          location +
                          ' `' +
                          propFullName +
                          '` key `' +
                          key +
                          '` supplied to `' +
                          componentName +
                          '`.' +
                          '\nBad object: ' +
                          JSON.stringify(props[propName], null, '  ') +
                          '\nValid keys: ' +
                          JSON.stringify(Object.keys(shapeTypes), null, '  ')
                      );
                    }
                    var error = checker(
                      propValue,
                      key,
                      componentName,
                      location,
                      propFullName + '.' + key,
                      ReactPropTypesSecret
                    );
                    if (error) {
                      return error;
                    }
                  }
                  return null;
                }

                return createChainableTypeChecker(validate);
              }

              function isNode(propValue) {
                switch (typeof propValue) {
                  case 'number':
                  case 'string':
                  case 'undefined':
                    return true;
                  case 'boolean':
                    return !propValue;
                  case 'object':
                    if (Array.isArray(propValue)) {
                      return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                      return true;
                    }

                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                      var iterator = iteratorFn.call(propValue);
                      var step;
                      if (iteratorFn !== propValue.entries) {
                        while (!(step = iterator.next()).done) {
                          if (!isNode(step.value)) {
                            return false;
                          }
                        }
                      } else {
                        // Iterator will provide entry [k,v] tuples rather than values.
                        while (!(step = iterator.next()).done) {
                          var entry = step.value;
                          if (entry) {
                            if (!isNode(entry[1])) {
                              return false;
                            }
                          }
                        }
                      }
                    } else {
                      return false;
                    }

                    return true;
                  default:
                    return false;
                }
              }

              function isSymbol(propType, propValue) {
                // Native Symbol.
                if (propType === 'symbol') {
                  return true;
                }

                // falsy value can't be a Symbol
                if (!propValue) {
                  return false;
                }

                // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
                if (propValue['@@toStringTag'] === 'Symbol') {
                  return true;
                }

                // Fallback for non-spec compliant Symbols which are polyfilled.
                if (
                  typeof Symbol === 'function' &&
                  propValue instanceof Symbol
                ) {
                  return true;
                }

                return false;
              }

              // Equivalent of `typeof` but with special handling for array and regexp.
              function getPropType(propValue) {
                var propType = typeof propValue;
                if (Array.isArray(propValue)) {
                  return 'array';
                }
                if (propValue instanceof RegExp) {
                  // Old webkits (at least until Android 4.0) return 'function' rather than
                  // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
                  // passes PropTypes.object.
                  return 'object';
                }
                if (isSymbol(propType, propValue)) {
                  return 'symbol';
                }
                return propType;
              }

              // This handles more types than `getPropType`. Only used for error messages.
              // See `createPrimitiveTypeChecker`.
              function getPreciseType(propValue) {
                if (typeof propValue === 'undefined' || propValue === null) {
                  return '' + propValue;
                }
                var propType = getPropType(propValue);
                if (propType === 'object') {
                  if (propValue instanceof Date) {
                    return 'date';
                  } else if (propValue instanceof RegExp) {
                    return 'regexp';
                  }
                }
                return propType;
              }

              // Returns a string that is postfixed to a warning about an invalid type.
              // For example, "undefined" or "of type array"
              function getPostfixForTypeWarning(value) {
                var type = getPreciseType(value);
                switch (type) {
                  case 'array':
                  case 'object':
                    return 'an ' + type;
                  case 'boolean':
                  case 'date':
                  case 'regexp':
                    return 'a ' + type;
                  default:
                    return type;
                }
              }

              // Returns class name of the object, if any.
              function getClassName(propValue) {
                if (!propValue.constructor || !propValue.constructor.name) {
                  return ANONYMOUS;
                }
                return propValue.constructor.name;
              }

              ReactPropTypes.checkPropTypes = checkPropTypes;
              ReactPropTypes.resetWarningCache =
                checkPropTypes.resetWarningCache;
              ReactPropTypes.PropTypes = ReactPropTypes;

              return ReactPropTypes;
            };
          }.call(this));
        }.call(this, require('_process')));
      },
      {
        './checkPropTypes': 118,
        './lib/ReactPropTypesSecret': 122,
        _process: 112,
        'object-assign': 117,
        'react-is': 125,
      },
    ],
    121: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            if (process.env.NODE_ENV !== 'production') {
              var ReactIs = require('react-is');

              // By explicitly using `prop-types` you are opting into new development behavior.
              // http://fb.me/prop-types-in-prod
              var throwOnDirectAccess = true;
              module.exports = require('./factoryWithTypeCheckers')(
                ReactIs.isElement,
                throwOnDirectAccess
              );
            } else {
              // By explicitly using `prop-types` you are opting into new production behavior.
              // http://fb.me/prop-types-in-prod
              module.exports = require('./factoryWithThrowingShims')();
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      {
        './factoryWithThrowingShims': 119,
        './factoryWithTypeCheckers': 120,
        _process: 112,
        'react-is': 125,
      },
    ],
    122: [
      function(require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        'use strict';

        var ReactPropTypesSecret =
          'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

        module.exports = ReactPropTypesSecret;
      },
      {},
    ],
    123: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /** @license React v16.13.1
             * react-is.development.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict';

            if (process.env.NODE_ENV !== 'production') {
              (function() {
                'use strict';

                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                var REACT_ELEMENT_TYPE = hasSymbol
                  ? Symbol.for('react.element')
                  : 0xeac7;
                var REACT_PORTAL_TYPE = hasSymbol
                  ? Symbol.for('react.portal')
                  : 0xeaca;
                var REACT_FRAGMENT_TYPE = hasSymbol
                  ? Symbol.for('react.fragment')
                  : 0xeacb;
                var REACT_STRICT_MODE_TYPE = hasSymbol
                  ? Symbol.for('react.strict_mode')
                  : 0xeacc;
                var REACT_PROFILER_TYPE = hasSymbol
                  ? Symbol.for('react.profiler')
                  : 0xead2;
                var REACT_PROVIDER_TYPE = hasSymbol
                  ? Symbol.for('react.provider')
                  : 0xeacd;
                var REACT_CONTEXT_TYPE = hasSymbol
                  ? Symbol.for('react.context')
                  : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
                // (unstable) APIs that have been removed. Can we remove the symbols?

                var REACT_ASYNC_MODE_TYPE = hasSymbol
                  ? Symbol.for('react.async_mode')
                  : 0xeacf;
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol
                  ? Symbol.for('react.concurrent_mode')
                  : 0xeacf;
                var REACT_FORWARD_REF_TYPE = hasSymbol
                  ? Symbol.for('react.forward_ref')
                  : 0xead0;
                var REACT_SUSPENSE_TYPE = hasSymbol
                  ? Symbol.for('react.suspense')
                  : 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = hasSymbol
                  ? Symbol.for('react.suspense_list')
                  : 0xead8;
                var REACT_MEMO_TYPE = hasSymbol
                  ? Symbol.for('react.memo')
                  : 0xead3;
                var REACT_LAZY_TYPE = hasSymbol
                  ? Symbol.for('react.lazy')
                  : 0xead4;
                var REACT_BLOCK_TYPE = hasSymbol
                  ? Symbol.for('react.block')
                  : 0xead9;
                var REACT_FUNDAMENTAL_TYPE = hasSymbol
                  ? Symbol.for('react.fundamental')
                  : 0xead5;
                var REACT_RESPONDER_TYPE = hasSymbol
                  ? Symbol.for('react.responder')
                  : 0xead6;
                var REACT_SCOPE_TYPE = hasSymbol
                  ? Symbol.for('react.scope')
                  : 0xead7;

                function isValidElementType(type) {
                  return (
                    typeof type === 'string' ||
                    typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                    type === REACT_FRAGMENT_TYPE ||
                    type === REACT_CONCURRENT_MODE_TYPE ||
                    type === REACT_PROFILER_TYPE ||
                    type === REACT_STRICT_MODE_TYPE ||
                    type === REACT_SUSPENSE_TYPE ||
                    type === REACT_SUSPENSE_LIST_TYPE ||
                    (typeof type === 'object' &&
                      type !== null &&
                      (type.$$typeof === REACT_LAZY_TYPE ||
                        type.$$typeof === REACT_MEMO_TYPE ||
                        type.$$typeof === REACT_PROVIDER_TYPE ||
                        type.$$typeof === REACT_CONTEXT_TYPE ||
                        type.$$typeof === REACT_FORWARD_REF_TYPE ||
                        type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                        type.$$typeof === REACT_RESPONDER_TYPE ||
                        type.$$typeof === REACT_SCOPE_TYPE ||
                        type.$$typeof === REACT_BLOCK_TYPE))
                  );
                }

                function typeOf(object) {
                  if (typeof object === 'object' && object !== null) {
                    var $$typeof = object.$$typeof;

                    switch ($$typeof) {
                      case REACT_ELEMENT_TYPE:
                        var type = object.type;

                        switch (type) {
                          case REACT_ASYNC_MODE_TYPE:
                          case REACT_CONCURRENT_MODE_TYPE:
                          case REACT_FRAGMENT_TYPE:
                          case REACT_PROFILER_TYPE:
                          case REACT_STRICT_MODE_TYPE:
                          case REACT_SUSPENSE_TYPE:
                            return type;

                          default:
                            var $$typeofType = type && type.$$typeof;

                            switch ($$typeofType) {
                              case REACT_CONTEXT_TYPE:
                              case REACT_FORWARD_REF_TYPE:
                              case REACT_LAZY_TYPE:
                              case REACT_MEMO_TYPE:
                              case REACT_PROVIDER_TYPE:
                                return $$typeofType;

                              default:
                                return $$typeof;
                            }
                        }

                      case REACT_PORTAL_TYPE:
                        return $$typeof;
                    }
                  }

                  return undefined;
                } // AsyncMode is deprecated along with isAsyncMode

                var AsyncMode = REACT_ASYNC_MODE_TYPE;
                var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
                var ContextConsumer = REACT_CONTEXT_TYPE;
                var ContextProvider = REACT_PROVIDER_TYPE;
                var Element = REACT_ELEMENT_TYPE;
                var ForwardRef = REACT_FORWARD_REF_TYPE;
                var Fragment = REACT_FRAGMENT_TYPE;
                var Lazy = REACT_LAZY_TYPE;
                var Memo = REACT_MEMO_TYPE;
                var Portal = REACT_PORTAL_TYPE;
                var Profiler = REACT_PROFILER_TYPE;
                var StrictMode = REACT_STRICT_MODE_TYPE;
                var Suspense = REACT_SUSPENSE_TYPE;
                var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

                function isAsyncMode(object) {
                  {
                    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

                      console['warn'](
                        'The ReactIs.isAsyncMode() alias has been deprecated, ' +
                          'and will be removed in React 17+. Update your code to use ' +
                          'ReactIs.isConcurrentMode() instead. It has the exact same API.'
                      );
                    }
                  }

                  return (
                    isConcurrentMode(object) ||
                    typeOf(object) === REACT_ASYNC_MODE_TYPE
                  );
                }
                function isConcurrentMode(object) {
                  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
                }
                function isContextConsumer(object) {
                  return typeOf(object) === REACT_CONTEXT_TYPE;
                }
                function isContextProvider(object) {
                  return typeOf(object) === REACT_PROVIDER_TYPE;
                }
                function isElement(object) {
                  return (
                    typeof object === 'object' &&
                    object !== null &&
                    object.$$typeof === REACT_ELEMENT_TYPE
                  );
                }
                function isForwardRef(object) {
                  return typeOf(object) === REACT_FORWARD_REF_TYPE;
                }
                function isFragment(object) {
                  return typeOf(object) === REACT_FRAGMENT_TYPE;
                }
                function isLazy(object) {
                  return typeOf(object) === REACT_LAZY_TYPE;
                }
                function isMemo(object) {
                  return typeOf(object) === REACT_MEMO_TYPE;
                }
                function isPortal(object) {
                  return typeOf(object) === REACT_PORTAL_TYPE;
                }
                function isProfiler(object) {
                  return typeOf(object) === REACT_PROFILER_TYPE;
                }
                function isStrictMode(object) {
                  return typeOf(object) === REACT_STRICT_MODE_TYPE;
                }
                function isSuspense(object) {
                  return typeOf(object) === REACT_SUSPENSE_TYPE;
                }

                exports.AsyncMode = AsyncMode;
                exports.ConcurrentMode = ConcurrentMode;
                exports.ContextConsumer = ContextConsumer;
                exports.ContextProvider = ContextProvider;
                exports.Element = Element;
                exports.ForwardRef = ForwardRef;
                exports.Fragment = Fragment;
                exports.Lazy = Lazy;
                exports.Memo = Memo;
                exports.Portal = Portal;
                exports.Profiler = Profiler;
                exports.StrictMode = StrictMode;
                exports.Suspense = Suspense;
                exports.isAsyncMode = isAsyncMode;
                exports.isConcurrentMode = isConcurrentMode;
                exports.isContextConsumer = isContextConsumer;
                exports.isContextProvider = isContextProvider;
                exports.isElement = isElement;
                exports.isForwardRef = isForwardRef;
                exports.isFragment = isFragment;
                exports.isLazy = isLazy;
                exports.isMemo = isMemo;
                exports.isPortal = isPortal;
                exports.isProfiler = isProfiler;
                exports.isStrictMode = isStrictMode;
                exports.isSuspense = isSuspense;
                exports.isValidElementType = isValidElementType;
                exports.typeOf = typeOf;
              })();
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      { _process: 112 },
    ],
    124: [
      function(require, module, exports) {
        /** @license React v16.13.1
         * react-is.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        'use strict';
        var b = 'function' === typeof Symbol && Symbol.for,
          c = b ? Symbol.for('react.element') : 60103,
          d = b ? Symbol.for('react.portal') : 60106,
          e = b ? Symbol.for('react.fragment') : 60107,
          f = b ? Symbol.for('react.strict_mode') : 60108,
          g = b ? Symbol.for('react.profiler') : 60114,
          h = b ? Symbol.for('react.provider') : 60109,
          k = b ? Symbol.for('react.context') : 60110,
          l = b ? Symbol.for('react.async_mode') : 60111,
          m = b ? Symbol.for('react.concurrent_mode') : 60111,
          n = b ? Symbol.for('react.forward_ref') : 60112,
          p = b ? Symbol.for('react.suspense') : 60113,
          q = b ? Symbol.for('react.suspense_list') : 60120,
          r = b ? Symbol.for('react.memo') : 60115,
          t = b ? Symbol.for('react.lazy') : 60116,
          v = b ? Symbol.for('react.block') : 60121,
          w = b ? Symbol.for('react.fundamental') : 60117,
          x = b ? Symbol.for('react.responder') : 60118,
          y = b ? Symbol.for('react.scope') : 60119;
        function z(a) {
          if ('object' === typeof a && null !== a) {
            var u = a.$$typeof;
            switch (u) {
              case c:
                switch (((a = a.type), a)) {
                  case l:
                  case m:
                  case e:
                  case g:
                  case f:
                  case p:
                    return a;
                  default:
                    switch (((a = a && a.$$typeof), a)) {
                      case k:
                      case n:
                      case t:
                      case r:
                      case h:
                        return a;
                      default:
                        return u;
                    }
                }
              case d:
                return u;
            }
          }
        }
        function A(a) {
          return z(a) === m;
        }
        exports.AsyncMode = l;
        exports.ConcurrentMode = m;
        exports.ContextConsumer = k;
        exports.ContextProvider = h;
        exports.Element = c;
        exports.ForwardRef = n;
        exports.Fragment = e;
        exports.Lazy = t;
        exports.Memo = r;
        exports.Portal = d;
        exports.Profiler = g;
        exports.StrictMode = f;
        exports.Suspense = p;
        exports.isAsyncMode = function(a) {
          return A(a) || z(a) === l;
        };
        exports.isConcurrentMode = A;
        exports.isContextConsumer = function(a) {
          return z(a) === k;
        };
        exports.isContextProvider = function(a) {
          return z(a) === h;
        };
        exports.isElement = function(a) {
          return 'object' === typeof a && null !== a && a.$$typeof === c;
        };
        exports.isForwardRef = function(a) {
          return z(a) === n;
        };
        exports.isFragment = function(a) {
          return z(a) === e;
        };
        exports.isLazy = function(a) {
          return z(a) === t;
        };
        exports.isMemo = function(a) {
          return z(a) === r;
        };
        exports.isPortal = function(a) {
          return z(a) === d;
        };
        exports.isProfiler = function(a) {
          return z(a) === g;
        };
        exports.isStrictMode = function(a) {
          return z(a) === f;
        };
        exports.isSuspense = function(a) {
          return z(a) === p;
        };
        exports.isValidElementType = function(a) {
          return (
            'string' === typeof a ||
            'function' === typeof a ||
            a === e ||
            a === m ||
            a === g ||
            a === f ||
            a === p ||
            a === q ||
            ('object' === typeof a &&
              null !== a &&
              (a.$$typeof === t ||
                a.$$typeof === r ||
                a.$$typeof === h ||
                a.$$typeof === k ||
                a.$$typeof === n ||
                a.$$typeof === w ||
                a.$$typeof === x ||
                a.$$typeof === y ||
                a.$$typeof === v))
          );
        };
        exports.typeOf = z;
      },
      {},
    ],
    125: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            'use strict';

            if (process.env.NODE_ENV === 'production') {
              module.exports = require('./cjs/react-is.production.min.js');
            } else {
              module.exports = require('./cjs/react-is.development.js');
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      {
        './cjs/react-is.development.js': 123,
        './cjs/react-is.production.min.js': 124,
        _process: 112,
      },
    ],
    126: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /** @license React v0.24.0
             * react-reconciler.development.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict';

            if (process.env.NODE_ENV !== 'production') {
              module.exports = function $$$reconciler($$$hostConfig) {
                'use strict';

                var _assign = require('object-assign');
                var React = require('react');
                var checkPropTypes = require('prop-types/checkPropTypes');
                var Scheduler = require('scheduler');
                var tracing = require('scheduler/tracing');

                // Do not require this module directly! Use normal `invariant` calls with
                // template literal strings. The messages will be replaced with error codes
                // during build.

                var FunctionComponent = 0;
                var ClassComponent = 1;
                var IndeterminateComponent = 2; // Before we know whether it is function or class

                var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

                var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

                var HostComponent = 5;
                var HostText = 6;
                var Fragment = 7;
                var Mode = 8;
                var ContextConsumer = 9;
                var ContextProvider = 10;
                var ForwardRef = 11;
                var Profiler = 12;
                var SuspenseComponent = 13;
                var MemoComponent = 14;
                var SimpleMemoComponent = 15;
                var LazyComponent = 16;
                var IncompleteClassComponent = 17;
                var DehydratedFragment = 18;
                var SuspenseListComponent = 19;
                var FundamentalComponent = 20;
                var ScopeComponent = 21;

                /**
                 * Use invariant() to assert state which your program assumes to be true.
                 *
                 * Provide sprintf-style format (only %s is supported) and arguments
                 * to provide information about what broke and what you were
                 * expecting.
                 *
                 * The invariant message will be stripped in production, but the invariant
                 * will remain to ensure logic does not differ in production.
                 */

                /**
                 * Similar to invariant but only logs a warning if the condition is not met.
                 * This can be used to log issues in development environments in critical
                 * paths. Removing the logging code for production environments will keep the
                 * same logic and follow the same code paths.
                 */
                var warningWithoutStack = function() {};

                {
                  warningWithoutStack = function(condition, format) {
                    for (
                      var _len = arguments.length,
                        args = new Array(_len > 2 ? _len - 2 : 0),
                        _key = 2;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 2] = arguments[_key];
                    }

                    if (format === undefined) {
                      throw new Error(
                        '`warningWithoutStack(condition, format, ...args)` requires a warning ' +
                          'message argument'
                      );
                    }

                    if (args.length > 8) {
                      // Check before the condition to catch violations early.
                      throw new Error(
                        'warningWithoutStack() currently supports at most 8 arguments.'
                      );
                    }

                    if (condition) {
                      return;
                    }

                    if (typeof console !== 'undefined') {
                      var argsWithFormat = args.map(function(item) {
                        return '' + item;
                      });
                      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                      // breaks IE9: https://github.com/facebook/react/issues/13610

                      Function.prototype.apply.call(
                        console.error,
                        console,
                        argsWithFormat
                      );
                    }

                    try {
                      // --- Welcome to debugging React ---
                      // This error was thrown as a convenience so that you can use this stack
                      // to find the callsite that caused this warning to fire.
                      var argIndex = 0;
                      var message =
                        'Warning: ' +
                        format.replace(/%s/g, function() {
                          return args[argIndex++];
                        });
                      throw new Error(message);
                    } catch (x) {}
                  };
                }

                var warningWithoutStack$1 = warningWithoutStack;

                /**
                 * `ReactInstanceMap` maintains a mapping from a public facing stateful
                 * instance (key) and the internal representation (value). This allows public
                 * methods to accept the user facing instance as an argument and map them back
                 * to internal methods.
                 *
                 * Note that this module is currently shared and assumed to be stateless.
                 * If this becomes an actual Map, that will break.
                 */

                /**
                 * This API should be called `delete` but we'd have to make sure to always
                 * transform these to strings for IE support. When this transform is fully
                 * supported we can rename it.
                 */

                function get(key) {
                  return key._reactInternalFiber;
                }

                function set(key, value) {
                  key._reactInternalFiber = value;
                }

                var ReactSharedInternals =
                  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
                // Current owner and dispatcher used to share the same ref,
                // but PR #14548 split them out to better support the react-debug-tools package.

                if (
                  !ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')
                ) {
                  ReactSharedInternals.ReactCurrentDispatcher = {
                    current: null,
                  };
                }

                if (
                  !ReactSharedInternals.hasOwnProperty(
                    'ReactCurrentBatchConfig'
                  )
                ) {
                  ReactSharedInternals.ReactCurrentBatchConfig = {
                    suspense: null,
                  };
                }

                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                var REACT_ELEMENT_TYPE = hasSymbol
                  ? Symbol.for('react.element')
                  : 0xeac7;
                var REACT_PORTAL_TYPE = hasSymbol
                  ? Symbol.for('react.portal')
                  : 0xeaca;
                var REACT_FRAGMENT_TYPE = hasSymbol
                  ? Symbol.for('react.fragment')
                  : 0xeacb;
                var REACT_STRICT_MODE_TYPE = hasSymbol
                  ? Symbol.for('react.strict_mode')
                  : 0xeacc;
                var REACT_PROFILER_TYPE = hasSymbol
                  ? Symbol.for('react.profiler')
                  : 0xead2;
                var REACT_PROVIDER_TYPE = hasSymbol
                  ? Symbol.for('react.provider')
                  : 0xeacd;
                var REACT_CONTEXT_TYPE = hasSymbol
                  ? Symbol.for('react.context')
                  : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
                // (unstable) APIs that have been removed. Can we remove the symbols?

                var REACT_CONCURRENT_MODE_TYPE = hasSymbol
                  ? Symbol.for('react.concurrent_mode')
                  : 0xeacf;
                var REACT_FORWARD_REF_TYPE = hasSymbol
                  ? Symbol.for('react.forward_ref')
                  : 0xead0;
                var REACT_SUSPENSE_TYPE = hasSymbol
                  ? Symbol.for('react.suspense')
                  : 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = hasSymbol
                  ? Symbol.for('react.suspense_list')
                  : 0xead8;
                var REACT_MEMO_TYPE = hasSymbol
                  ? Symbol.for('react.memo')
                  : 0xead3;
                var REACT_LAZY_TYPE = hasSymbol
                  ? Symbol.for('react.lazy')
                  : 0xead4;
                var REACT_FUNDAMENTAL_TYPE = hasSymbol
                  ? Symbol.for('react.fundamental')
                  : 0xead5;
                var REACT_RESPONDER_TYPE = hasSymbol
                  ? Symbol.for('react.responder')
                  : 0xead6;
                var REACT_SCOPE_TYPE = hasSymbol
                  ? Symbol.for('react.scope')
                  : 0xead7;
                var MAYBE_ITERATOR_SYMBOL =
                  typeof Symbol === 'function' && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = '@@iterator';
                function getIteratorFn(maybeIterable) {
                  if (
                    maybeIterable === null ||
                    typeof maybeIterable !== 'object'
                  ) {
                    return null;
                  }

                  var maybeIterator =
                    (MAYBE_ITERATOR_SYMBOL &&
                      maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                    maybeIterable[FAUX_ITERATOR_SYMBOL];

                  if (typeof maybeIterator === 'function') {
                    return maybeIterator;
                  }

                  return null;
                }

                /**
                 * Similar to invariant but only logs a warning if the condition is not met.
                 * This can be used to log issues in development environments in critical
                 * paths. Removing the logging code for production environments will keep the
                 * same logic and follow the same code paths.
                 */

                var warning = warningWithoutStack$1;

                {
                  warning = function(condition, format) {
                    if (condition) {
                      return;
                    }

                    var ReactDebugCurrentFrame =
                      ReactSharedInternals.ReactDebugCurrentFrame;
                    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

                    for (
                      var _len = arguments.length,
                        args = new Array(_len > 2 ? _len - 2 : 0),
                        _key = 2;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 2] = arguments[_key];
                    }

                    warningWithoutStack$1.apply(
                      void 0,
                      [false, format + '%s'].concat(args, [stack])
                    );
                  };
                }

                var warning$1 = warning;

                var Uninitialized = -1;
                var Pending = 0;
                var Resolved = 1;
                var Rejected = 2;
                function refineResolvedLazyComponent(lazyComponent) {
                  return lazyComponent._status === Resolved
                    ? lazyComponent._result
                    : null;
                }
                function initializeLazyComponentType(lazyComponent) {
                  if (lazyComponent._status === Uninitialized) {
                    lazyComponent._status = Pending;
                    var ctor = lazyComponent._ctor;
                    var thenable = ctor();
                    lazyComponent._result = thenable;
                    thenable.then(
                      function(moduleObject) {
                        if (lazyComponent._status === Pending) {
                          var defaultExport = moduleObject.default;

                          {
                            if (defaultExport === undefined) {
                              warning$1(
                                false,
                                'lazy: Expected the result of a dynamic import() call. ' +
                                  'Instead received: %s\n\nYour code should look like: \n  ' +
                                  "const MyComponent = lazy(() => import('./MyComponent'))",
                                moduleObject
                              );
                            }
                          }

                          lazyComponent._status = Resolved;
                          lazyComponent._result = defaultExport;
                        }
                      },
                      function(error) {
                        if (lazyComponent._status === Pending) {
                          lazyComponent._status = Rejected;
                          lazyComponent._result = error;
                        }
                      }
                    );
                  }
                }

                function getWrappedName(outerType, innerType, wrapperName) {
                  var functionName =
                    innerType.displayName || innerType.name || '';
                  return (
                    outerType.displayName ||
                    (functionName !== ''
                      ? wrapperName + '(' + functionName + ')'
                      : wrapperName)
                  );
                }

                function getComponentName(type) {
                  if (type == null) {
                    // Host root, text node or just invalid type.
                    return null;
                  }

                  {
                    if (typeof type.tag === 'number') {
                      warningWithoutStack$1(
                        false,
                        'Received an unexpected object in getComponentName(). ' +
                          'This is likely a bug in React. Please file an issue.'
                      );
                    }
                  }

                  if (typeof type === 'function') {
                    return type.displayName || type.name || null;
                  }

                  if (typeof type === 'string') {
                    return type;
                  }

                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                      return 'Fragment';

                    case REACT_PORTAL_TYPE:
                      return 'Portal';

                    case REACT_PROFILER_TYPE:
                      return 'Profiler';

                    case REACT_STRICT_MODE_TYPE:
                      return 'StrictMode';

                    case REACT_SUSPENSE_TYPE:
                      return 'Suspense';

                    case REACT_SUSPENSE_LIST_TYPE:
                      return 'SuspenseList';
                  }

                  if (typeof type === 'object') {
                    switch (type.$$typeof) {
                      case REACT_CONTEXT_TYPE:
                        return 'Context.Consumer';

                      case REACT_PROVIDER_TYPE:
                        return 'Context.Provider';

                      case REACT_FORWARD_REF_TYPE:
                        return getWrappedName(type, type.render, 'ForwardRef');

                      case REACT_MEMO_TYPE:
                        return getComponentName(type.type);

                      case REACT_LAZY_TYPE: {
                        var thenable = type;
                        var resolvedThenable = refineResolvedLazyComponent(
                          thenable
                        );

                        if (resolvedThenable) {
                          return getComponentName(resolvedThenable);
                        }

                        break;
                      }
                    }
                  }

                  return null;
                }

                // Don't change these two values. They're used by React Dev Tools.
                var NoEffect =
                  /*              */
                  0;
                var PerformedWork =
                  /*         */
                  1; // You can change the rest (and add more).

                var Placement =
                  /*             */
                  2;
                var Update =
                  /*                */
                  4;
                var PlacementAndUpdate =
                  /*    */
                  6;
                var Deletion =
                  /*              */
                  8;
                var ContentReset =
                  /*          */
                  16;
                var Callback =
                  /*              */
                  32;
                var DidCapture =
                  /*            */
                  64;
                var Ref =
                  /*                   */
                  128;
                var Snapshot =
                  /*              */
                  256;
                var Passive =
                  /*               */
                  512;
                var Hydrating =
                  /*             */
                  1024;
                var HydratingAndUpdate =
                  /*    */
                  1028; // Passive & Update & Callback & Ref & Snapshot

                var LifecycleEffectMask =
                  /*   */
                  932; // Union of all host effects

                var HostEffectMask =
                  /*        */
                  2047;
                var Incomplete =
                  /*            */
                  2048;
                var ShouldCapture =
                  /*         */
                  4096;

                var enableUserTimingAPI = true; // Helps identify side effects in render-phase lifecycle hooks and setState
                // reducers by double invoking them in Strict Mode.

                var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
                // replay the begin phase of a failed component inside invokeGuardedCallback.

                var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

                var warnAboutDeprecatedLifecycles = true; // Gather advanced timing metrics for Profiler subtrees.

                var enableProfilerTimer = true; // Trace which interactions trigger each commit.

                var enableSchedulerTracing = true; // SSR experiments

                var enableSuspenseServerRenderer = false;
                // Only used in www builds.

                // Only used in www builds.

                // Disable javascript: URL strings in href for XSS protection.

                // React Fire: prevent the value and checked attributes from syncing
                // with their related DOM properties

                // These APIs will no longer be "unstable" in the upcoming 16.7 release,
                // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

                // Experimental React Flare event system and event components support.

                var enableFlareAPI = false; // Experimental Host Component support.

                var enableFundamentalAPI = false; // Experimental Scope support.

                var enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

                // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
                // Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version

                var warnAboutUnmockedScheduler = false; // For tests, we flush suspense fallbacks in an act scope;
                // *except* in some of our own tests, where we test incremental loading states.

                var flushSuspenseFallbacksInTests = true; // Add a callback property to suspense to notify which promises are currently
                // in the update queue. This allows reporting and tracing of what is causing
                // the user to see a loading state.
                // Also allows hydration callbacks to fire when a dehydrated boundary gets
                // hydrated or deleted.

                var enableSuspenseCallback = false; // Part of the simplification of React.createElement so we can eventually move
                // from React.createElement to React.jsx
                // https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

                var warnAboutDefaultPropsOnFunctionComponents = false;
                var warnAboutStringRefs = false;
                var disableLegacyContext = false;
                var disableSchedulerTimeoutBasedOnReactExpirationTime = false;
                // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance

                var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
                function getNearestMountedFiber(fiber) {
                  var node = fiber;
                  var nearestMounted = fiber;

                  if (!fiber.alternate) {
                    // If there is no alternate, this might be a new tree that isn't inserted
                    // yet. If it is, then it will have a pending insertion effect on it.
                    var nextNode = node;

                    do {
                      node = nextNode;

                      if (
                        (node.effectTag & (Placement | Hydrating)) !==
                        NoEffect
                      ) {
                        // This is an insertion or in-progress hydration. The nearest possible
                        // mounted fiber is the parent but we need to continue to figure out
                        // if that one is still mounted.
                        nearestMounted = node.return;
                      }

                      nextNode = node.return;
                    } while (nextNode);
                  } else {
                    while (node.return) {
                      node = node.return;
                    }
                  }

                  if (node.tag === HostRoot) {
                    // TODO: Check if this was a nested HostRoot when used with
                    // renderContainerIntoSubtree.
                    return nearestMounted;
                  } // If we didn't hit the root, that means that we're in an disconnected tree
                  // that has been unmounted.

                  return null;
                }

                function isFiberMounted(fiber) {
                  return getNearestMountedFiber(fiber) === fiber;
                }
                function isMounted(component) {
                  {
                    var owner = ReactCurrentOwner.current;

                    if (owner !== null && owner.tag === ClassComponent) {
                      var ownerFiber = owner;
                      var instance = ownerFiber.stateNode;
                      !instance._warnedAboutRefsInRender
                        ? warningWithoutStack$1(
                            false,
                            '%s is accessing isMounted inside its render() function. ' +
                              'render() should be a pure function of props and state. It should ' +
                              'never access something that requires stale data from the previous ' +
                              'render, such as refs. Move this logic to componentDidMount and ' +
                              'componentDidUpdate instead.',
                            getComponentName(ownerFiber.type) || 'A component'
                          )
                        : void 0;
                      instance._warnedAboutRefsInRender = true;
                    }
                  }

                  var fiber = get(component);

                  if (!fiber) {
                    return false;
                  }

                  return getNearestMountedFiber(fiber) === fiber;
                }

                function assertIsMounted(fiber) {
                  if (!(getNearestMountedFiber(fiber) === fiber)) {
                    {
                      throw Error(
                        'Unable to find node on an unmounted component.'
                      );
                    }
                  }
                }

                function findCurrentFiberUsingSlowPath(fiber) {
                  var alternate = fiber.alternate;

                  if (!alternate) {
                    // If there is no alternate, then we only need to check if it is mounted.
                    var nearestMounted = getNearestMountedFiber(fiber);

                    if (!(nearestMounted !== null)) {
                      {
                        throw Error(
                          'Unable to find node on an unmounted component.'
                        );
                      }
                    }

                    if (nearestMounted !== fiber) {
                      return null;
                    }

                    return fiber;
                  } // If we have two possible branches, we'll walk backwards up to the root
                  // to see what path the root points to. On the way we may hit one of the
                  // special cases and we'll deal with them.

                  var a = fiber;
                  var b = alternate;

                  while (true) {
                    var parentA = a.return;

                    if (parentA === null) {
                      // We're at the root.
                      break;
                    }

                    var parentB = parentA.alternate;

                    if (parentB === null) {
                      // There is no alternate. This is an unusual case. Currently, it only
                      // happens when a Suspense component is hidden. An extra fragment fiber
                      // is inserted in between the Suspense fiber and its children. Skip
                      // over this extra fragment fiber and proceed to the next parent.
                      var nextParent = parentA.return;

                      if (nextParent !== null) {
                        a = b = nextParent;
                        continue;
                      } // If there's no parent, we're at the root.

                      break;
                    } // If both copies of the parent fiber point to the same child, we can
                    // assume that the child is current. This happens when we bailout on low
                    // priority: the bailed out fiber's child reuses the current child.

                    if (parentA.child === parentB.child) {
                      var child = parentA.child;

                      while (child) {
                        if (child === a) {
                          // We've determined that A is the current branch.
                          assertIsMounted(parentA);
                          return fiber;
                        }

                        if (child === b) {
                          // We've determined that B is the current branch.
                          assertIsMounted(parentA);
                          return alternate;
                        }

                        child = child.sibling;
                      } // We should never have an alternate for any mounting node. So the only
                      // way this could possibly happen is if this was unmounted, if at all.

                      {
                        {
                          throw Error(
                            'Unable to find node on an unmounted component.'
                          );
                        }
                      }
                    }

                    if (a.return !== b.return) {
                      // The return pointer of A and the return pointer of B point to different
                      // fibers. We assume that return pointers never criss-cross, so A must
                      // belong to the child set of A.return, and B must belong to the child
                      // set of B.return.
                      a = parentA;
                      b = parentB;
                    } else {
                      // The return pointers point to the same fiber. We'll have to use the
                      // default, slow path: scan the child sets of each parent alternate to see
                      // which child belongs to which set.
                      //
                      // Search parent A's child set
                      var didFindChild = false;
                      var _child = parentA.child;

                      while (_child) {
                        if (_child === a) {
                          didFindChild = true;
                          a = parentA;
                          b = parentB;
                          break;
                        }

                        if (_child === b) {
                          didFindChild = true;
                          b = parentA;
                          a = parentB;
                          break;
                        }

                        _child = _child.sibling;
                      }

                      if (!didFindChild) {
                        // Search parent B's child set
                        _child = parentB.child;

                        while (_child) {
                          if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                          }

                          if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                          }

                          _child = _child.sibling;
                        }

                        if (!didFindChild) {
                          {
                            throw Error(
                              'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'
                            );
                          }
                        }
                      }
                    }

                    if (!(a.alternate === b)) {
                      {
                        throw Error(
                          "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
                        );
                      }
                    }
                  } // If the root is not a host container, we're in a disconnected tree. I.e.
                  // unmounted.

                  if (!(a.tag === HostRoot)) {
                    {
                      throw Error(
                        'Unable to find node on an unmounted component.'
                      );
                    }
                  }

                  if (a.stateNode.current === a) {
                    // We've determined that A is the current branch.
                    return fiber;
                  } // Otherwise B has to be current branch.

                  return alternate;
                }
                function findCurrentHostFiber(parent) {
                  var currentParent = findCurrentFiberUsingSlowPath(parent);

                  if (!currentParent) {
                    return null;
                  } // Next we'll drill down this component to find the first HostComponent/Text.

                  var node = currentParent;

                  while (true) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                      return node;
                    } else if (node.child) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === currentParent) {
                      return null;
                    }

                    while (!node.sibling) {
                      if (!node.return || node.return === currentParent) {
                        return null;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  } // Flow needs the return null here, but ESLint complains about it.
                  // eslint-disable-next-line no-unreachable

                  return null;
                }
                function findCurrentHostFiberWithNoPortals(parent) {
                  var currentParent = findCurrentFiberUsingSlowPath(parent);

                  if (!currentParent) {
                    return null;
                  } // Next we'll drill down this component to find the first HostComponent/Text.

                  var node = currentParent;

                  while (true) {
                    if (
                      node.tag === HostComponent ||
                      node.tag === HostText ||
                      (enableFundamentalAPI &&
                        node.tag === FundamentalComponent)
                    ) {
                      return node;
                    } else if (node.child && node.tag !== HostPortal) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === currentParent) {
                      return null;
                    }

                    while (!node.sibling) {
                      if (!node.return || node.return === currentParent) {
                        return null;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  } // Flow needs the return null here, but ESLint complains about it.
                  // eslint-disable-next-line no-unreachable

                  return null;
                }

                // This is a host config that's used for the `react-reconciler` package on npm.
                // It is only used by third-party renderers.
                //
                // Its API lets you pass the host config as an argument.
                // However, inside the `react-reconciler` we treat host config as a module.
                // This file is a shim between two worlds.
                //
                // It works because the `react-reconciler` bundle is wrapped in something like:
                //
                // module.exports = function ($$$config) {
                //   /* reconciler code */
                // }
                //
                // So `$$$config` looks like a global variable, but it's
                // really an argument to a top-level wrapping function.
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                // eslint-disable-line no-undef
                var getPublicInstance = $$$hostConfig.getPublicInstance;
                var getRootHostContext = $$$hostConfig.getRootHostContext;
                var getChildHostContext = $$$hostConfig.getChildHostContext;
                var prepareForCommit = $$$hostConfig.prepareForCommit;
                var resetAfterCommit = $$$hostConfig.resetAfterCommit;
                var createInstance = $$$hostConfig.createInstance;
                var appendInitialChild = $$$hostConfig.appendInitialChild;
                var finalizeInitialChildren =
                  $$$hostConfig.finalizeInitialChildren;
                var prepareUpdate = $$$hostConfig.prepareUpdate;
                var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
                var shouldDeprioritizeSubtree =
                  $$$hostConfig.shouldDeprioritizeSubtree;
                var createTextInstance = $$$hostConfig.createTextInstance;
                var scheduleTimeout = $$$hostConfig.setTimeout;
                var cancelTimeout = $$$hostConfig.clearTimeout;
                var noTimeout = $$$hostConfig.noTimeout;
                var now = $$$hostConfig.now;
                var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
                var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
                var supportsMutation = $$$hostConfig.supportsMutation;
                var supportsPersistence = $$$hostConfig.supportsPersistence;
                var supportsHydration = $$$hostConfig.supportsHydration;
                var mountResponderInstance =
                  $$$hostConfig.mountResponderInstance;
                var unmountResponderInstance =
                  $$$hostConfig.unmountResponderInstance;
                var getFundamentalComponentInstance =
                  $$$hostConfig.getFundamentalComponentInstance;
                var mountFundamentalComponent =
                  $$$hostConfig.mountFundamentalComponent;
                var shouldUpdateFundamentalComponent =
                  $$$hostConfig.shouldUpdateFundamentalComponent;
                var getInstanceFromNode = $$$hostConfig.getInstanceFromNode; // -------------------
                //      Mutation
                //     (optional)
                // -------------------

                var appendChild = $$$hostConfig.appendChild;
                var appendChildToContainer =
                  $$$hostConfig.appendChildToContainer;
                var commitTextUpdate = $$$hostConfig.commitTextUpdate;
                var commitMount = $$$hostConfig.commitMount;
                var commitUpdate = $$$hostConfig.commitUpdate;
                var insertBefore = $$$hostConfig.insertBefore;
                var insertInContainerBefore =
                  $$$hostConfig.insertInContainerBefore;
                var removeChild = $$$hostConfig.removeChild;
                var removeChildFromContainer =
                  $$$hostConfig.removeChildFromContainer;
                var resetTextContent = $$$hostConfig.resetTextContent;
                var hideInstance = $$$hostConfig.hideInstance;
                var hideTextInstance = $$$hostConfig.hideTextInstance;
                var unhideInstance = $$$hostConfig.unhideInstance;
                var unhideTextInstance = $$$hostConfig.unhideTextInstance;
                var updateFundamentalComponent =
                  $$$hostConfig.updateFundamentalComponent;
                var unmountFundamentalComponent =
                  $$$hostConfig.unmountFundamentalComponent; // -------------------
                //     Persistence
                //     (optional)
                // -------------------

                var cloneInstance = $$$hostConfig.cloneInstance;
                var createContainerChildSet =
                  $$$hostConfig.createContainerChildSet;
                var appendChildToContainerChildSet =
                  $$$hostConfig.appendChildToContainerChildSet;
                var finalizeContainerChildren =
                  $$$hostConfig.finalizeContainerChildren;
                var replaceContainerChildren =
                  $$$hostConfig.replaceContainerChildren;
                var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
                var cloneHiddenTextInstance =
                  $$$hostConfig.cloneHiddenTextInstance;
                var cloneFundamentalInstance = $$$hostConfig.cloneInstance; // -------------------
                //     Hydration
                //     (optional)
                // -------------------

                var canHydrateInstance = $$$hostConfig.canHydrateInstance;
                var canHydrateTextInstance =
                  $$$hostConfig.canHydrateTextInstance;
                var canHydrateSuspenseInstance =
                  $$$hostConfig.canHydrateSuspenseInstance;
                var isSuspenseInstancePending =
                  $$$hostConfig.isSuspenseInstancePending;
                var isSuspenseInstanceFallback =
                  $$$hostConfig.isSuspenseInstanceFallback;
                var registerSuspenseInstanceRetry =
                  $$$hostConfig.registerSuspenseInstanceRetry;
                var getNextHydratableSibling =
                  $$$hostConfig.getNextHydratableSibling;
                var getFirstHydratableChild =
                  $$$hostConfig.getFirstHydratableChild;
                var hydrateInstance = $$$hostConfig.hydrateInstance;
                var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
                var hydrateSuspenseInstance =
                  $$$hostConfig.hydrateSuspenseInstance;
                var getNextHydratableInstanceAfterSuspenseInstance =
                  $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
                var commitHydratedContainer =
                  $$$hostConfig.commitHydratedContainer;
                var commitHydratedSuspenseInstance =
                  $$$hostConfig.commitHydratedSuspenseInstance;
                var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
                var clearSuspenseBoundaryFromContainer =
                  $$$hostConfig.clearSuspenseBoundaryFromContainer;
                var didNotMatchHydratedContainerTextInstance =
                  $$$hostConfig.didNotMatchHydratedContainerTextInstance;
                var didNotMatchHydratedTextInstance =
                  $$$hostConfig.didNotMatchHydratedTextInstance;
                var didNotHydrateContainerInstance =
                  $$$hostConfig.didNotHydrateContainerInstance;
                var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
                var didNotFindHydratableContainerInstance =
                  $$$hostConfig.didNotFindHydratableContainerInstance;
                var didNotFindHydratableContainerTextInstance =
                  $$$hostConfig.didNotFindHydratableContainerTextInstance;
                var didNotFindHydratableContainerSuspenseInstance =
                  $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;
                var didNotFindHydratableInstance =
                  $$$hostConfig.didNotFindHydratableInstance;
                var didNotFindHydratableTextInstance =
                  $$$hostConfig.didNotFindHydratableTextInstance;
                var didNotFindHydratableSuspenseInstance =
                  $$$hostConfig.didNotFindHydratableSuspenseInstance;

                var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
                var describeComponentFrame = function(name, source, ownerName) {
                  var sourceInfo = '';

                  if (source) {
                    var path = source.fileName;
                    var fileName = path.replace(BEFORE_SLASH_RE, '');

                    {
                      // In DEV, include code for a common special case:
                      // prefer "folder/index.js" instead of just "index.js".
                      if (/^index\./.test(fileName)) {
                        var match = path.match(BEFORE_SLASH_RE);

                        if (match) {
                          var pathBeforeSlash = match[1];

                          if (pathBeforeSlash) {
                            var folderName = pathBeforeSlash.replace(
                              BEFORE_SLASH_RE,
                              ''
                            );
                            fileName = folderName + '/' + fileName;
                          }
                        }
                      }
                    }

                    sourceInfo =
                      ' (at ' + fileName + ':' + source.lineNumber + ')';
                  } else if (ownerName) {
                    sourceInfo = ' (created by ' + ownerName + ')';
                  }

                  return '\n    in ' + (name || 'Unknown') + sourceInfo;
                };

                var ReactDebugCurrentFrame =
                  ReactSharedInternals.ReactDebugCurrentFrame;

                function describeFiber(fiber) {
                  switch (fiber.tag) {
                    case HostRoot:
                    case HostPortal:
                    case HostText:
                    case Fragment:
                    case ContextProvider:
                    case ContextConsumer:
                      return '';

                    default:
                      var owner = fiber._debugOwner;
                      var source = fiber._debugSource;
                      var name = getComponentName(fiber.type);
                      var ownerName = null;

                      if (owner) {
                        ownerName = getComponentName(owner.type);
                      }

                      return describeComponentFrame(name, source, ownerName);
                  }
                }

                function getStackByFiberInDevAndProd(workInProgress) {
                  var info = '';
                  var node = workInProgress;

                  do {
                    info += describeFiber(node);
                    node = node.return;
                  } while (node);

                  return info;
                }
                var current = null;
                var phase = null;
                function getCurrentFiberOwnerNameInDevOrNull() {
                  {
                    if (current === null) {
                      return null;
                    }

                    var owner = current._debugOwner;

                    if (owner !== null && typeof owner !== 'undefined') {
                      return getComponentName(owner.type);
                    }
                  }

                  return null;
                }
                function getCurrentFiberStackInDev() {
                  {
                    if (current === null) {
                      return '';
                    } // Safe because if current fiber exists, we are reconciling,
                    // and it is guaranteed to be the work-in-progress version.

                    return getStackByFiberInDevAndProd(current);
                  }

                  return '';
                }
                function resetCurrentFiber() {
                  {
                    ReactDebugCurrentFrame.getCurrentStack = null;
                    current = null;
                    phase = null;
                  }
                }
                function setCurrentFiber(fiber) {
                  {
                    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
                    current = fiber;
                    phase = null;
                  }
                }
                function setCurrentPhase(lifeCyclePhase) {
                  {
                    phase = lifeCyclePhase;
                  }
                }

                // Prefix measurements so that it's possible to filter them.
                // Longer prefixes are hard to read in DevTools.
                var reactEmoji = '\u269B';
                var warningEmoji = '\u26D4';
                var supportsUserTiming =
                  typeof performance !== 'undefined' &&
                  typeof performance.mark === 'function' &&
                  typeof performance.clearMarks === 'function' &&
                  typeof performance.measure === 'function' &&
                  typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
                // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

                var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
                // Reusing `currentFiber` would be confusing for this because user code fiber
                // can change during commit phase too, but we don't need to unwind it (since
                // lifecycles in the commit phase don't resemble a tree).

                var currentPhase = null;
                var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
                // so we will keep track of it, and include it in the report.
                // Track commits caused by cascading updates.

                var isCommitting = false;
                var hasScheduledUpdateInCurrentCommit = false;
                var hasScheduledUpdateInCurrentPhase = false;
                var commitCountInCurrentWorkLoop = 0;
                var effectCountInCurrentCommit = 0;
                // to avoid stretch the commit phase with measurement overhead.

                var labelsInCurrentCommit = new Set();

                var formatMarkName = function(markName) {
                  return reactEmoji + ' ' + markName;
                };

                var formatLabel = function(label, warning) {
                  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
                  var suffix = warning ? ' Warning: ' + warning : '';
                  return '' + prefix + label + suffix;
                };

                var beginMark = function(markName) {
                  performance.mark(formatMarkName(markName));
                };

                var clearMark = function(markName) {
                  performance.clearMarks(formatMarkName(markName));
                };

                var endMark = function(label, markName, warning) {
                  var formattedMarkName = formatMarkName(markName);
                  var formattedLabel = formatLabel(label, warning);

                  try {
                    performance.measure(formattedLabel, formattedMarkName);
                  } catch (err) {} // If previous mark was missing for some reason, this will throw.
                  // This could only happen if React crashed in an unexpected place earlier.
                  // Don't pile on with more errors.
                  // Clear marks immediately to avoid growing buffer.

                  performance.clearMarks(formattedMarkName);
                  performance.clearMeasures(formattedLabel);
                };

                var getFiberMarkName = function(label, debugID) {
                  return label + ' (#' + debugID + ')';
                };

                var getFiberLabel = function(componentName, isMounted, phase) {
                  if (phase === null) {
                    // These are composite component total time measurements.
                    return (
                      componentName +
                      ' [' +
                      (isMounted ? 'update' : 'mount') +
                      ']'
                    );
                  } else {
                    // Composite component methods.
                    return componentName + '.' + phase;
                  }
                };

                var beginFiberMark = function(fiber, phase) {
                  var componentName = getComponentName(fiber.type) || 'Unknown';
                  var debugID = fiber._debugID;
                  var isMounted = fiber.alternate !== null;
                  var label = getFiberLabel(componentName, isMounted, phase);

                  if (isCommitting && labelsInCurrentCommit.has(label)) {
                    // During the commit phase, we don't show duplicate labels because
                    // there is a fixed overhead for every measurement, and we don't
                    // want to stretch the commit phase beyond necessary.
                    return false;
                  }

                  labelsInCurrentCommit.add(label);
                  var markName = getFiberMarkName(label, debugID);
                  beginMark(markName);
                  return true;
                };

                var clearFiberMark = function(fiber, phase) {
                  var componentName = getComponentName(fiber.type) || 'Unknown';
                  var debugID = fiber._debugID;
                  var isMounted = fiber.alternate !== null;
                  var label = getFiberLabel(componentName, isMounted, phase);
                  var markName = getFiberMarkName(label, debugID);
                  clearMark(markName);
                };

                var endFiberMark = function(fiber, phase, warning) {
                  var componentName = getComponentName(fiber.type) || 'Unknown';
                  var debugID = fiber._debugID;
                  var isMounted = fiber.alternate !== null;
                  var label = getFiberLabel(componentName, isMounted, phase);
                  var markName = getFiberMarkName(label, debugID);
                  endMark(label, markName, warning);
                };

                var shouldIgnoreFiber = function(fiber) {
                  // Host components should be skipped in the timeline.
                  // We could check typeof fiber.type, but does this work with RN?
                  switch (fiber.tag) {
                    case HostRoot:
                    case HostComponent:
                    case HostText:
                    case HostPortal:
                    case Fragment:
                    case ContextProvider:
                    case ContextConsumer:
                    case Mode:
                      return true;

                    default:
                      return false;
                  }
                };

                var clearPendingPhaseMeasurement = function() {
                  if (currentPhase !== null && currentPhaseFiber !== null) {
                    clearFiberMark(currentPhaseFiber, currentPhase);
                  }

                  currentPhaseFiber = null;
                  currentPhase = null;
                  hasScheduledUpdateInCurrentPhase = false;
                };

                var pauseTimers = function() {
                  // Stops all currently active measurements so that they can be resumed
                  // if we continue in a later deferred loop from the same unit of work.
                  var fiber = currentFiber;

                  while (fiber) {
                    if (fiber._debugIsCurrentlyTiming) {
                      endFiberMark(fiber, null, null);
                    }

                    fiber = fiber.return;
                  }
                };

                var resumeTimersRecursively = function(fiber) {
                  if (fiber.return !== null) {
                    resumeTimersRecursively(fiber.return);
                  }

                  if (fiber._debugIsCurrentlyTiming) {
                    beginFiberMark(fiber, null);
                  }
                };

                var resumeTimers = function() {
                  // Resumes all measurements that were active during the last deferred loop.
                  if (currentFiber !== null) {
                    resumeTimersRecursively(currentFiber);
                  }
                };

                function recordEffect() {
                  if (enableUserTimingAPI) {
                    effectCountInCurrentCommit++;
                  }
                }
                function recordScheduleUpdate() {
                  if (enableUserTimingAPI) {
                    if (isCommitting) {
                      hasScheduledUpdateInCurrentCommit = true;
                    }

                    if (
                      currentPhase !== null &&
                      currentPhase !== 'componentWillMount' &&
                      currentPhase !== 'componentWillReceiveProps'
                    ) {
                      hasScheduledUpdateInCurrentPhase = true;
                    }
                  }
                }

                function startWorkTimer(fiber) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                      return;
                    } // If we pause, this is the fiber to unwind from.

                    currentFiber = fiber;

                    if (!beginFiberMark(fiber, null)) {
                      return;
                    }

                    fiber._debugIsCurrentlyTiming = true;
                  }
                }
                function cancelWorkTimer(fiber) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                      return;
                    } // Remember we shouldn't complete measurement for this fiber.
                    // Otherwise flamechart will be deep even for small updates.

                    fiber._debugIsCurrentlyTiming = false;
                    clearFiberMark(fiber, null);
                  }
                }
                function stopWorkTimer(fiber) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                      return;
                    } // If we pause, its parent is the fiber to unwind from.

                    currentFiber = fiber.return;

                    if (!fiber._debugIsCurrentlyTiming) {
                      return;
                    }

                    fiber._debugIsCurrentlyTiming = false;
                    endFiberMark(fiber, null, null);
                  }
                }
                function stopFailedWorkTimer(fiber) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                      return;
                    } // If we pause, its parent is the fiber to unwind from.

                    currentFiber = fiber.return;

                    if (!fiber._debugIsCurrentlyTiming) {
                      return;
                    }

                    fiber._debugIsCurrentlyTiming = false;
                    var warning =
                      fiber.tag === SuspenseComponent
                        ? 'Rendering was suspended'
                        : 'An error was thrown inside this error boundary';
                    endFiberMark(fiber, null, warning);
                  }
                }
                function startPhaseTimer(fiber, phase) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    clearPendingPhaseMeasurement();

                    if (!beginFiberMark(fiber, phase)) {
                      return;
                    }

                    currentPhaseFiber = fiber;
                    currentPhase = phase;
                  }
                }
                function stopPhaseTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    if (currentPhase !== null && currentPhaseFiber !== null) {
                      var warning = hasScheduledUpdateInCurrentPhase
                        ? 'Scheduled a cascading update'
                        : null;
                      endFiberMark(currentPhaseFiber, currentPhase, warning);
                    }

                    currentPhase = null;
                    currentPhaseFiber = null;
                  }
                }
                function startWorkLoopTimer(nextUnitOfWork) {
                  if (enableUserTimingAPI) {
                    currentFiber = nextUnitOfWork;

                    if (!supportsUserTiming) {
                      return;
                    }

                    commitCountInCurrentWorkLoop = 0; // This is top level call.
                    // Any other measurements are performed within.

                    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

                    resumeTimers();
                  }
                }
                function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    var warning = null;

                    if (interruptedBy !== null) {
                      if (interruptedBy.tag === HostRoot) {
                        warning =
                          'A top-level update interrupted the previous render';
                      } else {
                        var componentName =
                          getComponentName(interruptedBy.type) || 'Unknown';
                        warning =
                          'An update to ' +
                          componentName +
                          ' interrupted the previous render';
                      }
                    } else if (commitCountInCurrentWorkLoop > 1) {
                      warning = 'There were cascading updates';
                    }

                    commitCountInCurrentWorkLoop = 0;
                    var label = didCompleteRoot
                      ? '(React Tree Reconciliation: Completed Root)'
                      : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

                    pauseTimers();
                    endMark(label, '(React Tree Reconciliation)', warning);
                  }
                }
                function startCommitTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    isCommitting = true;
                    hasScheduledUpdateInCurrentCommit = false;
                    labelsInCurrentCommit.clear();
                    beginMark('(Committing Changes)');
                  }
                }
                function stopCommitTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    var warning = null;

                    if (hasScheduledUpdateInCurrentCommit) {
                      warning = 'Lifecycle hook scheduled a cascading update';
                    } else if (commitCountInCurrentWorkLoop > 0) {
                      warning =
                        'Caused by a cascading update in earlier commit';
                    }

                    hasScheduledUpdateInCurrentCommit = false;
                    commitCountInCurrentWorkLoop++;
                    isCommitting = false;
                    labelsInCurrentCommit.clear();
                    endMark(
                      '(Committing Changes)',
                      '(Committing Changes)',
                      warning
                    );
                  }
                }
                function startCommitSnapshotEffectsTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    effectCountInCurrentCommit = 0;
                    beginMark('(Committing Snapshot Effects)');
                  }
                }
                function stopCommitSnapshotEffectsTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    var count = effectCountInCurrentCommit;
                    effectCountInCurrentCommit = 0;
                    endMark(
                      '(Committing Snapshot Effects: ' + count + ' Total)',
                      '(Committing Snapshot Effects)',
                      null
                    );
                  }
                }
                function startCommitHostEffectsTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    effectCountInCurrentCommit = 0;
                    beginMark('(Committing Host Effects)');
                  }
                }
                function stopCommitHostEffectsTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    var count = effectCountInCurrentCommit;
                    effectCountInCurrentCommit = 0;
                    endMark(
                      '(Committing Host Effects: ' + count + ' Total)',
                      '(Committing Host Effects)',
                      null
                    );
                  }
                }
                function startCommitLifeCyclesTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    effectCountInCurrentCommit = 0;
                    beginMark('(Calling Lifecycle Methods)');
                  }
                }
                function stopCommitLifeCyclesTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return;
                    }

                    var count = effectCountInCurrentCommit;
                    effectCountInCurrentCommit = 0;
                    endMark(
                      '(Calling Lifecycle Methods: ' + count + ' Total)',
                      '(Calling Lifecycle Methods)',
                      null
                    );
                  }
                }

                var valueStack = [];
                var fiberStack;

                {
                  fiberStack = [];
                }

                var index = -1;

                function createCursor(defaultValue) {
                  return {
                    current: defaultValue,
                  };
                }

                function pop(cursor, fiber) {
                  if (index < 0) {
                    {
                      warningWithoutStack$1(false, 'Unexpected pop.');
                    }

                    return;
                  }

                  {
                    if (fiber !== fiberStack[index]) {
                      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
                    }
                  }

                  cursor.current = valueStack[index];
                  valueStack[index] = null;

                  {
                    fiberStack[index] = null;
                  }

                  index--;
                }

                function push(cursor, value, fiber) {
                  index++;
                  valueStack[index] = cursor.current;

                  {
                    fiberStack[index] = fiber;
                  }

                  cursor.current = value;
                }

                var warnedAboutMissingGetChildContext;

                {
                  warnedAboutMissingGetChildContext = {};
                }

                var emptyContextObject = {};

                {
                  Object.freeze(emptyContextObject);
                } // A cursor to the current merged context object on the stack.

                var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

                var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
                // We use this to get access to the parent context after we have already
                // pushed the next context provider, and now need to merge their contexts.

                var previousContext = emptyContextObject;

                function getUnmaskedContext(
                  workInProgress,
                  Component,
                  didPushOwnContextIfProvider
                ) {
                  if (disableLegacyContext) {
                    return emptyContextObject;
                  } else {
                    if (
                      didPushOwnContextIfProvider &&
                      isContextProvider(Component)
                    ) {
                      // If the fiber is a context provider itself, when we read its context
                      // we may have already pushed its own child context on the stack. A context
                      // provider should not "see" its own child context. Therefore we read the
                      // previous (parent) context instead for a context provider.
                      return previousContext;
                    }

                    return contextStackCursor.current;
                  }
                }

                function cacheContext(
                  workInProgress,
                  unmaskedContext,
                  maskedContext
                ) {
                  if (disableLegacyContext) {
                    return;
                  } else {
                    var instance = workInProgress.stateNode;
                    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
                  }
                }

                function getMaskedContext(workInProgress, unmaskedContext) {
                  if (disableLegacyContext) {
                    return emptyContextObject;
                  } else {
                    var type = workInProgress.type;
                    var contextTypes = type.contextTypes;

                    if (!contextTypes) {
                      return emptyContextObject;
                    } // Avoid recreating masked context unless unmasked context has changed.
                    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
                    // This may trigger infinite loops if componentWillReceiveProps calls setState.

                    var instance = workInProgress.stateNode;

                    if (
                      instance &&
                      instance.__reactInternalMemoizedUnmaskedChildContext ===
                        unmaskedContext
                    ) {
                      return instance.__reactInternalMemoizedMaskedChildContext;
                    }

                    var context = {};

                    for (var key in contextTypes) {
                      context[key] = unmaskedContext[key];
                    }

                    {
                      var name = getComponentName(type) || 'Unknown';
                      checkPropTypes(
                        contextTypes,
                        context,
                        'context',
                        name,
                        getCurrentFiberStackInDev
                      );
                    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
                    // Context is created before the class component is instantiated so check for instance.

                    if (instance) {
                      cacheContext(workInProgress, unmaskedContext, context);
                    }

                    return context;
                  }
                }

                function hasContextChanged() {
                  if (disableLegacyContext) {
                    return false;
                  } else {
                    return didPerformWorkStackCursor.current;
                  }
                }

                function isContextProvider(type) {
                  if (disableLegacyContext) {
                    return false;
                  } else {
                    var childContextTypes = type.childContextTypes;
                    return (
                      childContextTypes !== null &&
                      childContextTypes !== undefined
                    );
                  }
                }

                function popContext(fiber) {
                  if (disableLegacyContext) {
                    return;
                  } else {
                    pop(didPerformWorkStackCursor, fiber);
                    pop(contextStackCursor, fiber);
                  }
                }

                function popTopLevelContextObject(fiber) {
                  if (disableLegacyContext) {
                    return;
                  } else {
                    pop(didPerformWorkStackCursor, fiber);
                    pop(contextStackCursor, fiber);
                  }
                }

                function pushTopLevelContextObject(fiber, context, didChange) {
                  if (disableLegacyContext) {
                    return;
                  } else {
                    if (!(contextStackCursor.current === emptyContextObject)) {
                      {
                        throw Error(
                          'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }

                    push(contextStackCursor, context, fiber);
                    push(didPerformWorkStackCursor, didChange, fiber);
                  }
                }

                function processChildContext(fiber, type, parentContext) {
                  if (disableLegacyContext) {
                    return parentContext;
                  } else {
                    var instance = fiber.stateNode;
                    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
                    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

                    if (typeof instance.getChildContext !== 'function') {
                      {
                        var componentName = getComponentName(type) || 'Unknown';

                        if (!warnedAboutMissingGetChildContext[componentName]) {
                          warnedAboutMissingGetChildContext[
                            componentName
                          ] = true;
                          warningWithoutStack$1(
                            false,
                            '%s.childContextTypes is specified but there is no getChildContext() method ' +
                              'on the instance. You can either define getChildContext() on %s or remove ' +
                              'childContextTypes from it.',
                            componentName,
                            componentName
                          );
                        }
                      }

                      return parentContext;
                    }

                    var childContext;

                    {
                      setCurrentPhase('getChildContext');
                    }

                    startPhaseTimer(fiber, 'getChildContext');
                    childContext = instance.getChildContext();
                    stopPhaseTimer();

                    {
                      setCurrentPhase(null);
                    }

                    for (var contextKey in childContext) {
                      if (!(contextKey in childContextTypes)) {
                        {
                          throw Error(
                            (getComponentName(type) || 'Unknown') +
                              '.getChildContext(): key "' +
                              contextKey +
                              '" is not defined in childContextTypes.'
                          );
                        }
                      }
                    }

                    {
                      var name = getComponentName(type) || 'Unknown';
                      checkPropTypes(
                        childContextTypes,
                        childContext,
                        'child context',
                        name, // In practice, there is one case in which we won't get a stack. It's when
                        // somebody calls unstable_renderSubtreeIntoContainer() and we process
                        // context from the parent component instance. The stack will be missing
                        // because it's outside of the reconciliation, and so the pointer has not
                        // been set. This is rare and doesn't matter. We'll also remove that API.
                        getCurrentFiberStackInDev
                      );
                    }

                    return _assign({}, parentContext, {}, childContext);
                  }
                }

                function pushContextProvider(workInProgress) {
                  if (disableLegacyContext) {
                    return false;
                  } else {
                    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
                    // If the instance does not exist yet, we will push null at first,
                    // and replace it on the stack later when invalidating the context.

                    var memoizedMergedChildContext =
                      (instance &&
                        instance.__reactInternalMemoizedMergedChildContext) ||
                      emptyContextObject; // Remember the parent context so we can merge with it later.
                    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

                    previousContext = contextStackCursor.current;
                    push(
                      contextStackCursor,
                      memoizedMergedChildContext,
                      workInProgress
                    );
                    push(
                      didPerformWorkStackCursor,
                      didPerformWorkStackCursor.current,
                      workInProgress
                    );
                    return true;
                  }
                }

                function invalidateContextProvider(
                  workInProgress,
                  type,
                  didChange
                ) {
                  if (disableLegacyContext) {
                    return;
                  } else {
                    var instance = workInProgress.stateNode;

                    if (!instance) {
                      {
                        throw Error(
                          'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }

                    if (didChange) {
                      // Merge parent and own context.
                      // Skip this if we're not updating due to sCU.
                      // This avoids unnecessarily recomputing memoized values.
                      var mergedContext = processChildContext(
                        workInProgress,
                        type,
                        previousContext
                      );
                      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
                      // It is important to unwind the context in the reverse order.

                      pop(didPerformWorkStackCursor, workInProgress);
                      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

                      push(contextStackCursor, mergedContext, workInProgress);
                      push(
                        didPerformWorkStackCursor,
                        didChange,
                        workInProgress
                      );
                    } else {
                      pop(didPerformWorkStackCursor, workInProgress);
                      push(
                        didPerformWorkStackCursor,
                        didChange,
                        workInProgress
                      );
                    }
                  }
                }

                function findCurrentUnmaskedContext(fiber) {
                  if (disableLegacyContext) {
                    return emptyContextObject;
                  } else {
                    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
                    // makes sense elsewhere
                    if (
                      !(isFiberMounted(fiber) && fiber.tag === ClassComponent)
                    ) {
                      {
                        throw Error(
                          'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }

                    var node = fiber;

                    do {
                      switch (node.tag) {
                        case HostRoot:
                          return node.stateNode.context;

                        case ClassComponent: {
                          var Component = node.type;

                          if (isContextProvider(Component)) {
                            return node.stateNode
                              .__reactInternalMemoizedMergedChildContext;
                          }

                          break;
                        }
                      }

                      node = node.return;
                    } while (node !== null);

                    {
                      {
                        throw Error(
                          'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }
                  }
                }

                var BlockingRoot = 1;
                var ConcurrentRoot = 2;

                // Intentionally not named imports because Rollup would use dynamic dispatch for
                // CommonJS interop named imports.
                var Scheduler_runWithPriority =
                  Scheduler.unstable_runWithPriority;
                var Scheduler_scheduleCallback =
                  Scheduler.unstable_scheduleCallback;
                var Scheduler_cancelCallback =
                  Scheduler.unstable_cancelCallback;
                var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
                var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
                var Scheduler_now = Scheduler.unstable_now;
                var Scheduler_getCurrentPriorityLevel =
                  Scheduler.unstable_getCurrentPriorityLevel;
                var Scheduler_ImmediatePriority =
                  Scheduler.unstable_ImmediatePriority;
                var Scheduler_UserBlockingPriority =
                  Scheduler.unstable_UserBlockingPriority;
                var Scheduler_NormalPriority =
                  Scheduler.unstable_NormalPriority;
                var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
                var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

                if (enableSchedulerTracing) {
                  // Provide explicit error message when production+profiling bundle of e.g.
                  // react-dom is used with production (non-profiling) bundle of
                  // scheduler/tracing
                  if (
                    !(
                      tracing.__interactionsRef != null &&
                      tracing.__interactionsRef.current != null
                    )
                  ) {
                    {
                      throw Error(
                        'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling'
                      );
                    }
                  }
                }

                var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
                // ascending numbers so we can compare them like numbers. They start at 90 to
                // avoid clashing with Scheduler's priorities.

                var ImmediatePriority = 99;
                var UserBlockingPriority = 98;
                var NormalPriority = 97;
                var LowPriority = 96;
                var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

                var NoPriority = 90;
                var shouldYield = Scheduler_shouldYield;
                var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
                  Scheduler_requestPaint !== undefined
                    ? Scheduler_requestPaint
                    : function() {};
                var syncQueue = null;
                var immediateQueueCallbackNode = null;
                var isFlushingSyncQueue = false;
                var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
                // This will be the case for modern browsers that support `performance.now`. In
                // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
                // timestamp. In that case, subtract the module initialization time to simulate
                // the behavior of performance.now and keep our times small enough to fit
                // within 32 bits.
                // TODO: Consider lifting this into Scheduler.

                var now$1 =
                  initialTimeMs < 10000
                    ? Scheduler_now
                    : function() {
                        return Scheduler_now() - initialTimeMs;
                      };
                function getCurrentPriorityLevel() {
                  switch (Scheduler_getCurrentPriorityLevel()) {
                    case Scheduler_ImmediatePriority:
                      return ImmediatePriority;

                    case Scheduler_UserBlockingPriority:
                      return UserBlockingPriority;

                    case Scheduler_NormalPriority:
                      return NormalPriority;

                    case Scheduler_LowPriority:
                      return LowPriority;

                    case Scheduler_IdlePriority:
                      return IdlePriority;

                    default: {
                      {
                        throw Error('Unknown priority level.');
                      }
                    }
                  }
                }

                function reactPriorityToSchedulerPriority(reactPriorityLevel) {
                  switch (reactPriorityLevel) {
                    case ImmediatePriority:
                      return Scheduler_ImmediatePriority;

                    case UserBlockingPriority:
                      return Scheduler_UserBlockingPriority;

                    case NormalPriority:
                      return Scheduler_NormalPriority;

                    case LowPriority:
                      return Scheduler_LowPriority;

                    case IdlePriority:
                      return Scheduler_IdlePriority;

                    default: {
                      {
                        throw Error('Unknown priority level.');
                      }
                    }
                  }
                }

                function runWithPriority(reactPriorityLevel, fn) {
                  var priorityLevel = reactPriorityToSchedulerPriority(
                    reactPriorityLevel
                  );
                  return Scheduler_runWithPriority(priorityLevel, fn);
                }
                function scheduleCallback(
                  reactPriorityLevel,
                  callback,
                  options
                ) {
                  var priorityLevel = reactPriorityToSchedulerPriority(
                    reactPriorityLevel
                  );
                  return Scheduler_scheduleCallback(
                    priorityLevel,
                    callback,
                    options
                  );
                }
                function scheduleSyncCallback(callback) {
                  // Push this callback into an internal queue. We'll flush these either in
                  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
                  if (syncQueue === null) {
                    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

                    immediateQueueCallbackNode = Scheduler_scheduleCallback(
                      Scheduler_ImmediatePriority,
                      flushSyncCallbackQueueImpl
                    );
                  } else {
                    // Push onto existing queue. Don't need to schedule a callback because
                    // we already scheduled one when we created the queue.
                    syncQueue.push(callback);
                  }

                  return fakeCallbackNode;
                }
                function cancelCallback(callbackNode) {
                  if (callbackNode !== fakeCallbackNode) {
                    Scheduler_cancelCallback(callbackNode);
                  }
                }
                function flushSyncCallbackQueue() {
                  if (immediateQueueCallbackNode !== null) {
                    var node = immediateQueueCallbackNode;
                    immediateQueueCallbackNode = null;
                    Scheduler_cancelCallback(node);
                  }

                  flushSyncCallbackQueueImpl();
                }

                function flushSyncCallbackQueueImpl() {
                  if (!isFlushingSyncQueue && syncQueue !== null) {
                    // Prevent re-entrancy.
                    isFlushingSyncQueue = true;
                    var i = 0;

                    try {
                      var _isSync = true;
                      var queue = syncQueue;
                      runWithPriority(ImmediatePriority, function() {
                        for (; i < queue.length; i++) {
                          var callback = queue[i];

                          do {
                            callback = callback(_isSync);
                          } while (callback !== null);
                        }
                      });
                      syncQueue = null;
                    } catch (error) {
                      // If something throws, leave the remaining callbacks on the queue.
                      if (syncQueue !== null) {
                        syncQueue = syncQueue.slice(i + 1);
                      } // Resume flushing in the next tick

                      Scheduler_scheduleCallback(
                        Scheduler_ImmediatePriority,
                        flushSyncCallbackQueue
                      );
                      throw error;
                    } finally {
                      isFlushingSyncQueue = false;
                    }
                  }
                }

                var NoMode = 0;
                var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
                // tag instead

                var BlockingMode = 2;
                var ConcurrentMode = 4;
                var ProfileMode = 8;

                // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
                // Math.pow(2, 30) - 1
                // 0b111111111111111111111111111111
                var MAX_SIGNED_31_BIT_INT = 1073741823;

                var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
                // Never work can be committed in an inconsistent state without tearing the UI.
                // The main example is offscreen content, like a hidden subtree. So one possible
                // name is Offscreen. However, it also includes dehydrated Suspense boundaries,
                // which are inconsistent in the sense that they haven't finished yet, but
                // aren't visibly inconsistent because the server rendered HTML matches what the
                // hydrated tree would look like.

                var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
                // order to be consistent.

                var Idle = 2; // Continuous Hydration is a moving priority. It is slightly higher than Idle
                // and is used to increase priority of hover targets. It is increasing with
                // each usage so that last always wins.

                var ContinuousHydration = 3;
                var Sync = MAX_SIGNED_31_BIT_INT;
                var Batched = Sync - 1;
                var UNIT_SIZE = 10;
                var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

                function msToExpirationTime(ms) {
                  // Always add an offset so that we don't clash with the magic number for NoWork.
                  return MAGIC_NUMBER_OFFSET - ((ms / UNIT_SIZE) | 0);
                }
                function expirationTimeToMs(expirationTime) {
                  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
                }

                function ceiling(num, precision) {
                  return (((num / precision) | 0) + 1) * precision;
                }

                function computeExpirationBucket(
                  currentTime,
                  expirationInMs,
                  bucketSizeMs
                ) {
                  return (
                    MAGIC_NUMBER_OFFSET -
                    ceiling(
                      MAGIC_NUMBER_OFFSET -
                        currentTime +
                        expirationInMs / UNIT_SIZE,
                      bucketSizeMs / UNIT_SIZE
                    )
                  );
                } // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
                // the names to reflect.

                var LOW_PRIORITY_EXPIRATION = 5000;
                var LOW_PRIORITY_BATCH_SIZE = 250;
                function computeAsyncExpiration(currentTime) {
                  return computeExpirationBucket(
                    currentTime,
                    LOW_PRIORITY_EXPIRATION,
                    LOW_PRIORITY_BATCH_SIZE
                  );
                }
                function computeSuspenseExpiration(currentTime, timeoutMs) {
                  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
                  return computeExpirationBucket(
                    currentTime,
                    timeoutMs,
                    LOW_PRIORITY_BATCH_SIZE
                  );
                } // We intentionally set a higher expiration time for interactive updates in
                // dev than in production.
                //
                // If the main thread is being blocked so long that you hit the expiration,
                // it's a problem that could be solved with better scheduling.
                //
                // People will be more likely to notice this and fix it with the long
                // expiration time in development.
                //
                // In production we opt for better UX at the risk of masking scheduling
                // problems, by expiring fast.

                var HIGH_PRIORITY_EXPIRATION = 500;
                var HIGH_PRIORITY_BATCH_SIZE = 100;
                function computeInteractiveExpiration(currentTime) {
                  return computeExpirationBucket(
                    currentTime,
                    HIGH_PRIORITY_EXPIRATION,
                    HIGH_PRIORITY_BATCH_SIZE
                  );
                }
                function computeContinuousHydrationExpiration(currentTime) {
                  // Each time we ask for a new one of these we increase the priority.
                  // This ensures that the last one always wins since we can't deprioritize
                  // once we've scheduled work already.
                  return ContinuousHydration++;
                }
                function inferPriorityFromExpirationTime(
                  currentTime,
                  expirationTime
                ) {
                  if (expirationTime === Sync) {
                    return ImmediatePriority;
                  }

                  if (expirationTime === Never || expirationTime === Idle) {
                    return IdlePriority;
                  }

                  var msUntil =
                    expirationTimeToMs(expirationTime) -
                    expirationTimeToMs(currentTime);

                  if (msUntil <= 0) {
                    return ImmediatePriority;
                  }

                  if (
                    msUntil <=
                    HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE
                  ) {
                    return UserBlockingPriority;
                  }

                  if (
                    msUntil <=
                    LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE
                  ) {
                    return NormalPriority;
                  } // TODO: Handle LowPriority
                  // Assume anything lower has idle priority

                  return IdlePriority;
                }

                /**
                 * inlined Object.is polyfill to avoid requiring consumers ship their own
                 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
                 */
                function is(x, y) {
                  return (
                    (x === y && (x !== 0 || 1 / x === 1 / y)) ||
                    (x !== x && y !== y) // eslint-disable-line no-self-compare
                  );
                }

                var is$1 = typeof Object.is === 'function' ? Object.is : is;

                var hasOwnProperty = Object.prototype.hasOwnProperty;
                /**
                 * Performs equality by iterating through keys on an object and returning false
                 * when any key has values which are not strictly equal between the arguments.
                 * Returns true when the values of all keys are strictly equal.
                 */

                function shallowEqual(objA, objB) {
                  if (is$1(objA, objB)) {
                    return true;
                  }

                  if (
                    typeof objA !== 'object' ||
                    objA === null ||
                    typeof objB !== 'object' ||
                    objB === null
                  ) {
                    return false;
                  }

                  var keysA = Object.keys(objA);
                  var keysB = Object.keys(objB);

                  if (keysA.length !== keysB.length) {
                    return false;
                  } // Test for A's keys different from B.

                  for (var i = 0; i < keysA.length; i++) {
                    if (
                      !hasOwnProperty.call(objB, keysA[i]) ||
                      !is$1(objA[keysA[i]], objB[keysA[i]])
                    ) {
                      return false;
                    }
                  }

                  return true;
                }

                /**
                 * Forked from fbjs/warning:
                 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
                 *
                 * Only change is we use console.warn instead of console.error,
                 * and do nothing when 'console' is not supported.
                 * This really simplifies the code.
                 * ---
                 * Similar to invariant but only logs a warning if the condition is not met.
                 * This can be used to log issues in development environments in critical
                 * paths. Removing the logging code for production environments will keep the
                 * same logic and follow the same code paths.
                 */
                var lowPriorityWarningWithoutStack = function() {};

                {
                  var printWarning = function(format) {
                    for (
                      var _len = arguments.length,
                        args = new Array(_len > 1 ? _len - 1 : 0),
                        _key = 1;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 1] = arguments[_key];
                    }

                    var argIndex = 0;
                    var message =
                      'Warning: ' +
                      format.replace(/%s/g, function() {
                        return args[argIndex++];
                      });

                    if (typeof console !== 'undefined') {
                      console.warn(message);
                    }

                    try {
                      // --- Welcome to debugging React ---
                      // This error was thrown as a convenience so that you can use this stack
                      // to find the callsite that caused this warning to fire.
                      throw new Error(message);
                    } catch (x) {}
                  };

                  lowPriorityWarningWithoutStack = function(condition, format) {
                    if (format === undefined) {
                      throw new Error(
                        '`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' +
                          'message argument'
                      );
                    }

                    if (!condition) {
                      for (
                        var _len2 = arguments.length,
                          args = new Array(_len2 > 2 ? _len2 - 2 : 0),
                          _key2 = 2;
                        _key2 < _len2;
                        _key2++
                      ) {
                        args[_key2 - 2] = arguments[_key2];
                      }

                      printWarning.apply(void 0, [format].concat(args));
                    }
                  };
                }

                var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

                var ReactStrictModeWarnings = {
                  recordUnsafeLifecycleWarnings: function(fiber, instance) {},
                  flushPendingUnsafeLifecycleWarnings: function() {},
                  recordLegacyContextWarning: function(fiber, instance) {},
                  flushLegacyContextWarning: function() {},
                  discardPendingWarnings: function() {},
                };

                {
                  var findStrictRoot = function(fiber) {
                    var maybeStrictRoot = null;
                    var node = fiber;

                    while (node !== null) {
                      if (node.mode & StrictMode) {
                        maybeStrictRoot = node;
                      }

                      node = node.return;
                    }

                    return maybeStrictRoot;
                  };

                  var setToSortedString = function(set) {
                    var array = [];
                    set.forEach(function(value) {
                      array.push(value);
                    });
                    return array.sort().join(', ');
                  };

                  var pendingComponentWillMountWarnings = [];
                  var pendingUNSAFE_ComponentWillMountWarnings = [];
                  var pendingComponentWillReceivePropsWarnings = [];
                  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                  var pendingComponentWillUpdateWarnings = [];
                  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

                  var didWarnAboutUnsafeLifecycles = new Set();

                  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(
                    fiber,
                    instance
                  ) {
                    // Dedup strategy: Warn once per component.
                    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                      return;
                    }

                    if (
                      typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
                      instance.componentWillMount
                        .__suppressDeprecationWarning !== true
                    ) {
                      pendingComponentWillMountWarnings.push(fiber);
                    }

                    if (
                      fiber.mode & StrictMode &&
                      typeof instance.UNSAFE_componentWillMount === 'function'
                    ) {
                      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
                    }

                    if (
                      typeof instance.componentWillReceiveProps ===
                        'function' &&
                      instance.componentWillReceiveProps
                        .__suppressDeprecationWarning !== true
                    ) {
                      pendingComponentWillReceivePropsWarnings.push(fiber);
                    }

                    if (
                      fiber.mode & StrictMode &&
                      typeof instance.UNSAFE_componentWillReceiveProps ===
                        'function'
                    ) {
                      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(
                        fiber
                      );
                    }

                    if (
                      typeof instance.componentWillUpdate === 'function' &&
                      instance.componentWillUpdate
                        .__suppressDeprecationWarning !== true
                    ) {
                      pendingComponentWillUpdateWarnings.push(fiber);
                    }

                    if (
                      fiber.mode & StrictMode &&
                      typeof instance.UNSAFE_componentWillUpdate === 'function'
                    ) {
                      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
                    }
                  };

                  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
                    // We do an initial pass to gather component names
                    var componentWillMountUniqueNames = new Set();

                    if (pendingComponentWillMountWarnings.length > 0) {
                      pendingComponentWillMountWarnings.forEach(function(
                        fiber
                      ) {
                        componentWillMountUniqueNames.add(
                          getComponentName(fiber.type) || 'Component'
                        );
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingComponentWillMountWarnings = [];
                    }

                    var UNSAFE_componentWillMountUniqueNames = new Set();

                    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                      pendingUNSAFE_ComponentWillMountWarnings.forEach(function(
                        fiber
                      ) {
                        UNSAFE_componentWillMountUniqueNames.add(
                          getComponentName(fiber.type) || 'Component'
                        );
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingUNSAFE_ComponentWillMountWarnings = [];
                    }

                    var componentWillReceivePropsUniqueNames = new Set();

                    if (pendingComponentWillReceivePropsWarnings.length > 0) {
                      pendingComponentWillReceivePropsWarnings.forEach(function(
                        fiber
                      ) {
                        componentWillReceivePropsUniqueNames.add(
                          getComponentName(fiber.type) || 'Component'
                        );
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingComponentWillReceivePropsWarnings = [];
                    }

                    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

                    if (
                      pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0
                    ) {
                      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
                        function(fiber) {
                          UNSAFE_componentWillReceivePropsUniqueNames.add(
                            getComponentName(fiber.type) || 'Component'
                          );
                          didWarnAboutUnsafeLifecycles.add(fiber.type);
                        }
                      );
                      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                    }

                    var componentWillUpdateUniqueNames = new Set();

                    if (pendingComponentWillUpdateWarnings.length > 0) {
                      pendingComponentWillUpdateWarnings.forEach(function(
                        fiber
                      ) {
                        componentWillUpdateUniqueNames.add(
                          getComponentName(fiber.type) || 'Component'
                        );
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingComponentWillUpdateWarnings = [];
                    }

                    var UNSAFE_componentWillUpdateUniqueNames = new Set();

                    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(
                        function(fiber) {
                          UNSAFE_componentWillUpdateUniqueNames.add(
                            getComponentName(fiber.type) || 'Component'
                          );
                          didWarnAboutUnsafeLifecycles.add(fiber.type);
                        }
                      );
                      pendingUNSAFE_ComponentWillUpdateWarnings = [];
                    } // Finally, we flush all the warnings
                    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'

                    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                      var sortedNames = setToSortedString(
                        UNSAFE_componentWillMountUniqueNames
                      );
                      warningWithoutStack$1(
                        false,
                        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
                          'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' +
                          '\nPlease update the following components: %s',
                        sortedNames
                      );
                    }

                    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                      var _sortedNames = setToSortedString(
                        UNSAFE_componentWillReceivePropsUniqueNames
                      );

                      warningWithoutStack$1(
                        false,
                        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +
                          'and may indicate bugs in your code. ' +
                          'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                          '* Move data fetching code or side effects to componentDidUpdate.\n' +
                          "* If you're updating state whenever props change, " +
                          'refactor your code to use memoization techniques or move it to ' +
                          'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' +
                          '\nPlease update the following components: %s',
                        _sortedNames
                      );
                    }

                    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                      var _sortedNames2 = setToSortedString(
                        UNSAFE_componentWillUpdateUniqueNames
                      );

                      warningWithoutStack$1(
                        false,
                        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +
                          'and may indicate bugs in your code. ' +
                          'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                          '* Move data fetching code or side effects to componentDidUpdate.\n' +
                          '\nPlease update the following components: %s',
                        _sortedNames2
                      );
                    }

                    if (componentWillMountUniqueNames.size > 0) {
                      var _sortedNames3 = setToSortedString(
                        componentWillMountUniqueNames
                      );

                      lowPriorityWarningWithoutStack$1(
                        false,
                        'componentWillMount has been renamed, and is not recommended for use. ' +
                          'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' +
                          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +
                          'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                          'To rename all deprecated lifecycles to their new names, you can run ' +
                          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                          '\nPlease update the following components: %s',
                        _sortedNames3
                      );
                    }

                    if (componentWillReceivePropsUniqueNames.size > 0) {
                      var _sortedNames4 = setToSortedString(
                        componentWillReceivePropsUniqueNames
                      );

                      lowPriorityWarningWithoutStack$1(
                        false,
                        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +
                          'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                          '* Move data fetching code or side effects to componentDidUpdate.\n' +
                          "* If you're updating state whenever props change, refactor your " +
                          'code to use memoization techniques or move it to ' +
                          'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' +
                          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +
                          'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                          'To rename all deprecated lifecycles to their new names, you can run ' +
                          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                          '\nPlease update the following components: %s',
                        _sortedNames4
                      );
                    }

                    if (componentWillUpdateUniqueNames.size > 0) {
                      var _sortedNames5 = setToSortedString(
                        componentWillUpdateUniqueNames
                      );

                      lowPriorityWarningWithoutStack$1(
                        false,
                        'componentWillUpdate has been renamed, and is not recommended for use. ' +
                          'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' +
                          '* Move data fetching code or side effects to componentDidUpdate.\n' +
                          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +
                          'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                          'To rename all deprecated lifecycles to their new names, you can run ' +
                          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                          '\nPlease update the following components: %s',
                        _sortedNames5
                      );
                    }
                  };

                  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

                  var didWarnAboutLegacyContext = new Set();

                  ReactStrictModeWarnings.recordLegacyContextWarning = function(
                    fiber,
                    instance
                  ) {
                    var strictRoot = findStrictRoot(fiber);

                    if (strictRoot === null) {
                      warningWithoutStack$1(
                        false,
                        'Expected to find a StrictMode component in a strict mode tree. ' +
                          'This error is likely caused by a bug in React. Please file an issue.'
                      );
                      return;
                    } // Dedup strategy: Warn once per component.

                    if (didWarnAboutLegacyContext.has(fiber.type)) {
                      return;
                    }

                    var warningsForRoot = pendingLegacyContextWarning.get(
                      strictRoot
                    );

                    if (
                      fiber.type.contextTypes != null ||
                      fiber.type.childContextTypes != null ||
                      (instance !== null &&
                        typeof instance.getChildContext === 'function')
                    ) {
                      if (warningsForRoot === undefined) {
                        warningsForRoot = [];
                        pendingLegacyContextWarning.set(
                          strictRoot,
                          warningsForRoot
                        );
                      }

                      warningsForRoot.push(fiber);
                    }
                  };

                  ReactStrictModeWarnings.flushLegacyContextWarning = function() {
                    pendingLegacyContextWarning.forEach(function(
                      fiberArray,
                      strictRoot
                    ) {
                      var uniqueNames = new Set();
                      fiberArray.forEach(function(fiber) {
                        uniqueNames.add(
                          getComponentName(fiber.type) || 'Component'
                        );
                        didWarnAboutLegacyContext.add(fiber.type);
                      });
                      var sortedNames = setToSortedString(uniqueNames);
                      var strictRootComponentStack = getStackByFiberInDevAndProd(
                        strictRoot
                      );
                      warningWithoutStack$1(
                        false,
                        'Legacy context API has been detected within a strict-mode tree.' +
                          '\n\nThe old API will be supported in all 16.x releases, but applications ' +
                          'using it should migrate to the new version.' +
                          '\n\nPlease update the following components: %s' +
                          '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' +
                          '%s',
                        sortedNames,
                        strictRootComponentStack
                      );
                    });
                  };

                  ReactStrictModeWarnings.discardPendingWarnings = function() {
                    pendingComponentWillMountWarnings = [];
                    pendingUNSAFE_ComponentWillMountWarnings = [];
                    pendingComponentWillReceivePropsWarnings = [];
                    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                    pendingComponentWillUpdateWarnings = [];
                    pendingUNSAFE_ComponentWillUpdateWarnings = [];
                    pendingLegacyContextWarning = new Map();
                  };
                }

                var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

                var failedBoundaries = null;
                var setRefreshHandler = function(handler) {
                  {
                    resolveFamily = handler;
                  }
                };
                function resolveFunctionForHotReloading(type) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return type;
                    }

                    var family = resolveFamily(type);

                    if (family === undefined) {
                      return type;
                    } // Use the latest known implementation.

                    return family.current;
                  }
                }
                function resolveClassForHotReloading(type) {
                  // No implementation differences.
                  return resolveFunctionForHotReloading(type);
                }
                function resolveForwardRefForHotReloading(type) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return type;
                    }

                    var family = resolveFamily(type);

                    if (family === undefined) {
                      // Check if we're dealing with a real forwardRef. Don't want to crash early.
                      if (
                        type !== null &&
                        type !== undefined &&
                        typeof type.render === 'function'
                      ) {
                        // ForwardRef is special because its resolved .type is an object,
                        // but it's possible that we only have its inner render function in the map.
                        // If that inner render function is different, we'll build a new forwardRef type.
                        var currentRender = resolveFunctionForHotReloading(
                          type.render
                        );

                        if (type.render !== currentRender) {
                          var syntheticType = {
                            $$typeof: REACT_FORWARD_REF_TYPE,
                            render: currentRender,
                          };

                          if (type.displayName !== undefined) {
                            syntheticType.displayName = type.displayName;
                          }

                          return syntheticType;
                        }
                      }

                      return type;
                    } // Use the latest known implementation.

                    return family.current;
                  }
                }
                function isCompatibleFamilyForHotReloading(fiber, element) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return false;
                    }

                    var prevType = fiber.elementType;
                    var nextType = element.type; // If we got here, we know types aren't === equal.

                    var needsCompareFamilies = false;
                    var $$typeofNextType =
                      typeof nextType === 'object' && nextType !== null
                        ? nextType.$$typeof
                        : null;

                    switch (fiber.tag) {
                      case ClassComponent: {
                        if (typeof nextType === 'function') {
                          needsCompareFamilies = true;
                        }

                        break;
                      }

                      case FunctionComponent: {
                        if (typeof nextType === 'function') {
                          needsCompareFamilies = true;
                        } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                          // We don't know the inner type yet.
                          // We're going to assume that the lazy inner type is stable,
                          // and so it is sufficient to avoid reconciling it away.
                          // We're not going to unwrap or actually use the new lazy type.
                          needsCompareFamilies = true;
                        }

                        break;
                      }

                      case ForwardRef: {
                        if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                          needsCompareFamilies = true;
                        } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                          needsCompareFamilies = true;
                        }

                        break;
                      }

                      case MemoComponent:
                      case SimpleMemoComponent: {
                        if ($$typeofNextType === REACT_MEMO_TYPE) {
                          // TODO: if it was but can no longer be simple,
                          // we shouldn't set this.
                          needsCompareFamilies = true;
                        } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                          needsCompareFamilies = true;
                        }

                        break;
                      }

                      default:
                        return false;
                    } // Check if both types have a family and it's the same one.

                    if (needsCompareFamilies) {
                      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
                      // This means both of them need to be registered to preserve state.
                      // If we unwrapped and compared the inner types for wrappers instead,
                      // then we would risk falsely saying two separate memo(Foo)
                      // calls are equivalent because they wrap the same Foo function.
                      var prevFamily = resolveFamily(prevType);

                      if (
                        prevFamily !== undefined &&
                        prevFamily === resolveFamily(nextType)
                      ) {
                        return true;
                      }
                    }

                    return false;
                  }
                }
                function markFailedErrorBoundaryForHotReloading(fiber) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return;
                    }

                    if (typeof WeakSet !== 'function') {
                      return;
                    }

                    if (failedBoundaries === null) {
                      failedBoundaries = new WeakSet();
                    }

                    failedBoundaries.add(fiber);
                  }
                }
                var scheduleRefresh = function(root, update) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return;
                    }

                    var staleFamilies = update.staleFamilies,
                      updatedFamilies = update.updatedFamilies;
                    flushPassiveEffects();
                    flushSync(function() {
                      scheduleFibersWithFamiliesRecursively(
                        root.current,
                        updatedFamilies,
                        staleFamilies
                      );
                    });
                  }
                };
                var scheduleRoot = function(root, element) {
                  {
                    if (root.context !== emptyContextObject) {
                      // Super edge case: root has a legacy _renderSubtree context
                      // but we don't know the parentComponent so we can't pass it.
                      // Just ignore. We'll delete this with _renderSubtree code path later.
                      return;
                    }

                    flushPassiveEffects();
                    syncUpdates(function() {
                      updateContainer(element, root, null, null);
                    });
                  }
                };

                function scheduleFibersWithFamiliesRecursively(
                  fiber,
                  updatedFamilies,
                  staleFamilies
                ) {
                  {
                    var alternate = fiber.alternate,
                      child = fiber.child,
                      sibling = fiber.sibling,
                      tag = fiber.tag,
                      type = fiber.type;
                    var candidateType = null;

                    switch (tag) {
                      case FunctionComponent:
                      case SimpleMemoComponent:
                      case ClassComponent:
                        candidateType = type;
                        break;

                      case ForwardRef:
                        candidateType = type.render;
                        break;

                      default:
                        break;
                    }

                    if (resolveFamily === null) {
                      throw new Error(
                        'Expected resolveFamily to be set during hot reload.'
                      );
                    }

                    var needsRender = false;
                    var needsRemount = false;

                    if (candidateType !== null) {
                      var family = resolveFamily(candidateType);

                      if (family !== undefined) {
                        if (staleFamilies.has(family)) {
                          needsRemount = true;
                        } else if (updatedFamilies.has(family)) {
                          if (tag === ClassComponent) {
                            needsRemount = true;
                          } else {
                            needsRender = true;
                          }
                        }
                      }
                    }

                    if (failedBoundaries !== null) {
                      if (
                        failedBoundaries.has(fiber) ||
                        (alternate !== null && failedBoundaries.has(alternate))
                      ) {
                        needsRemount = true;
                      }
                    }

                    if (needsRemount) {
                      fiber._debugNeedsRemount = true;
                    }

                    if (needsRemount || needsRender) {
                      scheduleWork(fiber, Sync);
                    }

                    if (child !== null && !needsRemount) {
                      scheduleFibersWithFamiliesRecursively(
                        child,
                        updatedFamilies,
                        staleFamilies
                      );
                    }

                    if (sibling !== null) {
                      scheduleFibersWithFamiliesRecursively(
                        sibling,
                        updatedFamilies,
                        staleFamilies
                      );
                    }
                  }
                }

                var findHostInstancesForRefresh = function(root, families) {
                  {
                    var hostInstances = new Set();
                    var types = new Set(
                      families.map(function(family) {
                        return family.current;
                      })
                    );
                    findHostInstancesForMatchingFibersRecursively(
                      root.current,
                      types,
                      hostInstances
                    );
                    return hostInstances;
                  }
                };

                function findHostInstancesForMatchingFibersRecursively(
                  fiber,
                  types,
                  hostInstances
                ) {
                  {
                    var child = fiber.child,
                      sibling = fiber.sibling,
                      tag = fiber.tag,
                      type = fiber.type;
                    var candidateType = null;

                    switch (tag) {
                      case FunctionComponent:
                      case SimpleMemoComponent:
                      case ClassComponent:
                        candidateType = type;
                        break;

                      case ForwardRef:
                        candidateType = type.render;
                        break;

                      default:
                        break;
                    }

                    var didMatch = false;

                    if (candidateType !== null) {
                      if (types.has(candidateType)) {
                        didMatch = true;
                      }
                    }

                    if (didMatch) {
                      // We have a match. This only drills down to the closest host components.
                      // There's no need to search deeper because for the purpose of giving
                      // visual feedback, "flashing" outermost parent rectangles is sufficient.
                      findHostInstancesForFiberShallowly(fiber, hostInstances);
                    } else {
                      // If there's no match, maybe there will be one further down in the child tree.
                      if (child !== null) {
                        findHostInstancesForMatchingFibersRecursively(
                          child,
                          types,
                          hostInstances
                        );
                      }
                    }

                    if (sibling !== null) {
                      findHostInstancesForMatchingFibersRecursively(
                        sibling,
                        types,
                        hostInstances
                      );
                    }
                  }
                }

                function findHostInstancesForFiberShallowly(
                  fiber,
                  hostInstances
                ) {
                  {
                    var foundHostInstances = findChildHostInstancesForFiberShallowly(
                      fiber,
                      hostInstances
                    );

                    if (foundHostInstances) {
                      return;
                    } // If we didn't find any host children, fallback to closest host parent.

                    var node = fiber;

                    while (true) {
                      switch (node.tag) {
                        case HostComponent:
                          hostInstances.add(node.stateNode);
                          return;

                        case HostPortal:
                          hostInstances.add(node.stateNode.containerInfo);
                          return;

                        case HostRoot:
                          hostInstances.add(node.stateNode.containerInfo);
                          return;
                      }

                      if (node.return === null) {
                        throw new Error('Expected to reach root first.');
                      }

                      node = node.return;
                    }
                  }
                }

                function findChildHostInstancesForFiberShallowly(
                  fiber,
                  hostInstances
                ) {
                  {
                    var node = fiber;
                    var foundHostInstances = false;

                    while (true) {
                      if (node.tag === HostComponent) {
                        // We got a match.
                        foundHostInstances = true;
                        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
                      } else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      }

                      if (node === fiber) {
                        return foundHostInstances;
                      }

                      while (node.sibling === null) {
                        if (node.return === null || node.return === fiber) {
                          return foundHostInstances;
                        }

                        node = node.return;
                      }

                      node.sibling.return = node.return;
                      node = node.sibling;
                    }
                  }

                  return false;
                }

                function resolveDefaultProps(Component, baseProps) {
                  if (Component && Component.defaultProps) {
                    // Resolve default props. Taken from ReactElement
                    var props = _assign({}, baseProps);

                    var defaultProps = Component.defaultProps;

                    for (var propName in defaultProps) {
                      if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                      }
                    }

                    return props;
                  }

                  return baseProps;
                }
                function readLazyComponentType(lazyComponent) {
                  initializeLazyComponentType(lazyComponent);

                  if (lazyComponent._status !== Resolved) {
                    throw lazyComponent._result;
                  }

                  return lazyComponent._result;
                }

                var valueCursor = createCursor(null);
                var rendererSigil;

                {
                  // Use this to detect multiple renderers using the same context
                  rendererSigil = {};
                }

                var currentlyRenderingFiber = null;
                var lastContextDependency = null;
                var lastContextWithAllBitsObserved = null;
                var isDisallowedContextReadInDEV = false;
                function resetContextDependencies() {
                  // This is called right before React yields execution, to ensure `readContext`
                  // cannot be called outside the render phase.
                  currentlyRenderingFiber = null;
                  lastContextDependency = null;
                  lastContextWithAllBitsObserved = null;

                  {
                    isDisallowedContextReadInDEV = false;
                  }
                }
                function enterDisallowedContextReadInDEV() {
                  {
                    isDisallowedContextReadInDEV = true;
                  }
                }
                function exitDisallowedContextReadInDEV() {
                  {
                    isDisallowedContextReadInDEV = false;
                  }
                }
                function pushProvider(providerFiber, nextValue) {
                  var context = providerFiber.type._context;

                  if (isPrimaryRenderer) {
                    push(valueCursor, context._currentValue, providerFiber);
                    context._currentValue = nextValue;

                    {
                      !(
                        context._currentRenderer === undefined ||
                        context._currentRenderer === null ||
                        context._currentRenderer === rendererSigil
                      )
                        ? warningWithoutStack$1(
                            false,
                            'Detected multiple renderers concurrently rendering the ' +
                              'same context provider. This is currently unsupported.'
                          )
                        : void 0;
                      context._currentRenderer = rendererSigil;
                    }
                  } else {
                    push(valueCursor, context._currentValue2, providerFiber);
                    context._currentValue2 = nextValue;

                    {
                      !(
                        context._currentRenderer2 === undefined ||
                        context._currentRenderer2 === null ||
                        context._currentRenderer2 === rendererSigil
                      )
                        ? warningWithoutStack$1(
                            false,
                            'Detected multiple renderers concurrently rendering the ' +
                              'same context provider. This is currently unsupported.'
                          )
                        : void 0;
                      context._currentRenderer2 = rendererSigil;
                    }
                  }
                }
                function popProvider(providerFiber) {
                  var currentValue = valueCursor.current;
                  pop(valueCursor, providerFiber);
                  var context = providerFiber.type._context;

                  if (isPrimaryRenderer) {
                    context._currentValue = currentValue;
                  } else {
                    context._currentValue2 = currentValue;
                  }
                }
                function calculateChangedBits(context, newValue, oldValue) {
                  if (is$1(oldValue, newValue)) {
                    // No change
                    return 0;
                  } else {
                    var changedBits =
                      typeof context._calculateChangedBits === 'function'
                        ? context._calculateChangedBits(oldValue, newValue)
                        : MAX_SIGNED_31_BIT_INT;

                    {
                      !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits)
                        ? warning$1(
                            false,
                            'calculateChangedBits: Expected the return value to be a ' +
                              '31-bit integer. Instead received: %s',
                            changedBits
                          )
                        : void 0;
                    }

                    return changedBits | 0;
                  }
                }
                function scheduleWorkOnParentPath(
                  parent,
                  renderExpirationTime
                ) {
                  // Update the child expiration time of all the ancestors, including
                  // the alternates.
                  var node = parent;

                  while (node !== null) {
                    var alternate = node.alternate;

                    if (node.childExpirationTime < renderExpirationTime) {
                      node.childExpirationTime = renderExpirationTime;

                      if (
                        alternate !== null &&
                        alternate.childExpirationTime < renderExpirationTime
                      ) {
                        alternate.childExpirationTime = renderExpirationTime;
                      }
                    } else if (
                      alternate !== null &&
                      alternate.childExpirationTime < renderExpirationTime
                    ) {
                      alternate.childExpirationTime = renderExpirationTime;
                    } else {
                      // Neither alternate was updated, which means the rest of the
                      // ancestor path already has sufficient priority.
                      break;
                    }

                    node = node.return;
                  }
                }
                function propagateContextChange(
                  workInProgress,
                  context,
                  changedBits,
                  renderExpirationTime
                ) {
                  var fiber = workInProgress.child;

                  if (fiber !== null) {
                    // Set the return pointer of the child to the work-in-progress fiber.
                    fiber.return = workInProgress;
                  }

                  while (fiber !== null) {
                    var nextFiber = void 0; // Visit this fiber.

                    var list = fiber.dependencies;

                    if (list !== null) {
                      nextFiber = fiber.child;
                      var dependency = list.firstContext;

                      while (dependency !== null) {
                        // Check if the context matches.
                        if (
                          dependency.context === context &&
                          (dependency.observedBits & changedBits) !== 0
                        ) {
                          // Match! Schedule an update on this fiber.
                          if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(
                              renderExpirationTime,
                              null
                            );
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.

                            enqueueUpdate(fiber, update);
                          }

                          if (fiber.expirationTime < renderExpirationTime) {
                            fiber.expirationTime = renderExpirationTime;
                          }

                          var alternate = fiber.alternate;

                          if (
                            alternate !== null &&
                            alternate.expirationTime < renderExpirationTime
                          ) {
                            alternate.expirationTime = renderExpirationTime;
                          }

                          scheduleWorkOnParentPath(
                            fiber.return,
                            renderExpirationTime
                          ); // Mark the expiration time on the list, too.

                          if (list.expirationTime < renderExpirationTime) {
                            list.expirationTime = renderExpirationTime;
                          } // Since we already found a match, we can stop traversing the
                          // dependency list.

                          break;
                        }

                        dependency = dependency.next;
                      }
                    } else if (fiber.tag === ContextProvider) {
                      // Don't scan deeper if this is a matching provider
                      nextFiber =
                        fiber.type === workInProgress.type ? null : fiber.child;
                    } else if (
                      enableSuspenseServerRenderer &&
                      fiber.tag === DehydratedFragment
                    ) {
                      // If a dehydrated suspense bounudary is in this subtree, we don't know
                      // if it will have any context consumers in it. The best we can do is
                      // mark it as having updates.
                      var parentSuspense = fiber.return;

                      if (!(parentSuspense !== null)) {
                        {
                          throw Error(
                            'We just came from a parent so we must have had a parent. This is a bug in React.'
                          );
                        }
                      }

                      if (
                        parentSuspense.expirationTime < renderExpirationTime
                      ) {
                        parentSuspense.expirationTime = renderExpirationTime;
                      }

                      var _alternate = parentSuspense.alternate;

                      if (
                        _alternate !== null &&
                        _alternate.expirationTime < renderExpirationTime
                      ) {
                        _alternate.expirationTime = renderExpirationTime;
                      } // This is intentionally passing this fiber as the parent
                      // because we want to schedule this fiber as having work
                      // on its children. We'll use the childExpirationTime on
                      // this fiber to indicate that a context has changed.

                      scheduleWorkOnParentPath(
                        parentSuspense,
                        renderExpirationTime
                      );
                      nextFiber = fiber.sibling;
                    } else {
                      // Traverse down.
                      nextFiber = fiber.child;
                    }

                    if (nextFiber !== null) {
                      // Set the return pointer of the child to the work-in-progress fiber.
                      nextFiber.return = fiber;
                    } else {
                      // No child. Traverse to next sibling.
                      nextFiber = fiber;

                      while (nextFiber !== null) {
                        if (nextFiber === workInProgress) {
                          // We're back to the root of this subtree. Exit.
                          nextFiber = null;
                          break;
                        }

                        var sibling = nextFiber.sibling;

                        if (sibling !== null) {
                          // Set the return pointer of the sibling to the work-in-progress fiber.
                          sibling.return = nextFiber.return;
                          nextFiber = sibling;
                          break;
                        } // No more siblings. Traverse up.

                        nextFiber = nextFiber.return;
                      }
                    }

                    fiber = nextFiber;
                  }
                }
                function prepareToReadContext(
                  workInProgress,
                  renderExpirationTime
                ) {
                  currentlyRenderingFiber = workInProgress;
                  lastContextDependency = null;
                  lastContextWithAllBitsObserved = null;
                  var dependencies = workInProgress.dependencies;

                  if (dependencies !== null) {
                    var firstContext = dependencies.firstContext;

                    if (firstContext !== null) {
                      if (dependencies.expirationTime >= renderExpirationTime) {
                        // Context list has a pending update. Mark that this fiber performed work.
                        markWorkInProgressReceivedUpdate();
                      } // Reset the work-in-progress list

                      dependencies.firstContext = null;
                    }
                  }
                }
                function readContext(context, observedBits) {
                  {
                    // This warning would fire if you read context inside a Hook like useMemo.
                    // Unlike the class check below, it's not enforced in production for perf.
                    !!isDisallowedContextReadInDEV
                      ? warning$1(
                          false,
                          'Context can only be read while React is rendering. ' +
                            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
                            'In function components, you can read it directly in the function body, but not ' +
                            'inside Hooks like useReducer() or useMemo().'
                        )
                      : void 0;
                  }

                  if (lastContextWithAllBitsObserved === context) {
                    // Nothing to do. We already observe everything in this context.
                  } else if (observedBits === false || observedBits === 0) {
                    // Do not observe any updates.
                  } else {
                    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

                    if (
                      typeof observedBits !== 'number' ||
                      observedBits === MAX_SIGNED_31_BIT_INT
                    ) {
                      // Observe all updates.
                      lastContextWithAllBitsObserved = context;
                      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
                    } else {
                      resolvedObservedBits = observedBits;
                    }

                    var contextItem = {
                      context: context,
                      observedBits: resolvedObservedBits,
                      next: null,
                    };

                    if (lastContextDependency === null) {
                      if (!(currentlyRenderingFiber !== null)) {
                        {
                          throw Error(
                            'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'
                          );
                        }
                      } // This is the first dependency for this component. Create a new list.

                      lastContextDependency = contextItem;
                      currentlyRenderingFiber.dependencies = {
                        expirationTime: NoWork,
                        firstContext: contextItem,
                        responders: null,
                      };
                    } else {
                      // Append a new context item.
                      lastContextDependency = lastContextDependency.next = contextItem;
                    }
                  }

                  return isPrimaryRenderer
                    ? context._currentValue
                    : context._currentValue2;
                }

                // UpdateQueue is a linked list of prioritized updates.
                //
                // Like fibers, update queues come in pairs: a current queue, which represents
                // the visible state of the screen, and a work-in-progress queue, which can be
                // mutated and processed asynchronously before it is committed — a form of
                // double buffering. If a work-in-progress render is discarded before finishing,
                // we create a new work-in-progress by cloning the current queue.
                //
                // Both queues share a persistent, singly-linked list structure. To schedule an
                // update, we append it to the end of both queues. Each queue maintains a
                // pointer to first update in the persistent list that hasn't been processed.
                // The work-in-progress pointer always has a position equal to or greater than
                // the current queue, since we always work on that one. The current queue's
                // pointer is only updated during the commit phase, when we swap in the
                // work-in-progress.
                //
                // For example:
                //
                //   Current pointer:           A - B - C - D - E - F
                //   Work-in-progress pointer:              D - E - F
                //                                          ^
                //                                          The work-in-progress queue has
                //                                          processed more updates than current.
                //
                // The reason we append to both queues is because otherwise we might drop
                // updates without ever processing them. For example, if we only add updates to
                // the work-in-progress queue, some updates could be lost whenever a work-in
                // -progress render restarts by cloning from current. Similarly, if we only add
                // updates to the current queue, the updates will be lost whenever an already
                // in-progress queue commits and swaps with the current queue. However, by
                // adding to both queues, we guarantee that the update will be part of the next
                // work-in-progress. (And because the work-in-progress queue becomes the
                // current queue once it commits, there's no danger of applying the same
                // update twice.)
                //
                // Prioritization
                // --------------
                //
                // Updates are not sorted by priority, but by insertion; new updates are always
                // appended to the end of the list.
                //
                // The priority is still important, though. When processing the update queue
                // during the render phase, only the updates with sufficient priority are
                // included in the result. If we skip an update because it has insufficient
                // priority, it remains in the queue to be processed later, during a lower
                // priority render. Crucially, all updates subsequent to a skipped update also
                // remain in the queue *regardless of their priority*. That means high priority
                // updates are sometimes processed twice, at two separate priorities. We also
                // keep track of a base state, that represents the state before the first
                // update in the queue is applied.
                //
                // For example:
                //
                //   Given a base state of '', and the following queue of updates
                //
                //     A1 - B2 - C1 - D2
                //
                //   where the number indicates the priority, and the update is applied to the
                //   previous state by appending a letter, React will process these updates as
                //   two separate renders, one per distinct priority level:
                //
                //   First render, at priority 1:
                //     Base state: ''
                //     Updates: [A1, C1]
                //     Result state: 'AC'
                //
                //   Second render, at priority 2:
                //     Base state: 'A'            <-  The base state does not include C1,
                //                                    because B2 was skipped.
                //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
                //     Result state: 'ABCD'
                //
                // Because we process updates in insertion order, and rebase high priority
                // updates when preceding updates are skipped, the final result is deterministic
                // regardless of priority. Intermediate state may vary according to system
                // resources, but the final state is always the same.
                var UpdateState = 0;
                var ReplaceState = 1;
                var ForceUpdate = 2;
                var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
                // It should only be read right after calling `processUpdateQueue`, via
                // `checkHasForceUpdateAfterProcessing`.

                var hasForceUpdate = false;
                var didWarnUpdateInsideUpdate;
                var currentlyProcessingQueue;

                {
                  didWarnUpdateInsideUpdate = false;
                  currentlyProcessingQueue = null;
                }

                function createUpdateQueue(baseState) {
                  var queue = {
                    baseState: baseState,
                    firstUpdate: null,
                    lastUpdate: null,
                    firstCapturedUpdate: null,
                    lastCapturedUpdate: null,
                    firstEffect: null,
                    lastEffect: null,
                    firstCapturedEffect: null,
                    lastCapturedEffect: null,
                  };
                  return queue;
                }

                function cloneUpdateQueue(currentQueue) {
                  var queue = {
                    baseState: currentQueue.baseState,
                    firstUpdate: currentQueue.firstUpdate,
                    lastUpdate: currentQueue.lastUpdate,
                    // TODO: With resuming, if we bail out and resuse the child tree, we should
                    // keep these effects.
                    firstCapturedUpdate: null,
                    lastCapturedUpdate: null,
                    firstEffect: null,
                    lastEffect: null,
                    firstCapturedEffect: null,
                    lastCapturedEffect: null,
                  };
                  return queue;
                }

                function createUpdate(expirationTime, suspenseConfig) {
                  var update = {
                    expirationTime: expirationTime,
                    suspenseConfig: suspenseConfig,
                    tag: UpdateState,
                    payload: null,
                    callback: null,
                    next: null,
                    nextEffect: null,
                  };

                  {
                    update.priority = getCurrentPriorityLevel();
                  }

                  return update;
                }

                function appendUpdateToQueue(queue, update) {
                  // Append the update to the end of the list.
                  if (queue.lastUpdate === null) {
                    // Queue is empty
                    queue.firstUpdate = queue.lastUpdate = update;
                  } else {
                    queue.lastUpdate.next = update;
                    queue.lastUpdate = update;
                  }
                }

                function enqueueUpdate(fiber, update) {
                  // Update queues are created lazily.
                  var alternate = fiber.alternate;
                  var queue1;
                  var queue2;

                  if (alternate === null) {
                    // There's only one fiber.
                    queue1 = fiber.updateQueue;
                    queue2 = null;

                    if (queue1 === null) {
                      queue1 = fiber.updateQueue = createUpdateQueue(
                        fiber.memoizedState
                      );
                    }
                  } else {
                    // There are two owners.
                    queue1 = fiber.updateQueue;
                    queue2 = alternate.updateQueue;

                    if (queue1 === null) {
                      if (queue2 === null) {
                        // Neither fiber has an update queue. Create new ones.
                        queue1 = fiber.updateQueue = createUpdateQueue(
                          fiber.memoizedState
                        );
                        queue2 = alternate.updateQueue = createUpdateQueue(
                          alternate.memoizedState
                        );
                      } else {
                        // Only one fiber has an update queue. Clone to create a new one.
                        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
                      }
                    } else {
                      if (queue2 === null) {
                        // Only one fiber has an update queue. Clone to create a new one.
                        queue2 = alternate.updateQueue = cloneUpdateQueue(
                          queue1
                        );
                      } else {
                        // Both owners have an update queue.
                      }
                    }
                  }

                  if (queue2 === null || queue1 === queue2) {
                    // There's only a single queue.
                    appendUpdateToQueue(queue1, update);
                  } else {
                    // There are two queues. We need to append the update to both queues,
                    // while accounting for the persistent structure of the list — we don't
                    // want the same update to be added multiple times.
                    if (
                      queue1.lastUpdate === null ||
                      queue2.lastUpdate === null
                    ) {
                      // One of the queues is not empty. We must add the update to both queues.
                      appendUpdateToQueue(queue1, update);
                      appendUpdateToQueue(queue2, update);
                    } else {
                      // Both queues are non-empty. The last update is the same in both lists,
                      // because of structural sharing. So, only append to one of the lists.
                      appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

                      queue2.lastUpdate = update;
                    }
                  }

                  {
                    if (
                      fiber.tag === ClassComponent &&
                      (currentlyProcessingQueue === queue1 ||
                        (queue2 !== null &&
                          currentlyProcessingQueue === queue2)) &&
                      !didWarnUpdateInsideUpdate
                    ) {
                      warningWithoutStack$1(
                        false,
                        'An update (setState, replaceState, or forceUpdate) was scheduled ' +
                          'from inside an update function. Update functions should be pure, ' +
                          'with zero side-effects. Consider using componentDidUpdate or a ' +
                          'callback.'
                      );
                      didWarnUpdateInsideUpdate = true;
                    }
                  }
                }
                function enqueueCapturedUpdate(workInProgress, update) {
                  // Captured updates go into a separate list, and only on the work-in-
                  // progress queue.
                  var workInProgressQueue = workInProgress.updateQueue;

                  if (workInProgressQueue === null) {
                    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(
                      workInProgress.memoizedState
                    );
                  } else {
                    // TODO: I put this here rather than createWorkInProgress so that we don't
                    // clone the queue unnecessarily. There's probably a better way to
                    // structure this.
                    workInProgressQueue = ensureWorkInProgressQueueIsAClone(
                      workInProgress,
                      workInProgressQueue
                    );
                  } // Append the update to the end of the list.

                  if (workInProgressQueue.lastCapturedUpdate === null) {
                    // This is the first render phase update
                    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
                  } else {
                    workInProgressQueue.lastCapturedUpdate.next = update;
                    workInProgressQueue.lastCapturedUpdate = update;
                  }
                }

                function ensureWorkInProgressQueueIsAClone(
                  workInProgress,
                  queue
                ) {
                  var current = workInProgress.alternate;

                  if (current !== null) {
                    // If the work-in-progress queue is equal to the current queue,
                    // we need to clone it first.
                    if (queue === current.updateQueue) {
                      queue = workInProgress.updateQueue = cloneUpdateQueue(
                        queue
                      );
                    }
                  }

                  return queue;
                }

                function getStateFromUpdate(
                  workInProgress,
                  queue,
                  update,
                  prevState,
                  nextProps,
                  instance
                ) {
                  switch (update.tag) {
                    case ReplaceState: {
                      var payload = update.payload;

                      if (typeof payload === 'function') {
                        // Updater function
                        {
                          enterDisallowedContextReadInDEV();

                          if (
                            debugRenderPhaseSideEffectsForStrictMode &&
                            workInProgress.mode & StrictMode
                          ) {
                            payload.call(instance, prevState, nextProps);
                          }
                        }

                        var nextState = payload.call(
                          instance,
                          prevState,
                          nextProps
                        );

                        {
                          exitDisallowedContextReadInDEV();
                        }

                        return nextState;
                      } // State object

                      return payload;
                    }

                    case CaptureUpdate: {
                      workInProgress.effectTag =
                        (workInProgress.effectTag & ~ShouldCapture) |
                        DidCapture;
                    }
                    // Intentional fallthrough

                    case UpdateState: {
                      var _payload = update.payload;
                      var partialState;

                      if (typeof _payload === 'function') {
                        // Updater function
                        {
                          enterDisallowedContextReadInDEV();

                          if (
                            debugRenderPhaseSideEffectsForStrictMode &&
                            workInProgress.mode & StrictMode
                          ) {
                            _payload.call(instance, prevState, nextProps);
                          }
                        }

                        partialState = _payload.call(
                          instance,
                          prevState,
                          nextProps
                        );

                        {
                          exitDisallowedContextReadInDEV();
                        }
                      } else {
                        // Partial state object
                        partialState = _payload;
                      }

                      if (partialState === null || partialState === undefined) {
                        // Null and undefined are treated as no-ops.
                        return prevState;
                      } // Merge the partial state and the previous state.

                      return _assign({}, prevState, partialState);
                    }

                    case ForceUpdate: {
                      hasForceUpdate = true;
                      return prevState;
                    }
                  }

                  return prevState;
                }

                function processUpdateQueue(
                  workInProgress,
                  queue,
                  props,
                  instance,
                  renderExpirationTime
                ) {
                  hasForceUpdate = false;
                  queue = ensureWorkInProgressQueueIsAClone(
                    workInProgress,
                    queue
                  );

                  {
                    currentlyProcessingQueue = queue;
                  } // These values may change as we process the queue.

                  var newBaseState = queue.baseState;
                  var newFirstUpdate = null;
                  var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

                  var update = queue.firstUpdate;
                  var resultState = newBaseState;

                  while (update !== null) {
                    var updateExpirationTime = update.expirationTime;

                    if (updateExpirationTime < renderExpirationTime) {
                      // This update does not have sufficient priority. Skip it.
                      if (newFirstUpdate === null) {
                        // This is the first skipped update. It will be the first update in
                        // the new list.
                        newFirstUpdate = update; // Since this is the first update that was skipped, the current result
                        // is the new base state.

                        newBaseState = resultState;
                      } // Since this update will remain in the list, update the remaining
                      // expiration time.

                      if (newExpirationTime < updateExpirationTime) {
                        newExpirationTime = updateExpirationTime;
                      }
                    } else {
                      // This update does have sufficient priority.
                      // Mark the event time of this update as relevant to this render pass.
                      // TODO: This should ideally use the true event time of this update rather than
                      // its priority which is a derived and not reverseable value.
                      // TODO: We should skip this update if it was already committed but currently
                      // we have no way of detecting the difference between a committed and suspended
                      // update here.
                      markRenderEventTimeAndConfig(
                        updateExpirationTime,
                        update.suspenseConfig
                      ); // Process it and compute a new result.

                      resultState = getStateFromUpdate(
                        workInProgress,
                        queue,
                        update,
                        resultState,
                        props,
                        instance
                      );
                      var callback = update.callback;

                      if (callback !== null) {
                        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

                        update.nextEffect = null;

                        if (queue.lastEffect === null) {
                          queue.firstEffect = queue.lastEffect = update;
                        } else {
                          queue.lastEffect.nextEffect = update;
                          queue.lastEffect = update;
                        }
                      }
                    } // Continue to the next update.

                    update = update.next;
                  } // Separately, iterate though the list of captured updates.

                  var newFirstCapturedUpdate = null;
                  update = queue.firstCapturedUpdate;

                  while (update !== null) {
                    var _updateExpirationTime = update.expirationTime;

                    if (_updateExpirationTime < renderExpirationTime) {
                      // This update does not have sufficient priority. Skip it.
                      if (newFirstCapturedUpdate === null) {
                        // This is the first skipped captured update. It will be the first
                        // update in the new list.
                        newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
                        // the new base state.

                        if (newFirstUpdate === null) {
                          newBaseState = resultState;
                        }
                      } // Since this update will remain in the list, update the remaining
                      // expiration time.

                      if (newExpirationTime < _updateExpirationTime) {
                        newExpirationTime = _updateExpirationTime;
                      }
                    } else {
                      // This update does have sufficient priority. Process it and compute
                      // a new result.
                      resultState = getStateFromUpdate(
                        workInProgress,
                        queue,
                        update,
                        resultState,
                        props,
                        instance
                      );
                      var _callback = update.callback;

                      if (_callback !== null) {
                        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

                        update.nextEffect = null;

                        if (queue.lastCapturedEffect === null) {
                          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
                        } else {
                          queue.lastCapturedEffect.nextEffect = update;
                          queue.lastCapturedEffect = update;
                        }
                      }
                    }

                    update = update.next;
                  }

                  if (newFirstUpdate === null) {
                    queue.lastUpdate = null;
                  }

                  if (newFirstCapturedUpdate === null) {
                    queue.lastCapturedUpdate = null;
                  } else {
                    workInProgress.effectTag |= Callback;
                  }

                  if (
                    newFirstUpdate === null &&
                    newFirstCapturedUpdate === null
                  ) {
                    // We processed every update, without skipping. That means the new base
                    // state is the same as the result state.
                    newBaseState = resultState;
                  }

                  queue.baseState = newBaseState;
                  queue.firstUpdate = newFirstUpdate;
                  queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
                  // This should be fine because the only two other things that contribute to
                  // expiration time are props and context. We're already in the middle of the
                  // begin phase by the time we start processing the queue, so we've already
                  // dealt with the props. Context in components that specify
                  // shouldComponentUpdate is tricky; but we'll have to account for
                  // that regardless.

                  markUnprocessedUpdateTime(newExpirationTime);
                  workInProgress.expirationTime = newExpirationTime;
                  workInProgress.memoizedState = resultState;

                  {
                    currentlyProcessingQueue = null;
                  }
                }

                function callCallback(callback, context) {
                  if (!(typeof callback === 'function')) {
                    {
                      throw Error(
                        'Invalid argument passed as callback. Expected a function. Instead received: ' +
                          callback
                      );
                    }
                  }

                  callback.call(context);
                }

                function resetHasForceUpdateBeforeProcessing() {
                  hasForceUpdate = false;
                }
                function checkHasForceUpdateAfterProcessing() {
                  return hasForceUpdate;
                }
                function commitUpdateQueue(
                  finishedWork,
                  finishedQueue,
                  instance,
                  renderExpirationTime
                ) {
                  // If the finished render included captured updates, and there are still
                  // lower priority updates left over, we need to keep the captured updates
                  // in the queue so that they are rebased and not dropped once we process the
                  // queue again at the lower priority.
                  if (finishedQueue.firstCapturedUpdate !== null) {
                    // Join the captured update list to the end of the normal list.
                    if (finishedQueue.lastUpdate !== null) {
                      finishedQueue.lastUpdate.next =
                        finishedQueue.firstCapturedUpdate;
                      finishedQueue.lastUpdate =
                        finishedQueue.lastCapturedUpdate;
                    } // Clear the list of captured updates.

                    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
                  } // Commit the effects

                  commitUpdateEffects(finishedQueue.firstEffect, instance);
                  finishedQueue.firstEffect = finishedQueue.lastEffect = null;
                  commitUpdateEffects(
                    finishedQueue.firstCapturedEffect,
                    instance
                  );
                  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
                }

                function commitUpdateEffects(effect, instance) {
                  while (effect !== null) {
                    var callback = effect.callback;

                    if (callback !== null) {
                      effect.callback = null;
                      callCallback(callback, instance);
                    }

                    effect = effect.nextEffect;
                  }
                }

                var ReactCurrentBatchConfig =
                  ReactSharedInternals.ReactCurrentBatchConfig;
                function requestCurrentSuspenseConfig() {
                  return ReactCurrentBatchConfig.suspense;
                }

                var fakeInternalInstance = {};
                var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
                // We'll use it to determine whether we need to initialize legacy refs.

                var emptyRefsObject = new React.Component().refs;
                var didWarnAboutStateAssignmentForComponent;
                var didWarnAboutUninitializedState;
                var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
                var didWarnAboutLegacyLifecyclesAndDerivedState;
                var didWarnAboutUndefinedDerivedState;
                var warnOnUndefinedDerivedState;
                var warnOnInvalidCallback;
                var didWarnAboutDirectlyAssigningPropsToState;
                var didWarnAboutContextTypeAndContextTypes;
                var didWarnAboutInvalidateContextType;

                {
                  didWarnAboutStateAssignmentForComponent = new Set();
                  didWarnAboutUninitializedState = new Set();
                  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
                  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
                  didWarnAboutDirectlyAssigningPropsToState = new Set();
                  didWarnAboutUndefinedDerivedState = new Set();
                  didWarnAboutContextTypeAndContextTypes = new Set();
                  didWarnAboutInvalidateContextType = new Set();
                  var didWarnOnInvalidCallback = new Set();

                  warnOnInvalidCallback = function(callback, callerName) {
                    if (callback === null || typeof callback === 'function') {
                      return;
                    }

                    var key = callerName + '_' + callback;

                    if (!didWarnOnInvalidCallback.has(key)) {
                      didWarnOnInvalidCallback.add(key);
                      warningWithoutStack$1(
                        false,
                        '%s(...): Expected the last optional `callback` argument to be a ' +
                          'function. Instead received: %s.',
                        callerName,
                        callback
                      );
                    }
                  };

                  warnOnUndefinedDerivedState = function(type, partialState) {
                    if (partialState === undefined) {
                      var componentName = getComponentName(type) || 'Component';

                      if (
                        !didWarnAboutUndefinedDerivedState.has(componentName)
                      ) {
                        didWarnAboutUndefinedDerivedState.add(componentName);
                        warningWithoutStack$1(
                          false,
                          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +
                            'You have returned undefined.',
                          componentName
                        );
                      }
                    }
                  }; // This is so gross but it's at least non-critical and can be removed if
                  // it causes problems. This is meant to give a nicer error message for
                  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
                  // ...)) which otherwise throws a "_processChildContext is not a function"
                  // exception.

                  Object.defineProperty(
                    fakeInternalInstance,
                    '_processChildContext',
                    {
                      enumerable: false,
                      value: function() {
                        {
                          {
                            throw Error(
                              "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."
                            );
                          }
                        }
                      },
                    }
                  );
                  Object.freeze(fakeInternalInstance);
                }

                function applyDerivedStateFromProps(
                  workInProgress,
                  ctor,
                  getDerivedStateFromProps,
                  nextProps
                ) {
                  var prevState = workInProgress.memoizedState;

                  {
                    if (
                      debugRenderPhaseSideEffectsForStrictMode &&
                      workInProgress.mode & StrictMode
                    ) {
                      // Invoke the function an extra time to help detect side-effects.
                      getDerivedStateFromProps(nextProps, prevState);
                    }
                  }

                  var partialState = getDerivedStateFromProps(
                    nextProps,
                    prevState
                  );

                  {
                    warnOnUndefinedDerivedState(ctor, partialState);
                  } // Merge the partial state and the previous state.

                  var memoizedState =
                    partialState === null || partialState === undefined
                      ? prevState
                      : _assign({}, prevState, partialState);
                  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
                  // base state.

                  var updateQueue = workInProgress.updateQueue;

                  if (
                    updateQueue !== null &&
                    workInProgress.expirationTime === NoWork
                  ) {
                    updateQueue.baseState = memoizedState;
                  }
                }
                var classComponentUpdater = {
                  isMounted: isMounted,
                  enqueueSetState: function(inst, payload, callback) {
                    var fiber = get(inst);
                    var currentTime = requestCurrentTimeForUpdate();
                    var suspenseConfig = requestCurrentSuspenseConfig();
                    var expirationTime = computeExpirationForFiber(
                      currentTime,
                      fiber,
                      suspenseConfig
                    );
                    var update = createUpdate(expirationTime, suspenseConfig);
                    update.payload = payload;

                    if (callback !== undefined && callback !== null) {
                      {
                        warnOnInvalidCallback(callback, 'setState');
                      }

                      update.callback = callback;
                    }

                    enqueueUpdate(fiber, update);
                    scheduleWork(fiber, expirationTime);
                  },
                  enqueueReplaceState: function(inst, payload, callback) {
                    var fiber = get(inst);
                    var currentTime = requestCurrentTimeForUpdate();
                    var suspenseConfig = requestCurrentSuspenseConfig();
                    var expirationTime = computeExpirationForFiber(
                      currentTime,
                      fiber,
                      suspenseConfig
                    );
                    var update = createUpdate(expirationTime, suspenseConfig);
                    update.tag = ReplaceState;
                    update.payload = payload;

                    if (callback !== undefined && callback !== null) {
                      {
                        warnOnInvalidCallback(callback, 'replaceState');
                      }

                      update.callback = callback;
                    }

                    enqueueUpdate(fiber, update);
                    scheduleWork(fiber, expirationTime);
                  },
                  enqueueForceUpdate: function(inst, callback) {
                    var fiber = get(inst);
                    var currentTime = requestCurrentTimeForUpdate();
                    var suspenseConfig = requestCurrentSuspenseConfig();
                    var expirationTime = computeExpirationForFiber(
                      currentTime,
                      fiber,
                      suspenseConfig
                    );
                    var update = createUpdate(expirationTime, suspenseConfig);
                    update.tag = ForceUpdate;

                    if (callback !== undefined && callback !== null) {
                      {
                        warnOnInvalidCallback(callback, 'forceUpdate');
                      }

                      update.callback = callback;
                    }

                    enqueueUpdate(fiber, update);
                    scheduleWork(fiber, expirationTime);
                  },
                };

                function checkShouldComponentUpdate(
                  workInProgress,
                  ctor,
                  oldProps,
                  newProps,
                  oldState,
                  newState,
                  nextContext
                ) {
                  var instance = workInProgress.stateNode;

                  if (typeof instance.shouldComponentUpdate === 'function') {
                    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
                    var shouldUpdate = instance.shouldComponentUpdate(
                      newProps,
                      newState,
                      nextContext
                    );
                    stopPhaseTimer();

                    {
                      !(shouldUpdate !== undefined)
                        ? warningWithoutStack$1(
                            false,
                            '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
                              'boolean value. Make sure to return true or false.',
                            getComponentName(ctor) || 'Component'
                          )
                        : void 0;
                    }

                    return shouldUpdate;
                  }

                  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                    return (
                      !shallowEqual(oldProps, newProps) ||
                      !shallowEqual(oldState, newState)
                    );
                  }

                  return true;
                }

                function checkClassInstance(workInProgress, ctor, newProps) {
                  var instance = workInProgress.stateNode;

                  {
                    var name = getComponentName(ctor) || 'Component';
                    var renderPresent = instance.render;

                    if (!renderPresent) {
                      if (
                        ctor.prototype &&
                        typeof ctor.prototype.render === 'function'
                      ) {
                        warningWithoutStack$1(
                          false,
                          '%s(...): No `render` method found on the returned component ' +
                            'instance: did you accidentally return an object from the constructor?',
                          name
                        );
                      } else {
                        warningWithoutStack$1(
                          false,
                          '%s(...): No `render` method found on the returned component ' +
                            'instance: you may have forgotten to define `render`.',
                          name
                        );
                      }
                    }

                    var noGetInitialStateOnES6 =
                      !instance.getInitialState ||
                      instance.getInitialState.isReactClassApproved ||
                      instance.state;
                    !noGetInitialStateOnES6
                      ? warningWithoutStack$1(
                          false,
                          'getInitialState was defined on %s, a plain JavaScript class. ' +
                            'This is only supported for classes created using React.createClass. ' +
                            'Did you mean to define a state property instead?',
                          name
                        )
                      : void 0;
                    var noGetDefaultPropsOnES6 =
                      !instance.getDefaultProps ||
                      instance.getDefaultProps.isReactClassApproved;
                    !noGetDefaultPropsOnES6
                      ? warningWithoutStack$1(
                          false,
                          'getDefaultProps was defined on %s, a plain JavaScript class. ' +
                            'This is only supported for classes created using React.createClass. ' +
                            'Use a static property to define defaultProps instead.',
                          name
                        )
                      : void 0;
                    var noInstancePropTypes = !instance.propTypes;
                    !noInstancePropTypes
                      ? warningWithoutStack$1(
                          false,
                          'propTypes was defined as an instance property on %s. Use a static ' +
                            'property to define propTypes instead.',
                          name
                        )
                      : void 0;
                    var noInstanceContextType = !instance.contextType;
                    !noInstanceContextType
                      ? warningWithoutStack$1(
                          false,
                          'contextType was defined as an instance property on %s. Use a static ' +
                            'property to define contextType instead.',
                          name
                        )
                      : void 0;

                    if (disableLegacyContext) {
                      if (ctor.childContextTypes) {
                        warningWithoutStack$1(
                          false,
                          '%s uses the legacy childContextTypes API which is no longer supported. ' +
                            'Use React.createContext() instead.',
                          name
                        );
                      }

                      if (ctor.contextTypes) {
                        warningWithoutStack$1(
                          false,
                          '%s uses the legacy contextTypes API which is no longer supported. ' +
                            'Use React.createContext() with static contextType instead.',
                          name
                        );
                      }
                    } else {
                      var noInstanceContextTypes = !instance.contextTypes;
                      !noInstanceContextTypes
                        ? warningWithoutStack$1(
                            false,
                            'contextTypes was defined as an instance property on %s. Use a static ' +
                              'property to define contextTypes instead.',
                            name
                          )
                        : void 0;

                      if (
                        ctor.contextType &&
                        ctor.contextTypes &&
                        !didWarnAboutContextTypeAndContextTypes.has(ctor)
                      ) {
                        didWarnAboutContextTypeAndContextTypes.add(ctor);
                        warningWithoutStack$1(
                          false,
                          '%s declares both contextTypes and contextType static properties. ' +
                            'The legacy contextTypes property will be ignored.',
                          name
                        );
                      }
                    }

                    var noComponentShouldUpdate =
                      typeof instance.componentShouldUpdate !== 'function';
                    !noComponentShouldUpdate
                      ? warningWithoutStack$1(
                          false,
                          '%s has a method called ' +
                            'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
                            'The name is phrased as a question because the function is ' +
                            'expected to return a value.',
                          name
                        )
                      : void 0;

                    if (
                      ctor.prototype &&
                      ctor.prototype.isPureReactComponent &&
                      typeof instance.shouldComponentUpdate !== 'undefined'
                    ) {
                      warningWithoutStack$1(
                        false,
                        '%s has a method called shouldComponentUpdate(). ' +
                          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +
                          'Please extend React.Component if shouldComponentUpdate is used.',
                        getComponentName(ctor) || 'A pure component'
                      );
                    }

                    var noComponentDidUnmount =
                      typeof instance.componentDidUnmount !== 'function';
                    !noComponentDidUnmount
                      ? warningWithoutStack$1(
                          false,
                          '%s has a method called ' +
                            'componentDidUnmount(). But there is no such lifecycle method. ' +
                            'Did you mean componentWillUnmount()?',
                          name
                        )
                      : void 0;
                    var noComponentDidReceiveProps =
                      typeof instance.componentDidReceiveProps !== 'function';
                    !noComponentDidReceiveProps
                      ? warningWithoutStack$1(
                          false,
                          '%s has a method called ' +
                            'componentDidReceiveProps(). But there is no such lifecycle method. ' +
                            'If you meant to update the state in response to changing props, ' +
                            'use componentWillReceiveProps(). If you meant to fetch data or ' +
                            'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',
                          name
                        )
                      : void 0;
                    var noComponentWillRecieveProps =
                      typeof instance.componentWillRecieveProps !== 'function';
                    !noComponentWillRecieveProps
                      ? warningWithoutStack$1(
                          false,
                          '%s has a method called ' +
                            'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
                          name
                        )
                      : void 0;
                    var noUnsafeComponentWillRecieveProps =
                      typeof instance.UNSAFE_componentWillRecieveProps !==
                      'function';
                    !noUnsafeComponentWillRecieveProps
                      ? warningWithoutStack$1(
                          false,
                          '%s has a method called ' +
                            'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',
                          name
                        )
                      : void 0;
                    var hasMutatedProps = instance.props !== newProps;
                    !(instance.props === undefined || !hasMutatedProps)
                      ? warningWithoutStack$1(
                          false,
                          '%s(...): When calling super() in `%s`, make sure to pass ' +
                            "up the same props that your component's constructor was passed.",
                          name,
                          name
                        )
                      : void 0;
                    var noInstanceDefaultProps = !instance.defaultProps;
                    !noInstanceDefaultProps
                      ? warningWithoutStack$1(
                          false,
                          'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +
                            ' Instead, define defaultProps as a static property on %s.',
                          name,
                          name
                        )
                      : void 0;

                    if (
                      typeof instance.getSnapshotBeforeUpdate === 'function' &&
                      typeof instance.componentDidUpdate !== 'function' &&
                      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(
                        ctor
                      )
                    ) {
                      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(
                        ctor
                      );
                      warningWithoutStack$1(
                        false,
                        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +
                          'This component defines getSnapshotBeforeUpdate() only.',
                        getComponentName(ctor)
                      );
                    }

                    var noInstanceGetDerivedStateFromProps =
                      typeof instance.getDerivedStateFromProps !== 'function';
                    !noInstanceGetDerivedStateFromProps
                      ? warningWithoutStack$1(
                          false,
                          '%s: getDerivedStateFromProps() is defined as an instance method ' +
                            'and will be ignored. Instead, declare it as a static method.',
                          name
                        )
                      : void 0;
                    var noInstanceGetDerivedStateFromCatch =
                      typeof instance.getDerivedStateFromError !== 'function';
                    !noInstanceGetDerivedStateFromCatch
                      ? warningWithoutStack$1(
                          false,
                          '%s: getDerivedStateFromError() is defined as an instance method ' +
                            'and will be ignored. Instead, declare it as a static method.',
                          name
                        )
                      : void 0;
                    var noStaticGetSnapshotBeforeUpdate =
                      typeof ctor.getSnapshotBeforeUpdate !== 'function';
                    !noStaticGetSnapshotBeforeUpdate
                      ? warningWithoutStack$1(
                          false,
                          '%s: getSnapshotBeforeUpdate() is defined as a static method ' +
                            'and will be ignored. Instead, declare it as an instance method.',
                          name
                        )
                      : void 0;
                    var _state = instance.state;

                    if (
                      _state &&
                      (typeof _state !== 'object' || isArray$1(_state))
                    ) {
                      warningWithoutStack$1(
                        false,
                        '%s.state: must be set to an object or null',
                        name
                      );
                    }

                    if (typeof instance.getChildContext === 'function') {
                      !(typeof ctor.childContextTypes === 'object')
                        ? warningWithoutStack$1(
                            false,
                            '%s.getChildContext(): childContextTypes must be defined in order to ' +
                              'use getChildContext().',
                            name
                          )
                        : void 0;
                    }
                  }
                }

                function adoptClassInstance(workInProgress, instance) {
                  instance.updater = classComponentUpdater;
                  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

                  set(instance, workInProgress);

                  {
                    instance._reactInternalInstance = fakeInternalInstance;
                  }
                }

                function constructClassInstance(
                  workInProgress,
                  ctor,
                  props,
                  renderExpirationTime
                ) {
                  var isLegacyContextConsumer = false;
                  var unmaskedContext = emptyContextObject;
                  var context = emptyContextObject;
                  var contextType = ctor.contextType;

                  {
                    if ('contextType' in ctor) {
                      var isValid = // Allow null for conditional declaration
                        contextType === null ||
                        (contextType !== undefined &&
                          contextType.$$typeof === REACT_CONTEXT_TYPE &&
                          contextType._context === undefined); // Not a <Context.Consumer>

                      if (
                        !isValid &&
                        !didWarnAboutInvalidateContextType.has(ctor)
                      ) {
                        didWarnAboutInvalidateContextType.add(ctor);
                        var addendum = '';

                        if (contextType === undefined) {
                          addendum =
                            ' However, it is set to undefined. ' +
                            'This can be caused by a typo or by mixing up named and default imports. ' +
                            'This can also happen due to a circular dependency, so ' +
                            'try moving the createContext() call to a separate file.';
                        } else if (typeof contextType !== 'object') {
                          addendum =
                            ' However, it is set to a ' +
                            typeof contextType +
                            '.';
                        } else if (
                          contextType.$$typeof === REACT_PROVIDER_TYPE
                        ) {
                          addendum =
                            ' Did you accidentally pass the Context.Provider instead?';
                        } else if (contextType._context !== undefined) {
                          // <Context.Consumer>
                          addendum =
                            ' Did you accidentally pass the Context.Consumer instead?';
                        } else {
                          addendum =
                            ' However, it is set to an object with keys {' +
                            Object.keys(contextType).join(', ') +
                            '}.';
                        }

                        warningWithoutStack$1(
                          false,
                          '%s defines an invalid contextType. ' +
                            'contextType should point to the Context object returned by React.createContext().%s',
                          getComponentName(ctor) || 'Component',
                          addendum
                        );
                      }
                    }
                  }

                  if (typeof contextType === 'object' && contextType !== null) {
                    context = readContext(contextType);
                  } else if (!disableLegacyContext) {
                    unmaskedContext = getUnmaskedContext(
                      workInProgress,
                      ctor,
                      true
                    );
                    var contextTypes = ctor.contextTypes;
                    isLegacyContextConsumer =
                      contextTypes !== null && contextTypes !== undefined;
                    context = isLegacyContextConsumer
                      ? getMaskedContext(workInProgress, unmaskedContext)
                      : emptyContextObject;
                  } // Instantiate twice to help detect side-effects.

                  {
                    if (
                      debugRenderPhaseSideEffectsForStrictMode &&
                      workInProgress.mode & StrictMode
                    ) {
                      new ctor(props, context); // eslint-disable-line no-new
                    }
                  }

                  var instance = new ctor(props, context);
                  var state = (workInProgress.memoizedState =
                    instance.state !== null && instance.state !== undefined
                      ? instance.state
                      : null);
                  adoptClassInstance(workInProgress, instance);

                  {
                    if (
                      typeof ctor.getDerivedStateFromProps === 'function' &&
                      state === null
                    ) {
                      var componentName = getComponentName(ctor) || 'Component';

                      if (!didWarnAboutUninitializedState.has(componentName)) {
                        didWarnAboutUninitializedState.add(componentName);
                        warningWithoutStack$1(
                          false,
                          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +
                            '%s. This is not recommended. Instead, define the initial state by ' +
                            'assigning an object to `this.state` in the constructor of `%s`. ' +
                            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',
                          componentName,
                          instance.state === null ? 'null' : 'undefined',
                          componentName
                        );
                      }
                    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
                    // Warn about these lifecycles if they are present.
                    // Don't warn about react-lifecycles-compat polyfilled methods though.

                    if (
                      typeof ctor.getDerivedStateFromProps === 'function' ||
                      typeof instance.getSnapshotBeforeUpdate === 'function'
                    ) {
                      var foundWillMountName = null;
                      var foundWillReceivePropsName = null;
                      var foundWillUpdateName = null;

                      if (
                        typeof instance.componentWillMount === 'function' &&
                        instance.componentWillMount
                          .__suppressDeprecationWarning !== true
                      ) {
                        foundWillMountName = 'componentWillMount';
                      } else if (
                        typeof instance.UNSAFE_componentWillMount === 'function'
                      ) {
                        foundWillMountName = 'UNSAFE_componentWillMount';
                      }

                      if (
                        typeof instance.componentWillReceiveProps ===
                          'function' &&
                        instance.componentWillReceiveProps
                          .__suppressDeprecationWarning !== true
                      ) {
                        foundWillReceivePropsName = 'componentWillReceiveProps';
                      } else if (
                        typeof instance.UNSAFE_componentWillReceiveProps ===
                        'function'
                      ) {
                        foundWillReceivePropsName =
                          'UNSAFE_componentWillReceiveProps';
                      }

                      if (
                        typeof instance.componentWillUpdate === 'function' &&
                        instance.componentWillUpdate
                          .__suppressDeprecationWarning !== true
                      ) {
                        foundWillUpdateName = 'componentWillUpdate';
                      } else if (
                        typeof instance.UNSAFE_componentWillUpdate ===
                        'function'
                      ) {
                        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
                      }

                      if (
                        foundWillMountName !== null ||
                        foundWillReceivePropsName !== null ||
                        foundWillUpdateName !== null
                      ) {
                        var _componentName =
                          getComponentName(ctor) || 'Component';

                        var newApiName =
                          typeof ctor.getDerivedStateFromProps === 'function'
                            ? 'getDerivedStateFromProps()'
                            : 'getSnapshotBeforeUpdate()';

                        if (
                          !didWarnAboutLegacyLifecyclesAndDerivedState.has(
                            _componentName
                          )
                        ) {
                          didWarnAboutLegacyLifecyclesAndDerivedState.add(
                            _componentName
                          );
                          warningWithoutStack$1(
                            false,
                            'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
                              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' +
                              'The above lifecycles should be removed. Learn more about this warning here:\n' +
                              'https://fb.me/react-unsafe-component-lifecycles',
                            _componentName,
                            newApiName,
                            foundWillMountName !== null
                              ? '\n  ' + foundWillMountName
                              : '',
                            foundWillReceivePropsName !== null
                              ? '\n  ' + foundWillReceivePropsName
                              : '',
                            foundWillUpdateName !== null
                              ? '\n  ' + foundWillUpdateName
                              : ''
                          );
                        }
                      }
                    }
                  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
                  // ReactFiberContext usually updates this cache but can't for newly-created instances.

                  if (isLegacyContextConsumer) {
                    cacheContext(workInProgress, unmaskedContext, context);
                  }

                  return instance;
                }

                function callComponentWillMount(workInProgress, instance) {
                  startPhaseTimer(workInProgress, 'componentWillMount');
                  var oldState = instance.state;

                  if (typeof instance.componentWillMount === 'function') {
                    instance.componentWillMount();
                  }

                  if (
                    typeof instance.UNSAFE_componentWillMount === 'function'
                  ) {
                    instance.UNSAFE_componentWillMount();
                  }

                  stopPhaseTimer();

                  if (oldState !== instance.state) {
                    {
                      warningWithoutStack$1(
                        false,
                        '%s.componentWillMount(): Assigning directly to this.state is ' +
                          "deprecated (except inside a component's " +
                          'constructor). Use setState instead.',
                        getComponentName(workInProgress.type) || 'Component'
                      );
                    }

                    classComponentUpdater.enqueueReplaceState(
                      instance,
                      instance.state,
                      null
                    );
                  }
                }

                function callComponentWillReceiveProps(
                  workInProgress,
                  instance,
                  newProps,
                  nextContext
                ) {
                  var oldState = instance.state;
                  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

                  if (
                    typeof instance.componentWillReceiveProps === 'function'
                  ) {
                    instance.componentWillReceiveProps(newProps, nextContext);
                  }

                  if (
                    typeof instance.UNSAFE_componentWillReceiveProps ===
                    'function'
                  ) {
                    instance.UNSAFE_componentWillReceiveProps(
                      newProps,
                      nextContext
                    );
                  }

                  stopPhaseTimer();

                  if (instance.state !== oldState) {
                    {
                      var componentName =
                        getComponentName(workInProgress.type) || 'Component';

                      if (
                        !didWarnAboutStateAssignmentForComponent.has(
                          componentName
                        )
                      ) {
                        didWarnAboutStateAssignmentForComponent.add(
                          componentName
                        );
                        warningWithoutStack$1(
                          false,
                          '%s.componentWillReceiveProps(): Assigning directly to ' +
                            "this.state is deprecated (except inside a component's " +
                            'constructor). Use setState instead.',
                          componentName
                        );
                      }
                    }

                    classComponentUpdater.enqueueReplaceState(
                      instance,
                      instance.state,
                      null
                    );
                  }
                } // Invokes the mount life-cycles on a previously never rendered instance.

                function mountClassInstance(
                  workInProgress,
                  ctor,
                  newProps,
                  renderExpirationTime
                ) {
                  {
                    checkClassInstance(workInProgress, ctor, newProps);
                  }

                  var instance = workInProgress.stateNode;
                  instance.props = newProps;
                  instance.state = workInProgress.memoizedState;
                  instance.refs = emptyRefsObject;
                  var contextType = ctor.contextType;

                  if (typeof contextType === 'object' && contextType !== null) {
                    instance.context = readContext(contextType);
                  } else if (disableLegacyContext) {
                    instance.context = emptyContextObject;
                  } else {
                    var unmaskedContext = getUnmaskedContext(
                      workInProgress,
                      ctor,
                      true
                    );
                    instance.context = getMaskedContext(
                      workInProgress,
                      unmaskedContext
                    );
                  }

                  {
                    if (instance.state === newProps) {
                      var componentName = getComponentName(ctor) || 'Component';

                      if (
                        !didWarnAboutDirectlyAssigningPropsToState.has(
                          componentName
                        )
                      ) {
                        didWarnAboutDirectlyAssigningPropsToState.add(
                          componentName
                        );
                        warningWithoutStack$1(
                          false,
                          '%s: It is not recommended to assign props directly to state ' +
                            "because updates to props won't be reflected in state. " +
                            'In most cases, it is better to use props directly.',
                          componentName
                        );
                      }
                    }

                    if (workInProgress.mode & StrictMode) {
                      ReactStrictModeWarnings.recordLegacyContextWarning(
                        workInProgress,
                        instance
                      );
                    }

                    if (warnAboutDeprecatedLifecycles) {
                      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
                        workInProgress,
                        instance
                      );
                    }
                  }

                  var updateQueue = workInProgress.updateQueue;

                  if (updateQueue !== null) {
                    processUpdateQueue(
                      workInProgress,
                      updateQueue,
                      newProps,
                      instance,
                      renderExpirationTime
                    );
                    instance.state = workInProgress.memoizedState;
                  }

                  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

                  if (typeof getDerivedStateFromProps === 'function') {
                    applyDerivedStateFromProps(
                      workInProgress,
                      ctor,
                      getDerivedStateFromProps,
                      newProps
                    );
                    instance.state = workInProgress.memoizedState;
                  } // In order to support react-lifecycles-compat polyfilled components,
                  // Unsafe lifecycles should not be invoked for components using the new APIs.

                  if (
                    typeof ctor.getDerivedStateFromProps !== 'function' &&
                    typeof instance.getSnapshotBeforeUpdate !== 'function' &&
                    (typeof instance.UNSAFE_componentWillMount === 'function' ||
                      typeof instance.componentWillMount === 'function')
                  ) {
                    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
                    // process them now.

                    updateQueue = workInProgress.updateQueue;

                    if (updateQueue !== null) {
                      processUpdateQueue(
                        workInProgress,
                        updateQueue,
                        newProps,
                        instance,
                        renderExpirationTime
                      );
                      instance.state = workInProgress.memoizedState;
                    }
                  }

                  if (typeof instance.componentDidMount === 'function') {
                    workInProgress.effectTag |= Update;
                  }
                }

                function resumeMountClassInstance(
                  workInProgress,
                  ctor,
                  newProps,
                  renderExpirationTime
                ) {
                  var instance = workInProgress.stateNode;
                  var oldProps = workInProgress.memoizedProps;
                  instance.props = oldProps;
                  var oldContext = instance.context;
                  var contextType = ctor.contextType;
                  var nextContext = emptyContextObject;

                  if (typeof contextType === 'object' && contextType !== null) {
                    nextContext = readContext(contextType);
                  } else if (!disableLegacyContext) {
                    var nextLegacyUnmaskedContext = getUnmaskedContext(
                      workInProgress,
                      ctor,
                      true
                    );
                    nextContext = getMaskedContext(
                      workInProgress,
                      nextLegacyUnmaskedContext
                    );
                  }

                  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                  var hasNewLifecycles =
                    typeof getDerivedStateFromProps === 'function' ||
                    typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
                  // ever the previously attempted to render - not the "current". However,
                  // during componentDidUpdate we pass the "current" props.
                  // In order to support react-lifecycles-compat polyfilled components,
                  // Unsafe lifecycles should not be invoked for components using the new APIs.

                  if (
                    !hasNewLifecycles &&
                    (typeof instance.UNSAFE_componentWillReceiveProps ===
                      'function' ||
                      typeof instance.componentWillReceiveProps === 'function')
                  ) {
                    if (oldProps !== newProps || oldContext !== nextContext) {
                      callComponentWillReceiveProps(
                        workInProgress,
                        instance,
                        newProps,
                        nextContext
                      );
                    }
                  }

                  resetHasForceUpdateBeforeProcessing();
                  var oldState = workInProgress.memoizedState;
                  var newState = (instance.state = oldState);
                  var updateQueue = workInProgress.updateQueue;

                  if (updateQueue !== null) {
                    processUpdateQueue(
                      workInProgress,
                      updateQueue,
                      newProps,
                      instance,
                      renderExpirationTime
                    );
                    newState = workInProgress.memoizedState;
                  }

                  if (
                    oldProps === newProps &&
                    oldState === newState &&
                    !hasContextChanged() &&
                    !checkHasForceUpdateAfterProcessing()
                  ) {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidMount === 'function') {
                      workInProgress.effectTag |= Update;
                    }

                    return false;
                  }

                  if (typeof getDerivedStateFromProps === 'function') {
                    applyDerivedStateFromProps(
                      workInProgress,
                      ctor,
                      getDerivedStateFromProps,
                      newProps
                    );
                    newState = workInProgress.memoizedState;
                  }

                  var shouldUpdate =
                    checkHasForceUpdateAfterProcessing() ||
                    checkShouldComponentUpdate(
                      workInProgress,
                      ctor,
                      oldProps,
                      newProps,
                      oldState,
                      newState,
                      nextContext
                    );

                  if (shouldUpdate) {
                    // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for components using the new APIs.
                    if (
                      !hasNewLifecycles &&
                      (typeof instance.UNSAFE_componentWillMount ===
                        'function' ||
                        typeof instance.componentWillMount === 'function')
                    ) {
                      startPhaseTimer(workInProgress, 'componentWillMount');

                      if (typeof instance.componentWillMount === 'function') {
                        instance.componentWillMount();
                      }

                      if (
                        typeof instance.UNSAFE_componentWillMount === 'function'
                      ) {
                        instance.UNSAFE_componentWillMount();
                      }

                      stopPhaseTimer();
                    }

                    if (typeof instance.componentDidMount === 'function') {
                      workInProgress.effectTag |= Update;
                    }
                  } else {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidMount === 'function') {
                      workInProgress.effectTag |= Update;
                    } // If shouldComponentUpdate returned false, we should still update the
                    // memoized state to indicate that this work can be reused.

                    workInProgress.memoizedProps = newProps;
                    workInProgress.memoizedState = newState;
                  } // Update the existing instance's state, props, and context pointers even
                  // if shouldComponentUpdate returns false.

                  instance.props = newProps;
                  instance.state = newState;
                  instance.context = nextContext;
                  return shouldUpdate;
                } // Invokes the update life-cycles and returns false if it shouldn't rerender.

                function updateClassInstance(
                  current,
                  workInProgress,
                  ctor,
                  newProps,
                  renderExpirationTime
                ) {
                  var instance = workInProgress.stateNode;
                  var oldProps = workInProgress.memoizedProps;
                  instance.props =
                    workInProgress.type === workInProgress.elementType
                      ? oldProps
                      : resolveDefaultProps(workInProgress.type, oldProps);
                  var oldContext = instance.context;
                  var contextType = ctor.contextType;
                  var nextContext = emptyContextObject;

                  if (typeof contextType === 'object' && contextType !== null) {
                    nextContext = readContext(contextType);
                  } else if (!disableLegacyContext) {
                    var nextUnmaskedContext = getUnmaskedContext(
                      workInProgress,
                      ctor,
                      true
                    );
                    nextContext = getMaskedContext(
                      workInProgress,
                      nextUnmaskedContext
                    );
                  }

                  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                  var hasNewLifecycles =
                    typeof getDerivedStateFromProps === 'function' ||
                    typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
                  // ever the previously attempted to render - not the "current". However,
                  // during componentDidUpdate we pass the "current" props.
                  // In order to support react-lifecycles-compat polyfilled components,
                  // Unsafe lifecycles should not be invoked for components using the new APIs.

                  if (
                    !hasNewLifecycles &&
                    (typeof instance.UNSAFE_componentWillReceiveProps ===
                      'function' ||
                      typeof instance.componentWillReceiveProps === 'function')
                  ) {
                    if (oldProps !== newProps || oldContext !== nextContext) {
                      callComponentWillReceiveProps(
                        workInProgress,
                        instance,
                        newProps,
                        nextContext
                      );
                    }
                  }

                  resetHasForceUpdateBeforeProcessing();
                  var oldState = workInProgress.memoizedState;
                  var newState = (instance.state = oldState);
                  var updateQueue = workInProgress.updateQueue;

                  if (updateQueue !== null) {
                    processUpdateQueue(
                      workInProgress,
                      updateQueue,
                      newProps,
                      instance,
                      renderExpirationTime
                    );
                    newState = workInProgress.memoizedState;
                  }

                  if (
                    oldProps === newProps &&
                    oldState === newState &&
                    !hasContextChanged() &&
                    !checkHasForceUpdateAfterProcessing()
                  ) {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidUpdate === 'function') {
                      if (
                        oldProps !== current.memoizedProps ||
                        oldState !== current.memoizedState
                      ) {
                        workInProgress.effectTag |= Update;
                      }
                    }

                    if (
                      typeof instance.getSnapshotBeforeUpdate === 'function'
                    ) {
                      if (
                        oldProps !== current.memoizedProps ||
                        oldState !== current.memoizedState
                      ) {
                        workInProgress.effectTag |= Snapshot;
                      }
                    }

                    return false;
                  }

                  if (typeof getDerivedStateFromProps === 'function') {
                    applyDerivedStateFromProps(
                      workInProgress,
                      ctor,
                      getDerivedStateFromProps,
                      newProps
                    );
                    newState = workInProgress.memoizedState;
                  }

                  var shouldUpdate =
                    checkHasForceUpdateAfterProcessing() ||
                    checkShouldComponentUpdate(
                      workInProgress,
                      ctor,
                      oldProps,
                      newProps,
                      oldState,
                      newState,
                      nextContext
                    );

                  if (shouldUpdate) {
                    // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for components using the new APIs.
                    if (
                      !hasNewLifecycles &&
                      (typeof instance.UNSAFE_componentWillUpdate ===
                        'function' ||
                        typeof instance.componentWillUpdate === 'function')
                    ) {
                      startPhaseTimer(workInProgress, 'componentWillUpdate');

                      if (typeof instance.componentWillUpdate === 'function') {
                        instance.componentWillUpdate(
                          newProps,
                          newState,
                          nextContext
                        );
                      }

                      if (
                        typeof instance.UNSAFE_componentWillUpdate ===
                        'function'
                      ) {
                        instance.UNSAFE_componentWillUpdate(
                          newProps,
                          newState,
                          nextContext
                        );
                      }

                      stopPhaseTimer();
                    }

                    if (typeof instance.componentDidUpdate === 'function') {
                      workInProgress.effectTag |= Update;
                    }

                    if (
                      typeof instance.getSnapshotBeforeUpdate === 'function'
                    ) {
                      workInProgress.effectTag |= Snapshot;
                    }
                  } else {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidUpdate === 'function') {
                      if (
                        oldProps !== current.memoizedProps ||
                        oldState !== current.memoizedState
                      ) {
                        workInProgress.effectTag |= Update;
                      }
                    }

                    if (
                      typeof instance.getSnapshotBeforeUpdate === 'function'
                    ) {
                      if (
                        oldProps !== current.memoizedProps ||
                        oldState !== current.memoizedState
                      ) {
                        workInProgress.effectTag |= Snapshot;
                      }
                    } // If shouldComponentUpdate returned false, we should still update the
                    // memoized props/state to indicate that this work can be reused.

                    workInProgress.memoizedProps = newProps;
                    workInProgress.memoizedState = newState;
                  } // Update the existing instance's state, props, and context pointers even
                  // if shouldComponentUpdate returns false.

                  instance.props = newProps;
                  instance.state = newState;
                  instance.context = nextContext;
                  return shouldUpdate;
                }

                var didWarnAboutMaps;
                var didWarnAboutGenerators;
                var didWarnAboutStringRefs;
                var ownerHasKeyUseWarning;
                var ownerHasFunctionTypeWarning;

                var warnForMissingKey = function(child) {};

                {
                  didWarnAboutMaps = false;
                  didWarnAboutGenerators = false;
                  didWarnAboutStringRefs = {};
                  /**
                   * Warn if there's no key explicitly set on dynamic arrays of children or
                   * object keys are not valid. This allows us to keep track of children between
                   * updates.
                   */

                  ownerHasKeyUseWarning = {};
                  ownerHasFunctionTypeWarning = {};

                  warnForMissingKey = function(child) {
                    if (child === null || typeof child !== 'object') {
                      return;
                    }

                    if (
                      !child._store ||
                      child._store.validated ||
                      child.key != null
                    ) {
                      return;
                    }

                    if (!(typeof child._store === 'object')) {
                      {
                        throw Error(
                          'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }

                    child._store.validated = true;
                    var currentComponentErrorInfo =
                      'Each child in a list should have a unique ' +
                      '"key" prop. See https://fb.me/react-warning-keys for ' +
                      'more information.' +
                      getCurrentFiberStackInDev();

                    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                      return;
                    }

                    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                    warning$1(
                      false,
                      'Each child in a list should have a unique ' +
                        '"key" prop. See https://fb.me/react-warning-keys for ' +
                        'more information.'
                    );
                  };
                }

                var isArray = Array.isArray;

                function coerceRef(returnFiber, current$$1, element) {
                  var mixedRef = element.ref;

                  if (
                    mixedRef !== null &&
                    typeof mixedRef !== 'function' &&
                    typeof mixedRef !== 'object'
                  ) {
                    {
                      // TODO: Clean this up once we turn on the string ref warning for
                      // everyone, because the strict mode case will no longer be relevant
                      if (
                        returnFiber.mode & StrictMode ||
                        warnAboutStringRefs
                      ) {
                        var componentName =
                          getComponentName(returnFiber.type) || 'Component';

                        if (!didWarnAboutStringRefs[componentName]) {
                          if (warnAboutStringRefs) {
                            warningWithoutStack$1(
                              false,
                              'Component "%s" contains the string ref "%s". Support for string refs ' +
                                'will be removed in a future major release. We recommend using ' +
                                'useRef() or createRef() instead. ' +
                                'Learn more about using refs safely here: ' +
                                'https://fb.me/react-strict-mode-string-ref%s',
                              componentName,
                              mixedRef,
                              getStackByFiberInDevAndProd(returnFiber)
                            );
                          } else {
                            warningWithoutStack$1(
                              false,
                              'A string ref, "%s", has been found within a strict mode tree. ' +
                                'String refs are a source of potential bugs and should be avoided. ' +
                                'We recommend using useRef() or createRef() instead. ' +
                                'Learn more about using refs safely here: ' +
                                'https://fb.me/react-strict-mode-string-ref%s',
                              mixedRef,
                              getStackByFiberInDevAndProd(returnFiber)
                            );
                          }

                          didWarnAboutStringRefs[componentName] = true;
                        }
                      }
                    }

                    if (element._owner) {
                      var owner = element._owner;
                      var inst;

                      if (owner) {
                        var ownerFiber = owner;

                        if (!(ownerFiber.tag === ClassComponent)) {
                          {
                            throw Error(
                              'Function components cannot have refs. Did you mean to use React.forwardRef()?'
                            );
                          }
                        }

                        inst = ownerFiber.stateNode;
                      }

                      if (!inst) {
                        {
                          throw Error(
                            'Missing owner for string ref ' +
                              mixedRef +
                              '. This error is likely caused by a bug in React. Please file an issue.'
                          );
                        }
                      }

                      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

                      if (
                        current$$1 !== null &&
                        current$$1.ref !== null &&
                        typeof current$$1.ref === 'function' &&
                        current$$1.ref._stringRef === stringRef
                      ) {
                        return current$$1.ref;
                      }

                      var ref = function(value) {
                        var refs = inst.refs;

                        if (refs === emptyRefsObject) {
                          // This is a lazy pooled frozen object, so we need to initialize.
                          refs = inst.refs = {};
                        }

                        if (value === null) {
                          delete refs[stringRef];
                        } else {
                          refs[stringRef] = value;
                        }
                      };

                      ref._stringRef = stringRef;
                      return ref;
                    } else {
                      if (!(typeof mixedRef === 'string')) {
                        {
                          throw Error(
                            'Expected ref to be a function, a string, an object returned by React.createRef(), or null.'
                          );
                        }
                      }

                      if (!element._owner) {
                        {
                          throw Error(
                            'Element ref was specified as a string (' +
                              mixedRef +
                              ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information."
                          );
                        }
                      }
                    }
                  }

                  return mixedRef;
                }

                function throwOnInvalidObjectType(returnFiber, newChild) {
                  if (returnFiber.type !== 'textarea') {
                    var addendum = '';

                    {
                      addendum =
                        ' If you meant to render a collection of children, use an array ' +
                        'instead.' +
                        getCurrentFiberStackInDev();
                    }

                    {
                      {
                        throw Error(
                          'Objects are not valid as a React child (found: ' +
                            (Object.prototype.toString.call(newChild) ===
                            '[object Object]'
                              ? 'object with keys {' +
                                Object.keys(newChild).join(', ') +
                                '}'
                              : newChild) +
                            ').' +
                            addendum
                        );
                      }
                    }
                  }
                }

                function warnOnFunctionType() {
                  var currentComponentErrorInfo =
                    'Functions are not valid as a React child. This may happen if ' +
                    'you return a Component instead of <Component /> from render. ' +
                    'Or maybe you meant to call this function rather than return it.' +
                    getCurrentFiberStackInDev();

                  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
                    return;
                  }

                  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
                  warning$1(
                    false,
                    'Functions are not valid as a React child. This may happen if ' +
                      'you return a Component instead of <Component /> from render. ' +
                      'Or maybe you meant to call this function rather than return it.'
                  );
                } // This wrapper function exists because I expect to clone the code in each path
                // to be able to optimize each path individually by branching early. This needs
                // a compiler or we can do it manually. Helpers that don't need this branching
                // live outside of this function.

                function ChildReconciler(shouldTrackSideEffects) {
                  function deleteChild(returnFiber, childToDelete) {
                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return;
                    } // Deletions are added in reversed order so we add it to the front.
                    // At this point, the return fiber's effect list is empty except for
                    // deletions, so we can just append the deletion to the list. The remaining
                    // effects aren't added until the complete phase. Once we implement
                    // resuming, this may not be true.

                    var last = returnFiber.lastEffect;

                    if (last !== null) {
                      last.nextEffect = childToDelete;
                      returnFiber.lastEffect = childToDelete;
                    } else {
                      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                    }

                    childToDelete.nextEffect = null;
                    childToDelete.effectTag = Deletion;
                  }

                  function deleteRemainingChildren(
                    returnFiber,
                    currentFirstChild
                  ) {
                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return null;
                    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
                    // assuming that after the first child we've already added everything.

                    var childToDelete = currentFirstChild;

                    while (childToDelete !== null) {
                      deleteChild(returnFiber, childToDelete);
                      childToDelete = childToDelete.sibling;
                    }

                    return null;
                  }

                  function mapRemainingChildren(
                    returnFiber,
                    currentFirstChild
                  ) {
                    // Add the remaining children to a temporary map so that we can find them by
                    // keys quickly. Implicit (null) keys get added to this set with their index
                    // instead.
                    var existingChildren = new Map();
                    var existingChild = currentFirstChild;

                    while (existingChild !== null) {
                      if (existingChild.key !== null) {
                        existingChildren.set(existingChild.key, existingChild);
                      } else {
                        existingChildren.set(
                          existingChild.index,
                          existingChild
                        );
                      }

                      existingChild = existingChild.sibling;
                    }

                    return existingChildren;
                  }

                  function useFiber(fiber, pendingProps, expirationTime) {
                    // We currently set sibling to null and index to 0 here because it is easy
                    // to forget to do before returning it. E.g. for the single child case.
                    var clone = createWorkInProgress(
                      fiber,
                      pendingProps,
                      expirationTime
                    );
                    clone.index = 0;
                    clone.sibling = null;
                    return clone;
                  }

                  function placeChild(newFiber, lastPlacedIndex, newIndex) {
                    newFiber.index = newIndex;

                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return lastPlacedIndex;
                    }

                    var current$$1 = newFiber.alternate;

                    if (current$$1 !== null) {
                      var oldIndex = current$$1.index;

                      if (oldIndex < lastPlacedIndex) {
                        // This is a move.
                        newFiber.effectTag = Placement;
                        return lastPlacedIndex;
                      } else {
                        // This item can stay in place.
                        return oldIndex;
                      }
                    } else {
                      // This is an insertion.
                      newFiber.effectTag = Placement;
                      return lastPlacedIndex;
                    }
                  }

                  function placeSingleChild(newFiber) {
                    // This is simpler for the single child case. We only need to do a
                    // placement for inserting new children.
                    if (shouldTrackSideEffects && newFiber.alternate === null) {
                      newFiber.effectTag = Placement;
                    }

                    return newFiber;
                  }

                  function updateTextNode(
                    returnFiber,
                    current$$1,
                    textContent,
                    expirationTime
                  ) {
                    if (current$$1 === null || current$$1.tag !== HostText) {
                      // Insert
                      var created = createFiberFromText(
                        textContent,
                        returnFiber.mode,
                        expirationTime
                      );
                      created.return = returnFiber;
                      return created;
                    } else {
                      // Update
                      var existing = useFiber(
                        current$$1,
                        textContent,
                        expirationTime
                      );
                      existing.return = returnFiber;
                      return existing;
                    }
                  }

                  function updateElement(
                    returnFiber,
                    current$$1,
                    element,
                    expirationTime
                  ) {
                    if (
                      current$$1 !== null &&
                      (current$$1.elementType === element.type || // Keep this check inline so it only runs on the false path:
                        isCompatibleFamilyForHotReloading(current$$1, element))
                    ) {
                      // Move based on index
                      var existing = useFiber(
                        current$$1,
                        element.props,
                        expirationTime
                      );
                      existing.ref = coerceRef(
                        returnFiber,
                        current$$1,
                        element
                      );
                      existing.return = returnFiber;

                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }

                      return existing;
                    } else {
                      // Insert
                      var created = createFiberFromElement(
                        element,
                        returnFiber.mode,
                        expirationTime
                      );
                      created.ref = coerceRef(returnFiber, current$$1, element);
                      created.return = returnFiber;
                      return created;
                    }
                  }

                  function updatePortal(
                    returnFiber,
                    current$$1,
                    portal,
                    expirationTime
                  ) {
                    if (
                      current$$1 === null ||
                      current$$1.tag !== HostPortal ||
                      current$$1.stateNode.containerInfo !==
                        portal.containerInfo ||
                      current$$1.stateNode.implementation !==
                        portal.implementation
                    ) {
                      // Insert
                      var created = createFiberFromPortal(
                        portal,
                        returnFiber.mode,
                        expirationTime
                      );
                      created.return = returnFiber;
                      return created;
                    } else {
                      // Update
                      var existing = useFiber(
                        current$$1,
                        portal.children || [],
                        expirationTime
                      );
                      existing.return = returnFiber;
                      return existing;
                    }
                  }

                  function updateFragment(
                    returnFiber,
                    current$$1,
                    fragment,
                    expirationTime,
                    key
                  ) {
                    if (current$$1 === null || current$$1.tag !== Fragment) {
                      // Insert
                      var created = createFiberFromFragment(
                        fragment,
                        returnFiber.mode,
                        expirationTime,
                        key
                      );
                      created.return = returnFiber;
                      return created;
                    } else {
                      // Update
                      var existing = useFiber(
                        current$$1,
                        fragment,
                        expirationTime
                      );
                      existing.return = returnFiber;
                      return existing;
                    }
                  }

                  function createChild(returnFiber, newChild, expirationTime) {
                    if (
                      typeof newChild === 'string' ||
                      typeof newChild === 'number'
                    ) {
                      // Text nodes don't have keys. If the previous node is implicitly keyed
                      // we can continue to replace it without aborting even if it is not a text
                      // node.
                      var created = createFiberFromText(
                        '' + newChild,
                        returnFiber.mode,
                        expirationTime
                      );
                      created.return = returnFiber;
                      return created;
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE: {
                          var _created = createFiberFromElement(
                            newChild,
                            returnFiber.mode,
                            expirationTime
                          );

                          _created.ref = coerceRef(returnFiber, null, newChild);
                          _created.return = returnFiber;
                          return _created;
                        }

                        case REACT_PORTAL_TYPE: {
                          var _created2 = createFiberFromPortal(
                            newChild,
                            returnFiber.mode,
                            expirationTime
                          );

                          _created2.return = returnFiber;
                          return _created2;
                        }
                      }

                      if (isArray(newChild) || getIteratorFn(newChild)) {
                        var _created3 = createFiberFromFragment(
                          newChild,
                          returnFiber.mode,
                          expirationTime,
                          null
                        );

                        _created3.return = returnFiber;
                        return _created3;
                      }

                      throwOnInvalidObjectType(returnFiber, newChild);
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType();
                      }
                    }

                    return null;
                  }

                  function updateSlot(
                    returnFiber,
                    oldFiber,
                    newChild,
                    expirationTime
                  ) {
                    // Update the fiber if the keys match, otherwise return null.
                    var key = oldFiber !== null ? oldFiber.key : null;

                    if (
                      typeof newChild === 'string' ||
                      typeof newChild === 'number'
                    ) {
                      // Text nodes don't have keys. If the previous node is implicitly keyed
                      // we can continue to replace it without aborting even if it is not a text
                      // node.
                      if (key !== null) {
                        return null;
                      }

                      return updateTextNode(
                        returnFiber,
                        oldFiber,
                        '' + newChild,
                        expirationTime
                      );
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE: {
                          if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) {
                              return updateFragment(
                                returnFiber,
                                oldFiber,
                                newChild.props.children,
                                expirationTime,
                                key
                              );
                            }

                            return updateElement(
                              returnFiber,
                              oldFiber,
                              newChild,
                              expirationTime
                            );
                          } else {
                            return null;
                          }
                        }

                        case REACT_PORTAL_TYPE: {
                          if (newChild.key === key) {
                            return updatePortal(
                              returnFiber,
                              oldFiber,
                              newChild,
                              expirationTime
                            );
                          } else {
                            return null;
                          }
                        }
                      }

                      if (isArray(newChild) || getIteratorFn(newChild)) {
                        if (key !== null) {
                          return null;
                        }

                        return updateFragment(
                          returnFiber,
                          oldFiber,
                          newChild,
                          expirationTime,
                          null
                        );
                      }

                      throwOnInvalidObjectType(returnFiber, newChild);
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType();
                      }
                    }

                    return null;
                  }

                  function updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    newChild,
                    expirationTime
                  ) {
                    if (
                      typeof newChild === 'string' ||
                      typeof newChild === 'number'
                    ) {
                      // Text nodes don't have keys, so we neither have to check the old nor
                      // new node for the key. If both are text nodes, they match.
                      var matchedFiber = existingChildren.get(newIdx) || null;
                      return updateTextNode(
                        returnFiber,
                        matchedFiber,
                        '' + newChild,
                        expirationTime
                      );
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE: {
                          var _matchedFiber =
                            existingChildren.get(
                              newChild.key === null ? newIdx : newChild.key
                            ) || null;

                          if (newChild.type === REACT_FRAGMENT_TYPE) {
                            return updateFragment(
                              returnFiber,
                              _matchedFiber,
                              newChild.props.children,
                              expirationTime,
                              newChild.key
                            );
                          }

                          return updateElement(
                            returnFiber,
                            _matchedFiber,
                            newChild,
                            expirationTime
                          );
                        }

                        case REACT_PORTAL_TYPE: {
                          var _matchedFiber2 =
                            existingChildren.get(
                              newChild.key === null ? newIdx : newChild.key
                            ) || null;

                          return updatePortal(
                            returnFiber,
                            _matchedFiber2,
                            newChild,
                            expirationTime
                          );
                        }
                      }

                      if (isArray(newChild) || getIteratorFn(newChild)) {
                        var _matchedFiber3 =
                          existingChildren.get(newIdx) || null;

                        return updateFragment(
                          returnFiber,
                          _matchedFiber3,
                          newChild,
                          expirationTime,
                          null
                        );
                      }

                      throwOnInvalidObjectType(returnFiber, newChild);
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType();
                      }
                    }

                    return null;
                  }
                  /**
                   * Warns if there is a duplicate or missing key
                   */

                  function warnOnInvalidKey(child, knownKeys) {
                    {
                      if (typeof child !== 'object' || child === null) {
                        return knownKeys;
                      }

                      switch (child.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                          warnForMissingKey(child);
                          var key = child.key;

                          if (typeof key !== 'string') {
                            break;
                          }

                          if (knownKeys === null) {
                            knownKeys = new Set();
                            knownKeys.add(key);
                            break;
                          }

                          if (!knownKeys.has(key)) {
                            knownKeys.add(key);
                            break;
                          }

                          warning$1(
                            false,
                            'Encountered two children with the same key, `%s`. ' +
                              'Keys should be unique so that components maintain their identity ' +
                              'across updates. Non-unique keys may cause children to be ' +
                              'duplicated and/or omitted — the behavior is unsupported and ' +
                              'could change in a future version.',
                            key
                          );
                          break;

                        default:
                          break;
                      }
                    }

                    return knownKeys;
                  }

                  function reconcileChildrenArray(
                    returnFiber,
                    currentFirstChild,
                    newChildren,
                    expirationTime
                  ) {
                    // This algorithm can't optimize by searching from both ends since we
                    // don't have backpointers on fibers. I'm trying to see how far we can get
                    // with that model. If it ends up not being worth the tradeoffs, we can
                    // add it later.
                    // Even with a two ended optimization, we'd want to optimize for the case
                    // where there are few changes and brute force the comparison instead of
                    // going for the Map. It'd like to explore hitting that path first in
                    // forward-only mode and only go for the Map once we notice that we need
                    // lots of look ahead. This doesn't handle reversal as well as two ended
                    // search but that's unusual. Besides, for the two ended optimization to
                    // work on Iterables, we'd need to copy the whole set.
                    // In this first iteration, we'll just live with hitting the bad case
                    // (adding everything to a Map) in for every insert/move.
                    // If you change this code, also update reconcileChildrenIterator() which
                    // uses the same algorithm.
                    {
                      // First, validate keys.
                      var knownKeys = null;

                      for (var i = 0; i < newChildren.length; i++) {
                        var child = newChildren[i];
                        knownKeys = warnOnInvalidKey(child, knownKeys);
                      }
                    }

                    var resultingFirstChild = null;
                    var previousNewFiber = null;
                    var oldFiber = currentFirstChild;
                    var lastPlacedIndex = 0;
                    var newIdx = 0;
                    var nextOldFiber = null;

                    for (
                      ;
                      oldFiber !== null && newIdx < newChildren.length;
                      newIdx++
                    ) {
                      if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber;
                        oldFiber = null;
                      } else {
                        nextOldFiber = oldFiber.sibling;
                      }

                      var newFiber = updateSlot(
                        returnFiber,
                        oldFiber,
                        newChildren[newIdx],
                        expirationTime
                      );

                      if (newFiber === null) {
                        // TODO: This breaks on empty slots like null children. That's
                        // unfortunate because it triggers the slow path all the time. We need
                        // a better way to communicate whether this was a miss or null,
                        // boolean, undefined, etc.
                        if (oldFiber === null) {
                          oldFiber = nextOldFiber;
                        }

                        break;
                      }

                      if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                          // We matched the slot, but we didn't reuse the existing fiber, so we
                          // need to delete the existing child.
                          deleteChild(returnFiber, oldFiber);
                        }
                      }

                      lastPlacedIndex = placeChild(
                        newFiber,
                        lastPlacedIndex,
                        newIdx
                      );

                      if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = newFiber;
                      } else {
                        // TODO: Defer siblings if we're not at the right index for this slot.
                        // I.e. if we had null values before, then we want to defer this
                        // for each null value. However, we also don't want to call updateSlot
                        // with the previous one.
                        previousNewFiber.sibling = newFiber;
                      }

                      previousNewFiber = newFiber;
                      oldFiber = nextOldFiber;
                    }

                    if (newIdx === newChildren.length) {
                      // We've reached the end of the new children. We can delete the rest.
                      deleteRemainingChildren(returnFiber, oldFiber);
                      return resultingFirstChild;
                    }

                    if (oldFiber === null) {
                      // If we don't have any more existing children we can choose a fast path
                      // since the rest will all be insertions.
                      for (; newIdx < newChildren.length; newIdx++) {
                        var _newFiber = createChild(
                          returnFiber,
                          newChildren[newIdx],
                          expirationTime
                        );

                        if (_newFiber === null) {
                          continue;
                        }

                        lastPlacedIndex = placeChild(
                          _newFiber,
                          lastPlacedIndex,
                          newIdx
                        );

                        if (previousNewFiber === null) {
                          // TODO: Move out of the loop. This only happens for the first run.
                          resultingFirstChild = _newFiber;
                        } else {
                          previousNewFiber.sibling = _newFiber;
                        }

                        previousNewFiber = _newFiber;
                      }

                      return resultingFirstChild;
                    } // Add all children to a key map for quick lookups.

                    var existingChildren = mapRemainingChildren(
                      returnFiber,
                      oldFiber
                    ); // Keep scanning and use the map to restore deleted items as moves.

                    for (; newIdx < newChildren.length; newIdx++) {
                      var _newFiber2 = updateFromMap(
                        existingChildren,
                        returnFiber,
                        newIdx,
                        newChildren[newIdx],
                        expirationTime
                      );

                      if (_newFiber2 !== null) {
                        if (shouldTrackSideEffects) {
                          if (_newFiber2.alternate !== null) {
                            // The new fiber is a work in progress, but if there exists a
                            // current, that means that we reused the fiber. We need to delete
                            // it from the child list so that we don't add it to the deletion
                            // list.
                            existingChildren.delete(
                              _newFiber2.key === null ? newIdx : _newFiber2.key
                            );
                          }
                        }

                        lastPlacedIndex = placeChild(
                          _newFiber2,
                          lastPlacedIndex,
                          newIdx
                        );

                        if (previousNewFiber === null) {
                          resultingFirstChild = _newFiber2;
                        } else {
                          previousNewFiber.sibling = _newFiber2;
                        }

                        previousNewFiber = _newFiber2;
                      }
                    }

                    if (shouldTrackSideEffects) {
                      // Any existing children that weren't consumed above were deleted. We need
                      // to add them to the deletion list.
                      existingChildren.forEach(function(child) {
                        return deleteChild(returnFiber, child);
                      });
                    }

                    return resultingFirstChild;
                  }

                  function reconcileChildrenIterator(
                    returnFiber,
                    currentFirstChild,
                    newChildrenIterable,
                    expirationTime
                  ) {
                    // This is the same implementation as reconcileChildrenArray(),
                    // but using the iterator instead.
                    var iteratorFn = getIteratorFn(newChildrenIterable);

                    if (!(typeof iteratorFn === 'function')) {
                      {
                        throw Error(
                          'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }

                    {
                      // We don't support rendering Generators because it's a mutation.
                      // See https://github.com/facebook/react/issues/12995
                      if (
                        typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
                        newChildrenIterable[Symbol.toStringTag] === 'Generator'
                      ) {
                        !didWarnAboutGenerators
                          ? warning$1(
                              false,
                              'Using Generators as children is unsupported and will likely yield ' +
                                'unexpected results because enumerating a generator mutates it. ' +
                                'You may convert it to an array with `Array.from()` or the ' +
                                '`[...spread]` operator before rendering. Keep in mind ' +
                                'you might need to polyfill these features for older browsers.'
                            )
                          : void 0;
                        didWarnAboutGenerators = true;
                      } // Warn about using Maps as children

                      if (newChildrenIterable.entries === iteratorFn) {
                        !didWarnAboutMaps
                          ? warning$1(
                              false,
                              'Using Maps as children is unsupported and will likely yield ' +
                                'unexpected results. Convert it to a sequence/iterable of keyed ' +
                                'ReactElements instead.'
                            )
                          : void 0;
                        didWarnAboutMaps = true;
                      } // First, validate keys.
                      // We'll get a different iterator later for the main pass.

                      var _newChildren = iteratorFn.call(newChildrenIterable);

                      if (_newChildren) {
                        var knownKeys = null;

                        var _step = _newChildren.next();

                        for (; !_step.done; _step = _newChildren.next()) {
                          var child = _step.value;
                          knownKeys = warnOnInvalidKey(child, knownKeys);
                        }
                      }
                    }

                    var newChildren = iteratorFn.call(newChildrenIterable);

                    if (!(newChildren != null)) {
                      {
                        throw Error('An iterable object provided no iterator.');
                      }
                    }

                    var resultingFirstChild = null;
                    var previousNewFiber = null;
                    var oldFiber = currentFirstChild;
                    var lastPlacedIndex = 0;
                    var newIdx = 0;
                    var nextOldFiber = null;
                    var step = newChildren.next();

                    for (
                      ;
                      oldFiber !== null && !step.done;
                      newIdx++, step = newChildren.next()
                    ) {
                      if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber;
                        oldFiber = null;
                      } else {
                        nextOldFiber = oldFiber.sibling;
                      }

                      var newFiber = updateSlot(
                        returnFiber,
                        oldFiber,
                        step.value,
                        expirationTime
                      );

                      if (newFiber === null) {
                        // TODO: This breaks on empty slots like null children. That's
                        // unfortunate because it triggers the slow path all the time. We need
                        // a better way to communicate whether this was a miss or null,
                        // boolean, undefined, etc.
                        if (oldFiber === null) {
                          oldFiber = nextOldFiber;
                        }

                        break;
                      }

                      if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                          // We matched the slot, but we didn't reuse the existing fiber, so we
                          // need to delete the existing child.
                          deleteChild(returnFiber, oldFiber);
                        }
                      }

                      lastPlacedIndex = placeChild(
                        newFiber,
                        lastPlacedIndex,
                        newIdx
                      );

                      if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = newFiber;
                      } else {
                        // TODO: Defer siblings if we're not at the right index for this slot.
                        // I.e. if we had null values before, then we want to defer this
                        // for each null value. However, we also don't want to call updateSlot
                        // with the previous one.
                        previousNewFiber.sibling = newFiber;
                      }

                      previousNewFiber = newFiber;
                      oldFiber = nextOldFiber;
                    }

                    if (step.done) {
                      // We've reached the end of the new children. We can delete the rest.
                      deleteRemainingChildren(returnFiber, oldFiber);
                      return resultingFirstChild;
                    }

                    if (oldFiber === null) {
                      // If we don't have any more existing children we can choose a fast path
                      // since the rest will all be insertions.
                      for (; !step.done; newIdx++, step = newChildren.next()) {
                        var _newFiber3 = createChild(
                          returnFiber,
                          step.value,
                          expirationTime
                        );

                        if (_newFiber3 === null) {
                          continue;
                        }

                        lastPlacedIndex = placeChild(
                          _newFiber3,
                          lastPlacedIndex,
                          newIdx
                        );

                        if (previousNewFiber === null) {
                          // TODO: Move out of the loop. This only happens for the first run.
                          resultingFirstChild = _newFiber3;
                        } else {
                          previousNewFiber.sibling = _newFiber3;
                        }

                        previousNewFiber = _newFiber3;
                      }

                      return resultingFirstChild;
                    } // Add all children to a key map for quick lookups.

                    var existingChildren = mapRemainingChildren(
                      returnFiber,
                      oldFiber
                    ); // Keep scanning and use the map to restore deleted items as moves.

                    for (; !step.done; newIdx++, step = newChildren.next()) {
                      var _newFiber4 = updateFromMap(
                        existingChildren,
                        returnFiber,
                        newIdx,
                        step.value,
                        expirationTime
                      );

                      if (_newFiber4 !== null) {
                        if (shouldTrackSideEffects) {
                          if (_newFiber4.alternate !== null) {
                            // The new fiber is a work in progress, but if there exists a
                            // current, that means that we reused the fiber. We need to delete
                            // it from the child list so that we don't add it to the deletion
                            // list.
                            existingChildren.delete(
                              _newFiber4.key === null ? newIdx : _newFiber4.key
                            );
                          }
                        }

                        lastPlacedIndex = placeChild(
                          _newFiber4,
                          lastPlacedIndex,
                          newIdx
                        );

                        if (previousNewFiber === null) {
                          resultingFirstChild = _newFiber4;
                        } else {
                          previousNewFiber.sibling = _newFiber4;
                        }

                        previousNewFiber = _newFiber4;
                      }
                    }

                    if (shouldTrackSideEffects) {
                      // Any existing children that weren't consumed above were deleted. We need
                      // to add them to the deletion list.
                      existingChildren.forEach(function(child) {
                        return deleteChild(returnFiber, child);
                      });
                    }

                    return resultingFirstChild;
                  }

                  function reconcileSingleTextNode(
                    returnFiber,
                    currentFirstChild,
                    textContent,
                    expirationTime
                  ) {
                    // There's no need to check for keys on text nodes since we don't have a
                    // way to define them.
                    if (
                      currentFirstChild !== null &&
                      currentFirstChild.tag === HostText
                    ) {
                      // We already have an existing node so let's just update it and delete
                      // the rest.
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      );
                      var existing = useFiber(
                        currentFirstChild,
                        textContent,
                        expirationTime
                      );
                      existing.return = returnFiber;
                      return existing;
                    } // The existing first child is not a text node so we need to create one
                    // and delete the existing ones.

                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    var created = createFiberFromText(
                      textContent,
                      returnFiber.mode,
                      expirationTime
                    );
                    created.return = returnFiber;
                    return created;
                  }

                  function reconcileSingleElement(
                    returnFiber,
                    currentFirstChild,
                    element,
                    expirationTime
                  ) {
                    var key = element.key;
                    var child = currentFirstChild;

                    while (child !== null) {
                      // TODO: If key === null and child.key === null, then this only applies to
                      // the first item in the list.
                      if (child.key === key) {
                        if (
                          child.tag === Fragment
                            ? element.type === REACT_FRAGMENT_TYPE
                            : child.elementType === element.type || // Keep this check inline so it only runs on the false path:
                              isCompatibleFamilyForHotReloading(child, element)
                        ) {
                          deleteRemainingChildren(returnFiber, child.sibling);
                          var existing = useFiber(
                            child,
                            element.type === REACT_FRAGMENT_TYPE
                              ? element.props.children
                              : element.props,
                            expirationTime
                          );
                          existing.ref = coerceRef(returnFiber, child, element);
                          existing.return = returnFiber;

                          {
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                          }

                          return existing;
                        } else {
                          deleteRemainingChildren(returnFiber, child);
                          break;
                        }
                      } else {
                        deleteChild(returnFiber, child);
                      }

                      child = child.sibling;
                    }

                    if (element.type === REACT_FRAGMENT_TYPE) {
                      var created = createFiberFromFragment(
                        element.props.children,
                        returnFiber.mode,
                        expirationTime,
                        element.key
                      );
                      created.return = returnFiber;
                      return created;
                    } else {
                      var _created4 = createFiberFromElement(
                        element,
                        returnFiber.mode,
                        expirationTime
                      );

                      _created4.ref = coerceRef(
                        returnFiber,
                        currentFirstChild,
                        element
                      );
                      _created4.return = returnFiber;
                      return _created4;
                    }
                  }

                  function reconcileSinglePortal(
                    returnFiber,
                    currentFirstChild,
                    portal,
                    expirationTime
                  ) {
                    var key = portal.key;
                    var child = currentFirstChild;

                    while (child !== null) {
                      // TODO: If key === null and child.key === null, then this only applies to
                      // the first item in the list.
                      if (child.key === key) {
                        if (
                          child.tag === HostPortal &&
                          child.stateNode.containerInfo ===
                            portal.containerInfo &&
                          child.stateNode.implementation ===
                            portal.implementation
                        ) {
                          deleteRemainingChildren(returnFiber, child.sibling);
                          var existing = useFiber(
                            child,
                            portal.children || [],
                            expirationTime
                          );
                          existing.return = returnFiber;
                          return existing;
                        } else {
                          deleteRemainingChildren(returnFiber, child);
                          break;
                        }
                      } else {
                        deleteChild(returnFiber, child);
                      }

                      child = child.sibling;
                    }

                    var created = createFiberFromPortal(
                      portal,
                      returnFiber.mode,
                      expirationTime
                    );
                    created.return = returnFiber;
                    return created;
                  } // This API will tag the children with the side-effect of the reconciliation
                  // itself. They will be added to the side-effect list as we pass through the
                  // children and the parent.

                  function reconcileChildFibers(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    expirationTime
                  ) {
                    // This function is not recursive.
                    // If the top level item is an array, we treat it as a set of children,
                    // not as a fragment. Nested arrays on the other hand will be treated as
                    // fragment nodes. Recursion happens at the normal flow.
                    // Handle top level unkeyed fragments as if they were arrays.
                    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
                    // We treat the ambiguous cases above the same.
                    var isUnkeyedTopLevelFragment =
                      typeof newChild === 'object' &&
                      newChild !== null &&
                      newChild.type === REACT_FRAGMENT_TYPE &&
                      newChild.key === null;

                    if (isUnkeyedTopLevelFragment) {
                      newChild = newChild.props.children;
                    } // Handle object types

                    var isObject =
                      typeof newChild === 'object' && newChild !== null;

                    if (isObject) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                          return placeSingleChild(
                            reconcileSingleElement(
                              returnFiber,
                              currentFirstChild,
                              newChild,
                              expirationTime
                            )
                          );

                        case REACT_PORTAL_TYPE:
                          return placeSingleChild(
                            reconcileSinglePortal(
                              returnFiber,
                              currentFirstChild,
                              newChild,
                              expirationTime
                            )
                          );
                      }
                    }

                    if (
                      typeof newChild === 'string' ||
                      typeof newChild === 'number'
                    ) {
                      return placeSingleChild(
                        reconcileSingleTextNode(
                          returnFiber,
                          currentFirstChild,
                          '' + newChild,
                          expirationTime
                        )
                      );
                    }

                    if (isArray(newChild)) {
                      return reconcileChildrenArray(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        expirationTime
                      );
                    }

                    if (getIteratorFn(newChild)) {
                      return reconcileChildrenIterator(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        expirationTime
                      );
                    }

                    if (isObject) {
                      throwOnInvalidObjectType(returnFiber, newChild);
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType();
                      }
                    }

                    if (
                      typeof newChild === 'undefined' &&
                      !isUnkeyedTopLevelFragment
                    ) {
                      // If the new child is undefined, and the return fiber is a composite
                      // component, throw an error. If Fiber return types are disabled,
                      // we already threw above.
                      switch (returnFiber.tag) {
                        case ClassComponent: {
                          {
                            var instance = returnFiber.stateNode;

                            if (instance.render._isMockFunction) {
                              // We allow auto-mocks to proceed as if they're returning null.
                              break;
                            }
                          }
                        }
                        // Intentionally fall through to the next case, which handles both
                        // functions and classes
                        // eslint-disable-next-lined no-fallthrough

                        case FunctionComponent: {
                          var Component = returnFiber.type;

                          {
                            {
                              throw Error(
                                (Component.displayName ||
                                  Component.name ||
                                  'Component') +
                                  '(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.'
                              );
                            }
                          }
                        }
                      }
                    } // Remaining cases are all treated as empty.

                    return deleteRemainingChildren(
                      returnFiber,
                      currentFirstChild
                    );
                  }

                  return reconcileChildFibers;
                }

                var reconcileChildFibers = ChildReconciler(true);
                var mountChildFibers = ChildReconciler(false);
                function cloneChildFibers(current$$1, workInProgress) {
                  if (
                    !(
                      current$$1 === null ||
                      workInProgress.child === current$$1.child
                    )
                  ) {
                    {
                      throw Error('Resuming work not yet implemented.');
                    }
                  }

                  if (workInProgress.child === null) {
                    return;
                  }

                  var currentChild = workInProgress.child;
                  var newChild = createWorkInProgress(
                    currentChild,
                    currentChild.pendingProps,
                    currentChild.expirationTime
                  );
                  workInProgress.child = newChild;
                  newChild.return = workInProgress;

                  while (currentChild.sibling !== null) {
                    currentChild = currentChild.sibling;
                    newChild = newChild.sibling = createWorkInProgress(
                      currentChild,
                      currentChild.pendingProps,
                      currentChild.expirationTime
                    );
                    newChild.return = workInProgress;
                  }

                  newChild.sibling = null;
                } // Reset a workInProgress child set to prepare it for a second pass.

                function resetChildFibers(
                  workInProgress,
                  renderExpirationTime
                ) {
                  var child = workInProgress.child;

                  while (child !== null) {
                    resetWorkInProgress(child, renderExpirationTime);
                    child = child.sibling;
                  }
                }

                var NO_CONTEXT = {};
                var contextStackCursor$1 = createCursor(NO_CONTEXT);
                var contextFiberStackCursor = createCursor(NO_CONTEXT);
                var rootInstanceStackCursor = createCursor(NO_CONTEXT);

                function requiredContext(c) {
                  if (!(c !== NO_CONTEXT)) {
                    {
                      throw Error(
                        'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'
                      );
                    }
                  }

                  return c;
                }

                function getRootHostContainer() {
                  var rootInstance = requiredContext(
                    rootInstanceStackCursor.current
                  );
                  return rootInstance;
                }

                function pushHostContainer(fiber, nextRootInstance) {
                  // Push current root instance onto the stack;
                  // This allows us to reset root when portals are popped.
                  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
                  // This enables us to pop only Fibers that provide unique contexts.

                  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
                  // However, we can't just call getRootHostContext() and push it because
                  // we'd have a different number of entries on the stack depending on
                  // whether getRootHostContext() throws somewhere in renderer code or not.
                  // So we push an empty value first. This lets us safely unwind on errors.

                  push(contextStackCursor$1, NO_CONTEXT, fiber);
                  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

                  pop(contextStackCursor$1, fiber);
                  push(contextStackCursor$1, nextRootContext, fiber);
                }

                function popHostContainer(fiber) {
                  pop(contextStackCursor$1, fiber);
                  pop(contextFiberStackCursor, fiber);
                  pop(rootInstanceStackCursor, fiber);
                }

                function getHostContext() {
                  var context = requiredContext(contextStackCursor$1.current);
                  return context;
                }

                function pushHostContext(fiber) {
                  var rootInstance = requiredContext(
                    rootInstanceStackCursor.current
                  );
                  var context = requiredContext(contextStackCursor$1.current);
                  var nextContext = getChildHostContext(
                    context,
                    fiber.type,
                    rootInstance
                  ); // Don't push this Fiber's context unless it's unique.

                  if (context === nextContext) {
                    return;
                  } // Track the context and the Fiber that provided it.
                  // This enables us to pop only Fibers that provide unique contexts.

                  push(contextFiberStackCursor, fiber, fiber);
                  push(contextStackCursor$1, nextContext, fiber);
                }

                function popHostContext(fiber) {
                  // Do not pop unless this Fiber provided the current context.
                  // pushHostContext() only pushes Fibers that provide unique contexts.
                  if (contextFiberStackCursor.current !== fiber) {
                    return;
                  }

                  pop(contextStackCursor$1, fiber);
                  pop(contextFiberStackCursor, fiber);
                }

                var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
                // inherited deeply down the subtree. The upper bits only affect
                // this immediate suspense boundary and gets reset each new
                // boundary or suspense list.

                var SubtreeSuspenseContextMask = 1; // Subtree Flags:
                // InvisibleParentSuspenseContext indicates that one of our parent Suspense
                // boundaries is not currently showing visible main content.
                // Either because it is already showing a fallback or is not mounted at all.
                // We can use this to determine if it is desirable to trigger a fallback at
                // the parent. If not, then we might need to trigger undesirable boundaries
                // and/or suspend the commit to avoid hiding the parent content.

                var InvisibleParentSuspenseContext = 1; // Shallow Flags:
                // ForceSuspenseFallback can be used by SuspenseList to force newly added
                // items into their fallback state during one of the render passes.

                var ForceSuspenseFallback = 2;
                var suspenseStackCursor = createCursor(DefaultSuspenseContext);
                function hasSuspenseContext(parentContext, flag) {
                  return (parentContext & flag) !== 0;
                }
                function setDefaultShallowSuspenseContext(parentContext) {
                  return parentContext & SubtreeSuspenseContextMask;
                }
                function setShallowSuspenseContext(
                  parentContext,
                  shallowContext
                ) {
                  return (
                    (parentContext & SubtreeSuspenseContextMask) |
                    shallowContext
                  );
                }
                function addSubtreeSuspenseContext(
                  parentContext,
                  subtreeContext
                ) {
                  return parentContext | subtreeContext;
                }
                function pushSuspenseContext(fiber, newContext) {
                  push(suspenseStackCursor, newContext, fiber);
                }
                function popSuspenseContext(fiber) {
                  pop(suspenseStackCursor, fiber);
                }

                function shouldCaptureSuspense(
                  workInProgress,
                  hasInvisibleParent
                ) {
                  // If it was the primary children that just suspended, capture and render the
                  // fallback. Otherwise, don't capture and bubble to the next boundary.
                  var nextState = workInProgress.memoizedState;

                  if (nextState !== null) {
                    if (nextState.dehydrated !== null) {
                      // A dehydrated boundary always captures.
                      return true;
                    }

                    return false;
                  }

                  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

                  if (props.fallback === undefined) {
                    return false;
                  } // Regular boundaries always capture.

                  if (props.unstable_avoidThisFallback !== true) {
                    return true;
                  } // If it's a boundary we should avoid, then we prefer to bubble up to the
                  // parent boundary if it is currently invisible.

                  if (hasInvisibleParent) {
                    return false;
                  } // If the parent is not able to handle it, we must handle it.

                  return true;
                }
                function findFirstSuspended(row) {
                  var node = row;

                  while (node !== null) {
                    if (node.tag === SuspenseComponent) {
                      var state = node.memoizedState;

                      if (state !== null) {
                        var dehydrated = state.dehydrated;

                        if (
                          dehydrated === null ||
                          isSuspenseInstancePending(dehydrated) ||
                          isSuspenseInstanceFallback(dehydrated)
                        ) {
                          return node;
                        }
                      }
                    } else if (
                      node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
                      // keep track of whether it suspended or not.
                      node.memoizedProps.revealOrder !== undefined
                    ) {
                      var didSuspend =
                        (node.effectTag & DidCapture) !== NoEffect;

                      if (didSuspend) {
                        return node;
                      }
                    } else if (node.child !== null) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === row) {
                      return null;
                    }

                    while (node.sibling === null) {
                      if (node.return === null || node.return === row) {
                        return null;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }

                  return null;
                }

                var emptyObject = {};
                var isArray$2 = Array.isArray;
                function createResponderInstance(
                  responder,
                  responderProps,
                  responderState,
                  fiber
                ) {
                  return {
                    fiber: fiber,
                    props: responderProps,
                    responder: responder,
                    rootEventTypes: null,
                    state: responderState,
                  };
                }

                function mountEventResponder(
                  responder,
                  responderProps,
                  fiber,
                  respondersMap,
                  rootContainerInstance
                ) {
                  var responderState = emptyObject;
                  var getInitialState = responder.getInitialState;

                  if (getInitialState !== null) {
                    responderState = getInitialState(responderProps);
                  }

                  var responderInstance = createResponderInstance(
                    responder,
                    responderProps,
                    responderState,
                    fiber
                  );

                  if (!rootContainerInstance) {
                    var node = fiber;

                    while (node !== null) {
                      var tag = node.tag;

                      if (tag === HostComponent) {
                        rootContainerInstance = node.stateNode;
                        break;
                      } else if (tag === HostRoot) {
                        rootContainerInstance = node.stateNode.containerInfo;
                        break;
                      }

                      node = node.return;
                    }
                  }

                  mountResponderInstance(
                    responder,
                    responderInstance,
                    responderProps,
                    responderState,
                    rootContainerInstance
                  );
                  respondersMap.set(responder, responderInstance);
                }

                function updateEventListener(
                  listener,
                  fiber,
                  visistedResponders,
                  respondersMap,
                  rootContainerInstance
                ) {
                  var responder;
                  var props;

                  if (listener) {
                    responder = listener.responder;
                    props = listener.props;
                  }

                  if (
                    !(responder && responder.$$typeof === REACT_RESPONDER_TYPE)
                  ) {
                    {
                      throw Error(
                        'An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponder().'
                      );
                    }
                  }

                  var listenerProps = props;

                  if (visistedResponders.has(responder)) {
                    // show warning
                    {
                      warning$1(
                        false,
                        'Duplicate event responder "%s" found in event listeners. ' +
                          'Event listeners passed to elements cannot use the same event responder more than once.',
                        responder.displayName
                      );
                    }

                    return;
                  }

                  visistedResponders.add(responder);
                  var responderInstance = respondersMap.get(responder);

                  if (responderInstance === undefined) {
                    // Mount (happens in either complete or commit phase)
                    mountEventResponder(
                      responder,
                      listenerProps,
                      fiber,
                      respondersMap,
                      rootContainerInstance
                    );
                  } else {
                    // Update (happens during commit phase only)
                    responderInstance.props = listenerProps;
                    responderInstance.fiber = fiber;
                  }
                }

                function updateEventListeners(
                  listeners,
                  fiber,
                  rootContainerInstance
                ) {
                  var visistedResponders = new Set();
                  var dependencies = fiber.dependencies;

                  if (listeners != null) {
                    if (dependencies === null) {
                      dependencies = fiber.dependencies = {
                        expirationTime: NoWork,
                        firstContext: null,
                        responders: new Map(),
                      };
                    }

                    var respondersMap = dependencies.responders;

                    if (respondersMap === null) {
                      respondersMap = new Map();
                    }

                    if (isArray$2(listeners)) {
                      for (
                        var i = 0, length = listeners.length;
                        i < length;
                        i++
                      ) {
                        var listener = listeners[i];
                        updateEventListener(
                          listener,
                          fiber,
                          visistedResponders,
                          respondersMap,
                          rootContainerInstance
                        );
                      }
                    } else {
                      updateEventListener(
                        listeners,
                        fiber,
                        visistedResponders,
                        respondersMap,
                        rootContainerInstance
                      );
                    }
                  }

                  if (dependencies !== null) {
                    var _respondersMap = dependencies.responders;

                    if (_respondersMap !== null) {
                      // Unmount
                      var mountedResponders = Array.from(_respondersMap.keys());

                      for (
                        var _i = 0, _length = mountedResponders.length;
                        _i < _length;
                        _i++
                      ) {
                        var mountedResponder = mountedResponders[_i];

                        if (!visistedResponders.has(mountedResponder)) {
                          var responderInstance = _respondersMap.get(
                            mountedResponder
                          );

                          unmountResponderInstance(responderInstance);

                          _respondersMap.delete(mountedResponder);
                        }
                      }
                    }
                  }
                }
                function createResponderListener(responder, props) {
                  var eventResponderListener = {
                    responder: responder,
                    props: props,
                  };

                  {
                    Object.freeze(eventResponderListener);
                  }

                  return eventResponderListener;
                }

                var NoEffect$1 =
                  /*             */
                  0;
                var UnmountSnapshot =
                  /*      */
                  2;
                var UnmountMutation =
                  /*      */
                  4;
                var MountMutation =
                  /*        */
                  8;
                var UnmountLayout =
                  /*        */
                  16;
                var MountLayout =
                  /*          */
                  32;
                var MountPassive =
                  /*         */
                  64;
                var UnmountPassive =
                  /*       */
                  128;

                var ReactCurrentDispatcher$1 =
                  ReactSharedInternals.ReactCurrentDispatcher;
                var ReactCurrentBatchConfig$1 =
                  ReactSharedInternals.ReactCurrentBatchConfig;
                var didWarnAboutMismatchedHooksForComponent;

                {
                  didWarnAboutMismatchedHooksForComponent = new Set();
                }

                // These are set right before calling the component.
                var renderExpirationTime$1 = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
                // the work-in-progress hook.

                var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
                // current hook list is the list that belongs to the current fiber. The
                // work-in-progress hook list is a new list that will be added to the
                // work-in-progress fiber.

                var currentHook = null;
                var nextCurrentHook = null;
                var firstWorkInProgressHook = null;
                var workInProgressHook = null;
                var nextWorkInProgressHook = null;
                var remainingExpirationTime = NoWork;
                var componentUpdateQueue = null;
                var sideEffectTag = 0; // Updates scheduled during render will trigger an immediate re-render at the
                // end of the current pass. We can't store these updates on the normal queue,
                // because if the work is aborted, they should be discarded. Because this is
                // a relatively rare case, we also don't want to add an additional field to
                // either the hook or queue object types. So we store them in a lazily create
                // map of queue -> render-phase updates, which are discarded once the component
                // completes without re-rendering.
                // Whether an update was scheduled during the currently executing render pass.

                var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

                var renderPhaseUpdates = null; // Counter to prevent infinite loops.

                var numberOfReRenders = 0;
                var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

                var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
                // The list stores the order of hooks used during the initial render (mount).
                // Subsequent renders (updates) reference this list.

                var hookTypesDev = null;
                var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
                // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
                // When true, such Hooks will always be "remounted". Only used during hot reload.

                var ignorePreviousDependencies = false;

                function mountHookTypesDev() {
                  {
                    var hookName = currentHookNameInDev;

                    if (hookTypesDev === null) {
                      hookTypesDev = [hookName];
                    } else {
                      hookTypesDev.push(hookName);
                    }
                  }
                }

                function updateHookTypesDev() {
                  {
                    var hookName = currentHookNameInDev;

                    if (hookTypesDev !== null) {
                      hookTypesUpdateIndexDev++;

                      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                        warnOnHookMismatchInDev(hookName);
                      }
                    }
                  }
                }

                function checkDepsAreArrayDev(deps) {
                  {
                    if (
                      deps !== undefined &&
                      deps !== null &&
                      !Array.isArray(deps)
                    ) {
                      // Verify deps, but only on mount to avoid extra checks.
                      // It's unlikely their type would change as usually you define them inline.
                      warning$1(
                        false,
                        '%s received a final argument that is not an array (instead, received `%s`). When ' +
                          'specified, the final argument must be an array.',
                        currentHookNameInDev,
                        typeof deps
                      );
                    }
                  }
                }

                function warnOnHookMismatchInDev(currentHookName) {
                  {
                    var componentName = getComponentName(
                      currentlyRenderingFiber$1.type
                    );

                    if (
                      !didWarnAboutMismatchedHooksForComponent.has(
                        componentName
                      )
                    ) {
                      didWarnAboutMismatchedHooksForComponent.add(
                        componentName
                      );

                      if (hookTypesDev !== null) {
                        var table = '';
                        var secondColumnStart = 30;

                        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                          var oldHookName = hookTypesDev[i];
                          var newHookName =
                            i === hookTypesUpdateIndexDev
                              ? currentHookName
                              : oldHookName;
                          var row = i + 1 + '. ' + oldHookName; // Extra space so second column lines up
                          // lol @ IE not supporting String#repeat

                          while (row.length < secondColumnStart) {
                            row += ' ';
                          }

                          row += newHookName + '\n';
                          table += row;
                        }

                        warning$1(
                          false,
                          'React has detected a change in the order of Hooks called by %s. ' +
                            'This will lead to bugs and errors if not fixed. ' +
                            'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' +
                            '   Previous render            Next render\n' +
                            '   ------------------------------------------------------\n' +
                            '%s' +
                            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',
                          componentName,
                          table
                        );
                      }
                    }
                  }
                }

                function throwInvalidHookError() {
                  {
                    {
                      throw Error(
                        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.'
                      );
                    }
                  }
                }

                function areHookInputsEqual(nextDeps, prevDeps) {
                  {
                    if (ignorePreviousDependencies) {
                      // Only true when this component is being hot reloaded.
                      return false;
                    }
                  }

                  if (prevDeps === null) {
                    {
                      warning$1(
                        false,
                        '%s received a final argument during this render, but not during ' +
                          'the previous render. Even though the final argument is optional, ' +
                          'its type cannot change between renders.',
                        currentHookNameInDev
                      );
                    }

                    return false;
                  }

                  {
                    // Don't bother comparing lengths in prod because these arrays should be
                    // passed inline.
                    if (nextDeps.length !== prevDeps.length) {
                      warning$1(
                        false,
                        'The final argument passed to %s changed size between renders. The ' +
                          'order and size of this array must remain constant.\n\n' +
                          'Previous: %s\n' +
                          'Incoming: %s',
                        currentHookNameInDev,
                        '[' + prevDeps.join(', ') + ']',
                        '[' + nextDeps.join(', ') + ']'
                      );
                    }
                  }

                  for (
                    var i = 0;
                    i < prevDeps.length && i < nextDeps.length;
                    i++
                  ) {
                    if (is$1(nextDeps[i], prevDeps[i])) {
                      continue;
                    }

                    return false;
                  }

                  return true;
                }

                function renderWithHooks(
                  current,
                  workInProgress,
                  Component,
                  props,
                  refOrContext,
                  nextRenderExpirationTime
                ) {
                  renderExpirationTime$1 = nextRenderExpirationTime;
                  currentlyRenderingFiber$1 = workInProgress;
                  nextCurrentHook =
                    current !== null ? current.memoizedState : null;

                  {
                    hookTypesDev =
                      current !== null ? current._debugHookTypes : null;
                    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

                    ignorePreviousDependencies =
                      current !== null && current.type !== workInProgress.type;
                  } // The following should have already been reset
                  // currentHook = null;
                  // workInProgressHook = null;
                  // remainingExpirationTime = NoWork;
                  // componentUpdateQueue = null;
                  // didScheduleRenderPhaseUpdate = false;
                  // renderPhaseUpdates = null;
                  // numberOfReRenders = 0;
                  // sideEffectTag = 0;
                  // TODO Warn if no hooks are used at all during mount, then some are used during update.
                  // Currently we will identify the update render as a mount because nextCurrentHook === null.
                  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
                  // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
                  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
                  // so nextCurrentHook would be null during updates and mounts.

                  {
                    if (nextCurrentHook !== null) {
                      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                    } else if (hookTypesDev !== null) {
                      // This dispatcher handles an edge case where a component is updating,
                      // but no stateful hooks have been used.
                      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
                      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
                      // This dispatcher does that.
                      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
                    } else {
                      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
                    }
                  }

                  var children = Component(props, refOrContext);

                  if (didScheduleRenderPhaseUpdate) {
                    do {
                      didScheduleRenderPhaseUpdate = false;
                      numberOfReRenders += 1;

                      {
                        // Even when hot reloading, allow dependencies to stabilize
                        // after first render to prevent infinite render phase updates.
                        ignorePreviousDependencies = false;
                      } // Start over from the beginning of the list

                      nextCurrentHook =
                        current !== null ? current.memoizedState : null;
                      nextWorkInProgressHook = firstWorkInProgressHook;
                      currentHook = null;
                      workInProgressHook = null;
                      componentUpdateQueue = null;

                      {
                        // Also validate hook order for cascading updates.
                        hookTypesUpdateIndexDev = -1;
                      }

                      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                      children = Component(props, refOrContext);
                    } while (didScheduleRenderPhaseUpdate);

                    renderPhaseUpdates = null;
                    numberOfReRenders = 0;
                  } // We can assume the previous dispatcher is always this one, since we set it
                  // at the beginning of the render phase and there's no re-entrancy.

                  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
                  var renderedWork = currentlyRenderingFiber$1;
                  renderedWork.memoizedState = firstWorkInProgressHook;
                  renderedWork.expirationTime = remainingExpirationTime;
                  renderedWork.updateQueue = componentUpdateQueue;
                  renderedWork.effectTag |= sideEffectTag;

                  {
                    renderedWork._debugHookTypes = hookTypesDev;
                  } // This check uses currentHook so that it works the same in DEV and prod bundles.
                  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

                  var didRenderTooFewHooks =
                    currentHook !== null && currentHook.next !== null;
                  renderExpirationTime$1 = NoWork;
                  currentlyRenderingFiber$1 = null;
                  currentHook = null;
                  nextCurrentHook = null;
                  firstWorkInProgressHook = null;
                  workInProgressHook = null;
                  nextWorkInProgressHook = null;

                  {
                    currentHookNameInDev = null;
                    hookTypesDev = null;
                    hookTypesUpdateIndexDev = -1;
                  }

                  remainingExpirationTime = NoWork;
                  componentUpdateQueue = null;
                  sideEffectTag = 0; // These were reset above
                  // didScheduleRenderPhaseUpdate = false;
                  // renderPhaseUpdates = null;
                  // numberOfReRenders = 0;

                  if (!!didRenderTooFewHooks) {
                    {
                      throw Error(
                        'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.'
                      );
                    }
                  }

                  return children;
                }
                function bailoutHooks(current, workInProgress, expirationTime) {
                  workInProgress.updateQueue = current.updateQueue;
                  workInProgress.effectTag &= ~(Passive | Update);

                  if (current.expirationTime <= expirationTime) {
                    current.expirationTime = NoWork;
                  }
                }
                function resetHooks() {
                  // We can assume the previous dispatcher is always this one, since we set it
                  // at the beginning of the render phase and there's no re-entrancy.
                  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This is used to reset the state of this module when a component throws.
                  // It's also called inside mountIndeterminateComponent if we determine the
                  // component is a module-style component.

                  renderExpirationTime$1 = NoWork;
                  currentlyRenderingFiber$1 = null;
                  currentHook = null;
                  nextCurrentHook = null;
                  firstWorkInProgressHook = null;
                  workInProgressHook = null;
                  nextWorkInProgressHook = null;

                  {
                    hookTypesDev = null;
                    hookTypesUpdateIndexDev = -1;
                    currentHookNameInDev = null;
                  }

                  remainingExpirationTime = NoWork;
                  componentUpdateQueue = null;
                  sideEffectTag = 0;
                  didScheduleRenderPhaseUpdate = false;
                  renderPhaseUpdates = null;
                  numberOfReRenders = 0;
                }

                function mountWorkInProgressHook() {
                  var hook = {
                    memoizedState: null,
                    baseState: null,
                    queue: null,
                    baseUpdate: null,
                    next: null,
                  };

                  if (workInProgressHook === null) {
                    // This is the first hook in the list
                    firstWorkInProgressHook = workInProgressHook = hook;
                  } else {
                    // Append to the end of the list
                    workInProgressHook = workInProgressHook.next = hook;
                  }

                  return workInProgressHook;
                }

                function updateWorkInProgressHook() {
                  // This function is used both for updates and for re-renders triggered by a
                  // render phase update. It assumes there is either a current hook we can
                  // clone, or a work-in-progress hook from a previous render pass that we can
                  // use as a base. When we reach the end of the base list, we must switch to
                  // the dispatcher used for mounts.
                  if (nextWorkInProgressHook !== null) {
                    // There's already a work-in-progress. Reuse it.
                    workInProgressHook = nextWorkInProgressHook;
                    nextWorkInProgressHook = workInProgressHook.next;
                    currentHook = nextCurrentHook;
                    nextCurrentHook =
                      currentHook !== null ? currentHook.next : null;
                  } else {
                    // Clone from the current hook.
                    if (!(nextCurrentHook !== null)) {
                      {
                        throw Error(
                          'Rendered more hooks than during the previous render.'
                        );
                      }
                    }

                    currentHook = nextCurrentHook;
                    var newHook = {
                      memoizedState: currentHook.memoizedState,
                      baseState: currentHook.baseState,
                      queue: currentHook.queue,
                      baseUpdate: currentHook.baseUpdate,
                      next: null,
                    };

                    if (workInProgressHook === null) {
                      // This is the first hook in the list.
                      workInProgressHook = firstWorkInProgressHook = newHook;
                    } else {
                      // Append to the end of the list.
                      workInProgressHook = workInProgressHook.next = newHook;
                    }

                    nextCurrentHook = currentHook.next;
                  }

                  return workInProgressHook;
                }

                function createFunctionComponentUpdateQueue() {
                  return {
                    lastEffect: null,
                  };
                }

                function basicStateReducer(state, action) {
                  return typeof action === 'function' ? action(state) : action;
                }

                function mountReducer(reducer, initialArg, init) {
                  var hook = mountWorkInProgressHook();
                  var initialState;

                  if (init !== undefined) {
                    initialState = init(initialArg);
                  } else {
                    initialState = initialArg;
                  }

                  hook.memoizedState = hook.baseState = initialState;
                  var queue = (hook.queue = {
                    last: null,
                    dispatch: null,
                    lastRenderedReducer: reducer,
                    lastRenderedState: initialState,
                  });
                  var dispatch = (queue.dispatch = dispatchAction.bind(
                    null, // Flow doesn't know this is non-null, but we do.
                    currentlyRenderingFiber$1,
                    queue
                  ));
                  return [hook.memoizedState, dispatch];
                }

                function updateReducer(reducer, initialArg, init) {
                  var hook = updateWorkInProgressHook();
                  var queue = hook.queue;

                  if (!(queue !== null)) {
                    {
                      throw Error(
                        'Should have a queue. This is likely a bug in React. Please file an issue.'
                      );
                    }
                  }

                  queue.lastRenderedReducer = reducer;

                  if (numberOfReRenders > 0) {
                    // This is a re-render. Apply the new render phase updates to the previous
                    // work-in-progress hook.
                    var _dispatch = queue.dispatch;

                    if (renderPhaseUpdates !== null) {
                      // Render phase updates are stored in a map of queue -> linked list
                      var firstRenderPhaseUpdate = renderPhaseUpdates.get(
                        queue
                      );

                      if (firstRenderPhaseUpdate !== undefined) {
                        renderPhaseUpdates.delete(queue);
                        var newState = hook.memoizedState;
                        var update = firstRenderPhaseUpdate;

                        do {
                          // Process this render phase update. We don't have to check the
                          // priority because it will always be the same as the current
                          // render's.
                          var action = update.action;
                          newState = reducer(newState, action);
                          update = update.next;
                        } while (update !== null); // Mark that the fiber performed work, but only if the new state is
                        // different from the current state.

                        if (!is$1(newState, hook.memoizedState)) {
                          markWorkInProgressReceivedUpdate();
                        }

                        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
                        // the base state unless the queue is empty.
                        // TODO: Not sure if this is the desired semantics, but it's what we
                        // do for gDSFP. I can't remember why.

                        if (hook.baseUpdate === queue.last) {
                          hook.baseState = newState;
                        }

                        queue.lastRenderedState = newState;
                        return [newState, _dispatch];
                      }
                    }

                    return [hook.memoizedState, _dispatch];
                  } // The last update in the entire queue

                  var last = queue.last; // The last update that is part of the base state.

                  var baseUpdate = hook.baseUpdate;
                  var baseState = hook.baseState; // Find the first unprocessed update.

                  var first;

                  if (baseUpdate !== null) {
                    if (last !== null) {
                      // For the first update, the queue is a circular linked list where
                      // `queue.last.next = queue.first`. Once the first update commits, and
                      // the `baseUpdate` is no longer empty, we can unravel the list.
                      last.next = null;
                    }

                    first = baseUpdate.next;
                  } else {
                    first = last !== null ? last.next : null;
                  }

                  if (first !== null) {
                    var _newState = baseState;
                    var newBaseState = null;
                    var newBaseUpdate = null;
                    var prevUpdate = baseUpdate;
                    var _update = first;
                    var didSkip = false;

                    do {
                      var updateExpirationTime = _update.expirationTime;

                      if (updateExpirationTime < renderExpirationTime$1) {
                        // Priority is insufficient. Skip this update. If this is the first
                        // skipped update, the previous update/state is the new base
                        // update/state.
                        if (!didSkip) {
                          didSkip = true;
                          newBaseUpdate = prevUpdate;
                          newBaseState = _newState;
                        } // Update the remaining priority in the queue.

                        if (updateExpirationTime > remainingExpirationTime) {
                          remainingExpirationTime = updateExpirationTime;
                          markUnprocessedUpdateTime(remainingExpirationTime);
                        }
                      } else {
                        // This update does have sufficient priority.
                        // Mark the event time of this update as relevant to this render pass.
                        // TODO: This should ideally use the true event time of this update rather than
                        // its priority which is a derived and not reverseable value.
                        // TODO: We should skip this update if it was already committed but currently
                        // we have no way of detecting the difference between a committed and suspended
                        // update here.
                        markRenderEventTimeAndConfig(
                          updateExpirationTime,
                          _update.suspenseConfig
                        ); // Process this update.

                        if (_update.eagerReducer === reducer) {
                          // If this update was processed eagerly, and its reducer matches the
                          // current reducer, we can use the eagerly computed state.
                          _newState = _update.eagerState;
                        } else {
                          var _action = _update.action;
                          _newState = reducer(_newState, _action);
                        }
                      }

                      prevUpdate = _update;
                      _update = _update.next;
                    } while (_update !== null && _update !== first);

                    if (!didSkip) {
                      newBaseUpdate = prevUpdate;
                      newBaseState = _newState;
                    } // Mark that the fiber performed work, but only if the new state is
                    // different from the current state.

                    if (!is$1(_newState, hook.memoizedState)) {
                      markWorkInProgressReceivedUpdate();
                    }

                    hook.memoizedState = _newState;
                    hook.baseUpdate = newBaseUpdate;
                    hook.baseState = newBaseState;
                    queue.lastRenderedState = _newState;
                  }

                  var dispatch = queue.dispatch;
                  return [hook.memoizedState, dispatch];
                }

                function mountState(initialState) {
                  var hook = mountWorkInProgressHook();

                  if (typeof initialState === 'function') {
                    initialState = initialState();
                  }

                  hook.memoizedState = hook.baseState = initialState;
                  var queue = (hook.queue = {
                    last: null,
                    dispatch: null,
                    lastRenderedReducer: basicStateReducer,
                    lastRenderedState: initialState,
                  });
                  var dispatch = (queue.dispatch = dispatchAction.bind(
                    null, // Flow doesn't know this is non-null, but we do.
                    currentlyRenderingFiber$1,
                    queue
                  ));
                  return [hook.memoizedState, dispatch];
                }

                function updateState(initialState) {
                  return updateReducer(basicStateReducer, initialState);
                }

                function pushEffect(tag, create, destroy, deps) {
                  var effect = {
                    tag: tag,
                    create: create,
                    destroy: destroy,
                    deps: deps,
                    // Circular
                    next: null,
                  };

                  if (componentUpdateQueue === null) {
                    componentUpdateQueue = createFunctionComponentUpdateQueue();
                    componentUpdateQueue.lastEffect = effect.next = effect;
                  } else {
                    var lastEffect = componentUpdateQueue.lastEffect;

                    if (lastEffect === null) {
                      componentUpdateQueue.lastEffect = effect.next = effect;
                    } else {
                      var firstEffect = lastEffect.next;
                      lastEffect.next = effect;
                      effect.next = firstEffect;
                      componentUpdateQueue.lastEffect = effect;
                    }
                  }

                  return effect;
                }

                function mountRef(initialValue) {
                  var hook = mountWorkInProgressHook();
                  var ref = {
                    current: initialValue,
                  };

                  {
                    Object.seal(ref);
                  }

                  hook.memoizedState = ref;
                  return ref;
                }

                function updateRef(initialValue) {
                  var hook = updateWorkInProgressHook();
                  return hook.memoizedState;
                }

                function mountEffectImpl(
                  fiberEffectTag,
                  hookEffectTag,
                  create,
                  deps
                ) {
                  var hook = mountWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  sideEffectTag |= fiberEffectTag;
                  hook.memoizedState = pushEffect(
                    hookEffectTag,
                    create,
                    undefined,
                    nextDeps
                  );
                }

                function updateEffectImpl(
                  fiberEffectTag,
                  hookEffectTag,
                  create,
                  deps
                ) {
                  var hook = updateWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  var destroy = undefined;

                  if (currentHook !== null) {
                    var prevEffect = currentHook.memoizedState;
                    destroy = prevEffect.destroy;

                    if (nextDeps !== null) {
                      var prevDeps = prevEffect.deps;

                      if (areHookInputsEqual(nextDeps, prevDeps)) {
                        pushEffect(NoEffect$1, create, destroy, nextDeps);
                        return;
                      }
                    }
                  }

                  sideEffectTag |= fiberEffectTag;
                  hook.memoizedState = pushEffect(
                    hookEffectTag,
                    create,
                    destroy,
                    nextDeps
                  );
                }

                function mountEffect(create, deps) {
                  {
                    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                    if ('undefined' !== typeof jest) {
                      warnIfNotCurrentlyActingEffectsInDEV(
                        currentlyRenderingFiber$1
                      );
                    }
                  }

                  return mountEffectImpl(
                    Update | Passive,
                    UnmountPassive | MountPassive,
                    create,
                    deps
                  );
                }

                function updateEffect(create, deps) {
                  {
                    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                    if ('undefined' !== typeof jest) {
                      warnIfNotCurrentlyActingEffectsInDEV(
                        currentlyRenderingFiber$1
                      );
                    }
                  }

                  return updateEffectImpl(
                    Update | Passive,
                    UnmountPassive | MountPassive,
                    create,
                    deps
                  );
                }

                function mountLayoutEffect(create, deps) {
                  return mountEffectImpl(
                    Update,
                    UnmountMutation | MountLayout,
                    create,
                    deps
                  );
                }

                function updateLayoutEffect(create, deps) {
                  return updateEffectImpl(
                    Update,
                    UnmountMutation | MountLayout,
                    create,
                    deps
                  );
                }

                function imperativeHandleEffect(create, ref) {
                  if (typeof ref === 'function') {
                    var refCallback = ref;

                    var _inst = create();

                    refCallback(_inst);
                    return function() {
                      refCallback(null);
                    };
                  } else if (ref !== null && ref !== undefined) {
                    var refObject = ref;

                    {
                      !refObject.hasOwnProperty('current')
                        ? warning$1(
                            false,
                            'Expected useImperativeHandle() first argument to either be a ' +
                              'ref callback or React.createRef() object. Instead received: %s.',
                            'an object with keys {' +
                              Object.keys(refObject).join(', ') +
                              '}'
                          )
                        : void 0;
                    }

                    var _inst2 = create();

                    refObject.current = _inst2;
                    return function() {
                      refObject.current = null;
                    };
                  }
                }

                function mountImperativeHandle(ref, create, deps) {
                  {
                    !(typeof create === 'function')
                      ? warning$1(
                          false,
                          'Expected useImperativeHandle() second argument to be a function ' +
                            'that creates a handle. Instead received: %s.',
                          create !== null ? typeof create : 'null'
                        )
                      : void 0;
                  } // TODO: If deps are provided, should we skip comparing the ref itself?

                  var effectDeps =
                    deps !== null && deps !== undefined
                      ? deps.concat([ref])
                      : null;
                  return mountEffectImpl(
                    Update,
                    UnmountMutation | MountLayout,
                    imperativeHandleEffect.bind(null, create, ref),
                    effectDeps
                  );
                }

                function updateImperativeHandle(ref, create, deps) {
                  {
                    !(typeof create === 'function')
                      ? warning$1(
                          false,
                          'Expected useImperativeHandle() second argument to be a function ' +
                            'that creates a handle. Instead received: %s.',
                          create !== null ? typeof create : 'null'
                        )
                      : void 0;
                  } // TODO: If deps are provided, should we skip comparing the ref itself?

                  var effectDeps =
                    deps !== null && deps !== undefined
                      ? deps.concat([ref])
                      : null;
                  return updateEffectImpl(
                    Update,
                    UnmountMutation | MountLayout,
                    imperativeHandleEffect.bind(null, create, ref),
                    effectDeps
                  );
                }

                function mountDebugValue(value, formatterFn) {
                  // This hook is normally a no-op.
                  // The react-debug-hooks package injects its own implementation
                  // so that e.g. DevTools can display custom hook values.
                }

                var updateDebugValue = mountDebugValue;

                function mountCallback(callback, deps) {
                  var hook = mountWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  hook.memoizedState = [callback, nextDeps];
                  return callback;
                }

                function updateCallback(callback, deps) {
                  var hook = updateWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  var prevState = hook.memoizedState;

                  if (prevState !== null) {
                    if (nextDeps !== null) {
                      var prevDeps = prevState[1];

                      if (areHookInputsEqual(nextDeps, prevDeps)) {
                        return prevState[0];
                      }
                    }
                  }

                  hook.memoizedState = [callback, nextDeps];
                  return callback;
                }

                function mountMemo(nextCreate, deps) {
                  var hook = mountWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  var nextValue = nextCreate();
                  hook.memoizedState = [nextValue, nextDeps];
                  return nextValue;
                }

                function updateMemo(nextCreate, deps) {
                  var hook = updateWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  var prevState = hook.memoizedState;

                  if (prevState !== null) {
                    // Assume these are defined. If they're not, areHookInputsEqual will warn.
                    if (nextDeps !== null) {
                      var prevDeps = prevState[1];

                      if (areHookInputsEqual(nextDeps, prevDeps)) {
                        return prevState[0];
                      }
                    }
                  }

                  var nextValue = nextCreate();
                  hook.memoizedState = [nextValue, nextDeps];
                  return nextValue;
                }

                function mountDeferredValue(value, config) {
                  var _mountState = mountState(value),
                    prevValue = _mountState[0],
                    setValue = _mountState[1];

                  mountEffect(
                    function() {
                      Scheduler.unstable_next(function() {
                        var previousConfig = ReactCurrentBatchConfig$1.suspense;
                        ReactCurrentBatchConfig$1.suspense =
                          config === undefined ? null : config;

                        try {
                          setValue(value);
                        } finally {
                          ReactCurrentBatchConfig$1.suspense = previousConfig;
                        }
                      });
                    },
                    [value, config]
                  );
                  return prevValue;
                }

                function updateDeferredValue(value, config) {
                  var _updateState = updateState(value),
                    prevValue = _updateState[0],
                    setValue = _updateState[1];

                  updateEffect(
                    function() {
                      Scheduler.unstable_next(function() {
                        var previousConfig = ReactCurrentBatchConfig$1.suspense;
                        ReactCurrentBatchConfig$1.suspense =
                          config === undefined ? null : config;

                        try {
                          setValue(value);
                        } finally {
                          ReactCurrentBatchConfig$1.suspense = previousConfig;
                        }
                      });
                    },
                    [value, config]
                  );
                  return prevValue;
                }

                function mountTransition(config) {
                  var _mountState2 = mountState(false),
                    isPending = _mountState2[0],
                    setPending = _mountState2[1];

                  var startTransition = mountCallback(
                    function(callback) {
                      setPending(true);
                      Scheduler.unstable_next(function() {
                        var previousConfig = ReactCurrentBatchConfig$1.suspense;
                        ReactCurrentBatchConfig$1.suspense =
                          config === undefined ? null : config;

                        try {
                          setPending(false);
                          callback();
                        } finally {
                          ReactCurrentBatchConfig$1.suspense = previousConfig;
                        }
                      });
                    },
                    [config, isPending]
                  );
                  return [startTransition, isPending];
                }

                function updateTransition(config) {
                  var _updateState2 = updateState(false),
                    isPending = _updateState2[0],
                    setPending = _updateState2[1];

                  var startTransition = updateCallback(
                    function(callback) {
                      setPending(true);
                      Scheduler.unstable_next(function() {
                        var previousConfig = ReactCurrentBatchConfig$1.suspense;
                        ReactCurrentBatchConfig$1.suspense =
                          config === undefined ? null : config;

                        try {
                          setPending(false);
                          callback();
                        } finally {
                          ReactCurrentBatchConfig$1.suspense = previousConfig;
                        }
                      });
                    },
                    [config, isPending]
                  );
                  return [startTransition, isPending];
                }

                function dispatchAction(fiber, queue, action) {
                  if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                    {
                      throw Error(
                        'Too many re-renders. React limits the number of renders to prevent an infinite loop.'
                      );
                    }
                  }

                  {
                    !(typeof arguments[3] !== 'function')
                      ? warning$1(
                          false,
                          "State updates from the useState() and useReducer() Hooks don't support the " +
                            'second callback argument. To execute a side effect after ' +
                            'rendering, declare it in the component body with useEffect().'
                        )
                      : void 0;
                  }

                  var alternate = fiber.alternate;

                  if (
                    fiber === currentlyRenderingFiber$1 ||
                    (alternate !== null &&
                      alternate === currentlyRenderingFiber$1)
                  ) {
                    // This is a render phase update. Stash it in a lazily-created map of
                    // queue -> linked list of updates. After this render pass, we'll restart
                    // and apply the stashed updates on top of the work-in-progress hook.
                    didScheduleRenderPhaseUpdate = true;
                    var update = {
                      expirationTime: renderExpirationTime$1,
                      suspenseConfig: null,
                      action: action,
                      eagerReducer: null,
                      eagerState: null,
                      next: null,
                    };

                    {
                      update.priority = getCurrentPriorityLevel();
                    }

                    if (renderPhaseUpdates === null) {
                      renderPhaseUpdates = new Map();
                    }

                    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

                    if (firstRenderPhaseUpdate === undefined) {
                      renderPhaseUpdates.set(queue, update);
                    } else {
                      // Append the update to the end of the list.
                      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

                      while (lastRenderPhaseUpdate.next !== null) {
                        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                      }

                      lastRenderPhaseUpdate.next = update;
                    }
                  } else {
                    var currentTime = requestCurrentTimeForUpdate();
                    var suspenseConfig = requestCurrentSuspenseConfig();
                    var expirationTime = computeExpirationForFiber(
                      currentTime,
                      fiber,
                      suspenseConfig
                    );
                    var _update2 = {
                      expirationTime: expirationTime,
                      suspenseConfig: suspenseConfig,
                      action: action,
                      eagerReducer: null,
                      eagerState: null,
                      next: null,
                    };

                    {
                      _update2.priority = getCurrentPriorityLevel();
                    } // Append the update to the end of the list.

                    var last = queue.last;

                    if (last === null) {
                      // This is the first update. Create a circular list.
                      _update2.next = _update2;
                    } else {
                      var first = last.next;

                      if (first !== null) {
                        // Still circular.
                        _update2.next = first;
                      }

                      last.next = _update2;
                    }

                    queue.last = _update2;

                    if (
                      fiber.expirationTime === NoWork &&
                      (alternate === null ||
                        alternate.expirationTime === NoWork)
                    ) {
                      // The queue is currently empty, which means we can eagerly compute the
                      // next state before entering the render phase. If the new state is the
                      // same as the current state, we may be able to bail out entirely.
                      var lastRenderedReducer = queue.lastRenderedReducer;

                      if (lastRenderedReducer !== null) {
                        var prevDispatcher;

                        {
                          prevDispatcher = ReactCurrentDispatcher$1.current;
                          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                        }

                        try {
                          var currentState = queue.lastRenderedState;
                          var eagerState = lastRenderedReducer(
                            currentState,
                            action
                          ); // Stash the eagerly computed state, and the reducer used to compute
                          // it, on the update object. If the reducer hasn't changed by the
                          // time we enter the render phase, then the eager state can be used
                          // without calling the reducer again.

                          _update2.eagerReducer = lastRenderedReducer;
                          _update2.eagerState = eagerState;

                          if (is$1(eagerState, currentState)) {
                            // Fast path. We can bail out without scheduling React to re-render.
                            // It's still possible that we'll need to rebase this update later,
                            // if the component re-renders for a different reason and by that
                            // time the reducer has changed.
                            return;
                          }
                        } catch (error) {
                          // Suppress the error. It will throw again in the render phase.
                        } finally {
                          {
                            ReactCurrentDispatcher$1.current = prevDispatcher;
                          }
                        }
                      }
                    }

                    {
                      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                      if ('undefined' !== typeof jest) {
                        warnIfNotScopedWithMatchingAct(fiber);
                        warnIfNotCurrentlyActingUpdatesInDev(fiber);
                      }
                    }

                    scheduleWork(fiber, expirationTime);
                  }
                }

                var ContextOnlyDispatcher = {
                  readContext: readContext,
                  useCallback: throwInvalidHookError,
                  useContext: throwInvalidHookError,
                  useEffect: throwInvalidHookError,
                  useImperativeHandle: throwInvalidHookError,
                  useLayoutEffect: throwInvalidHookError,
                  useMemo: throwInvalidHookError,
                  useReducer: throwInvalidHookError,
                  useRef: throwInvalidHookError,
                  useState: throwInvalidHookError,
                  useDebugValue: throwInvalidHookError,
                  useResponder: throwInvalidHookError,
                  useDeferredValue: throwInvalidHookError,
                  useTransition: throwInvalidHookError,
                };
                var HooksDispatcherOnMountInDEV = null;
                var HooksDispatcherOnMountWithHookTypesInDEV = null;
                var HooksDispatcherOnUpdateInDEV = null;
                var InvalidNestedHooksDispatcherOnMountInDEV = null;
                var InvalidNestedHooksDispatcherOnUpdateInDEV = null;

                {
                  var warnInvalidContextAccess = function() {
                    warning$1(
                      false,
                      'Context can only be read while React is rendering. ' +
                        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
                        'In function components, you can read it directly in the function body, but not ' +
                        'inside Hooks like useReducer() or useMemo().'
                    );
                  };

                  var warnInvalidHookAccess = function() {
                    warning$1(
                      false,
                      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +
                        'You can only call Hooks at the top level of your React function. ' +
                        'For more information, see ' +
                        'https://fb.me/rules-of-hooks'
                    );
                  };

                  HooksDispatcherOnMountInDEV = {
                    readContext: function(context, observedBits) {
                      return readContext(context, observedBits);
                    },
                    useCallback: function(callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      return mountCallback(callback, deps);
                    },
                    useContext: function(context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      mountHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function(create, deps) {
                      currentHookNameInDev = 'useEffect';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      return mountEffect(create, deps);
                    },
                    useImperativeHandle: function(ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      return mountImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function(create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      return mountLayoutEffect(create, deps);
                    },
                    useMemo: function(create, deps) {
                      currentHookNameInDev = 'useMemo';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function(reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function(initialValue) {
                      currentHookNameInDev = 'useRef';
                      mountHookTypesDev();
                      return mountRef(initialValue);
                    },
                    useState: function(initialState) {
                      currentHookNameInDev = 'useState';
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function(value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      mountHookTypesDev();
                      return mountDebugValue(value, formatterFn);
                    },
                    useResponder: function(responder, props) {
                      currentHookNameInDev = 'useResponder';
                      mountHookTypesDev();
                      return createResponderListener(responder, props);
                    },
                    useDeferredValue: function(value, config) {
                      currentHookNameInDev = 'useDeferredValue';
                      mountHookTypesDev();
                      return mountDeferredValue(value, config);
                    },
                    useTransition: function(config) {
                      currentHookNameInDev = 'useTransition';
                      mountHookTypesDev();
                      return mountTransition(config);
                    },
                  };
                  HooksDispatcherOnMountWithHookTypesInDEV = {
                    readContext: function(context, observedBits) {
                      return readContext(context, observedBits);
                    },
                    useCallback: function(callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      updateHookTypesDev();
                      return mountCallback(callback, deps);
                    },
                    useContext: function(context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      updateHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function(create, deps) {
                      currentHookNameInDev = 'useEffect';
                      updateHookTypesDev();
                      return mountEffect(create, deps);
                    },
                    useImperativeHandle: function(ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      updateHookTypesDev();
                      return mountImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function(create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      updateHookTypesDev();
                      return mountLayoutEffect(create, deps);
                    },
                    useMemo: function(create, deps) {
                      currentHookNameInDev = 'useMemo';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function(reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function(initialValue) {
                      currentHookNameInDev = 'useRef';
                      updateHookTypesDev();
                      return mountRef(initialValue);
                    },
                    useState: function(initialState) {
                      currentHookNameInDev = 'useState';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function(value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      updateHookTypesDev();
                      return mountDebugValue(value, formatterFn);
                    },
                    useResponder: function(responder, props) {
                      currentHookNameInDev = 'useResponder';
                      updateHookTypesDev();
                      return createResponderListener(responder, props);
                    },
                    useDeferredValue: function(value, config) {
                      currentHookNameInDev = 'useDeferredValue';
                      updateHookTypesDev();
                      return mountDeferredValue(value, config);
                    },
                    useTransition: function(config) {
                      currentHookNameInDev = 'useTransition';
                      updateHookTypesDev();
                      return mountTransition(config);
                    },
                  };
                  HooksDispatcherOnUpdateInDEV = {
                    readContext: function(context, observedBits) {
                      return readContext(context, observedBits);
                    },
                    useCallback: function(callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      updateHookTypesDev();
                      return updateCallback(callback, deps);
                    },
                    useContext: function(context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      updateHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function(create, deps) {
                      currentHookNameInDev = 'useEffect';
                      updateHookTypesDev();
                      return updateEffect(create, deps);
                    },
                    useImperativeHandle: function(ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      updateHookTypesDev();
                      return updateImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function(create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      updateHookTypesDev();
                      return updateLayoutEffect(create, deps);
                    },
                    useMemo: function(create, deps) {
                      currentHookNameInDev = 'useMemo';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function(reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function(initialValue) {
                      currentHookNameInDev = 'useRef';
                      updateHookTypesDev();
                      return updateRef(initialValue);
                    },
                    useState: function(initialState) {
                      currentHookNameInDev = 'useState';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function(value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      updateHookTypesDev();
                      return updateDebugValue(value, formatterFn);
                    },
                    useResponder: function(responder, props) {
                      currentHookNameInDev = 'useResponder';
                      updateHookTypesDev();
                      return createResponderListener(responder, props);
                    },
                    useDeferredValue: function(value, config) {
                      currentHookNameInDev = 'useDeferredValue';
                      updateHookTypesDev();
                      return updateDeferredValue(value, config);
                    },
                    useTransition: function(config) {
                      currentHookNameInDev = 'useTransition';
                      updateHookTypesDev();
                      return updateTransition(config);
                    },
                  };
                  InvalidNestedHooksDispatcherOnMountInDEV = {
                    readContext: function(context, observedBits) {
                      warnInvalidContextAccess();
                      return readContext(context, observedBits);
                    },
                    useCallback: function(callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountCallback(callback, deps);
                    },
                    useContext: function(context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function(create, deps) {
                      currentHookNameInDev = 'useEffect';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountEffect(create, deps);
                    },
                    useImperativeHandle: function(ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function(create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountLayoutEffect(create, deps);
                    },
                    useMemo: function(create, deps) {
                      currentHookNameInDev = 'useMemo';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function(reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function(initialValue) {
                      currentHookNameInDev = 'useRef';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountRef(initialValue);
                    },
                    useState: function(initialState) {
                      currentHookNameInDev = 'useState';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function(value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountDebugValue(value, formatterFn);
                    },
                    useResponder: function(responder, props) {
                      currentHookNameInDev = 'useResponder';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return createResponderListener(responder, props);
                    },
                    useDeferredValue: function(value, config) {
                      currentHookNameInDev = 'useDeferredValue';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountDeferredValue(value, config);
                    },
                    useTransition: function(config) {
                      currentHookNameInDev = 'useTransition';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountTransition(config);
                    },
                  };
                  InvalidNestedHooksDispatcherOnUpdateInDEV = {
                    readContext: function(context, observedBits) {
                      warnInvalidContextAccess();
                      return readContext(context, observedBits);
                    },
                    useCallback: function(callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateCallback(callback, deps);
                    },
                    useContext: function(context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function(create, deps) {
                      currentHookNameInDev = 'useEffect';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateEffect(create, deps);
                    },
                    useImperativeHandle: function(ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function(create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateLayoutEffect(create, deps);
                    },
                    useMemo: function(create, deps) {
                      currentHookNameInDev = 'useMemo';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function(reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function(initialValue) {
                      currentHookNameInDev = 'useRef';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateRef(initialValue);
                    },
                    useState: function(initialState) {
                      currentHookNameInDev = 'useState';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function(value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateDebugValue(value, formatterFn);
                    },
                    useResponder: function(responder, props) {
                      currentHookNameInDev = 'useResponder';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return createResponderListener(responder, props);
                    },
                    useDeferredValue: function(value, config) {
                      currentHookNameInDev = 'useDeferredValue';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateDeferredValue(value, config);
                    },
                    useTransition: function(config) {
                      currentHookNameInDev = 'useTransition';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateTransition(config);
                    },
                  };
                }

                // CommonJS interop named imports.

                var now$2 = Scheduler.unstable_now;
                var commitTime = 0;
                var profilerStartTime = -1;

                function getCommitTime() {
                  return commitTime;
                }

                function recordCommitTime() {
                  if (!enableProfilerTimer) {
                    return;
                  }

                  commitTime = now$2();
                }

                function startProfilerTimer(fiber) {
                  if (!enableProfilerTimer) {
                    return;
                  }

                  profilerStartTime = now$2();

                  if (fiber.actualStartTime < 0) {
                    fiber.actualStartTime = now$2();
                  }
                }

                function stopProfilerTimerIfRunning(fiber) {
                  if (!enableProfilerTimer) {
                    return;
                  }

                  profilerStartTime = -1;
                }

                function stopProfilerTimerIfRunningAndRecordDelta(
                  fiber,
                  overrideBaseTime
                ) {
                  if (!enableProfilerTimer) {
                    return;
                  }

                  if (profilerStartTime >= 0) {
                    var elapsedTime = now$2() - profilerStartTime;
                    fiber.actualDuration += elapsedTime;

                    if (overrideBaseTime) {
                      fiber.selfBaseDuration = elapsedTime;
                    }

                    profilerStartTime = -1;
                  }
                }

                // This may have been an insertion or a hydration.

                var hydrationParentFiber = null;
                var nextHydratableInstance = null;
                var isHydrating = false;

                function warnIfHydrating() {
                  {
                    !!isHydrating
                      ? warning$1(
                          false,
                          'We should not be hydrating here. This is a bug in React. Please file a bug.'
                        )
                      : void 0;
                  }
                }

                function enterHydrationState(fiber) {
                  if (!supportsHydration) {
                    return false;
                  }

                  var parentInstance = fiber.stateNode.containerInfo;
                  nextHydratableInstance = getFirstHydratableChild(
                    parentInstance
                  );
                  hydrationParentFiber = fiber;
                  isHydrating = true;
                  return true;
                }

                function reenterHydrationStateFromDehydratedSuspenseInstance(
                  fiber,
                  suspenseInstance
                ) {
                  if (!supportsHydration) {
                    return false;
                  }

                  nextHydratableInstance = getNextHydratableSibling(
                    suspenseInstance
                  );
                  popToNextHostParent(fiber);
                  isHydrating = true;
                  return true;
                }

                function deleteHydratableInstance(returnFiber, instance) {
                  {
                    switch (returnFiber.tag) {
                      case HostRoot:
                        didNotHydrateContainerInstance(
                          returnFiber.stateNode.containerInfo,
                          instance
                        );
                        break;

                      case HostComponent:
                        didNotHydrateInstance(
                          returnFiber.type,
                          returnFiber.memoizedProps,
                          returnFiber.stateNode,
                          instance
                        );
                        break;
                    }
                  }

                  var childToDelete = createFiberFromHostInstanceForDeletion();
                  childToDelete.stateNode = instance;
                  childToDelete.return = returnFiber;
                  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
                  // these children are not part of the reconciliation list of children.
                  // Even if we abort and rereconcile the children, that will try to hydrate
                  // again and the nodes are still in the host tree so these will be
                  // recreated.

                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = childToDelete;
                    returnFiber.lastEffect = childToDelete;
                  } else {
                    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                  }
                }

                function insertNonHydratedInstance(returnFiber, fiber) {
                  fiber.effectTag = (fiber.effectTag & ~Hydrating) | Placement;

                  {
                    switch (returnFiber.tag) {
                      case HostRoot: {
                        var parentContainer =
                          returnFiber.stateNode.containerInfo;

                        switch (fiber.tag) {
                          case HostComponent:
                            var type = fiber.type;
                            var props = fiber.pendingProps;
                            didNotFindHydratableContainerInstance(
                              parentContainer,
                              type,
                              props
                            );
                            break;

                          case HostText:
                            var text = fiber.pendingProps;
                            didNotFindHydratableContainerTextInstance(
                              parentContainer,
                              text
                            );
                            break;

                          case SuspenseComponent:
                            didNotFindHydratableContainerSuspenseInstance(
                              parentContainer
                            );
                            break;
                        }

                        break;
                      }

                      case HostComponent: {
                        var parentType = returnFiber.type;
                        var parentProps = returnFiber.memoizedProps;
                        var parentInstance = returnFiber.stateNode;

                        switch (fiber.tag) {
                          case HostComponent:
                            var _type = fiber.type;
                            var _props = fiber.pendingProps;
                            didNotFindHydratableInstance(
                              parentType,
                              parentProps,
                              parentInstance,
                              _type,
                              _props
                            );
                            break;

                          case HostText:
                            var _text = fiber.pendingProps;
                            didNotFindHydratableTextInstance(
                              parentType,
                              parentProps,
                              parentInstance,
                              _text
                            );
                            break;

                          case SuspenseComponent:
                            didNotFindHydratableSuspenseInstance(
                              parentType,
                              parentProps,
                              parentInstance
                            );
                            break;
                        }

                        break;
                      }

                      default:
                        return;
                    }
                  }
                }

                function tryHydrate(fiber, nextInstance) {
                  switch (fiber.tag) {
                    case HostComponent: {
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      var instance = canHydrateInstance(
                        nextInstance,
                        type,
                        props
                      );

                      if (instance !== null) {
                        fiber.stateNode = instance;
                        return true;
                      }

                      return false;
                    }

                    case HostText: {
                      var text = fiber.pendingProps;
                      var textInstance = canHydrateTextInstance(
                        nextInstance,
                        text
                      );

                      if (textInstance !== null) {
                        fiber.stateNode = textInstance;
                        return true;
                      }

                      return false;
                    }

                    case SuspenseComponent: {
                      if (enableSuspenseServerRenderer) {
                        var suspenseInstance = canHydrateSuspenseInstance(
                          nextInstance
                        );

                        if (suspenseInstance !== null) {
                          var suspenseState = {
                            dehydrated: suspenseInstance,
                            retryTime: Never,
                          };
                          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
                          // This simplifies the code for getHostSibling and deleting nodes,
                          // since it doesn't have to consider all Suspense boundaries and
                          // check if they're dehydrated ones or not.

                          var dehydratedFragment = createFiberFromDehydratedFragment(
                            suspenseInstance
                          );
                          dehydratedFragment.return = fiber;
                          fiber.child = dehydratedFragment;
                          return true;
                        }
                      }

                      return false;
                    }

                    default:
                      return false;
                  }
                }

                function tryToClaimNextHydratableInstance(fiber) {
                  if (!isHydrating) {
                    return;
                  }

                  var nextInstance = nextHydratableInstance;

                  if (!nextInstance) {
                    // Nothing to hydrate. Make it an insertion.
                    insertNonHydratedInstance(hydrationParentFiber, fiber);
                    isHydrating = false;
                    hydrationParentFiber = fiber;
                    return;
                  }

                  var firstAttemptedInstance = nextInstance;

                  if (!tryHydrate(fiber, nextInstance)) {
                    // If we can't hydrate this instance let's try the next one.
                    // We use this as a heuristic. It's based on intuition and not data so it
                    // might be flawed or unnecessary.
                    nextInstance = getNextHydratableSibling(
                      firstAttemptedInstance
                    );

                    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                      // Nothing to hydrate. Make it an insertion.
                      insertNonHydratedInstance(hydrationParentFiber, fiber);
                      isHydrating = false;
                      hydrationParentFiber = fiber;
                      return;
                    } // We matched the next one, we'll now assume that the first one was
                    // superfluous and we'll delete it. Since we can't eagerly delete it
                    // we'll have to schedule a deletion. To do that, this node needs a dummy
                    // fiber associated with it.

                    deleteHydratableInstance(
                      hydrationParentFiber,
                      firstAttemptedInstance
                    );
                  }

                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(
                    nextInstance
                  );
                }

                function prepareToHydrateHostInstance(
                  fiber,
                  rootContainerInstance,
                  hostContext
                ) {
                  if (!supportsHydration) {
                    {
                      {
                        throw Error(
                          'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }
                  }

                  var instance = fiber.stateNode;
                  var updatePayload = hydrateInstance(
                    instance,
                    fiber.type,
                    fiber.memoizedProps,
                    rootContainerInstance,
                    hostContext,
                    fiber
                  ); // TODO: Type this specific to this type of component.

                  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
                  // is a new ref we mark this as an update.

                  if (updatePayload !== null) {
                    return true;
                  }

                  return false;
                }

                function prepareToHydrateHostTextInstance(fiber) {
                  if (!supportsHydration) {
                    {
                      {
                        throw Error(
                          'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }
                  }

                  var textInstance = fiber.stateNode;
                  var textContent = fiber.memoizedProps;
                  var shouldUpdate = hydrateTextInstance(
                    textInstance,
                    textContent,
                    fiber
                  );

                  {
                    if (shouldUpdate) {
                      // We assume that prepareToHydrateHostTextInstance is called in a context where the
                      // hydration parent is the parent host component of this host text.
                      var returnFiber = hydrationParentFiber;

                      if (returnFiber !== null) {
                        switch (returnFiber.tag) {
                          case HostRoot: {
                            var parentContainer =
                              returnFiber.stateNode.containerInfo;
                            didNotMatchHydratedContainerTextInstance(
                              parentContainer,
                              textInstance,
                              textContent
                            );
                            break;
                          }

                          case HostComponent: {
                            var parentType = returnFiber.type;
                            var parentProps = returnFiber.memoizedProps;
                            var parentInstance = returnFiber.stateNode;
                            didNotMatchHydratedTextInstance(
                              parentType,
                              parentProps,
                              parentInstance,
                              textInstance,
                              textContent
                            );
                            break;
                          }
                        }
                      }
                    }
                  }

                  return shouldUpdate;
                }

                function prepareToHydrateHostSuspenseInstance(fiber) {
                  if (!supportsHydration) {
                    {
                      {
                        throw Error(
                          'Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }
                  }

                  var suspenseState = fiber.memoizedState;
                  var suspenseInstance =
                    suspenseState !== null ? suspenseState.dehydrated : null;

                  if (!suspenseInstance) {
                    {
                      throw Error(
                        'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.'
                      );
                    }
                  }

                  hydrateSuspenseInstance(suspenseInstance, fiber);
                }

                function skipPastDehydratedSuspenseInstance(fiber) {
                  if (!supportsHydration) {
                    {
                      {
                        throw Error(
                          'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }
                  }

                  var suspenseState = fiber.memoizedState;
                  var suspenseInstance =
                    suspenseState !== null ? suspenseState.dehydrated : null;

                  if (!suspenseInstance) {
                    {
                      throw Error(
                        'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.'
                      );
                    }
                  }

                  return getNextHydratableInstanceAfterSuspenseInstance(
                    suspenseInstance
                  );
                }

                function popToNextHostParent(fiber) {
                  var parent = fiber.return;

                  while (
                    parent !== null &&
                    parent.tag !== HostComponent &&
                    parent.tag !== HostRoot &&
                    parent.tag !== SuspenseComponent
                  ) {
                    parent = parent.return;
                  }

                  hydrationParentFiber = parent;
                }

                function popHydrationState(fiber) {
                  if (!supportsHydration) {
                    return false;
                  }

                  if (fiber !== hydrationParentFiber) {
                    // We're deeper than the current hydration context, inside an inserted
                    // tree.
                    return false;
                  }

                  if (!isHydrating) {
                    // If we're not currently hydrating but we're in a hydration context, then
                    // we were an insertion and now need to pop up reenter hydration of our
                    // siblings.
                    popToNextHostParent(fiber);
                    isHydrating = true;
                    return false;
                  }

                  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
                  // We only do this deeper than head and body since they tend to have random
                  // other nodes in them. We also ignore components with pure text content in
                  // side of them.
                  // TODO: Better heuristic.

                  if (
                    fiber.tag !== HostComponent ||
                    (type !== 'head' &&
                      type !== 'body' &&
                      !shouldSetTextContent(type, fiber.memoizedProps))
                  ) {
                    var nextInstance = nextHydratableInstance;

                    while (nextInstance) {
                      deleteHydratableInstance(fiber, nextInstance);
                      nextInstance = getNextHydratableSibling(nextInstance);
                    }
                  }

                  popToNextHostParent(fiber);

                  if (fiber.tag === SuspenseComponent) {
                    nextHydratableInstance = skipPastDehydratedSuspenseInstance(
                      fiber
                    );
                  } else {
                    nextHydratableInstance = hydrationParentFiber
                      ? getNextHydratableSibling(fiber.stateNode)
                      : null;
                  }

                  return true;
                }

                function resetHydrationState() {
                  if (!supportsHydration) {
                    return;
                  }

                  hydrationParentFiber = null;
                  nextHydratableInstance = null;
                  isHydrating = false;
                }

                var ReactCurrentOwner$2 =
                  ReactSharedInternals.ReactCurrentOwner;
                var didReceiveUpdate = false;
                var didWarnAboutBadClass;
                var didWarnAboutModulePatternComponent;
                var didWarnAboutContextTypeOnFunctionComponent;
                var didWarnAboutGetDerivedStateOnFunctionComponent;
                var didWarnAboutFunctionRefs;
                var didWarnAboutReassigningProps;
                var didWarnAboutMaxDuration;
                var didWarnAboutRevealOrder;
                var didWarnAboutTailOptions;
                var didWarnAboutDefaultPropsOnFunctionComponent;

                {
                  didWarnAboutBadClass = {};
                  didWarnAboutModulePatternComponent = {};
                  didWarnAboutContextTypeOnFunctionComponent = {};
                  didWarnAboutGetDerivedStateOnFunctionComponent = {};
                  didWarnAboutFunctionRefs = {};
                  didWarnAboutReassigningProps = false;
                  didWarnAboutMaxDuration = false;
                  didWarnAboutRevealOrder = {};
                  didWarnAboutTailOptions = {};
                  didWarnAboutDefaultPropsOnFunctionComponent = {};
                }

                function reconcileChildren(
                  current$$1,
                  workInProgress,
                  nextChildren,
                  renderExpirationTime
                ) {
                  if (current$$1 === null) {
                    // If this is a fresh new component that hasn't been rendered yet, we
                    // won't update its child set by applying minimal side-effects. Instead,
                    // we will add them all to the child before it gets rendered. That means
                    // we can optimize this reconciliation pass by not tracking side-effects.
                    workInProgress.child = mountChildFibers(
                      workInProgress,
                      null,
                      nextChildren,
                      renderExpirationTime
                    );
                  } else {
                    // If the current child is the same as the work in progress, it means that
                    // we haven't yet started any work on these children. Therefore, we use
                    // the clone algorithm to create a copy of all the current children.
                    // If we had any progressed work already, that is invalid at this point so
                    // let's throw it out.
                    workInProgress.child = reconcileChildFibers(
                      workInProgress,
                      current$$1.child,
                      nextChildren,
                      renderExpirationTime
                    );
                  }
                }

                function forceUnmountCurrentAndReconcile(
                  current$$1,
                  workInProgress,
                  nextChildren,
                  renderExpirationTime
                ) {
                  // This function is fork of reconcileChildren. It's used in cases where we
                  // want to reconcile without matching against the existing set. This has the
                  // effect of all current children being unmounted; even if the type and key
                  // are the same, the old child is unmounted and a new child is created.
                  //
                  // To do this, we're going to go through the reconcile algorithm twice. In
                  // the first pass, we schedule a deletion for all the current children by
                  // passing null.
                  workInProgress.child = reconcileChildFibers(
                    workInProgress,
                    current$$1.child,
                    null,
                    renderExpirationTime
                  ); // In the second pass, we mount the new children. The trick here is that we
                  // pass null in place of where we usually pass the current child set. This has
                  // the effect of remounting all children regardless of whether their their
                  // identity matches.

                  workInProgress.child = reconcileChildFibers(
                    workInProgress,
                    null,
                    nextChildren,
                    renderExpirationTime
                  );
                }

                function updateForwardRef(
                  current$$1,
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime
                ) {
                  // TODO: current can be non-null here even if the component
                  // hasn't yet mounted. This happens after the first render suspends.
                  // We'll need to figure out if this is fine or can cause issues.
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      // Lazy component props can't be validated in createElement
                      // because they're only guaranteed to be resolved here.
                      var innerPropTypes = Component.propTypes;

                      if (innerPropTypes) {
                        checkPropTypes(
                          innerPropTypes,
                          nextProps, // Resolved props
                          'prop',
                          getComponentName(Component),
                          getCurrentFiberStackInDev
                        );
                      }
                    }
                  }

                  var render = Component.render;
                  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

                  var nextChildren;
                  prepareToReadContext(workInProgress, renderExpirationTime);

                  {
                    ReactCurrentOwner$2.current = workInProgress;
                    setCurrentPhase('render');
                    nextChildren = renderWithHooks(
                      current$$1,
                      workInProgress,
                      render,
                      nextProps,
                      ref,
                      renderExpirationTime
                    );

                    if (
                      debugRenderPhaseSideEffectsForStrictMode &&
                      workInProgress.mode & StrictMode
                    ) {
                      // Only double-render components with Hooks
                      if (workInProgress.memoizedState !== null) {
                        nextChildren = renderWithHooks(
                          current$$1,
                          workInProgress,
                          render,
                          nextProps,
                          ref,
                          renderExpirationTime
                        );
                      }
                    }

                    setCurrentPhase(null);
                  }

                  if (current$$1 !== null && !didReceiveUpdate) {
                    bailoutHooks(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                    return bailoutOnAlreadyFinishedWork(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                  } // React DevTools reads this flag.

                  workInProgress.effectTag |= PerformedWork;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function updateMemoComponent(
                  current$$1,
                  workInProgress,
                  Component,
                  nextProps,
                  updateExpirationTime,
                  renderExpirationTime
                ) {
                  if (current$$1 === null) {
                    var type = Component.type;

                    if (
                      isSimpleFunctionComponent(type) &&
                      Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
                      Component.defaultProps === undefined
                    ) {
                      var resolvedType = type;

                      {
                        resolvedType = resolveFunctionForHotReloading(type);
                      } // If this is a plain function component without default props,
                      // and with only the default shallow comparison, we upgrade it
                      // to a SimpleMemoComponent to allow fast path updates.

                      workInProgress.tag = SimpleMemoComponent;
                      workInProgress.type = resolvedType;

                      {
                        validateFunctionComponentInDev(workInProgress, type);
                      }

                      return updateSimpleMemoComponent(
                        current$$1,
                        workInProgress,
                        resolvedType,
                        nextProps,
                        updateExpirationTime,
                        renderExpirationTime
                      );
                    }

                    {
                      var innerPropTypes = type.propTypes;

                      if (innerPropTypes) {
                        // Inner memo component props aren't currently validated in createElement.
                        // We could move it there, but we'd still need this for lazy code path.
                        checkPropTypes(
                          innerPropTypes,
                          nextProps, // Resolved props
                          'prop',
                          getComponentName(type),
                          getCurrentFiberStackInDev
                        );
                      }
                    }

                    var child = createFiberFromTypeAndProps(
                      Component.type,
                      null,
                      nextProps,
                      null,
                      workInProgress.mode,
                      renderExpirationTime
                    );
                    child.ref = workInProgress.ref;
                    child.return = workInProgress;
                    workInProgress.child = child;
                    return child;
                  }

                  {
                    var _type = Component.type;
                    var _innerPropTypes = _type.propTypes;

                    if (_innerPropTypes) {
                      // Inner memo component props aren't currently validated in createElement.
                      // We could move it there, but we'd still need this for lazy code path.
                      checkPropTypes(
                        _innerPropTypes,
                        nextProps, // Resolved props
                        'prop',
                        getComponentName(_type),
                        getCurrentFiberStackInDev
                      );
                    }
                  }

                  var currentChild = current$$1.child; // This is always exactly one child

                  if (updateExpirationTime < renderExpirationTime) {
                    // This will be the props with resolved defaultProps,
                    // unlike current.memoizedProps which will be the unresolved ones.
                    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

                    var compare = Component.compare;
                    compare = compare !== null ? compare : shallowEqual;

                    if (
                      compare(prevProps, nextProps) &&
                      current$$1.ref === workInProgress.ref
                    ) {
                      return bailoutOnAlreadyFinishedWork(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );
                    }
                  } // React DevTools reads this flag.

                  workInProgress.effectTag |= PerformedWork;
                  var newChild = createWorkInProgress(
                    currentChild,
                    nextProps,
                    renderExpirationTime
                  );
                  newChild.ref = workInProgress.ref;
                  newChild.return = workInProgress;
                  workInProgress.child = newChild;
                  return newChild;
                }

                function updateSimpleMemoComponent(
                  current$$1,
                  workInProgress,
                  Component,
                  nextProps,
                  updateExpirationTime,
                  renderExpirationTime
                ) {
                  // TODO: current can be non-null here even if the component
                  // hasn't yet mounted. This happens when the inner render suspends.
                  // We'll need to figure out if this is fine or can cause issues.
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      // Lazy component props can't be validated in createElement
                      // because they're only guaranteed to be resolved here.
                      var outerMemoType = workInProgress.elementType;

                      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                        // We warn when you define propTypes on lazy()
                        // so let's just skip over it to find memo() outer wrapper.
                        // Inner props for memo are validated later.
                        outerMemoType = refineResolvedLazyComponent(
                          outerMemoType
                        );
                      }

                      var outerPropTypes =
                        outerMemoType && outerMemoType.propTypes;

                      if (outerPropTypes) {
                        checkPropTypes(
                          outerPropTypes,
                          nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                          'prop',
                          getComponentName(outerMemoType),
                          getCurrentFiberStackInDev
                        );
                      } // Inner propTypes will be validated in the function component path.
                    }
                  }

                  if (current$$1 !== null) {
                    var prevProps = current$$1.memoizedProps;

                    if (
                      shallowEqual(prevProps, nextProps) &&
                      current$$1.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload:
                      workInProgress.type === current$$1.type
                    ) {
                      didReceiveUpdate = false;

                      if (updateExpirationTime < renderExpirationTime) {
                        return bailoutOnAlreadyFinishedWork(
                          current$$1,
                          workInProgress,
                          renderExpirationTime
                        );
                      }
                    }
                  }

                  return updateFunctionComponent(
                    current$$1,
                    workInProgress,
                    Component,
                    nextProps,
                    renderExpirationTime
                  );
                }

                function updateFragment(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var nextChildren = workInProgress.pendingProps;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function updateMode(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var nextChildren = workInProgress.pendingProps.children;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function updateProfiler(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  if (enableProfilerTimer) {
                    workInProgress.effectTag |= Update;
                  }

                  var nextProps = workInProgress.pendingProps;
                  var nextChildren = nextProps.children;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function markRef(current$$1, workInProgress) {
                  var ref = workInProgress.ref;

                  if (
                    (current$$1 === null && ref !== null) ||
                    (current$$1 !== null && current$$1.ref !== ref)
                  ) {
                    // Schedule a Ref effect
                    workInProgress.effectTag |= Ref;
                  }
                }

                function updateFunctionComponent(
                  current$$1,
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime
                ) {
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      // Lazy component props can't be validated in createElement
                      // because they're only guaranteed to be resolved here.
                      var innerPropTypes = Component.propTypes;

                      if (innerPropTypes) {
                        checkPropTypes(
                          innerPropTypes,
                          nextProps, // Resolved props
                          'prop',
                          getComponentName(Component),
                          getCurrentFiberStackInDev
                        );
                      }
                    }
                  }

                  var context;

                  if (!disableLegacyContext) {
                    var unmaskedContext = getUnmaskedContext(
                      workInProgress,
                      Component,
                      true
                    );
                    context = getMaskedContext(workInProgress, unmaskedContext);
                  }

                  var nextChildren;
                  prepareToReadContext(workInProgress, renderExpirationTime);

                  {
                    ReactCurrentOwner$2.current = workInProgress;
                    setCurrentPhase('render');
                    nextChildren = renderWithHooks(
                      current$$1,
                      workInProgress,
                      Component,
                      nextProps,
                      context,
                      renderExpirationTime
                    );

                    if (
                      debugRenderPhaseSideEffectsForStrictMode &&
                      workInProgress.mode & StrictMode
                    ) {
                      // Only double-render components with Hooks
                      if (workInProgress.memoizedState !== null) {
                        nextChildren = renderWithHooks(
                          current$$1,
                          workInProgress,
                          Component,
                          nextProps,
                          context,
                          renderExpirationTime
                        );
                      }
                    }

                    setCurrentPhase(null);
                  }

                  if (current$$1 !== null && !didReceiveUpdate) {
                    bailoutHooks(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                    return bailoutOnAlreadyFinishedWork(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                  } // React DevTools reads this flag.

                  workInProgress.effectTag |= PerformedWork;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function updateClassComponent(
                  current$$1,
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime
                ) {
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      // Lazy component props can't be validated in createElement
                      // because they're only guaranteed to be resolved here.
                      var innerPropTypes = Component.propTypes;

                      if (innerPropTypes) {
                        checkPropTypes(
                          innerPropTypes,
                          nextProps, // Resolved props
                          'prop',
                          getComponentName(Component),
                          getCurrentFiberStackInDev
                        );
                      }
                    }
                  } // Push context providers early to prevent context stack mismatches.
                  // During mounting we don't know the child context yet as the instance doesn't exist.
                  // We will invalidate the child context in finishClassComponent() right after rendering.

                  var hasContext;

                  if (isContextProvider(Component)) {
                    hasContext = true;
                    pushContextProvider(workInProgress);
                  } else {
                    hasContext = false;
                  }

                  prepareToReadContext(workInProgress, renderExpirationTime);
                  var instance = workInProgress.stateNode;
                  var shouldUpdate;

                  if (instance === null) {
                    if (current$$1 !== null) {
                      // An class component without an instance only mounts if it suspended
                      // inside a non- concurrent tree, in an inconsistent state. We want to
                      // tree it like a new mount, even though an empty version of it already
                      // committed. Disconnect the alternate pointers.
                      current$$1.alternate = null;
                      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                      workInProgress.effectTag |= Placement;
                    } // In the initial pass we might need to construct the instance.

                    constructClassInstance(
                      workInProgress,
                      Component,
                      nextProps,
                      renderExpirationTime
                    );
                    mountClassInstance(
                      workInProgress,
                      Component,
                      nextProps,
                      renderExpirationTime
                    );
                    shouldUpdate = true;
                  } else if (current$$1 === null) {
                    // In a resume, we'll already have an instance we can reuse.
                    shouldUpdate = resumeMountClassInstance(
                      workInProgress,
                      Component,
                      nextProps,
                      renderExpirationTime
                    );
                  } else {
                    shouldUpdate = updateClassInstance(
                      current$$1,
                      workInProgress,
                      Component,
                      nextProps,
                      renderExpirationTime
                    );
                  }

                  var nextUnitOfWork = finishClassComponent(
                    current$$1,
                    workInProgress,
                    Component,
                    shouldUpdate,
                    hasContext,
                    renderExpirationTime
                  );

                  {
                    var inst = workInProgress.stateNode;

                    if (inst.props !== nextProps) {
                      !didWarnAboutReassigningProps
                        ? warning$1(
                            false,
                            'It looks like %s is reassigning its own `this.props` while rendering. ' +
                              'This is not supported and can lead to confusing bugs.',
                            getComponentName(workInProgress.type) ||
                              'a component'
                          )
                        : void 0;
                      didWarnAboutReassigningProps = true;
                    }
                  }

                  return nextUnitOfWork;
                }

                function finishClassComponent(
                  current$$1,
                  workInProgress,
                  Component,
                  shouldUpdate,
                  hasContext,
                  renderExpirationTime
                ) {
                  // Refs should update even if shouldComponentUpdate returns false
                  markRef(current$$1, workInProgress);
                  var didCaptureError =
                    (workInProgress.effectTag & DidCapture) !== NoEffect;

                  if (!shouldUpdate && !didCaptureError) {
                    // Context providers should defer to sCU for rendering
                    if (hasContext) {
                      invalidateContextProvider(
                        workInProgress,
                        Component,
                        false
                      );
                    }

                    return bailoutOnAlreadyFinishedWork(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                  }

                  var instance = workInProgress.stateNode; // Rerender

                  ReactCurrentOwner$2.current = workInProgress;
                  var nextChildren;

                  if (
                    didCaptureError &&
                    typeof Component.getDerivedStateFromError !== 'function'
                  ) {
                    // If we captured an error, but getDerivedStateFrom catch is not defined,
                    // unmount all the children. componentDidCatch will schedule an update to
                    // re-render a fallback. This is temporary until we migrate everyone to
                    // the new API.
                    // TODO: Warn in a future release.
                    nextChildren = null;

                    if (enableProfilerTimer) {
                      stopProfilerTimerIfRunning(workInProgress);
                    }
                  } else {
                    {
                      setCurrentPhase('render');
                      nextChildren = instance.render();

                      if (
                        debugRenderPhaseSideEffectsForStrictMode &&
                        workInProgress.mode & StrictMode
                      ) {
                        instance.render();
                      }

                      setCurrentPhase(null);
                    }
                  } // React DevTools reads this flag.

                  workInProgress.effectTag |= PerformedWork;

                  if (current$$1 !== null && didCaptureError) {
                    // If we're recovering from an error, reconcile without reusing any of
                    // the existing children. Conceptually, the normal children and the children
                    // that are shown on error are two different sets, so we shouldn't reuse
                    // normal children even if their identities match.
                    forceUnmountCurrentAndReconcile(
                      current$$1,
                      workInProgress,
                      nextChildren,
                      renderExpirationTime
                    );
                  } else {
                    reconcileChildren(
                      current$$1,
                      workInProgress,
                      nextChildren,
                      renderExpirationTime
                    );
                  } // Memoize state using the values we just used to render.
                  // TODO: Restructure so we never read values from the instance.

                  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

                  if (hasContext) {
                    invalidateContextProvider(workInProgress, Component, true);
                  }

                  return workInProgress.child;
                }

                function pushHostRootContext(workInProgress) {
                  var root = workInProgress.stateNode;

                  if (root.pendingContext) {
                    pushTopLevelContextObject(
                      workInProgress,
                      root.pendingContext,
                      root.pendingContext !== root.context
                    );
                  } else if (root.context) {
                    // Should always be set
                    pushTopLevelContextObject(
                      workInProgress,
                      root.context,
                      false
                    );
                  }

                  pushHostContainer(workInProgress, root.containerInfo);
                }

                function updateHostRoot(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  pushHostRootContext(workInProgress);
                  var updateQueue = workInProgress.updateQueue;

                  if (!(updateQueue !== null)) {
                    {
                      throw Error(
                        'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.'
                      );
                    }
                  }

                  var nextProps = workInProgress.pendingProps;
                  var prevState = workInProgress.memoizedState;
                  var prevChildren =
                    prevState !== null ? prevState.element : null;
                  processUpdateQueue(
                    workInProgress,
                    updateQueue,
                    nextProps,
                    null,
                    renderExpirationTime
                  );
                  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
                  // being called "element".

                  var nextChildren = nextState.element;

                  if (nextChildren === prevChildren) {
                    // If the state is the same as before, that's a bailout because we had
                    // no work that expires at this time.
                    resetHydrationState();
                    return bailoutOnAlreadyFinishedWork(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                  }

                  var root = workInProgress.stateNode;

                  if (root.hydrate && enterHydrationState(workInProgress)) {
                    // If we don't have any current children this might be the first pass.
                    // We always try to hydrate. If this isn't a hydration pass there won't
                    // be any children to hydrate which is effectively the same thing as
                    // not hydrating.
                    var child = mountChildFibers(
                      workInProgress,
                      null,
                      nextChildren,
                      renderExpirationTime
                    );
                    workInProgress.child = child;
                    var node = child;

                    while (node) {
                      // Mark each child as hydrating. This is a fast path to know whether this
                      // tree is part of a hydrating tree. This is used to determine if a child
                      // node has fully mounted yet, and for scheduling event replaying.
                      // Conceptually this is similar to Placement in that a new subtree is
                      // inserted into the React tree here. It just happens to not need DOM
                      // mutations because it already exists.
                      node.effectTag =
                        (node.effectTag & ~Placement) | Hydrating;
                      node = node.sibling;
                    }
                  } else {
                    // Otherwise reset hydration state in case we aborted and resumed another
                    // root.
                    reconcileChildren(
                      current$$1,
                      workInProgress,
                      nextChildren,
                      renderExpirationTime
                    );
                    resetHydrationState();
                  }

                  return workInProgress.child;
                }

                function updateHostComponent(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  pushHostContext(workInProgress);

                  if (current$$1 === null) {
                    tryToClaimNextHydratableInstance(workInProgress);
                  }

                  var type = workInProgress.type;
                  var nextProps = workInProgress.pendingProps;
                  var prevProps =
                    current$$1 !== null ? current$$1.memoizedProps : null;
                  var nextChildren = nextProps.children;
                  var isDirectTextChild = shouldSetTextContent(type, nextProps);

                  if (isDirectTextChild) {
                    // We special case a direct text child of a host node. This is a common
                    // case. We won't handle it as a reified child. We will instead handle
                    // this in the host environment that also have access to this prop. That
                    // avoids allocating another HostText fiber and traversing it.
                    nextChildren = null;
                  } else if (
                    prevProps !== null &&
                    shouldSetTextContent(type, prevProps)
                  ) {
                    // If we're switching from a direct text child to a normal child, or to
                    // empty, we need to schedule the text content to be reset.
                    workInProgress.effectTag |= ContentReset;
                  }

                  markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

                  if (
                    workInProgress.mode & ConcurrentMode &&
                    renderExpirationTime !== Never &&
                    shouldDeprioritizeSubtree(type, nextProps)
                  ) {
                    if (enableSchedulerTracing) {
                      markSpawnedWork(Never);
                    } // Schedule this fiber to re-render at offscreen priority. Then bailout.

                    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                    return null;
                  }

                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function updateHostText(current$$1, workInProgress) {
                  if (current$$1 === null) {
                    tryToClaimNextHydratableInstance(workInProgress);
                  } // Nothing to do here. This is terminal. We'll do the completion step
                  // immediately after.

                  return null;
                }

                function mountLazyComponent(
                  _current,
                  workInProgress,
                  elementType,
                  updateExpirationTime,
                  renderExpirationTime
                ) {
                  if (_current !== null) {
                    // An lazy component only mounts if it suspended inside a non-
                    // concurrent tree, in an inconsistent state. We want to treat it like
                    // a new mount, even though an empty version of it already committed.
                    // Disconnect the alternate pointers.
                    _current.alternate = null;
                    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                    workInProgress.effectTag |= Placement;
                  }

                  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
                  // Cancel and resume right after we know the tag.

                  cancelWorkTimer(workInProgress);
                  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

                  workInProgress.type = Component;
                  var resolvedTag = (workInProgress.tag = resolveLazyComponentTag(
                    Component
                  ));
                  startWorkTimer(workInProgress);
                  var resolvedProps = resolveDefaultProps(Component, props);
                  var child;

                  switch (resolvedTag) {
                    case FunctionComponent: {
                      {
                        validateFunctionComponentInDev(
                          workInProgress,
                          Component
                        );
                        workInProgress.type = Component = resolveFunctionForHotReloading(
                          Component
                        );
                      }

                      child = updateFunctionComponent(
                        null,
                        workInProgress,
                        Component,
                        resolvedProps,
                        renderExpirationTime
                      );
                      break;
                    }

                    case ClassComponent: {
                      {
                        workInProgress.type = Component = resolveClassForHotReloading(
                          Component
                        );
                      }

                      child = updateClassComponent(
                        null,
                        workInProgress,
                        Component,
                        resolvedProps,
                        renderExpirationTime
                      );
                      break;
                    }

                    case ForwardRef: {
                      {
                        workInProgress.type = Component = resolveForwardRefForHotReloading(
                          Component
                        );
                      }

                      child = updateForwardRef(
                        null,
                        workInProgress,
                        Component,
                        resolvedProps,
                        renderExpirationTime
                      );
                      break;
                    }

                    case MemoComponent: {
                      {
                        if (
                          workInProgress.type !== workInProgress.elementType
                        ) {
                          var outerPropTypes = Component.propTypes;

                          if (outerPropTypes) {
                            checkPropTypes(
                              outerPropTypes,
                              resolvedProps, // Resolved for outer only
                              'prop',
                              getComponentName(Component),
                              getCurrentFiberStackInDev
                            );
                          }
                        }
                      }

                      child = updateMemoComponent(
                        null,
                        workInProgress,
                        Component,
                        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
                        updateExpirationTime,
                        renderExpirationTime
                      );
                      break;
                    }

                    default: {
                      var hint = '';

                      {
                        if (
                          Component !== null &&
                          typeof Component === 'object' &&
                          Component.$$typeof === REACT_LAZY_TYPE
                        ) {
                          hint =
                            ' Did you wrap a component in React.lazy() more than once?';
                        }
                      } // This message intentionally doesn't mention ForwardRef or MemoComponent
                      // because the fact that it's a separate type of work is an
                      // implementation detail.

                      {
                        {
                          throw Error(
                            'Element type is invalid. Received a promise that resolves to: ' +
                              Component +
                              '. Lazy element type must resolve to a class or function.' +
                              hint
                          );
                        }
                      }
                    }
                  }

                  return child;
                }

                function mountIncompleteClassComponent(
                  _current,
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime
                ) {
                  if (_current !== null) {
                    // An incomplete component only mounts if it suspended inside a non-
                    // concurrent tree, in an inconsistent state. We want to treat it like
                    // a new mount, even though an empty version of it already committed.
                    // Disconnect the alternate pointers.
                    _current.alternate = null;
                    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                    workInProgress.effectTag |= Placement;
                  } // Promote the fiber to a class and try rendering again.

                  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
                  // Push context providers early to prevent context stack mismatches.
                  // During mounting we don't know the child context yet as the instance doesn't exist.
                  // We will invalidate the child context in finishClassComponent() right after rendering.

                  var hasContext;

                  if (isContextProvider(Component)) {
                    hasContext = true;
                    pushContextProvider(workInProgress);
                  } else {
                    hasContext = false;
                  }

                  prepareToReadContext(workInProgress, renderExpirationTime);
                  constructClassInstance(
                    workInProgress,
                    Component,
                    nextProps,
                    renderExpirationTime
                  );
                  mountClassInstance(
                    workInProgress,
                    Component,
                    nextProps,
                    renderExpirationTime
                  );
                  return finishClassComponent(
                    null,
                    workInProgress,
                    Component,
                    true,
                    hasContext,
                    renderExpirationTime
                  );
                }

                function mountIndeterminateComponent(
                  _current,
                  workInProgress,
                  Component,
                  renderExpirationTime
                ) {
                  if (_current !== null) {
                    // An indeterminate component only mounts if it suspended inside a non-
                    // concurrent tree, in an inconsistent state. We want to treat it like
                    // a new mount, even though an empty version of it already committed.
                    // Disconnect the alternate pointers.
                    _current.alternate = null;
                    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                    workInProgress.effectTag |= Placement;
                  }

                  var props = workInProgress.pendingProps;
                  var context;

                  if (!disableLegacyContext) {
                    var unmaskedContext = getUnmaskedContext(
                      workInProgress,
                      Component,
                      false
                    );
                    context = getMaskedContext(workInProgress, unmaskedContext);
                  }

                  prepareToReadContext(workInProgress, renderExpirationTime);
                  var value;

                  {
                    if (
                      Component.prototype &&
                      typeof Component.prototype.render === 'function'
                    ) {
                      var componentName =
                        getComponentName(Component) || 'Unknown';

                      if (!didWarnAboutBadClass[componentName]) {
                        warningWithoutStack$1(
                          false,
                          "The <%s /> component appears to have a render method, but doesn't extend React.Component. " +
                            'This is likely to cause errors. Change %s to extend React.Component instead.',
                          componentName,
                          componentName
                        );
                        didWarnAboutBadClass[componentName] = true;
                      }
                    }

                    if (workInProgress.mode & StrictMode) {
                      ReactStrictModeWarnings.recordLegacyContextWarning(
                        workInProgress,
                        null
                      );
                    }

                    ReactCurrentOwner$2.current = workInProgress;
                    value = renderWithHooks(
                      null,
                      workInProgress,
                      Component,
                      props,
                      context,
                      renderExpirationTime
                    );
                  } // React DevTools reads this flag.

                  workInProgress.effectTag |= PerformedWork;

                  if (
                    typeof value === 'object' &&
                    value !== null &&
                    typeof value.render === 'function' &&
                    value.$$typeof === undefined
                  ) {
                    {
                      var _componentName =
                        getComponentName(Component) || 'Unknown';

                      if (!didWarnAboutModulePatternComponent[_componentName]) {
                        warningWithoutStack$1(
                          false,
                          'The <%s /> component appears to be a function component that returns a class instance. ' +
                            'Change %s to a class that extends React.Component instead. ' +
                            "If you can't use a class try assigning the prototype on the function as a workaround. " +
                            "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " +
                            'cannot be called with `new` by React.',
                          _componentName,
                          _componentName,
                          _componentName
                        );
                        didWarnAboutModulePatternComponent[
                          _componentName
                        ] = true;
                      }
                    } // Proceed under the assumption that this is a class instance

                    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

                    resetHooks(); // Push context providers early to prevent context stack mismatches.
                    // During mounting we don't know the child context yet as the instance doesn't exist.
                    // We will invalidate the child context in finishClassComponent() right after rendering.

                    var hasContext = false;

                    if (isContextProvider(Component)) {
                      hasContext = true;
                      pushContextProvider(workInProgress);
                    } else {
                      hasContext = false;
                    }

                    workInProgress.memoizedState =
                      value.state !== null && value.state !== undefined
                        ? value.state
                        : null;
                    var getDerivedStateFromProps =
                      Component.getDerivedStateFromProps;

                    if (typeof getDerivedStateFromProps === 'function') {
                      applyDerivedStateFromProps(
                        workInProgress,
                        Component,
                        getDerivedStateFromProps,
                        props
                      );
                    }

                    adoptClassInstance(workInProgress, value);
                    mountClassInstance(
                      workInProgress,
                      Component,
                      props,
                      renderExpirationTime
                    );
                    return finishClassComponent(
                      null,
                      workInProgress,
                      Component,
                      true,
                      hasContext,
                      renderExpirationTime
                    );
                  } else {
                    // Proceed under the assumption that this is a function component
                    workInProgress.tag = FunctionComponent;

                    {
                      if (disableLegacyContext && Component.contextTypes) {
                        warningWithoutStack$1(
                          false,
                          '%s uses the legacy contextTypes API which is no longer supported. ' +
                            'Use React.createContext() with React.useContext() instead.',
                          getComponentName(Component) || 'Unknown'
                        );
                      }

                      if (
                        debugRenderPhaseSideEffectsForStrictMode &&
                        workInProgress.mode & StrictMode
                      ) {
                        // Only double-render components with Hooks
                        if (workInProgress.memoizedState !== null) {
                          value = renderWithHooks(
                            null,
                            workInProgress,
                            Component,
                            props,
                            context,
                            renderExpirationTime
                          );
                        }
                      }
                    }

                    reconcileChildren(
                      null,
                      workInProgress,
                      value,
                      renderExpirationTime
                    );

                    {
                      validateFunctionComponentInDev(workInProgress, Component);
                    }

                    return workInProgress.child;
                  }
                }

                function validateFunctionComponentInDev(
                  workInProgress,
                  Component
                ) {
                  if (Component) {
                    !!Component.childContextTypes
                      ? warningWithoutStack$1(
                          false,
                          '%s(...): childContextTypes cannot be defined on a function component.',
                          Component.displayName || Component.name || 'Component'
                        )
                      : void 0;
                  }

                  if (workInProgress.ref !== null) {
                    var info = '';
                    var ownerName = getCurrentFiberOwnerNameInDevOrNull();

                    if (ownerName) {
                      info +=
                        '\n\nCheck the render method of `' + ownerName + '`.';
                    }

                    var warningKey = ownerName || workInProgress._debugID || '';
                    var debugSource = workInProgress._debugSource;

                    if (debugSource) {
                      warningKey =
                        debugSource.fileName + ':' + debugSource.lineNumber;
                    }

                    if (!didWarnAboutFunctionRefs[warningKey]) {
                      didWarnAboutFunctionRefs[warningKey] = true;
                      warning$1(
                        false,
                        'Function components cannot be given refs. ' +
                          'Attempts to access this ref will fail. ' +
                          'Did you mean to use React.forwardRef()?%s',
                        info
                      );
                    }
                  }

                  if (
                    warnAboutDefaultPropsOnFunctionComponents &&
                    Component.defaultProps !== undefined
                  ) {
                    var componentName =
                      getComponentName(Component) || 'Unknown';

                    if (
                      !didWarnAboutDefaultPropsOnFunctionComponent[
                        componentName
                      ]
                    ) {
                      warningWithoutStack$1(
                        false,
                        '%s: Support for defaultProps will be removed from function components ' +
                          'in a future major release. Use JavaScript default parameters instead.',
                        componentName
                      );
                      didWarnAboutDefaultPropsOnFunctionComponent[
                        componentName
                      ] = true;
                    }
                  }

                  if (
                    typeof Component.getDerivedStateFromProps === 'function'
                  ) {
                    var _componentName2 =
                      getComponentName(Component) || 'Unknown';

                    if (
                      !didWarnAboutGetDerivedStateOnFunctionComponent[
                        _componentName2
                      ]
                    ) {
                      warningWithoutStack$1(
                        false,
                        '%s: Function components do not support getDerivedStateFromProps.',
                        _componentName2
                      );
                      didWarnAboutGetDerivedStateOnFunctionComponent[
                        _componentName2
                      ] = true;
                    }
                  }

                  if (
                    typeof Component.contextType === 'object' &&
                    Component.contextType !== null
                  ) {
                    var _componentName3 =
                      getComponentName(Component) || 'Unknown';

                    if (
                      !didWarnAboutContextTypeOnFunctionComponent[
                        _componentName3
                      ]
                    ) {
                      warningWithoutStack$1(
                        false,
                        '%s: Function components do not support contextType.',
                        _componentName3
                      );
                      didWarnAboutContextTypeOnFunctionComponent[
                        _componentName3
                      ] = true;
                    }
                  }
                }

                var SUSPENDED_MARKER = {
                  dehydrated: null,
                  retryTime: NoWork,
                };

                function shouldRemainOnFallback(
                  suspenseContext,
                  current$$1,
                  workInProgress
                ) {
                  // If the context is telling us that we should show a fallback, and we're not
                  // already showing content, then we should show the fallback instead.
                  return (
                    hasSuspenseContext(
                      suspenseContext,
                      ForceSuspenseFallback
                    ) &&
                    (current$$1 === null || current$$1.memoizedState !== null)
                  );
                }

                function updateSuspenseComponent(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var mode = workInProgress.mode;
                  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

                  {
                    if (shouldSuspend(workInProgress)) {
                      workInProgress.effectTag |= DidCapture;
                    }
                  }

                  var suspenseContext = suspenseStackCursor.current;
                  var nextDidTimeout = false;
                  var didSuspend =
                    (workInProgress.effectTag & DidCapture) !== NoEffect;

                  if (
                    didSuspend ||
                    shouldRemainOnFallback(
                      suspenseContext,
                      current$$1,
                      workInProgress
                    )
                  ) {
                    // Something in this boundary's subtree already suspended. Switch to
                    // rendering the fallback children.
                    nextDidTimeout = true;
                    workInProgress.effectTag &= ~DidCapture;
                  } else {
                    // Attempting the main content
                    if (
                      current$$1 === null ||
                      current$$1.memoizedState !== null
                    ) {
                      // This is a new mount or this boundary is already showing a fallback state.
                      // Mark this subtree context as having at least one invisible parent that could
                      // handle the fallback state.
                      // Boundaries without fallbacks or should be avoided are not considered since
                      // they cannot handle preferred fallback states.
                      if (
                        nextProps.fallback !== undefined &&
                        nextProps.unstable_avoidThisFallback !== true
                      ) {
                        suspenseContext = addSubtreeSuspenseContext(
                          suspenseContext,
                          InvisibleParentSuspenseContext
                        );
                      }
                    }
                  }

                  suspenseContext = setDefaultShallowSuspenseContext(
                    suspenseContext
                  );
                  pushSuspenseContext(workInProgress, suspenseContext);

                  {
                    if ('maxDuration' in nextProps) {
                      if (!didWarnAboutMaxDuration) {
                        didWarnAboutMaxDuration = true;
                        warning$1(
                          false,
                          'maxDuration has been removed from React. ' +
                            'Remove the maxDuration prop.'
                        );
                      }
                    }
                  } // This next part is a bit confusing. If the children timeout, we switch to
                  // showing the fallback children in place of the "primary" children.
                  // However, we don't want to delete the primary children because then their
                  // state will be lost (both the React state and the host state, e.g.
                  // uncontrolled form inputs). Instead we keep them mounted and hide them.
                  // Both the fallback children AND the primary children are rendered at the
                  // same time. Once the primary children are un-suspended, we can delete
                  // the fallback children — don't need to preserve their state.
                  //
                  // The two sets of children are siblings in the host environment, but
                  // semantically, for purposes of reconciliation, they are two separate sets.
                  // So we store them using two fragment fibers.
                  //
                  // However, we want to avoid allocating extra fibers for every placeholder.
                  // They're only necessary when the children time out, because that's the
                  // only time when both sets are mounted.
                  //
                  // So, the extra fragment fibers are only used if the children time out.
                  // Otherwise, we render the primary children directly. This requires some
                  // custom reconciliation logic to preserve the state of the primary
                  // children. It's essentially a very basic form of re-parenting.

                  if (current$$1 === null) {
                    // If we're currently hydrating, try to hydrate this boundary.
                    // But only if this has a fallback.
                    if (nextProps.fallback !== undefined) {
                      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

                      if (enableSuspenseServerRenderer) {
                        var suspenseState = workInProgress.memoizedState;

                        if (suspenseState !== null) {
                          var dehydrated = suspenseState.dehydrated;

                          if (dehydrated !== null) {
                            return mountDehydratedSuspenseComponent(
                              workInProgress,
                              dehydrated,
                              renderExpirationTime
                            );
                          }
                        }
                      }
                    } // This is the initial mount. This branch is pretty simple because there's
                    // no previous state that needs to be preserved.

                    if (nextDidTimeout) {
                      // Mount separate fragments for primary and fallback children.
                      var nextFallbackChildren = nextProps.fallback;
                      var primaryChildFragment = createFiberFromFragment(
                        null,
                        mode,
                        NoWork,
                        null
                      );
                      primaryChildFragment.return = workInProgress;

                      if ((workInProgress.mode & BlockingMode) === NoMode) {
                        // Outside of blocking mode, we commit the effects from the
                        // partially completed, timed-out tree, too.
                        var progressedState = workInProgress.memoizedState;
                        var progressedPrimaryChild =
                          progressedState !== null
                            ? workInProgress.child.child
                            : workInProgress.child;
                        primaryChildFragment.child = progressedPrimaryChild;
                        var progressedChild = progressedPrimaryChild;

                        while (progressedChild !== null) {
                          progressedChild.return = primaryChildFragment;
                          progressedChild = progressedChild.sibling;
                        }
                      }

                      var fallbackChildFragment = createFiberFromFragment(
                        nextFallbackChildren,
                        mode,
                        renderExpirationTime,
                        null
                      );
                      fallbackChildFragment.return = workInProgress;
                      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
                      // fallback children.

                      workInProgress.memoizedState = SUSPENDED_MARKER;
                      workInProgress.child = primaryChildFragment;
                      return fallbackChildFragment;
                    } else {
                      // Mount the primary children without an intermediate fragment fiber.
                      var nextPrimaryChildren = nextProps.children;
                      workInProgress.memoizedState = null;
                      return (workInProgress.child = mountChildFibers(
                        workInProgress,
                        null,
                        nextPrimaryChildren,
                        renderExpirationTime
                      ));
                    }
                  } else {
                    // This is an update. This branch is more complicated because we need to
                    // ensure the state of the primary children is preserved.
                    var prevState = current$$1.memoizedState;

                    if (prevState !== null) {
                      if (enableSuspenseServerRenderer) {
                        var _dehydrated = prevState.dehydrated;

                        if (_dehydrated !== null) {
                          if (!didSuspend) {
                            return updateDehydratedSuspenseComponent(
                              current$$1,
                              workInProgress,
                              _dehydrated,
                              prevState,
                              renderExpirationTime
                            );
                          } else if (workInProgress.memoizedState !== null) {
                            // Something suspended and we should still be in dehydrated mode.
                            // Leave the existing child in place.
                            workInProgress.child = current$$1.child; // The dehydrated completion pass expects this flag to be there
                            // but the normal suspense pass doesn't.

                            workInProgress.effectTag |= DidCapture;
                            return null;
                          } else {
                            // Suspended but we should no longer be in dehydrated mode.
                            // Therefore we now have to render the fallback. Wrap the children
                            // in a fragment fiber to keep them separate from the fallback
                            // children.
                            var _nextFallbackChildren = nextProps.fallback;

                            var _primaryChildFragment = createFiberFromFragment(
                              // It shouldn't matter what the pending props are because we aren't
                              // going to render this fragment.
                              null,
                              mode,
                              NoWork,
                              null
                            );

                            _primaryChildFragment.return = workInProgress; // This is always null since we never want the previous child
                            // that we're not going to hydrate.

                            _primaryChildFragment.child = null;

                            if (
                              (workInProgress.mode & BlockingMode) ===
                              NoMode
                            ) {
                              // Outside of blocking mode, we commit the effects from the
                              // partially completed, timed-out tree, too.
                              var _progressedChild = (_primaryChildFragment.child =
                                workInProgress.child);

                              while (_progressedChild !== null) {
                                _progressedChild.return = _primaryChildFragment;
                                _progressedChild = _progressedChild.sibling;
                              }
                            } else {
                              // We will have dropped the effect list which contains the deletion.
                              // We need to reconcile to delete the current child.
                              reconcileChildFibers(
                                workInProgress,
                                current$$1.child,
                                null,
                                renderExpirationTime
                              );
                            } // Because primaryChildFragment is a new fiber that we're inserting as the
                            // parent of a new tree, we need to set its treeBaseDuration.

                            if (
                              enableProfilerTimer &&
                              workInProgress.mode & ProfileMode
                            ) {
                              // treeBaseDuration is the sum of all the child tree base durations.
                              var treeBaseDuration = 0;
                              var hiddenChild = _primaryChildFragment.child;

                              while (hiddenChild !== null) {
                                treeBaseDuration +=
                                  hiddenChild.treeBaseDuration;
                                hiddenChild = hiddenChild.sibling;
                              }

                              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
                            } // Create a fragment from the fallback children, too.

                            var _fallbackChildFragment = createFiberFromFragment(
                              _nextFallbackChildren,
                              mode,
                              renderExpirationTime,
                              null
                            );

                            _fallbackChildFragment.return = workInProgress;
                            _primaryChildFragment.sibling = _fallbackChildFragment;
                            _fallbackChildFragment.effectTag |= Placement;
                            _primaryChildFragment.childExpirationTime = NoWork;
                            workInProgress.memoizedState = SUSPENDED_MARKER;
                            workInProgress.child = _primaryChildFragment; // Skip the primary children, and continue working on the
                            // fallback children.

                            return _fallbackChildFragment;
                          }
                        }
                      } // The current tree already timed out. That means each child set is
                      // wrapped in a fragment fiber.

                      var currentPrimaryChildFragment = current$$1.child;
                      var currentFallbackChildFragment =
                        currentPrimaryChildFragment.sibling;

                      if (nextDidTimeout) {
                        // Still timed out. Reuse the current primary children by cloning
                        // its fragment. We're going to skip over these entirely.
                        var _nextFallbackChildren2 = nextProps.fallback;

                        var _primaryChildFragment2 = createWorkInProgress(
                          currentPrimaryChildFragment,
                          currentPrimaryChildFragment.pendingProps,
                          NoWork
                        );

                        _primaryChildFragment2.return = workInProgress;

                        if ((workInProgress.mode & BlockingMode) === NoMode) {
                          // Outside of blocking mode, we commit the effects from the
                          // partially completed, timed-out tree, too.
                          var _progressedState = workInProgress.memoizedState;

                          var _progressedPrimaryChild =
                            _progressedState !== null
                              ? workInProgress.child.child
                              : workInProgress.child;

                          if (
                            _progressedPrimaryChild !==
                            currentPrimaryChildFragment.child
                          ) {
                            _primaryChildFragment2.child = _progressedPrimaryChild;
                            var _progressedChild2 = _progressedPrimaryChild;

                            while (_progressedChild2 !== null) {
                              _progressedChild2.return = _primaryChildFragment2;
                              _progressedChild2 = _progressedChild2.sibling;
                            }
                          }
                        } // Because primaryChildFragment is a new fiber that we're inserting as the
                        // parent of a new tree, we need to set its treeBaseDuration.

                        if (
                          enableProfilerTimer &&
                          workInProgress.mode & ProfileMode
                        ) {
                          // treeBaseDuration is the sum of all the child tree base durations.
                          var _treeBaseDuration = 0;
                          var _hiddenChild = _primaryChildFragment2.child;

                          while (_hiddenChild !== null) {
                            _treeBaseDuration += _hiddenChild.treeBaseDuration;
                            _hiddenChild = _hiddenChild.sibling;
                          }

                          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                        } // Clone the fallback child fragment, too. These we'll continue
                        // working on.

                        var _fallbackChildFragment2 = createWorkInProgress(
                          currentFallbackChildFragment,
                          _nextFallbackChildren2,
                          currentFallbackChildFragment.expirationTime
                        );

                        _fallbackChildFragment2.return = workInProgress;
                        _primaryChildFragment2.sibling = _fallbackChildFragment2;
                        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
                        // fallback children.

                        workInProgress.memoizedState = SUSPENDED_MARKER;
                        workInProgress.child = _primaryChildFragment2;
                        return _fallbackChildFragment2;
                      } else {
                        // No longer suspended. Switch back to showing the primary children,
                        // and remove the intermediate fragment fiber.
                        var _nextPrimaryChildren = nextProps.children;
                        var currentPrimaryChild =
                          currentPrimaryChildFragment.child;
                        var primaryChild = reconcileChildFibers(
                          workInProgress,
                          currentPrimaryChild,
                          _nextPrimaryChildren,
                          renderExpirationTime
                        ); // If this render doesn't suspend, we need to delete the fallback
                        // children. Wait until the complete phase, after we've confirmed the
                        // fallback is no longer needed.
                        // TODO: Would it be better to store the fallback fragment on
                        // the stateNode?
                        // Continue rendering the children, like we normally do.

                        workInProgress.memoizedState = null;
                        return (workInProgress.child = primaryChild);
                      }
                    } else {
                      // The current tree has not already timed out. That means the primary
                      // children are not wrapped in a fragment fiber.
                      var _currentPrimaryChild = current$$1.child;

                      if (nextDidTimeout) {
                        // Timed out. Wrap the children in a fragment fiber to keep them
                        // separate from the fallback children.
                        var _nextFallbackChildren3 = nextProps.fallback;

                        var _primaryChildFragment3 = createFiberFromFragment(
                          // It shouldn't matter what the pending props are because we aren't
                          // going to render this fragment.
                          null,
                          mode,
                          NoWork,
                          null
                        );

                        _primaryChildFragment3.return = workInProgress;
                        _primaryChildFragment3.child = _currentPrimaryChild;

                        if (_currentPrimaryChild !== null) {
                          _currentPrimaryChild.return = _primaryChildFragment3;
                        } // Even though we're creating a new fiber, there are no new children,
                        // because we're reusing an already mounted tree. So we don't need to
                        // schedule a placement.
                        // primaryChildFragment.effectTag |= Placement;

                        if ((workInProgress.mode & BlockingMode) === NoMode) {
                          // Outside of blocking mode, we commit the effects from the
                          // partially completed, timed-out tree, too.
                          var _progressedState2 = workInProgress.memoizedState;

                          var _progressedPrimaryChild2 =
                            _progressedState2 !== null
                              ? workInProgress.child.child
                              : workInProgress.child;

                          _primaryChildFragment3.child = _progressedPrimaryChild2;
                          var _progressedChild3 = _progressedPrimaryChild2;

                          while (_progressedChild3 !== null) {
                            _progressedChild3.return = _primaryChildFragment3;
                            _progressedChild3 = _progressedChild3.sibling;
                          }
                        } // Because primaryChildFragment is a new fiber that we're inserting as the
                        // parent of a new tree, we need to set its treeBaseDuration.

                        if (
                          enableProfilerTimer &&
                          workInProgress.mode & ProfileMode
                        ) {
                          // treeBaseDuration is the sum of all the child tree base durations.
                          var _treeBaseDuration2 = 0;
                          var _hiddenChild2 = _primaryChildFragment3.child;

                          while (_hiddenChild2 !== null) {
                            _treeBaseDuration2 +=
                              _hiddenChild2.treeBaseDuration;
                            _hiddenChild2 = _hiddenChild2.sibling;
                          }

                          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                        } // Create a fragment from the fallback children, too.

                        var _fallbackChildFragment3 = createFiberFromFragment(
                          _nextFallbackChildren3,
                          mode,
                          renderExpirationTime,
                          null
                        );

                        _fallbackChildFragment3.return = workInProgress;
                        _primaryChildFragment3.sibling = _fallbackChildFragment3;
                        _fallbackChildFragment3.effectTag |= Placement;
                        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
                        // fallback children.

                        workInProgress.memoizedState = SUSPENDED_MARKER;
                        workInProgress.child = _primaryChildFragment3;
                        return _fallbackChildFragment3;
                      } else {
                        // Still haven't timed out.  Continue rendering the children, like we
                        // normally do.
                        workInProgress.memoizedState = null;
                        var _nextPrimaryChildren2 = nextProps.children;
                        return (workInProgress.child = reconcileChildFibers(
                          workInProgress,
                          _currentPrimaryChild,
                          _nextPrimaryChildren2,
                          renderExpirationTime
                        ));
                      }
                    }
                  }
                }

                function retrySuspenseComponentWithoutHydrating(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  // We're now not suspended nor dehydrated.
                  workInProgress.memoizedState = null; // Retry with the full children.

                  var nextProps = workInProgress.pendingProps;
                  var nextChildren = nextProps.children; // This will ensure that the children get Placement effects and
                  // that the old child gets a Deletion effect.
                  // We could also call forceUnmountCurrentAndReconcile.

                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function mountDehydratedSuspenseComponent(
                  workInProgress,
                  suspenseInstance,
                  renderExpirationTime
                ) {
                  // During the first pass, we'll bail out and not drill into the children.
                  // Instead, we'll leave the content in place and try to hydrate it later.
                  if ((workInProgress.mode & BlockingMode) === NoMode) {
                    {
                      warning$1(
                        false,
                        'Cannot hydrate Suspense in legacy mode. Switch from ' +
                          'ReactDOM.hydrate(element, container) to ' +
                          'ReactDOM.createBlockingRoot(container, { hydrate: true })' +
                          '.render(element) or remove the Suspense components from ' +
                          'the server rendered components.'
                      );
                    }

                    workInProgress.expirationTime = Sync;
                  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
                    // This is a client-only boundary. Since we won't get any content from the server
                    // for this, we need to schedule that at a higher priority based on when it would
                    // have timed out. In theory we could render it in this pass but it would have the
                    // wrong priority associated with it and will prevent hydration of parent path.
                    // Instead, we'll leave work left on it to render it in a separate commit.
                    // TODO This time should be the time at which the server rendered response that is
                    // a parent to this boundary was displayed. However, since we currently don't have
                    // a protocol to transfer that time, we'll just estimate it by using the current
                    // time. This will mean that Suspense timeouts are slightly shifted to later than
                    // they should be.
                    var serverDisplayTime = requestCurrentTimeForUpdate(); // Schedule a normal pri update to render this content.

                    var newExpirationTime = computeAsyncExpiration(
                      serverDisplayTime
                    );

                    if (enableSchedulerTracing) {
                      markSpawnedWork(newExpirationTime);
                    }

                    workInProgress.expirationTime = newExpirationTime;
                  } else {
                    // We'll continue hydrating the rest at offscreen priority since we'll already
                    // be showing the right content coming from the server, it is no rush.
                    workInProgress.expirationTime = Never;

                    if (enableSchedulerTracing) {
                      markSpawnedWork(Never);
                    }
                  }

                  return null;
                }

                function updateDehydratedSuspenseComponent(
                  current$$1,
                  workInProgress,
                  suspenseInstance,
                  suspenseState,
                  renderExpirationTime
                ) {
                  // We should never be hydrating at this point because it is the first pass,
                  // but after we've already committed once.
                  warnIfHydrating();

                  if ((workInProgress.mode & BlockingMode) === NoMode) {
                    return retrySuspenseComponentWithoutHydrating(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                  }

                  if (isSuspenseInstanceFallback(suspenseInstance)) {
                    // This boundary is in a permanent fallback state. In this case, we'll never
                    // get an update and we'll never be able to hydrate the final content. Let's just try the
                    // client side render instead.
                    return retrySuspenseComponentWithoutHydrating(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                  } // We use childExpirationTime to indicate that a child might depend on context, so if
                  // any context has changed, we need to treat is as if the input might have changed.

                  var hasContextChanged$$1 =
                    current$$1.childExpirationTime >= renderExpirationTime;

                  if (didReceiveUpdate || hasContextChanged$$1) {
                    // This boundary has changed since the first render. This means that we are now unable to
                    // hydrate it. We might still be able to hydrate it using an earlier expiration time, if
                    // we are rendering at lower expiration than sync.
                    if (renderExpirationTime < Sync) {
                      if (suspenseState.retryTime <= renderExpirationTime) {
                        // This render is even higher pri than we've seen before, let's try again
                        // at even higher pri.
                        var attemptHydrationAtExpirationTime =
                          renderExpirationTime + 1;
                        suspenseState.retryTime = attemptHydrationAtExpirationTime;
                        scheduleWork(
                          current$$1,
                          attemptHydrationAtExpirationTime
                        ); // TODO: Early abort this render.
                      } else {
                        // We have already tried to ping at a higher priority than we're rendering with
                        // so if we got here, we must have failed to hydrate at those levels. We must
                        // now give up. Instead, we're going to delete the whole subtree and instead inject
                        // a new real Suspense boundary to take its place, which may render content
                        // or fallback. This might suspend for a while and if it does we might still have
                        // an opportunity to hydrate before this pass commits.
                      }
                    } // If we have scheduled higher pri work above, this will probably just abort the render
                    // since we now have higher priority work, but in case it doesn't, we need to prepare to
                    // render something, if we time out. Even if that requires us to delete everything and
                    // skip hydration.
                    // Delay having to do this as long as the suspense timeout allows us.

                    renderDidSuspendDelayIfPossible();
                    return retrySuspenseComponentWithoutHydrating(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                  } else if (isSuspenseInstancePending(suspenseInstance)) {
                    // This component is still pending more data from the server, so we can't hydrate its
                    // content. We treat it as if this component suspended itself. It might seem as if
                    // we could just try to render it client-side instead. However, this will perform a
                    // lot of unnecessary work and is unlikely to complete since it often will suspend
                    // on missing data anyway. Additionally, the server might be able to render more
                    // than we can on the client yet. In that case we'd end up with more fallback states
                    // on the client than if we just leave it alone. If the server times out or errors
                    // these should update this boundary to the permanent Fallback state instead.
                    // Mark it as having captured (i.e. suspended).
                    workInProgress.effectTag |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

                    workInProgress.child = current$$1.child; // Register a callback to retry this boundary once the server has sent the result.

                    registerSuspenseInstanceRetry(
                      suspenseInstance,
                      retryDehydratedSuspenseBoundary.bind(null, current$$1)
                    );
                    return null;
                  } else {
                    // This is the first attempt.
                    reenterHydrationStateFromDehydratedSuspenseInstance(
                      workInProgress,
                      suspenseInstance
                    );
                    var nextProps = workInProgress.pendingProps;
                    var nextChildren = nextProps.children;
                    var child = mountChildFibers(
                      workInProgress,
                      null,
                      nextChildren,
                      renderExpirationTime
                    );
                    var node = child;

                    while (node) {
                      // Mark each child as hydrating. This is a fast path to know whether this
                      // tree is part of a hydrating tree. This is used to determine if a child
                      // node has fully mounted yet, and for scheduling event replaying.
                      // Conceptually this is similar to Placement in that a new subtree is
                      // inserted into the React tree here. It just happens to not need DOM
                      // mutations because it already exists.
                      node.effectTag |= Hydrating;
                      node = node.sibling;
                    }

                    workInProgress.child = child;
                    return workInProgress.child;
                  }
                }

                function scheduleWorkOnFiber(fiber, renderExpirationTime) {
                  if (fiber.expirationTime < renderExpirationTime) {
                    fiber.expirationTime = renderExpirationTime;
                  }

                  var alternate = fiber.alternate;

                  if (
                    alternate !== null &&
                    alternate.expirationTime < renderExpirationTime
                  ) {
                    alternate.expirationTime = renderExpirationTime;
                  }

                  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
                }

                function propagateSuspenseContextChange(
                  workInProgress,
                  firstChild,
                  renderExpirationTime
                ) {
                  // Mark any Suspense boundaries with fallbacks as having work to do.
                  // If they were previously forced into fallbacks, they may now be able
                  // to unblock.
                  var node = firstChild;

                  while (node !== null) {
                    if (node.tag === SuspenseComponent) {
                      var state = node.memoizedState;

                      if (state !== null) {
                        scheduleWorkOnFiber(node, renderExpirationTime);
                      }
                    } else if (node.tag === SuspenseListComponent) {
                      // If the tail is hidden there might not be an Suspense boundaries
                      // to schedule work on. In this case we have to schedule it on the
                      // list itself.
                      // We don't have to traverse to the children of the list since
                      // the list will propagate the change when it rerenders.
                      scheduleWorkOnFiber(node, renderExpirationTime);
                    } else if (node.child !== null) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === workInProgress) {
                      return;
                    }

                    while (node.sibling === null) {
                      if (
                        node.return === null ||
                        node.return === workInProgress
                      ) {
                        return;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }
                }

                function findLastContentRow(firstChild) {
                  // This is going to find the last row among these children that is already
                  // showing content on the screen, as opposed to being in fallback state or
                  // new. If a row has multiple Suspense boundaries, any of them being in the
                  // fallback state, counts as the whole row being in a fallback state.
                  // Note that the "rows" will be workInProgress, but any nested children
                  // will still be current since we haven't rendered them yet. The mounted
                  // order may not be the same as the new order. We use the new order.
                  var row = firstChild;
                  var lastContentRow = null;

                  while (row !== null) {
                    var currentRow = row.alternate; // New rows can't be content rows.

                    if (
                      currentRow !== null &&
                      findFirstSuspended(currentRow) === null
                    ) {
                      lastContentRow = row;
                    }

                    row = row.sibling;
                  }

                  return lastContentRow;
                }

                function validateRevealOrder(revealOrder) {
                  {
                    if (
                      revealOrder !== undefined &&
                      revealOrder !== 'forwards' &&
                      revealOrder !== 'backwards' &&
                      revealOrder !== 'together' &&
                      !didWarnAboutRevealOrder[revealOrder]
                    ) {
                      didWarnAboutRevealOrder[revealOrder] = true;

                      if (typeof revealOrder === 'string') {
                        switch (revealOrder.toLowerCase()) {
                          case 'together':
                          case 'forwards':
                          case 'backwards': {
                            warning$1(
                              false,
                              '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
                                'Use lowercase "%s" instead.',
                              revealOrder,
                              revealOrder.toLowerCase()
                            );
                            break;
                          }

                          case 'forward':
                          case 'backward': {
                            warning$1(
                              false,
                              '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
                                'React uses the -s suffix in the spelling. Use "%ss" instead.',
                              revealOrder,
                              revealOrder.toLowerCase()
                            );
                            break;
                          }

                          default:
                            warning$1(
                              false,
                              '"%s" is not a supported revealOrder on <SuspenseList />. ' +
                                'Did you mean "together", "forwards" or "backwards"?',
                              revealOrder
                            );
                            break;
                        }
                      } else {
                        warning$1(
                          false,
                          '%s is not a supported value for revealOrder on <SuspenseList />. ' +
                            'Did you mean "together", "forwards" or "backwards"?',
                          revealOrder
                        );
                      }
                    }
                  }
                }

                function validateTailOptions(tailMode, revealOrder) {
                  {
                    if (
                      tailMode !== undefined &&
                      !didWarnAboutTailOptions[tailMode]
                    ) {
                      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                        didWarnAboutTailOptions[tailMode] = true;
                        warning$1(
                          false,
                          '"%s" is not a supported value for tail on <SuspenseList />. ' +
                            'Did you mean "collapsed" or "hidden"?',
                          tailMode
                        );
                      } else if (
                        revealOrder !== 'forwards' &&
                        revealOrder !== 'backwards'
                      ) {
                        didWarnAboutTailOptions[tailMode] = true;
                        warning$1(
                          false,
                          '<SuspenseList tail="%s" /> is only valid if revealOrder is ' +
                            '"forwards" or "backwards". ' +
                            'Did you mean to specify revealOrder="forwards"?',
                          tailMode
                        );
                      }
                    }
                  }
                }

                function validateSuspenseListNestedChild(childSlot, index) {
                  {
                    var isArray = Array.isArray(childSlot);
                    var isIterable =
                      !isArray &&
                      typeof getIteratorFn(childSlot) === 'function';

                    if (isArray || isIterable) {
                      var type = isArray ? 'array' : 'iterable';
                      warning$1(
                        false,
                        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +
                          'an additional SuspenseList to configure its revealOrder: ' +
                          '<SuspenseList revealOrder=...> ... ' +
                          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +
                          '</SuspenseList>',
                        type,
                        index,
                        type
                      );
                      return false;
                    }
                  }

                  return true;
                }

                function validateSuspenseListChildren(children, revealOrder) {
                  {
                    if (
                      (revealOrder === 'forwards' ||
                        revealOrder === 'backwards') &&
                      children !== undefined &&
                      children !== null &&
                      children !== false
                    ) {
                      if (Array.isArray(children)) {
                        for (var i = 0; i < children.length; i++) {
                          if (
                            !validateSuspenseListNestedChild(children[i], i)
                          ) {
                            return;
                          }
                        }
                      } else {
                        var iteratorFn = getIteratorFn(children);

                        if (typeof iteratorFn === 'function') {
                          var childrenIterator = iteratorFn.call(children);

                          if (childrenIterator) {
                            var step = childrenIterator.next();
                            var _i = 0;

                            for (; !step.done; step = childrenIterator.next()) {
                              if (
                                !validateSuspenseListNestedChild(step.value, _i)
                              ) {
                                return;
                              }

                              _i++;
                            }
                          }
                        } else {
                          warning$1(
                            false,
                            'A single row was passed to a <SuspenseList revealOrder="%s" />. ' +
                              'This is not useful since it needs multiple rows. ' +
                              'Did you mean to pass multiple children or an array?',
                            revealOrder
                          );
                        }
                      }
                    }
                  }
                }

                function initSuspenseListRenderState(
                  workInProgress,
                  isBackwards,
                  tail,
                  lastContentRow,
                  tailMode,
                  lastEffectBeforeRendering
                ) {
                  var renderState = workInProgress.memoizedState;

                  if (renderState === null) {
                    workInProgress.memoizedState = {
                      isBackwards: isBackwards,
                      rendering: null,
                      last: lastContentRow,
                      tail: tail,
                      tailExpiration: 0,
                      tailMode: tailMode,
                      lastEffect: lastEffectBeforeRendering,
                    };
                  } else {
                    // We can reuse the existing object from previous renders.
                    renderState.isBackwards = isBackwards;
                    renderState.rendering = null;
                    renderState.last = lastContentRow;
                    renderState.tail = tail;
                    renderState.tailExpiration = 0;
                    renderState.tailMode = tailMode;
                    renderState.lastEffect = lastEffectBeforeRendering;
                  }
                } // This can end up rendering this component multiple passes.
                // The first pass splits the children fibers into two sets. A head and tail.
                // We first render the head. If anything is in fallback state, we do another
                // pass through beginWork to rerender all children (including the tail) with
                // the force suspend context. If the first render didn't have anything in
                // in fallback state. Then we render each row in the tail one-by-one.
                // That happens in the completeWork phase without going back to beginWork.

                function updateSuspenseListComponent(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var nextProps = workInProgress.pendingProps;
                  var revealOrder = nextProps.revealOrder;
                  var tailMode = nextProps.tail;
                  var newChildren = nextProps.children;
                  validateRevealOrder(revealOrder);
                  validateTailOptions(tailMode, revealOrder);
                  validateSuspenseListChildren(newChildren, revealOrder);
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    newChildren,
                    renderExpirationTime
                  );
                  var suspenseContext = suspenseStackCursor.current;
                  var shouldForceFallback = hasSuspenseContext(
                    suspenseContext,
                    ForceSuspenseFallback
                  );

                  if (shouldForceFallback) {
                    suspenseContext = setShallowSuspenseContext(
                      suspenseContext,
                      ForceSuspenseFallback
                    );
                    workInProgress.effectTag |= DidCapture;
                  } else {
                    var didSuspendBefore =
                      current$$1 !== null &&
                      (current$$1.effectTag & DidCapture) !== NoEffect;

                    if (didSuspendBefore) {
                      // If we previously forced a fallback, we need to schedule work
                      // on any nested boundaries to let them know to try to render
                      // again. This is the same as context updating.
                      propagateSuspenseContextChange(
                        workInProgress,
                        workInProgress.child,
                        renderExpirationTime
                      );
                    }

                    suspenseContext = setDefaultShallowSuspenseContext(
                      suspenseContext
                    );
                  }

                  pushSuspenseContext(workInProgress, suspenseContext);

                  if ((workInProgress.mode & BlockingMode) === NoMode) {
                    // Outside of blocking mode, SuspenseList doesn't work so we just
                    // use make it a noop by treating it as the default revealOrder.
                    workInProgress.memoizedState = null;
                  } else {
                    switch (revealOrder) {
                      case 'forwards': {
                        var lastContentRow = findLastContentRow(
                          workInProgress.child
                        );
                        var tail;

                        if (lastContentRow === null) {
                          // The whole list is part of the tail.
                          // TODO: We could fast path by just rendering the tail now.
                          tail = workInProgress.child;
                          workInProgress.child = null;
                        } else {
                          // Disconnect the tail rows after the content row.
                          // We're going to render them separately later.
                          tail = lastContentRow.sibling;
                          lastContentRow.sibling = null;
                        }

                        initSuspenseListRenderState(
                          workInProgress,
                          false, // isBackwards
                          tail,
                          lastContentRow,
                          tailMode,
                          workInProgress.lastEffect
                        );
                        break;
                      }

                      case 'backwards': {
                        // We're going to find the first row that has existing content.
                        // At the same time we're going to reverse the list of everything
                        // we pass in the meantime. That's going to be our tail in reverse
                        // order.
                        var _tail = null;
                        var row = workInProgress.child;
                        workInProgress.child = null;

                        while (row !== null) {
                          var currentRow = row.alternate; // New rows can't be content rows.

                          if (
                            currentRow !== null &&
                            findFirstSuspended(currentRow) === null
                          ) {
                            // This is the beginning of the main content.
                            workInProgress.child = row;
                            break;
                          }

                          var nextRow = row.sibling;
                          row.sibling = _tail;
                          _tail = row;
                          row = nextRow;
                        } // TODO: If workInProgress.child is null, we can continue on the tail immediately.

                        initSuspenseListRenderState(
                          workInProgress,
                          true, // isBackwards
                          _tail,
                          null, // last
                          tailMode,
                          workInProgress.lastEffect
                        );
                        break;
                      }

                      case 'together': {
                        initSuspenseListRenderState(
                          workInProgress,
                          false, // isBackwards
                          null, // tail
                          null, // last
                          undefined,
                          workInProgress.lastEffect
                        );
                        break;
                      }

                      default: {
                        // The default reveal order is the same as not having
                        // a boundary.
                        workInProgress.memoizedState = null;
                      }
                    }
                  }

                  return workInProgress.child;
                }

                function updatePortalComponent(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  pushHostContainer(
                    workInProgress,
                    workInProgress.stateNode.containerInfo
                  );
                  var nextChildren = workInProgress.pendingProps;

                  if (current$$1 === null) {
                    // Portals are special because we don't append the children during mount
                    // but at commit. Therefore we need to track insertions which the normal
                    // flow doesn't do during mount. This doesn't happen at the root because
                    // the root always starts with a "current" with a null child.
                    // TODO: Consider unifying this with how the root works.
                    workInProgress.child = reconcileChildFibers(
                      workInProgress,
                      null,
                      nextChildren,
                      renderExpirationTime
                    );
                  } else {
                    reconcileChildren(
                      current$$1,
                      workInProgress,
                      nextChildren,
                      renderExpirationTime
                    );
                  }

                  return workInProgress.child;
                }

                function updateContextProvider(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var providerType = workInProgress.type;
                  var context = providerType._context;
                  var newProps = workInProgress.pendingProps;
                  var oldProps = workInProgress.memoizedProps;
                  var newValue = newProps.value;

                  {
                    var providerPropTypes = workInProgress.type.propTypes;

                    if (providerPropTypes) {
                      checkPropTypes(
                        providerPropTypes,
                        newProps,
                        'prop',
                        'Context.Provider',
                        getCurrentFiberStackInDev
                      );
                    }
                  }

                  pushProvider(workInProgress, newValue);

                  if (oldProps !== null) {
                    var oldValue = oldProps.value;
                    var changedBits = calculateChangedBits(
                      context,
                      newValue,
                      oldValue
                    );

                    if (changedBits === 0) {
                      // No change. Bailout early if children are the same.
                      if (
                        oldProps.children === newProps.children &&
                        !hasContextChanged()
                      ) {
                        return bailoutOnAlreadyFinishedWork(
                          current$$1,
                          workInProgress,
                          renderExpirationTime
                        );
                      }
                    } else {
                      // The context value changed. Search for matching consumers and schedule
                      // them to update.
                      propagateContextChange(
                        workInProgress,
                        context,
                        changedBits,
                        renderExpirationTime
                      );
                    }
                  }

                  var newChildren = newProps.children;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    newChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                var hasWarnedAboutUsingContextAsConsumer = false;

                function updateContextConsumer(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
                  // DEV mode, we create a separate object for Context.Consumer that acts
                  // like a proxy to Context. This proxy object adds unnecessary code in PROD
                  // so we use the old behaviour (Context.Consumer references Context) to
                  // reduce size and overhead. The separate object references context via
                  // a property called "_context", which also gives us the ability to check
                  // in DEV mode if this property exists or not and warn if it does not.

                  {
                    if (context._context === undefined) {
                      // This may be because it's a Context (rather than a Consumer).
                      // Or it may be because it's older React where they're the same thing.
                      // We only want to warn if we're sure it's a new React.
                      if (context !== context.Consumer) {
                        if (!hasWarnedAboutUsingContextAsConsumer) {
                          hasWarnedAboutUsingContextAsConsumer = true;
                          warning$1(
                            false,
                            'Rendering <Context> directly is not supported and will be removed in ' +
                              'a future major release. Did you mean to render <Context.Consumer> instead?'
                          );
                        }
                      }
                    } else {
                      context = context._context;
                    }
                  }

                  var newProps = workInProgress.pendingProps;
                  var render = newProps.children;

                  {
                    !(typeof render === 'function')
                      ? warningWithoutStack$1(
                          false,
                          'A context consumer was rendered with multiple children, or a child ' +
                            "that isn't a function. A context consumer expects a single child " +
                            'that is a function. If you did pass a function, make sure there ' +
                            'is no trailing or leading whitespace around it.'
                        )
                      : void 0;
                  }

                  prepareToReadContext(workInProgress, renderExpirationTime);
                  var newValue = readContext(
                    context,
                    newProps.unstable_observedBits
                  );
                  var newChildren;

                  {
                    ReactCurrentOwner$2.current = workInProgress;
                    setCurrentPhase('render');
                    newChildren = render(newValue);
                    setCurrentPhase(null);
                  } // React DevTools reads this flag.

                  workInProgress.effectTag |= PerformedWork;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    newChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function updateFundamentalComponent$1(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var fundamentalImpl = workInProgress.type.impl;

                  if (fundamentalImpl.reconcileChildren === false) {
                    return null;
                  }

                  var nextProps = workInProgress.pendingProps;
                  var nextChildren = nextProps.children;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function updateScopeComponent(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var nextProps = workInProgress.pendingProps;
                  var nextChildren = nextProps.children;
                  reconcileChildren(
                    current$$1,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  );
                  return workInProgress.child;
                }

                function markWorkInProgressReceivedUpdate() {
                  didReceiveUpdate = true;
                }

                function bailoutOnAlreadyFinishedWork(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  cancelWorkTimer(workInProgress);

                  if (current$$1 !== null) {
                    // Reuse previous dependencies
                    workInProgress.dependencies = current$$1.dependencies;
                  }

                  if (enableProfilerTimer) {
                    // Don't update "base" render times for bailouts.
                    stopProfilerTimerIfRunning(workInProgress);
                  }

                  var updateExpirationTime = workInProgress.expirationTime;

                  if (updateExpirationTime !== NoWork) {
                    markUnprocessedUpdateTime(updateExpirationTime);
                  } // Check if the children have any pending work.

                  var childExpirationTime = workInProgress.childExpirationTime;

                  if (childExpirationTime < renderExpirationTime) {
                    // The children don't have any work either. We can skip them.
                    // TODO: Once we add back resuming, we should check if the children are
                    // a work-in-progress set. If so, we need to transfer their effects.
                    return null;
                  } else {
                    // This fiber doesn't have work, but its subtree does. Clone the child
                    // fibers and continue.
                    cloneChildFibers(current$$1, workInProgress);
                    return workInProgress.child;
                  }
                }

                function remountFiber(
                  current$$1,
                  oldWorkInProgress,
                  newWorkInProgress
                ) {
                  {
                    var returnFiber = oldWorkInProgress.return;

                    if (returnFiber === null) {
                      throw new Error('Cannot swap the root fiber.');
                    } // Disconnect from the old current.
                    // It will get deleted.

                    current$$1.alternate = null;
                    oldWorkInProgress.alternate = null; // Connect to the new tree.

                    newWorkInProgress.index = oldWorkInProgress.index;
                    newWorkInProgress.sibling = oldWorkInProgress.sibling;
                    newWorkInProgress.return = oldWorkInProgress.return;
                    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

                    if (oldWorkInProgress === returnFiber.child) {
                      returnFiber.child = newWorkInProgress;
                    } else {
                      var prevSibling = returnFiber.child;

                      if (prevSibling === null) {
                        throw new Error('Expected parent to have a child.');
                      }

                      while (prevSibling.sibling !== oldWorkInProgress) {
                        prevSibling = prevSibling.sibling;

                        if (prevSibling === null) {
                          throw new Error(
                            'Expected to find the previous sibling.'
                          );
                        }
                      }

                      prevSibling.sibling = newWorkInProgress;
                    } // Delete the old fiber and place the new one.
                    // Since the old fiber is disconnected, we have to schedule it manually.

                    var last = returnFiber.lastEffect;

                    if (last !== null) {
                      last.nextEffect = current$$1;
                      returnFiber.lastEffect = current$$1;
                    } else {
                      returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
                    }

                    current$$1.nextEffect = null;
                    current$$1.effectTag = Deletion;
                    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

                    return newWorkInProgress;
                  }
                }

                function beginWork$1(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var updateExpirationTime = workInProgress.expirationTime;

                  {
                    if (
                      workInProgress._debugNeedsRemount &&
                      current$$1 !== null
                    ) {
                      // This will restart the begin phase with a new fiber.
                      return remountFiber(
                        current$$1,
                        workInProgress,
                        createFiberFromTypeAndProps(
                          workInProgress.type,
                          workInProgress.key,
                          workInProgress.pendingProps,
                          workInProgress._debugOwner || null,
                          workInProgress.mode,
                          workInProgress.expirationTime
                        )
                      );
                    }
                  }

                  if (current$$1 !== null) {
                    var oldProps = current$$1.memoizedProps;
                    var newProps = workInProgress.pendingProps;

                    if (
                      oldProps !== newProps ||
                      hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
                      workInProgress.type !== current$$1.type
                    ) {
                      // If props or context changed, mark the fiber as having performed work.
                      // This may be unset if the props are determined to be equal later (memo).
                      didReceiveUpdate = true;
                    } else if (updateExpirationTime < renderExpirationTime) {
                      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                      // the begin phase. There's still some bookkeeping we that needs to be done
                      // in this optimized path, mostly pushing stuff onto the stack.

                      switch (workInProgress.tag) {
                        case HostRoot:
                          pushHostRootContext(workInProgress);
                          resetHydrationState();
                          break;

                        case HostComponent:
                          pushHostContext(workInProgress);

                          if (
                            workInProgress.mode & ConcurrentMode &&
                            renderExpirationTime !== Never &&
                            shouldDeprioritizeSubtree(
                              workInProgress.type,
                              newProps
                            )
                          ) {
                            if (enableSchedulerTracing) {
                              markSpawnedWork(Never);
                            } // Schedule this fiber to re-render at offscreen priority. Then bailout.

                            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                            return null;
                          }

                          break;

                        case ClassComponent: {
                          var Component = workInProgress.type;

                          if (isContextProvider(Component)) {
                            pushContextProvider(workInProgress);
                          }

                          break;
                        }

                        case HostPortal:
                          pushHostContainer(
                            workInProgress,
                            workInProgress.stateNode.containerInfo
                          );
                          break;

                        case ContextProvider: {
                          var newValue = workInProgress.memoizedProps.value;
                          pushProvider(workInProgress, newValue);
                          break;
                        }

                        case Profiler:
                          if (enableProfilerTimer) {
                            // Profiler should only call onRender when one of its descendants actually rendered.
                            var hasChildWork =
                              workInProgress.childExpirationTime >=
                              renderExpirationTime;

                            if (hasChildWork) {
                              workInProgress.effectTag |= Update;
                            }
                          }

                          break;

                        case SuspenseComponent: {
                          var state = workInProgress.memoizedState;

                          if (state !== null) {
                            if (enableSuspenseServerRenderer) {
                              if (state.dehydrated !== null) {
                                pushSuspenseContext(
                                  workInProgress,
                                  setDefaultShallowSuspenseContext(
                                    suspenseStackCursor.current
                                  )
                                ); // We know that this component will suspend again because if it has
                                // been unsuspended it has committed as a resolved Suspense component.
                                // If it needs to be retried, it should have work scheduled on it.

                                workInProgress.effectTag |= DidCapture;
                                break;
                              }
                            } // If this boundary is currently timed out, we need to decide
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.

                            var primaryChildFragment = workInProgress.child;
                            var primaryChildExpirationTime =
                              primaryChildFragment.childExpirationTime;

                            if (
                              primaryChildExpirationTime !== NoWork &&
                              primaryChildExpirationTime >= renderExpirationTime
                            ) {
                              // The primary children have pending work. Use the normal path
                              // to attempt to render the primary children again.
                              return updateSuspenseComponent(
                                current$$1,
                                workInProgress,
                                renderExpirationTime
                              );
                            } else {
                              pushSuspenseContext(
                                workInProgress,
                                setDefaultShallowSuspenseContext(
                                  suspenseStackCursor.current
                                )
                              ); // The primary children do not have pending work with sufficient
                              // priority. Bailout.

                              var child = bailoutOnAlreadyFinishedWork(
                                current$$1,
                                workInProgress,
                                renderExpirationTime
                              );

                              if (child !== null) {
                                // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                              } else {
                                return null;
                              }
                            }
                          } else {
                            pushSuspenseContext(
                              workInProgress,
                              setDefaultShallowSuspenseContext(
                                suspenseStackCursor.current
                              )
                            );
                          }

                          break;
                        }

                        case SuspenseListComponent: {
                          var didSuspendBefore =
                            (current$$1.effectTag & DidCapture) !== NoEffect;

                          var _hasChildWork =
                            workInProgress.childExpirationTime >=
                            renderExpirationTime;

                          if (didSuspendBefore) {
                            if (_hasChildWork) {
                              // If something was in fallback state last time, and we have all the
                              // same children then we're still in progressive loading state.
                              // Something might get unblocked by state updates or retries in the
                              // tree which will affect the tail. So we need to use the normal
                              // path to compute the correct tail.
                              return updateSuspenseListComponent(
                                current$$1,
                                workInProgress,
                                renderExpirationTime
                              );
                            } // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.

                            workInProgress.effectTag |= DidCapture;
                          } // If nothing suspended before and we're rendering the same children,
                          // then the tail doesn't matter. Anything new that suspends will work
                          // in the "together" mode, so we can continue from the state we had.

                          var renderState = workInProgress.memoizedState;

                          if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                          }

                          pushSuspenseContext(
                            workInProgress,
                            suspenseStackCursor.current
                          );

                          if (_hasChildWork) {
                            break;
                          } else {
                            // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            return null;
                          }
                        }
                      }

                      return bailoutOnAlreadyFinishedWork(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );
                    } else {
                      // An update was scheduled on this fiber, but there are no new props
                      // nor legacy context. Set this to false. If an update queue or context
                      // consumer produces a changed value, it will set this to true. Otherwise,
                      // the component will assume the children have not changed and bail out.
                      didReceiveUpdate = false;
                    }
                  } else {
                    didReceiveUpdate = false;
                  } // Before entering the begin phase, clear the expiration time.

                  workInProgress.expirationTime = NoWork;

                  switch (workInProgress.tag) {
                    case IndeterminateComponent: {
                      return mountIndeterminateComponent(
                        current$$1,
                        workInProgress,
                        workInProgress.type,
                        renderExpirationTime
                      );
                    }

                    case LazyComponent: {
                      var elementType = workInProgress.elementType;
                      return mountLazyComponent(
                        current$$1,
                        workInProgress,
                        elementType,
                        updateExpirationTime,
                        renderExpirationTime
                      );
                    }

                    case FunctionComponent: {
                      var _Component = workInProgress.type;
                      var unresolvedProps = workInProgress.pendingProps;
                      var resolvedProps =
                        workInProgress.elementType === _Component
                          ? unresolvedProps
                          : resolveDefaultProps(_Component, unresolvedProps);
                      return updateFunctionComponent(
                        current$$1,
                        workInProgress,
                        _Component,
                        resolvedProps,
                        renderExpirationTime
                      );
                    }

                    case ClassComponent: {
                      var _Component2 = workInProgress.type;
                      var _unresolvedProps = workInProgress.pendingProps;

                      var _resolvedProps =
                        workInProgress.elementType === _Component2
                          ? _unresolvedProps
                          : resolveDefaultProps(_Component2, _unresolvedProps);

                      return updateClassComponent(
                        current$$1,
                        workInProgress,
                        _Component2,
                        _resolvedProps,
                        renderExpirationTime
                      );
                    }

                    case HostRoot:
                      return updateHostRoot(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case HostComponent:
                      return updateHostComponent(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case HostText:
                      return updateHostText(current$$1, workInProgress);

                    case SuspenseComponent:
                      return updateSuspenseComponent(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case HostPortal:
                      return updatePortalComponent(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case ForwardRef: {
                      var type = workInProgress.type;
                      var _unresolvedProps2 = workInProgress.pendingProps;

                      var _resolvedProps2 =
                        workInProgress.elementType === type
                          ? _unresolvedProps2
                          : resolveDefaultProps(type, _unresolvedProps2);

                      return updateForwardRef(
                        current$$1,
                        workInProgress,
                        type,
                        _resolvedProps2,
                        renderExpirationTime
                      );
                    }

                    case Fragment:
                      return updateFragment(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case Mode:
                      return updateMode(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case Profiler:
                      return updateProfiler(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case ContextProvider:
                      return updateContextProvider(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case ContextConsumer:
                      return updateContextConsumer(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );

                    case MemoComponent: {
                      var _type2 = workInProgress.type;
                      var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

                      var _resolvedProps3 = resolveDefaultProps(
                        _type2,
                        _unresolvedProps3
                      );

                      {
                        if (
                          workInProgress.type !== workInProgress.elementType
                        ) {
                          var outerPropTypes = _type2.propTypes;

                          if (outerPropTypes) {
                            checkPropTypes(
                              outerPropTypes,
                              _resolvedProps3, // Resolved for outer only
                              'prop',
                              getComponentName(_type2),
                              getCurrentFiberStackInDev
                            );
                          }
                        }
                      }

                      _resolvedProps3 = resolveDefaultProps(
                        _type2.type,
                        _resolvedProps3
                      );
                      return updateMemoComponent(
                        current$$1,
                        workInProgress,
                        _type2,
                        _resolvedProps3,
                        updateExpirationTime,
                        renderExpirationTime
                      );
                    }

                    case SimpleMemoComponent: {
                      return updateSimpleMemoComponent(
                        current$$1,
                        workInProgress,
                        workInProgress.type,
                        workInProgress.pendingProps,
                        updateExpirationTime,
                        renderExpirationTime
                      );
                    }

                    case IncompleteClassComponent: {
                      var _Component3 = workInProgress.type;
                      var _unresolvedProps4 = workInProgress.pendingProps;

                      var _resolvedProps4 =
                        workInProgress.elementType === _Component3
                          ? _unresolvedProps4
                          : resolveDefaultProps(_Component3, _unresolvedProps4);

                      return mountIncompleteClassComponent(
                        current$$1,
                        workInProgress,
                        _Component3,
                        _resolvedProps4,
                        renderExpirationTime
                      );
                    }

                    case SuspenseListComponent: {
                      return updateSuspenseListComponent(
                        current$$1,
                        workInProgress,
                        renderExpirationTime
                      );
                    }

                    case FundamentalComponent: {
                      if (enableFundamentalAPI) {
                        return updateFundamentalComponent$1(
                          current$$1,
                          workInProgress,
                          renderExpirationTime
                        );
                      }

                      break;
                    }

                    case ScopeComponent: {
                      if (enableScopeAPI) {
                        return updateScopeComponent(
                          current$$1,
                          workInProgress,
                          renderExpirationTime
                        );
                      }

                      break;
                    }
                  }

                  {
                    {
                      throw Error(
                        'Unknown unit of work tag (' +
                          workInProgress.tag +
                          '). This error is likely caused by a bug in React. Please file an issue.'
                      );
                    }
                  }
                }

                function createFundamentalStateInstance(
                  currentFiber,
                  props,
                  impl,
                  state
                ) {
                  return {
                    currentFiber: currentFiber,
                    impl: impl,
                    instance: null,
                    prevProps: null,
                    props: props,
                    state: state,
                  };
                }

                function isFiberSuspenseAndTimedOut(fiber) {
                  return (
                    fiber.tag === SuspenseComponent &&
                    fiber.memoizedState !== null
                  );
                }

                function getSuspenseFallbackChild(fiber) {
                  return fiber.child.sibling.child;
                }

                var emptyObject$1 = {};

                function collectScopedNodes(node, fn, scopedNodes) {
                  if (enableScopeAPI) {
                    if (node.tag === HostComponent) {
                      var _type = node.type,
                        memoizedProps = node.memoizedProps,
                        stateNode = node.stateNode;

                      var _instance = getPublicInstance(stateNode);

                      if (
                        _instance !== null &&
                        fn(_type, memoizedProps || emptyObject$1, _instance) ===
                          true
                      ) {
                        scopedNodes.push(_instance);
                      }
                    }

                    var child = node.child;

                    if (isFiberSuspenseAndTimedOut(node)) {
                      child = getSuspenseFallbackChild(node);
                    }

                    if (child !== null) {
                      collectScopedNodesFromChildren(child, fn, scopedNodes);
                    }
                  }
                }

                function collectFirstScopedNode(node, fn) {
                  if (enableScopeAPI) {
                    if (node.tag === HostComponent) {
                      var _type2 = node.type,
                        memoizedProps = node.memoizedProps,
                        stateNode = node.stateNode;

                      var _instance2 = getPublicInstance(stateNode);

                      if (
                        _instance2 !== null &&
                        fn(_type2, memoizedProps, _instance2) === true
                      ) {
                        return _instance2;
                      }
                    }

                    var child = node.child;

                    if (isFiberSuspenseAndTimedOut(node)) {
                      child = getSuspenseFallbackChild(node);
                    }

                    if (child !== null) {
                      return collectFirstScopedNodeFromChildren(child, fn);
                    }
                  }

                  return null;
                }

                function collectScopedNodesFromChildren(
                  startingChild,
                  fn,
                  scopedNodes
                ) {
                  var child = startingChild;

                  while (child !== null) {
                    collectScopedNodes(child, fn, scopedNodes);
                    child = child.sibling;
                  }
                }

                function collectFirstScopedNodeFromChildren(startingChild, fn) {
                  var child = startingChild;

                  while (child !== null) {
                    var scopedNode = collectFirstScopedNode(child, fn);

                    if (scopedNode !== null) {
                      return scopedNode;
                    }

                    child = child.sibling;
                  }

                  return null;
                }

                function collectNearestScopeMethods(
                  node,
                  scope,
                  childrenScopes
                ) {
                  if (isValidScopeNode(node, scope)) {
                    childrenScopes.push(node.stateNode.methods);
                  } else {
                    var child = node.child;

                    if (isFiberSuspenseAndTimedOut(node)) {
                      child = getSuspenseFallbackChild(node);
                    }

                    if (child !== null) {
                      collectNearestChildScopeMethods(
                        child,
                        scope,
                        childrenScopes
                      );
                    }
                  }
                }

                function collectNearestChildScopeMethods(
                  startingChild,
                  scope,
                  childrenScopes
                ) {
                  var child = startingChild;

                  while (child !== null) {
                    collectNearestScopeMethods(child, scope, childrenScopes);
                    child = child.sibling;
                  }
                }

                function isValidScopeNode(node, scope) {
                  return (
                    node.tag === ScopeComponent &&
                    node.type === scope &&
                    node.stateNode !== null
                  );
                }

                function createScopeMethods(scope, instance) {
                  return {
                    getChildren: function() {
                      var currentFiber = instance.fiber;
                      var child = currentFiber.child;
                      var childrenScopes = [];

                      if (child !== null) {
                        collectNearestChildScopeMethods(
                          child,
                          scope,
                          childrenScopes
                        );
                      }

                      return childrenScopes.length === 0
                        ? null
                        : childrenScopes;
                    },
                    getChildrenFromRoot: function() {
                      var currentFiber = instance.fiber;
                      var node = currentFiber;

                      while (node !== null) {
                        var parent = node.return;

                        if (parent === null) {
                          break;
                        }

                        node = parent;

                        if (
                          node.tag === ScopeComponent &&
                          node.type === scope
                        ) {
                          break;
                        }
                      }

                      var childrenScopes = [];
                      collectNearestChildScopeMethods(
                        node.child,
                        scope,
                        childrenScopes
                      );
                      return childrenScopes.length === 0
                        ? null
                        : childrenScopes;
                    },
                    getParent: function() {
                      var node = instance.fiber.return;

                      while (node !== null) {
                        if (
                          node.tag === ScopeComponent &&
                          node.type === scope
                        ) {
                          return node.stateNode.methods;
                        }

                        node = node.return;
                      }

                      return null;
                    },
                    getProps: function() {
                      var currentFiber = instance.fiber;
                      return currentFiber.memoizedProps;
                    },
                    queryAllNodes: function(fn) {
                      var currentFiber = instance.fiber;
                      var child = currentFiber.child;
                      var scopedNodes = [];

                      if (child !== null) {
                        collectScopedNodesFromChildren(child, fn, scopedNodes);
                      }

                      return scopedNodes.length === 0 ? null : scopedNodes;
                    },
                    queryFirstNode: function(fn) {
                      var currentFiber = instance.fiber;
                      var child = currentFiber.child;

                      if (child !== null) {
                        return collectFirstScopedNodeFromChildren(child, fn);
                      }

                      return null;
                    },
                    containsNode: function(node) {
                      var fiber = getInstanceFromNode(node);

                      while (fiber !== null) {
                        if (
                          fiber.tag === ScopeComponent &&
                          fiber.type === scope &&
                          fiber.stateNode === instance
                        ) {
                          return true;
                        }

                        fiber = fiber.return;
                      }

                      return false;
                    },
                  };
                }

                function markUpdate(workInProgress) {
                  // Tag the fiber with an update effect. This turns a Placement into
                  // a PlacementAndUpdate.
                  workInProgress.effectTag |= Update;
                }

                function markRef$1(workInProgress) {
                  workInProgress.effectTag |= Ref;
                }

                var appendAllChildren;
                var updateHostContainer;
                var updateHostComponent$1;
                var updateHostText$1;

                if (supportsMutation) {
                  // Mutation mode
                  appendAllChildren = function(
                    parent,
                    workInProgress,
                    needsVisibilityToggle,
                    isHidden
                  ) {
                    // We only have the top Fiber that was created but we need recurse down its
                    // children to find all the terminal nodes.
                    var node = workInProgress.child;

                    while (node !== null) {
                      if (node.tag === HostComponent || node.tag === HostText) {
                        appendInitialChild(parent, node.stateNode);
                      } else if (
                        enableFundamentalAPI &&
                        node.tag === FundamentalComponent
                      ) {
                        appendInitialChild(parent, node.stateNode.instance);
                      } else if (node.tag === HostPortal) {
                        // If we have a portal child, then we don't want to traverse
                        // down its children. Instead, we'll get insertions from each child in
                        // the portal directly.
                      } else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      }

                      if (node === workInProgress) {
                        return;
                      }

                      while (node.sibling === null) {
                        if (
                          node.return === null ||
                          node.return === workInProgress
                        ) {
                          return;
                        }

                        node = node.return;
                      }

                      node.sibling.return = node.return;
                      node = node.sibling;
                    }
                  };

                  updateHostContainer = function(workInProgress) {
                    // Noop
                  };

                  updateHostComponent$1 = function(
                    current,
                    workInProgress,
                    type,
                    newProps,
                    rootContainerInstance
                  ) {
                    // If we have an alternate, that means this is an update and we need to
                    // schedule a side-effect to do the updates.
                    var oldProps = current.memoizedProps;

                    if (oldProps === newProps) {
                      // In mutation mode, this is sufficient for a bailout because
                      // we won't touch this node even if children changed.
                      return;
                    } // If we get updated because one of our children updated, we don't
                    // have newProps so we'll have to reuse them.
                    // TODO: Split the update API as separate for the props vs. children.
                    // Even better would be if children weren't special cased at all tho.

                    var instance = workInProgress.stateNode;
                    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
                    // component is hitting the resume path. Figure out why. Possibly
                    // related to `hidden`.

                    var updatePayload = prepareUpdate(
                      instance,
                      type,
                      oldProps,
                      newProps,
                      rootContainerInstance,
                      currentHostContext
                    ); // TODO: Type this specific to this type of component.

                    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
                    // is a new ref we mark this as an update. All the work is done in commitWork.

                    if (updatePayload) {
                      markUpdate(workInProgress);
                    }
                  };

                  updateHostText$1 = function(
                    current,
                    workInProgress,
                    oldText,
                    newText
                  ) {
                    // If the text differs, mark it as an update. All the work in done in commitWork.
                    if (oldText !== newText) {
                      markUpdate(workInProgress);
                    }
                  };
                } else if (supportsPersistence) {
                  // Persistent host tree mode
                  appendAllChildren = function(
                    parent,
                    workInProgress,
                    needsVisibilityToggle,
                    isHidden
                  ) {
                    // We only have the top Fiber that was created but we need recurse down its
                    // children to find all the terminal nodes.
                    var node = workInProgress.child;

                    while (node !== null) {
                      // eslint-disable-next-line no-labels
                      branches: if (node.tag === HostComponent) {
                        var instance = node.stateNode;

                        if (needsVisibilityToggle && isHidden) {
                          // This child is inside a timed out tree. Hide it.
                          var props = node.memoizedProps;
                          var type = node.type;
                          instance = cloneHiddenInstance(
                            instance,
                            type,
                            props,
                            node
                          );
                        }

                        appendInitialChild(parent, instance);
                      } else if (node.tag === HostText) {
                        var _instance = node.stateNode;

                        if (needsVisibilityToggle && isHidden) {
                          // This child is inside a timed out tree. Hide it.
                          var text = node.memoizedProps;
                          _instance = cloneHiddenTextInstance(
                            _instance,
                            text,
                            node
                          );
                        }

                        appendInitialChild(parent, _instance);
                      } else if (
                        enableFundamentalAPI &&
                        node.tag === FundamentalComponent
                      ) {
                        var _instance2 = node.stateNode.instance;

                        if (needsVisibilityToggle && isHidden) {
                          // This child is inside a timed out tree. Hide it.
                          var _props = node.memoizedProps;
                          var _type = node.type;
                          _instance2 = cloneHiddenInstance(
                            _instance2,
                            _type,
                            _props,
                            node
                          );
                        }

                        appendInitialChild(parent, _instance2);
                      } else if (node.tag === HostPortal) {
                        // If we have a portal child, then we don't want to traverse
                        // down its children. Instead, we'll get insertions from each child in
                        // the portal directly.
                      } else if (node.tag === SuspenseComponent) {
                        if ((node.effectTag & Update) !== NoEffect) {
                          // Need to toggle the visibility of the primary children.
                          var newIsHidden = node.memoizedState !== null;

                          if (newIsHidden) {
                            var primaryChildParent = node.child;

                            if (primaryChildParent !== null) {
                              if (primaryChildParent.child !== null) {
                                primaryChildParent.child.return = primaryChildParent;
                                appendAllChildren(
                                  parent,
                                  primaryChildParent,
                                  true,
                                  newIsHidden
                                );
                              }

                              var fallbackChildParent =
                                primaryChildParent.sibling;

                              if (fallbackChildParent !== null) {
                                fallbackChildParent.return = node;
                                node = fallbackChildParent;
                                continue;
                              }
                            }
                          }
                        }

                        if (node.child !== null) {
                          // Continue traversing like normal
                          node.child.return = node;
                          node = node.child;
                          continue;
                        }
                      } else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      } // $FlowFixMe This is correct but Flow is confused by the labeled break.

                      node = node;

                      if (node === workInProgress) {
                        return;
                      }

                      while (node.sibling === null) {
                        if (
                          node.return === null ||
                          node.return === workInProgress
                        ) {
                          return;
                        }

                        node = node.return;
                      }

                      node.sibling.return = node.return;
                      node = node.sibling;
                    }
                  }; // An unfortunate fork of appendAllChildren because we have two different parent types.

                  var appendAllChildrenToContainer = function(
                    containerChildSet,
                    workInProgress,
                    needsVisibilityToggle,
                    isHidden
                  ) {
                    // We only have the top Fiber that was created but we need recurse down its
                    // children to find all the terminal nodes.
                    var node = workInProgress.child;

                    while (node !== null) {
                      // eslint-disable-next-line no-labels
                      branches: if (node.tag === HostComponent) {
                        var instance = node.stateNode;

                        if (needsVisibilityToggle && isHidden) {
                          // This child is inside a timed out tree. Hide it.
                          var props = node.memoizedProps;
                          var type = node.type;
                          instance = cloneHiddenInstance(
                            instance,
                            type,
                            props,
                            node
                          );
                        }

                        appendChildToContainerChildSet(
                          containerChildSet,
                          instance
                        );
                      } else if (node.tag === HostText) {
                        var _instance3 = node.stateNode;

                        if (needsVisibilityToggle && isHidden) {
                          // This child is inside a timed out tree. Hide it.
                          var text = node.memoizedProps;
                          _instance3 = cloneHiddenTextInstance(
                            _instance3,
                            text,
                            node
                          );
                        }

                        appendChildToContainerChildSet(
                          containerChildSet,
                          _instance3
                        );
                      } else if (
                        enableFundamentalAPI &&
                        node.tag === FundamentalComponent
                      ) {
                        var _instance4 = node.stateNode.instance;

                        if (needsVisibilityToggle && isHidden) {
                          // This child is inside a timed out tree. Hide it.
                          var _props2 = node.memoizedProps;
                          var _type2 = node.type;
                          _instance4 = cloneHiddenInstance(
                            _instance4,
                            _type2,
                            _props2,
                            node
                          );
                        }

                        appendChildToContainerChildSet(
                          containerChildSet,
                          _instance4
                        );
                      } else if (node.tag === HostPortal) {
                        // If we have a portal child, then we don't want to traverse
                        // down its children. Instead, we'll get insertions from each child in
                        // the portal directly.
                      } else if (node.tag === SuspenseComponent) {
                        if ((node.effectTag & Update) !== NoEffect) {
                          // Need to toggle the visibility of the primary children.
                          var newIsHidden = node.memoizedState !== null;

                          if (newIsHidden) {
                            var primaryChildParent = node.child;

                            if (primaryChildParent !== null) {
                              if (primaryChildParent.child !== null) {
                                primaryChildParent.child.return = primaryChildParent;
                                appendAllChildrenToContainer(
                                  containerChildSet,
                                  primaryChildParent,
                                  true,
                                  newIsHidden
                                );
                              }

                              var fallbackChildParent =
                                primaryChildParent.sibling;

                              if (fallbackChildParent !== null) {
                                fallbackChildParent.return = node;
                                node = fallbackChildParent;
                                continue;
                              }
                            }
                          }
                        }

                        if (node.child !== null) {
                          // Continue traversing like normal
                          node.child.return = node;
                          node = node.child;
                          continue;
                        }
                      } else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      } // $FlowFixMe This is correct but Flow is confused by the labeled break.

                      node = node;

                      if (node === workInProgress) {
                        return;
                      }

                      while (node.sibling === null) {
                        if (
                          node.return === null ||
                          node.return === workInProgress
                        ) {
                          return;
                        }

                        node = node.return;
                      }

                      node.sibling.return = node.return;
                      node = node.sibling;
                    }
                  };

                  updateHostContainer = function(workInProgress) {
                    var portalOrRoot = workInProgress.stateNode;
                    var childrenUnchanged = workInProgress.firstEffect === null;

                    if (childrenUnchanged) {
                      // No changes, just reuse the existing instance.
                    } else {
                      var container = portalOrRoot.containerInfo;
                      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

                      appendAllChildrenToContainer(
                        newChildSet,
                        workInProgress,
                        false,
                        false
                      );
                      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

                      markUpdate(workInProgress);
                      finalizeContainerChildren(container, newChildSet);
                    }
                  };

                  updateHostComponent$1 = function(
                    current,
                    workInProgress,
                    type,
                    newProps,
                    rootContainerInstance
                  ) {
                    var currentInstance = current.stateNode;
                    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
                    // This guarantees that we can reuse all of them.

                    var childrenUnchanged = workInProgress.firstEffect === null;

                    if (childrenUnchanged && oldProps === newProps) {
                      // No changes, just reuse the existing instance.
                      // Note that this might release a previous clone.
                      workInProgress.stateNode = currentInstance;
                      return;
                    }

                    var recyclableInstance = workInProgress.stateNode;
                    var currentHostContext = getHostContext();
                    var updatePayload = null;

                    if (oldProps !== newProps) {
                      updatePayload = prepareUpdate(
                        recyclableInstance,
                        type,
                        oldProps,
                        newProps,
                        rootContainerInstance,
                        currentHostContext
                      );
                    }

                    if (childrenUnchanged && updatePayload === null) {
                      // No changes, just reuse the existing instance.
                      // Note that this might release a previous clone.
                      workInProgress.stateNode = currentInstance;
                      return;
                    }

                    var newInstance = cloneInstance(
                      currentInstance,
                      updatePayload,
                      type,
                      oldProps,
                      newProps,
                      workInProgress,
                      childrenUnchanged,
                      recyclableInstance
                    );

                    if (
                      finalizeInitialChildren(
                        newInstance,
                        type,
                        newProps,
                        rootContainerInstance,
                        currentHostContext
                      )
                    ) {
                      markUpdate(workInProgress);
                    }

                    workInProgress.stateNode = newInstance;

                    if (childrenUnchanged) {
                      // If there are no other effects in this tree, we need to flag this node as having one.
                      // Even though we're not going to use it for anything.
                      // Otherwise parents won't know that there are new children to propagate upwards.
                      markUpdate(workInProgress);
                    } else {
                      // If children might have changed, we have to add them all to the set.
                      appendAllChildren(
                        newInstance,
                        workInProgress,
                        false,
                        false
                      );
                    }
                  };

                  updateHostText$1 = function(
                    current,
                    workInProgress,
                    oldText,
                    newText
                  ) {
                    if (oldText !== newText) {
                      // If the text content differs, we'll create a new text instance for it.
                      var rootContainerInstance = getRootHostContainer();
                      var currentHostContext = getHostContext();
                      workInProgress.stateNode = createTextInstance(
                        newText,
                        rootContainerInstance,
                        currentHostContext,
                        workInProgress
                      ); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
                      // This lets the parents know that at least one of their children has changed.

                      markUpdate(workInProgress);
                    }
                  };
                } else {
                  // No host operations
                  updateHostContainer = function(workInProgress) {
                    // Noop
                  };

                  updateHostComponent$1 = function(
                    current,
                    workInProgress,
                    type,
                    newProps,
                    rootContainerInstance
                  ) {
                    // Noop
                  };

                  updateHostText$1 = function(
                    current,
                    workInProgress,
                    oldText,
                    newText
                  ) {
                    // Noop
                  };
                }

                function cutOffTailIfNeeded(
                  renderState,
                  hasRenderedATailFallback
                ) {
                  switch (renderState.tailMode) {
                    case 'hidden': {
                      // Any insertions at the end of the tail list after this point
                      // should be invisible. If there are already mounted boundaries
                      // anything before them are not considered for collapsing.
                      // Therefore we need to go through the whole tail to find if
                      // there are any.
                      var tailNode = renderState.tail;
                      var lastTailNode = null;

                      while (tailNode !== null) {
                        if (tailNode.alternate !== null) {
                          lastTailNode = tailNode;
                        }

                        tailNode = tailNode.sibling;
                      } // Next we're simply going to delete all insertions after the
                      // last rendered item.

                      if (lastTailNode === null) {
                        // All remaining items in the tail are insertions.
                        renderState.tail = null;
                      } else {
                        // Detach the insertion after the last node that was already
                        // inserted.
                        lastTailNode.sibling = null;
                      }

                      break;
                    }

                    case 'collapsed': {
                      // Any insertions at the end of the tail list after this point
                      // should be invisible. If there are already mounted boundaries
                      // anything before them are not considered for collapsing.
                      // Therefore we need to go through the whole tail to find if
                      // there are any.
                      var _tailNode = renderState.tail;
                      var _lastTailNode = null;

                      while (_tailNode !== null) {
                        if (_tailNode.alternate !== null) {
                          _lastTailNode = _tailNode;
                        }

                        _tailNode = _tailNode.sibling;
                      } // Next we're simply going to delete all insertions after the
                      // last rendered item.

                      if (_lastTailNode === null) {
                        // All remaining items in the tail are insertions.
                        if (
                          !hasRenderedATailFallback &&
                          renderState.tail !== null
                        ) {
                          // We suspended during the head. We want to show at least one
                          // row at the tail. So we'll keep on and cut off the rest.
                          renderState.tail.sibling = null;
                        } else {
                          renderState.tail = null;
                        }
                      } else {
                        // Detach the insertion after the last node that was already
                        // inserted.
                        _lastTailNode.sibling = null;
                      }

                      break;
                    }
                  }
                }

                function completeWork(
                  current,
                  workInProgress,
                  renderExpirationTime
                ) {
                  var newProps = workInProgress.pendingProps;

                  switch (workInProgress.tag) {
                    case IndeterminateComponent:
                      break;

                    case LazyComponent:
                      break;

                    case SimpleMemoComponent:
                    case FunctionComponent:
                      break;

                    case ClassComponent: {
                      var Component = workInProgress.type;

                      if (isContextProvider(Component)) {
                        popContext(workInProgress);
                      }

                      break;
                    }

                    case HostRoot: {
                      popHostContainer(workInProgress);
                      popTopLevelContextObject(workInProgress);
                      var fiberRoot = workInProgress.stateNode;

                      if (fiberRoot.pendingContext) {
                        fiberRoot.context = fiberRoot.pendingContext;
                        fiberRoot.pendingContext = null;
                      }

                      if (current === null || current.child === null) {
                        // If we hydrated, pop so that we can delete any remaining children
                        // that weren't hydrated.
                        var wasHydrated = popHydrationState(workInProgress);

                        if (wasHydrated) {
                          // If we hydrated, then we'll need to schedule an update for
                          // the commit side-effects on the root.
                          markUpdate(workInProgress);
                        }
                      }

                      updateHostContainer(workInProgress);
                      break;
                    }

                    case HostComponent: {
                      popHostContext(workInProgress);
                      var rootContainerInstance = getRootHostContainer();
                      var type = workInProgress.type;

                      if (
                        current !== null &&
                        workInProgress.stateNode != null
                      ) {
                        updateHostComponent$1(
                          current,
                          workInProgress,
                          type,
                          newProps,
                          rootContainerInstance
                        );

                        if (enableFlareAPI) {
                          var prevListeners = current.memoizedProps.listeners;
                          var nextListeners = newProps.listeners;

                          if (prevListeners !== nextListeners) {
                            markUpdate(workInProgress);
                          }
                        }

                        if (current.ref !== workInProgress.ref) {
                          markRef$1(workInProgress);
                        }
                      } else {
                        if (!newProps) {
                          if (!(workInProgress.stateNode !== null)) {
                            {
                              throw Error(
                                'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                              );
                            }
                          } // This can happen when we abort work.

                          break;
                        }

                        var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                        // "stack" as the parent. Then append children as we go in beginWork
                        // or completeWork depending on we want to add then top->down or
                        // bottom->up. Top->down is faster in IE11.

                        var _wasHydrated = popHydrationState(workInProgress);

                        if (_wasHydrated) {
                          // TODO: Move this and createInstance step into the beginPhase
                          // to consolidate.
                          if (
                            prepareToHydrateHostInstance(
                              workInProgress,
                              rootContainerInstance,
                              currentHostContext
                            )
                          ) {
                            // If changes to the hydrated node needs to be applied at the
                            // commit-phase we mark this as such.
                            markUpdate(workInProgress);
                          }

                          if (enableFlareAPI) {
                            var listeners = newProps.listeners;

                            if (listeners != null) {
                              updateEventListeners(
                                listeners,
                                workInProgress,
                                rootContainerInstance
                              );
                            }
                          }
                        } else {
                          var instance = createInstance(
                            type,
                            newProps,
                            rootContainerInstance,
                            currentHostContext,
                            workInProgress
                          );
                          appendAllChildren(
                            instance,
                            workInProgress,
                            false,
                            false
                          ); // This needs to be set before we mount Flare event listeners

                          workInProgress.stateNode = instance;

                          if (enableFlareAPI) {
                            var _listeners = newProps.listeners;

                            if (_listeners != null) {
                              updateEventListeners(
                                _listeners,
                                workInProgress,
                                rootContainerInstance
                              );
                            }
                          } // Certain renderers require commit-time effects for initial mount.
                          // (eg DOM renderer supports auto-focus for certain elements).
                          // Make sure such renderers get scheduled for later work.

                          if (
                            finalizeInitialChildren(
                              instance,
                              type,
                              newProps,
                              rootContainerInstance,
                              currentHostContext
                            )
                          ) {
                            markUpdate(workInProgress);
                          }
                        }

                        if (workInProgress.ref !== null) {
                          // If there is a ref on a host node we need to schedule a callback
                          markRef$1(workInProgress);
                        }
                      }

                      break;
                    }

                    case HostText: {
                      var newText = newProps;

                      if (current && workInProgress.stateNode != null) {
                        var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                        // to schedule a side-effect to do the updates.

                        updateHostText$1(
                          current,
                          workInProgress,
                          oldText,
                          newText
                        );
                      } else {
                        if (typeof newText !== 'string') {
                          if (!(workInProgress.stateNode !== null)) {
                            {
                              throw Error(
                                'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                              );
                            }
                          } // This can happen when we abort work.
                        }

                        var _rootContainerInstance = getRootHostContainer();

                        var _currentHostContext = getHostContext();

                        var _wasHydrated2 = popHydrationState(workInProgress);

                        if (_wasHydrated2) {
                          if (
                            prepareToHydrateHostTextInstance(workInProgress)
                          ) {
                            markUpdate(workInProgress);
                          }
                        } else {
                          workInProgress.stateNode = createTextInstance(
                            newText,
                            _rootContainerInstance,
                            _currentHostContext,
                            workInProgress
                          );
                        }
                      }

                      break;
                    }

                    case ForwardRef:
                      break;

                    case SuspenseComponent: {
                      popSuspenseContext(workInProgress);
                      var nextState = workInProgress.memoizedState;

                      if (enableSuspenseServerRenderer) {
                        if (
                          nextState !== null &&
                          nextState.dehydrated !== null
                        ) {
                          if (current === null) {
                            var _wasHydrated3 = popHydrationState(
                              workInProgress
                            );

                            if (!_wasHydrated3) {
                              {
                                throw Error(
                                  'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.'
                                );
                              }
                            }

                            prepareToHydrateHostSuspenseInstance(
                              workInProgress
                            );

                            if (enableSchedulerTracing) {
                              markSpawnedWork(Never);
                            }

                            return null;
                          } else {
                            // We should never have been in a hydration state if we didn't have a current.
                            // However, in some of those paths, we might have reentered a hydration state
                            // and then we might be inside a hydration state. In that case, we'll need to
                            // exit out of it.
                            resetHydrationState();

                            if (
                              (workInProgress.effectTag & DidCapture) ===
                              NoEffect
                            ) {
                              // This boundary did not suspend so it's now hydrated and unsuspended.
                              workInProgress.memoizedState = null;
                            } // If nothing suspended, we need to schedule an effect to mark this boundary
                            // as having hydrated so events know that they're free be invoked.
                            // It's also a signal to replay events and the suspense callback.
                            // If something suspended, schedule an effect to attach retry listeners.
                            // So we might as well always mark this.

                            workInProgress.effectTag |= Update;
                            return null;
                          }
                        }
                      }

                      if (
                        (workInProgress.effectTag & DidCapture) !==
                        NoEffect
                      ) {
                        // Something suspended. Re-render with the fallback children.
                        workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

                        return workInProgress;
                      }

                      var nextDidTimeout = nextState !== null;
                      var prevDidTimeout = false;

                      if (current === null) {
                        if (
                          workInProgress.memoizedProps.fallback !== undefined
                        ) {
                          popHydrationState(workInProgress);
                        }
                      } else {
                        var prevState = current.memoizedState;
                        prevDidTimeout = prevState !== null;

                        if (!nextDidTimeout && prevState !== null) {
                          // We just switched from the fallback to the normal children.
                          // Delete the fallback.
                          // TODO: Would it be better to store the fallback fragment on
                          // the stateNode during the begin phase?
                          var currentFallbackChild = current.child.sibling;

                          if (currentFallbackChild !== null) {
                            // Deletions go at the beginning of the return fiber's effect list
                            var first = workInProgress.firstEffect;

                            if (first !== null) {
                              workInProgress.firstEffect = currentFallbackChild;
                              currentFallbackChild.nextEffect = first;
                            } else {
                              workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                              currentFallbackChild.nextEffect = null;
                            }

                            currentFallbackChild.effectTag = Deletion;
                          }
                        }
                      }

                      if (nextDidTimeout && !prevDidTimeout) {
                        // If this subtreee is running in blocking mode we can suspend,
                        // otherwise we won't suspend.
                        // TODO: This will still suspend a synchronous tree if anything
                        // in the concurrent tree already suspended during this render.
                        // This is a known bug.
                        if ((workInProgress.mode & BlockingMode) !== NoMode) {
                          // TODO: Move this back to throwException because this is too late
                          // if this is a large tree which is common for initial loads. We
                          // don't know if we should restart a render or not until we get
                          // this marker, and this is too late.
                          // If this render already had a ping or lower pri updates,
                          // and this is the first time we know we're going to suspend we
                          // should be able to immediately restart from within throwException.
                          var hasInvisibleChildContext =
                            current === null &&
                            workInProgress.memoizedProps
                              .unstable_avoidThisFallback !== true;

                          if (
                            hasInvisibleChildContext ||
                            hasSuspenseContext(
                              suspenseStackCursor.current,
                              InvisibleParentSuspenseContext
                            )
                          ) {
                            // If this was in an invisible tree or a new render, then showing
                            // this boundary is ok.
                            renderDidSuspend();
                          } else {
                            // Otherwise, we're going to have to hide content so we should
                            // suspend for longer if possible.
                            renderDidSuspendDelayIfPossible();
                          }
                        }
                      }

                      if (supportsPersistence) {
                        // TODO: Only schedule updates if not prevDidTimeout.
                        if (nextDidTimeout) {
                          // If this boundary just timed out, schedule an effect to attach a
                          // retry listener to the proimse. This flag is also used to hide the
                          // primary children.
                          workInProgress.effectTag |= Update;
                        }
                      }

                      if (supportsMutation) {
                        // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                        if (nextDidTimeout || prevDidTimeout) {
                          // If this boundary just timed out, schedule an effect to attach a
                          // retry listener to the proimse. This flag is also used to hide the
                          // primary children. In mutation mode, we also need the flag to
                          // *unhide* children that were previously hidden, so check if the
                          // is currently timed out, too.
                          workInProgress.effectTag |= Update;
                        }
                      }

                      if (
                        enableSuspenseCallback &&
                        workInProgress.updateQueue !== null &&
                        workInProgress.memoizedProps.suspenseCallback != null
                      ) {
                        // Always notify the callback
                        workInProgress.effectTag |= Update;
                      }

                      break;
                    }

                    case Fragment:
                      break;

                    case Mode:
                      break;

                    case Profiler:
                      break;

                    case HostPortal:
                      popHostContainer(workInProgress);
                      updateHostContainer(workInProgress);
                      break;

                    case ContextProvider:
                      // Pop provider fiber
                      popProvider(workInProgress);
                      break;

                    case ContextConsumer:
                      break;

                    case MemoComponent:
                      break;

                    case IncompleteClassComponent: {
                      // Same as class component case. I put it down here so that the tags are
                      // sequential to ensure this switch is compiled to a jump table.
                      var _Component = workInProgress.type;

                      if (isContextProvider(_Component)) {
                        popContext(workInProgress);
                      }

                      break;
                    }

                    case SuspenseListComponent: {
                      popSuspenseContext(workInProgress);
                      var renderState = workInProgress.memoizedState;

                      if (renderState === null) {
                        // We're running in the default, "independent" mode. We don't do anything
                        // in this mode.
                        break;
                      }

                      var didSuspendAlready =
                        (workInProgress.effectTag & DidCapture) !== NoEffect;
                      var renderedTail = renderState.rendering;

                      if (renderedTail === null) {
                        // We just rendered the head.
                        if (!didSuspendAlready) {
                          // This is the first pass. We need to figure out if anything is still
                          // suspended in the rendered set.
                          // If new content unsuspended, but there's still some content that
                          // didn't. Then we need to do a second pass that forces everything
                          // to keep showing their fallbacks.
                          // We might be suspended if something in this render pass suspended, or
                          // something in the previous committed pass suspended. Otherwise,
                          // there's no chance so we can skip the expensive call to
                          // findFirstSuspended.
                          var cannotBeSuspended =
                            renderHasNotSuspendedYet() &&
                            (current === null ||
                              (current.effectTag & DidCapture) === NoEffect);

                          if (!cannotBeSuspended) {
                            var row = workInProgress.child;

                            while (row !== null) {
                              var suspended = findFirstSuspended(row);

                              if (suspended !== null) {
                                didSuspendAlready = true;
                                workInProgress.effectTag |= DidCapture;
                                cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                // part of the second pass. In that case nothing will subscribe to
                                // its thennables. Instead, we'll transfer its thennables to the
                                // SuspenseList so that it can retry if they resolve.
                                // There might be multiple of these in the list but since we're
                                // going to wait for all of them anyway, it doesn't really matter
                                // which ones gets to ping. In theory we could get clever and keep
                                // track of how many dependencies remain but it gets tricky because
                                // in the meantime, we can add/remove/change items and dependencies.
                                // We might bail out of the loop before finding any but that
                                // doesn't matter since that means that the other boundaries that
                                // we did find already has their listeners attached.

                                var newThennables = suspended.updateQueue;

                                if (newThennables !== null) {
                                  workInProgress.updateQueue = newThennables;
                                  workInProgress.effectTag |= Update;
                                } // Rerender the whole list, but this time, we'll force fallbacks
                                // to stay in place.
                                // Reset the effect list before doing the second pass since that's now invalid.

                                if (renderState.lastEffect === null) {
                                  workInProgress.firstEffect = null;
                                }

                                workInProgress.lastEffect =
                                  renderState.lastEffect; // Reset the child fibers to their original state.

                                resetChildFibers(
                                  workInProgress,
                                  renderExpirationTime
                                ); // Set up the Suspense Context to force suspense and immediately
                                // rerender the children.

                                pushSuspenseContext(
                                  workInProgress,
                                  setShallowSuspenseContext(
                                    suspenseStackCursor.current,
                                    ForceSuspenseFallback
                                  )
                                );
                                return workInProgress.child;
                              }

                              row = row.sibling;
                            }
                          }
                        } else {
                          cutOffTailIfNeeded(renderState, false);
                        } // Next we're going to render the tail.
                      } else {
                        // Append the rendered row to the child list.
                        if (!didSuspendAlready) {
                          var _suspended = findFirstSuspended(renderedTail);

                          if (_suspended !== null) {
                            workInProgress.effectTag |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.

                            var _newThennables = _suspended.updateQueue;

                            if (_newThennables !== null) {
                              workInProgress.updateQueue = _newThennables;
                              workInProgress.effectTag |= Update;
                            }

                            cutOffTailIfNeeded(renderState, true); // This might have been modified.

                            if (
                              renderState.tail === null &&
                              renderState.tailMode === 'hidden' &&
                              !renderedTail.alternate
                            ) {
                              // We need to delete the row we just rendered.
                              // Reset the effect list to what it was before we rendered this
                              // child. The nested children have already appended themselves.
                              var lastEffect = (workInProgress.lastEffect =
                                renderState.lastEffect); // Remove any effects that were appended after this point.

                              if (lastEffect !== null) {
                                lastEffect.nextEffect = null;
                              } // We're done.

                              return null;
                            }
                          } else if (
                            now$1() > renderState.tailExpiration &&
                            renderExpirationTime > Never
                          ) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.effectTag |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. If we can show
                            // them, then they really have the same priority as this render.
                            // So we'll pick it back up the very next render pass once we've had
                            // an opportunity to yield for paint.

                            var nextPriority = renderExpirationTime - 1;
                            workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

                            if (enableSchedulerTracing) {
                              markSpawnedWork(nextPriority);
                            }
                          }
                        }

                        if (renderState.isBackwards) {
                          // The effect list of the backwards tail will have been added
                          // to the end. This breaks the guarantee that life-cycles fire in
                          // sibling order but that isn't a strong guarantee promised by React.
                          // Especially since these might also just pop in during future commits.
                          // Append to the beginning of the list.
                          renderedTail.sibling = workInProgress.child;
                          workInProgress.child = renderedTail;
                        } else {
                          var previousSibling = renderState.last;

                          if (previousSibling !== null) {
                            previousSibling.sibling = renderedTail;
                          } else {
                            workInProgress.child = renderedTail;
                          }

                          renderState.last = renderedTail;
                        }
                      }

                      if (renderState.tail !== null) {
                        // We still have tail rows to render.
                        if (renderState.tailExpiration === 0) {
                          // Heuristic for how long we're willing to spend rendering rows
                          // until we just give up and show what we have so far.
                          var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                          renderState.tailExpiration =
                            now$1() + TAIL_EXPIRATION_TIMEOUT_MS;
                        } // Pop a row.

                        var next = renderState.tail;
                        renderState.rendering = next;
                        renderState.tail = next.sibling;
                        renderState.lastEffect = workInProgress.lastEffect;
                        next.sibling = null; // Restore the context.
                        // TODO: We can probably just avoid popping it instead and only
                        // setting it the first time we go from not suspended to suspended.

                        var suspenseContext = suspenseStackCursor.current;

                        if (didSuspendAlready) {
                          suspenseContext = setShallowSuspenseContext(
                            suspenseContext,
                            ForceSuspenseFallback
                          );
                        } else {
                          suspenseContext = setDefaultShallowSuspenseContext(
                            suspenseContext
                          );
                        }

                        pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

                        return next;
                      }

                      break;
                    }

                    case FundamentalComponent: {
                      if (enableFundamentalAPI) {
                        var fundamentalImpl = workInProgress.type.impl;
                        var fundamentalInstance = workInProgress.stateNode;

                        if (fundamentalInstance === null) {
                          var getInitialState = fundamentalImpl.getInitialState;
                          var fundamentalState;

                          if (getInitialState !== undefined) {
                            fundamentalState = getInitialState(newProps);
                          }

                          fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(
                            workInProgress,
                            newProps,
                            fundamentalImpl,
                            fundamentalState || {}
                          );

                          var _instance5 = getFundamentalComponentInstance(
                            fundamentalInstance
                          );

                          fundamentalInstance.instance = _instance5;

                          if (fundamentalImpl.reconcileChildren === false) {
                            return null;
                          }

                          appendAllChildren(
                            _instance5,
                            workInProgress,
                            false,
                            false
                          );
                          mountFundamentalComponent(fundamentalInstance);
                        } else {
                          // We fire update in commit phase
                          var prevProps = fundamentalInstance.props;
                          fundamentalInstance.prevProps = prevProps;
                          fundamentalInstance.props = newProps;
                          fundamentalInstance.currentFiber = workInProgress;

                          if (supportsPersistence) {
                            var _instance6 = cloneFundamentalInstance(
                              fundamentalInstance
                            );

                            fundamentalInstance.instance = _instance6;
                            appendAllChildren(
                              _instance6,
                              workInProgress,
                              false,
                              false
                            );
                          }

                          var shouldUpdate = shouldUpdateFundamentalComponent(
                            fundamentalInstance
                          );

                          if (shouldUpdate) {
                            markUpdate(workInProgress);
                          }
                        }
                      }

                      break;
                    }

                    case ScopeComponent: {
                      if (enableScopeAPI) {
                        if (current === null) {
                          var _type3 = workInProgress.type;
                          var scopeInstance = {
                            fiber: workInProgress,
                            methods: null,
                          };
                          workInProgress.stateNode = scopeInstance;
                          scopeInstance.methods = createScopeMethods(
                            _type3,
                            scopeInstance
                          );

                          if (enableFlareAPI) {
                            var _listeners2 = newProps.listeners;

                            if (_listeners2 != null) {
                              var _rootContainerInstance2 = getRootHostContainer();

                              updateEventListeners(
                                _listeners2,
                                workInProgress,
                                _rootContainerInstance2
                              );
                            }
                          }

                          if (workInProgress.ref !== null) {
                            markRef$1(workInProgress);
                            markUpdate(workInProgress);
                          }
                        } else {
                          if (enableFlareAPI) {
                            var _prevListeners =
                              current.memoizedProps.listeners;
                            var _nextListeners = newProps.listeners;

                            if (
                              _prevListeners !== _nextListeners ||
                              workInProgress.ref !== null
                            ) {
                              markUpdate(workInProgress);
                            }
                          } else {
                            if (workInProgress.ref !== null) {
                              markUpdate(workInProgress);
                            }
                          }

                          if (current.ref !== workInProgress.ref) {
                            markRef$1(workInProgress);
                          }
                        }
                      }

                      break;
                    }

                    default: {
                      {
                        throw Error(
                          'Unknown unit of work tag (' +
                            workInProgress.tag +
                            '). This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }
                  }

                  return null;
                }

                function unwindWork(workInProgress, renderExpirationTime) {
                  switch (workInProgress.tag) {
                    case ClassComponent: {
                      var Component = workInProgress.type;

                      if (isContextProvider(Component)) {
                        popContext(workInProgress);
                      }

                      var effectTag = workInProgress.effectTag;

                      if (effectTag & ShouldCapture) {
                        workInProgress.effectTag =
                          (effectTag & ~ShouldCapture) | DidCapture;
                        return workInProgress;
                      }

                      return null;
                    }

                    case HostRoot: {
                      popHostContainer(workInProgress);
                      popTopLevelContextObject(workInProgress);
                      var _effectTag = workInProgress.effectTag;

                      if (!((_effectTag & DidCapture) === NoEffect)) {
                        {
                          throw Error(
                            'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.'
                          );
                        }
                      }

                      workInProgress.effectTag =
                        (_effectTag & ~ShouldCapture) | DidCapture;
                      return workInProgress;
                    }

                    case HostComponent: {
                      // TODO: popHydrationState
                      popHostContext(workInProgress);
                      return null;
                    }

                    case SuspenseComponent: {
                      popSuspenseContext(workInProgress);

                      if (enableSuspenseServerRenderer) {
                        var suspenseState = workInProgress.memoizedState;

                        if (
                          suspenseState !== null &&
                          suspenseState.dehydrated !== null
                        ) {
                          if (!(workInProgress.alternate !== null)) {
                            {
                              throw Error(
                                'Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.'
                              );
                            }
                          }

                          resetHydrationState();
                        }
                      }

                      var _effectTag2 = workInProgress.effectTag;

                      if (_effectTag2 & ShouldCapture) {
                        workInProgress.effectTag =
                          (_effectTag2 & ~ShouldCapture) | DidCapture; // Captured a suspense effect. Re-render the boundary.

                        return workInProgress;
                      }

                      return null;
                    }

                    case SuspenseListComponent: {
                      popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                      // caught by a nested boundary. If not, it should bubble through.

                      return null;
                    }

                    case HostPortal:
                      popHostContainer(workInProgress);
                      return null;

                    case ContextProvider:
                      popProvider(workInProgress);
                      return null;

                    default:
                      return null;
                  }
                }

                function unwindInterruptedWork(interruptedWork) {
                  switch (interruptedWork.tag) {
                    case ClassComponent: {
                      var childContextTypes =
                        interruptedWork.type.childContextTypes;

                      if (
                        childContextTypes !== null &&
                        childContextTypes !== undefined
                      ) {
                        popContext(interruptedWork);
                      }

                      break;
                    }

                    case HostRoot: {
                      popHostContainer(interruptedWork);
                      popTopLevelContextObject(interruptedWork);
                      break;
                    }

                    case HostComponent: {
                      popHostContext(interruptedWork);
                      break;
                    }

                    case HostPortal:
                      popHostContainer(interruptedWork);
                      break;

                    case SuspenseComponent:
                      popSuspenseContext(interruptedWork);
                      break;

                    case SuspenseListComponent:
                      popSuspenseContext(interruptedWork);
                      break;

                    case ContextProvider:
                      popProvider(interruptedWork);
                      break;

                    default:
                      break;
                  }
                }

                function createCapturedValue(value, source) {
                  // If the value is an error, call this function immediately after it is thrown
                  // so the stack is accurate.
                  return {
                    value: value,
                    source: source,
                    stack: getStackByFiberInDevAndProd(source),
                  };
                }

                var invokeGuardedCallbackImpl = function(
                  name,
                  func,
                  context,
                  a,
                  b,
                  c,
                  d,
                  e,
                  f
                ) {
                  var funcArgs = Array.prototype.slice.call(arguments, 3);

                  try {
                    func.apply(context, funcArgs);
                  } catch (error) {
                    this.onError(error);
                  }
                };

                {
                  // In DEV mode, we swap out invokeGuardedCallback for a special version
                  // that plays more nicely with the browser's DevTools. The idea is to preserve
                  // "Pause on exceptions" behavior. Because React wraps all user-provided
                  // functions in invokeGuardedCallback, and the production version of
                  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
                  // like caught exceptions, and the DevTools won't pause unless the developer
                  // takes the extra step of enabling pause on caught exceptions. This is
                  // unintuitive, though, because even though React has caught the error, from
                  // the developer's perspective, the error is uncaught.
                  //
                  // To preserve the expected "Pause on exceptions" behavior, we don't use a
                  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
                  // DOM node, and call the user-provided callback from inside an event handler
                  // for that fake event. If the callback throws, the error is "captured" using
                  // a global event handler. But because the error happens in a different
                  // event loop context, it does not interrupt the normal program flow.
                  // Effectively, this gives us try-catch behavior without actually using
                  // try-catch. Neat!
                  // Check that the browser supports the APIs we need to implement our special
                  // DEV version of invokeGuardedCallback
                  if (
                    typeof window !== 'undefined' &&
                    typeof window.dispatchEvent === 'function' &&
                    typeof document !== 'undefined' &&
                    typeof document.createEvent === 'function'
                  ) {
                    var fakeNode = document.createElement('react');

                    var invokeGuardedCallbackDev = function(
                      name,
                      func,
                      context,
                      a,
                      b,
                      c,
                      d,
                      e,
                      f
                    ) {
                      // If document doesn't exist we know for sure we will crash in this method
                      // when we call document.createEvent(). However this can cause confusing
                      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
                      // So we preemptively throw with a better message instead.
                      if (!(typeof document !== 'undefined')) {
                        {
                          throw Error(
                            'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'
                          );
                        }
                      }

                      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
                      // set this to true at the beginning, then set it to false right after
                      // calling the function. If the function errors, `didError` will never be
                      // set to false. This strategy works even if the browser is flaky and
                      // fails to call our global error handler, because it doesn't rely on
                      // the error event at all.

                      var didError = true; // Keeps track of the value of window.event so that we can reset it
                      // during the callback to let user code access window.event in the
                      // browsers that support it.

                      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
                      // dispatching: https://github.com/facebook/react/issues/13688

                      var windowEventDescriptor = Object.getOwnPropertyDescriptor(
                        window,
                        'event'
                      ); // Create an event handler for our fake event. We will synchronously
                      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                      // call the user-provided callback.

                      var funcArgs = Array.prototype.slice.call(arguments, 3);

                      function callCallback() {
                        // We immediately remove the callback from event listeners so that
                        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                        // nested call would trigger the fake event handlers of any call higher
                        // in the stack.
                        fakeNode.removeEventListener(
                          evtType,
                          callCallback,
                          false
                        ); // We check for window.hasOwnProperty('event') to prevent the
                        // window.event assignment in both IE <= 10 as they throw an error
                        // "Member not found" in strict mode, and in Firefox which does not
                        // support window.event.

                        if (
                          typeof window.event !== 'undefined' &&
                          window.hasOwnProperty('event')
                        ) {
                          window.event = windowEvent;
                        }

                        func.apply(context, funcArgs);
                        didError = false;
                      } // Create a global error event handler. We use this to capture the value
                      // that was thrown. It's possible that this error handler will fire more
                      // than once; for example, if non-React code also calls `dispatchEvent`
                      // and a handler for that event throws. We should be resilient to most of
                      // those cases. Even if our error event handler fires more than once, the
                      // last error event is always used. If the callback actually does error,
                      // we know that the last error event is the correct one, because it's not
                      // possible for anything else to have happened in between our callback
                      // erroring and the code that follows the `dispatchEvent` call below. If
                      // the callback doesn't error, but the error event was fired, we know to
                      // ignore it because `didError` will be false, as described above.

                      var error; // Use this to track whether the error event is ever called.

                      var didSetError = false;
                      var isCrossOriginError = false;

                      function handleWindowError(event) {
                        error = event.error;
                        didSetError = true;

                        if (
                          error === null &&
                          event.colno === 0 &&
                          event.lineno === 0
                        ) {
                          isCrossOriginError = true;
                        }

                        if (event.defaultPrevented) {
                          // Some other error handler has prevented default.
                          // Browsers silence the error report if this happens.
                          // We'll remember this to later decide whether to log it or not.
                          if (error != null && typeof error === 'object') {
                            try {
                              error._suppressLogging = true;
                            } catch (inner) {
                              // Ignore.
                            }
                          }
                        }
                      } // Create a fake event type.

                      var evtType =
                        'react-' + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

                      window.addEventListener('error', handleWindowError);
                      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
                      // errors, it will trigger our global error handler.

                      evt.initEvent(evtType, false, false);
                      fakeNode.dispatchEvent(evt);

                      if (windowEventDescriptor) {
                        Object.defineProperty(
                          window,
                          'event',
                          windowEventDescriptor
                        );
                      }

                      if (didError) {
                        if (!didSetError) {
                          // The callback errored, but the error event never fired.
                          error = new Error(
                            'An error was thrown inside one of your components, but React ' +
                              "doesn't know what it was. This is likely due to browser " +
                              'flakiness. React does its best to preserve the "Pause on ' +
                              'exceptions" behavior of the DevTools, which requires some ' +
                              "DEV-mode only tricks. It's possible that these don't work in " +
                              'your browser. Try triggering the error in production mode, ' +
                              'or switching to a modern browser. If you suspect that this is ' +
                              'actually an issue with React, please file an issue.'
                          );
                        } else if (isCrossOriginError) {
                          error = new Error(
                            "A cross-origin error was thrown. React doesn't have access to " +
                              'the actual error object in development. ' +
                              'See https://fb.me/react-crossorigin-error for more information.'
                          );
                        }

                        this.onError(error);
                      } // Remove our event listeners

                      window.removeEventListener('error', handleWindowError);
                    };

                    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
                  }
                }

                var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

                var hasError = false;
                var caughtError = null; // Used by event system to capture/rethrow the first error.

                var reporter = {
                  onError: function(error) {
                    hasError = true;
                    caughtError = error;
                  },
                };
                /**
                 * Call a function while guarding against errors that happens within it.
                 * Returns an error if it throws, otherwise null.
                 *
                 * In production, this is implemented using a try-catch. The reason we don't
                 * use a try-catch directly is so that we can swap out a different
                 * implementation in DEV mode.
                 *
                 * @param {String} name of the guard to use for logging or debugging
                 * @param {Function} func The function to invoke
                 * @param {*} context The context to use when calling the function
                 * @param {...*} args Arguments for function
                 */

                function invokeGuardedCallback(
                  name,
                  func,
                  context,
                  a,
                  b,
                  c,
                  d,
                  e,
                  f
                ) {
                  hasError = false;
                  caughtError = null;
                  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
                }
                /**
                 * Same as invokeGuardedCallback, but instead of returning an error, it stores
                 * it in a global so it can be rethrown by `rethrowCaughtError` later.
                 * TODO: See if caughtError and rethrowError can be unified.
                 *
                 * @param {String} name of the guard to use for logging or debugging
                 * @param {Function} func The function to invoke
                 * @param {*} context The context to use when calling the function
                 * @param {...*} args Arguments for function
                 */

                /**
                 * During execution of guarded functions we will capture the first error which
                 * we will rethrow to be handled by the top level error handler.
                 */

                function hasCaughtError() {
                  return hasError;
                }
                function clearCaughtError() {
                  if (hasError) {
                    var error = caughtError;
                    hasError = false;
                    caughtError = null;
                    return error;
                  } else {
                    {
                      {
                        throw Error(
                          'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }
                  }
                }

                // This module is forked in different environments.
                // By default, return `true` to log errors to the console.
                // Forks can return `false` if this isn't desirable.
                function showErrorDialog(capturedError) {
                  return true;
                }

                function logCapturedError(capturedError) {
                  var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
                  // This enables renderers like ReactNative to better manage redbox behavior.

                  if (logError === false) {
                    return;
                  }

                  var error = capturedError.error;

                  {
                    var componentName = capturedError.componentName,
                      componentStack = capturedError.componentStack,
                      errorBoundaryName = capturedError.errorBoundaryName,
                      errorBoundaryFound = capturedError.errorBoundaryFound,
                      willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
                    // `preventDefault()` in window `error` handler.
                    // We record this information as an expando on the error.

                    if (error != null && error._suppressLogging) {
                      if (errorBoundaryFound && willRetry) {
                        // The error is recoverable and was silenced.
                        // Ignore it and don't print the stack addendum.
                        // This is handy for testing error boundaries without noise.
                        return;
                      } // The error is fatal. Since the silencing might have
                      // been accidental, we'll surface it anyway.
                      // However, the browser would have silenced the original error
                      // so we'll print it first, and then print the stack addendum.

                      console.error(error); // For a more detailed description of this block, see:
                      // https://github.com/facebook/react/pull/13384
                    }

                    var componentNameMessage = componentName
                      ? 'The above error occurred in the <' +
                        componentName +
                        '> component:'
                      : 'The above error occurred in one of your React components:';
                    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

                    if (errorBoundaryFound && errorBoundaryName) {
                      if (willRetry) {
                        errorBoundaryMessage =
                          'React will try to recreate this component tree from scratch ' +
                          ('using the error boundary you provided, ' +
                            errorBoundaryName +
                            '.');
                      } else {
                        errorBoundaryMessage =
                          'This error was initially handled by the error boundary ' +
                          errorBoundaryName +
                          '.\n' +
                          'Recreating the tree from scratch failed so React will unmount the tree.';
                      }
                    } else {
                      errorBoundaryMessage =
                        'Consider adding an error boundary to your tree to customize error handling behavior.\n' +
                        'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
                    }

                    var combinedMessage =
                      '' +
                      componentNameMessage +
                      componentStack +
                      '\n\n' +
                      ('' + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
                    // We don't include the original error message and JS stack because the browser
                    // has already printed it. Even if the application swallows the error, it is still
                    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

                    console.error(combinedMessage);
                  }
                }

                var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

                {
                  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
                }

                var PossiblyWeakSet =
                  typeof WeakSet === 'function' ? WeakSet : Set;
                function logError(boundary, errorInfo) {
                  var source = errorInfo.source;
                  var stack = errorInfo.stack;

                  if (stack === null && source !== null) {
                    stack = getStackByFiberInDevAndProd(source);
                  }

                  var capturedError = {
                    componentName:
                      source !== null ? getComponentName(source.type) : null,
                    componentStack: stack !== null ? stack : '',
                    error: errorInfo.value,
                    errorBoundary: null,
                    errorBoundaryName: null,
                    errorBoundaryFound: false,
                    willRetry: false,
                  };

                  if (boundary !== null && boundary.tag === ClassComponent) {
                    capturedError.errorBoundary = boundary.stateNode;
                    capturedError.errorBoundaryName = getComponentName(
                      boundary.type
                    );
                    capturedError.errorBoundaryFound = true;
                    capturedError.willRetry = true;
                  }

                  try {
                    logCapturedError(capturedError);
                  } catch (e) {
                    // This method must not throw, or React internal state will get messed up.
                    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
                    // we want to report this error outside of the normal stack as a last resort.
                    // https://github.com/facebook/react/issues/13188
                    setTimeout(function() {
                      throw e;
                    });
                  }
                }

                var callComponentWillUnmountWithTimer = function(
                  current$$1,
                  instance
                ) {
                  startPhaseTimer(current$$1, 'componentWillUnmount');
                  instance.props = current$$1.memoizedProps;
                  instance.state = current$$1.memoizedState;
                  instance.componentWillUnmount();
                  stopPhaseTimer();
                }; // Capture errors so they don't interrupt unmounting.

                function safelyCallComponentWillUnmount(current$$1, instance) {
                  {
                    invokeGuardedCallback(
                      null,
                      callComponentWillUnmountWithTimer,
                      null,
                      current$$1,
                      instance
                    );

                    if (hasCaughtError()) {
                      var unmountError = clearCaughtError();
                      captureCommitPhaseError(current$$1, unmountError);
                    }
                  }
                }

                function safelyDetachRef(current$$1) {
                  var ref = current$$1.ref;

                  if (ref !== null) {
                    if (typeof ref === 'function') {
                      {
                        invokeGuardedCallback(null, ref, null, null);

                        if (hasCaughtError()) {
                          var refError = clearCaughtError();
                          captureCommitPhaseError(current$$1, refError);
                        }
                      }
                    } else {
                      ref.current = null;
                    }
                  }
                }

                function safelyCallDestroy(current$$1, destroy) {
                  {
                    invokeGuardedCallback(null, destroy, null);

                    if (hasCaughtError()) {
                      var error = clearCaughtError();
                      captureCommitPhaseError(current$$1, error);
                    }
                  }
                }

                function commitBeforeMutationLifeCycles(
                  current$$1,
                  finishedWork
                ) {
                  switch (finishedWork.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case SimpleMemoComponent: {
                      commitHookEffectList(
                        UnmountSnapshot,
                        NoEffect$1,
                        finishedWork
                      );
                      return;
                    }

                    case ClassComponent: {
                      if (finishedWork.effectTag & Snapshot) {
                        if (current$$1 !== null) {
                          var prevProps = current$$1.memoizedProps;
                          var prevState = current$$1.memoizedState;
                          startPhaseTimer(
                            finishedWork,
                            'getSnapshotBeforeUpdate'
                          );
                          var instance = finishedWork.stateNode; // We could update instance props and state here,
                          // but instead we rely on them being set during last render.
                          // TODO: revisit this when we implement resuming.

                          {
                            if (
                              finishedWork.type === finishedWork.elementType &&
                              !didWarnAboutReassigningProps
                            ) {
                              !(instance.props === finishedWork.memoizedProps)
                                ? warning$1(
                                    false,
                                    'Expected %s props to match memoized props before ' +
                                      'getSnapshotBeforeUpdate. ' +
                                      'This might either be because of a bug in React, or because ' +
                                      'a component reassigns its own `this.props`. ' +
                                      'Please file an issue.',
                                    getComponentName(finishedWork.type) ||
                                      'instance'
                                  )
                                : void 0;
                              !(instance.state === finishedWork.memoizedState)
                                ? warning$1(
                                    false,
                                    'Expected %s state to match memoized state before ' +
                                      'getSnapshotBeforeUpdate. ' +
                                      'This might either be because of a bug in React, or because ' +
                                      'a component reassigns its own `this.props`. ' +
                                      'Please file an issue.',
                                    getComponentName(finishedWork.type) ||
                                      'instance'
                                  )
                                : void 0;
                            }
                          }

                          var snapshot = instance.getSnapshotBeforeUpdate(
                            finishedWork.elementType === finishedWork.type
                              ? prevProps
                              : resolveDefaultProps(
                                  finishedWork.type,
                                  prevProps
                                ),
                            prevState
                          );

                          {
                            var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                            if (
                              snapshot === undefined &&
                              !didWarnSet.has(finishedWork.type)
                            ) {
                              didWarnSet.add(finishedWork.type);
                              warningWithoutStack$1(
                                false,
                                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +
                                  'must be returned. You have returned undefined.',
                                getComponentName(finishedWork.type)
                              );
                            }
                          }

                          instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                          stopPhaseTimer();
                        }
                      }

                      return;
                    }

                    case HostRoot:
                    case HostComponent:
                    case HostText:
                    case HostPortal:
                    case IncompleteClassComponent:
                      // Nothing to do for these component types
                      return;

                    default: {
                      {
                        {
                          throw Error(
                            'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                          );
                        }
                      }
                    }
                  }
                }

                function commitHookEffectList(
                  unmountTag,
                  mountTag,
                  finishedWork
                ) {
                  var updateQueue = finishedWork.updateQueue;
                  var lastEffect =
                    updateQueue !== null ? updateQueue.lastEffect : null;

                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;

                    do {
                      if ((effect.tag & unmountTag) !== NoEffect$1) {
                        // Unmount
                        var destroy = effect.destroy;
                        effect.destroy = undefined;

                        if (destroy !== undefined) {
                          destroy();
                        }
                      }

                      if ((effect.tag & mountTag) !== NoEffect$1) {
                        // Mount
                        var create = effect.create;
                        effect.destroy = create();

                        {
                          var _destroy = effect.destroy;

                          if (
                            _destroy !== undefined &&
                            typeof _destroy !== 'function'
                          ) {
                            var addendum = void 0;

                            if (_destroy === null) {
                              addendum =
                                ' You returned null. If your effect does not require clean ' +
                                'up, return undefined (or nothing).';
                            } else if (typeof _destroy.then === 'function') {
                              addendum =
                                '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +
                                'Instead, write the async function inside your effect ' +
                                'and call it immediately:\n\n' +
                                'useEffect(() => {\n' +
                                '  async function fetchData() {\n' +
                                '    // You can await here\n' +
                                '    const response = await MyAPI.getData(someId);\n' +
                                '    // ...\n' +
                                '  }\n' +
                                '  fetchData();\n' +
                                "}, [someId]); // Or [] if effect doesn't need props or state\n\n" +
                                'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
                            } else {
                              addendum = ' You returned: ' + _destroy;
                            }

                            warningWithoutStack$1(
                              false,
                              'An effect function must not return anything besides a function, ' +
                                'which is used for clean-up.%s%s',
                              addendum,
                              getStackByFiberInDevAndProd(finishedWork)
                            );
                          }
                        }
                      }

                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }

                function commitPassiveHookEffects(finishedWork) {
                  if ((finishedWork.effectTag & Passive) !== NoEffect) {
                    switch (finishedWork.tag) {
                      case FunctionComponent:
                      case ForwardRef:
                      case SimpleMemoComponent: {
                        commitHookEffectList(
                          UnmountPassive,
                          NoEffect$1,
                          finishedWork
                        );
                        commitHookEffectList(
                          NoEffect$1,
                          MountPassive,
                          finishedWork
                        );
                        break;
                      }

                      default:
                        break;
                    }
                  }
                }

                function commitLifeCycles(
                  finishedRoot,
                  current$$1,
                  finishedWork,
                  committedExpirationTime
                ) {
                  switch (finishedWork.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case SimpleMemoComponent: {
                      commitHookEffectList(
                        UnmountLayout,
                        MountLayout,
                        finishedWork
                      );
                      break;
                    }

                    case ClassComponent: {
                      var instance = finishedWork.stateNode;

                      if (finishedWork.effectTag & Update) {
                        if (current$$1 === null) {
                          startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
                          // but instead we rely on them being set during last render.
                          // TODO: revisit this when we implement resuming.

                          {
                            if (
                              finishedWork.type === finishedWork.elementType &&
                              !didWarnAboutReassigningProps
                            ) {
                              !(instance.props === finishedWork.memoizedProps)
                                ? warning$1(
                                    false,
                                    'Expected %s props to match memoized props before ' +
                                      'componentDidMount. ' +
                                      'This might either be because of a bug in React, or because ' +
                                      'a component reassigns its own `this.props`. ' +
                                      'Please file an issue.',
                                    getComponentName(finishedWork.type) ||
                                      'instance'
                                  )
                                : void 0;
                              !(instance.state === finishedWork.memoizedState)
                                ? warning$1(
                                    false,
                                    'Expected %s state to match memoized state before ' +
                                      'componentDidMount. ' +
                                      'This might either be because of a bug in React, or because ' +
                                      'a component reassigns its own `this.props`. ' +
                                      'Please file an issue.',
                                    getComponentName(finishedWork.type) ||
                                      'instance'
                                  )
                                : void 0;
                            }
                          }

                          instance.componentDidMount();
                          stopPhaseTimer();
                        } else {
                          var prevProps =
                            finishedWork.elementType === finishedWork.type
                              ? current$$1.memoizedProps
                              : resolveDefaultProps(
                                  finishedWork.type,
                                  current$$1.memoizedProps
                                );
                          var prevState = current$$1.memoizedState;
                          startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
                          // but instead we rely on them being set during last render.
                          // TODO: revisit this when we implement resuming.

                          {
                            if (
                              finishedWork.type === finishedWork.elementType &&
                              !didWarnAboutReassigningProps
                            ) {
                              !(instance.props === finishedWork.memoizedProps)
                                ? warning$1(
                                    false,
                                    'Expected %s props to match memoized props before ' +
                                      'componentDidUpdate. ' +
                                      'This might either be because of a bug in React, or because ' +
                                      'a component reassigns its own `this.props`. ' +
                                      'Please file an issue.',
                                    getComponentName(finishedWork.type) ||
                                      'instance'
                                  )
                                : void 0;
                              !(instance.state === finishedWork.memoizedState)
                                ? warning$1(
                                    false,
                                    'Expected %s state to match memoized state before ' +
                                      'componentDidUpdate. ' +
                                      'This might either be because of a bug in React, or because ' +
                                      'a component reassigns its own `this.props`. ' +
                                      'Please file an issue.',
                                    getComponentName(finishedWork.type) ||
                                      'instance'
                                  )
                                : void 0;
                            }
                          }

                          instance.componentDidUpdate(
                            prevProps,
                            prevState,
                            instance.__reactInternalSnapshotBeforeUpdate
                          );
                          stopPhaseTimer();
                        }
                      }

                      var updateQueue = finishedWork.updateQueue;

                      if (updateQueue !== null) {
                        {
                          if (
                            finishedWork.type === finishedWork.elementType &&
                            !didWarnAboutReassigningProps
                          ) {
                            !(instance.props === finishedWork.memoizedProps)
                              ? warning$1(
                                  false,
                                  'Expected %s props to match memoized props before ' +
                                    'processing the update queue. ' +
                                    'This might either be because of a bug in React, or because ' +
                                    'a component reassigns its own `this.props`. ' +
                                    'Please file an issue.',
                                  getComponentName(finishedWork.type) ||
                                    'instance'
                                )
                              : void 0;
                            !(instance.state === finishedWork.memoizedState)
                              ? warning$1(
                                  false,
                                  'Expected %s state to match memoized state before ' +
                                    'processing the update queue. ' +
                                    'This might either be because of a bug in React, or because ' +
                                    'a component reassigns its own `this.props`. ' +
                                    'Please file an issue.',
                                  getComponentName(finishedWork.type) ||
                                    'instance'
                                )
                              : void 0;
                          }
                        } // We could update instance props and state here,
                        // but instead we rely on them being set during last render.
                        // TODO: revisit this when we implement resuming.

                        commitUpdateQueue(
                          finishedWork,
                          updateQueue,
                          instance,
                          committedExpirationTime
                        );
                      }

                      return;
                    }

                    case HostRoot: {
                      var _updateQueue = finishedWork.updateQueue;

                      if (_updateQueue !== null) {
                        var _instance = null;

                        if (finishedWork.child !== null) {
                          switch (finishedWork.child.tag) {
                            case HostComponent:
                              _instance = getPublicInstance(
                                finishedWork.child.stateNode
                              );
                              break;

                            case ClassComponent:
                              _instance = finishedWork.child.stateNode;
                              break;
                          }
                        }

                        commitUpdateQueue(
                          finishedWork,
                          _updateQueue,
                          _instance,
                          committedExpirationTime
                        );
                      }

                      return;
                    }

                    case HostComponent: {
                      var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                      // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                      // These effects should only be committed when components are first mounted,
                      // aka when there is no current/alternate.

                      if (
                        current$$1 === null &&
                        finishedWork.effectTag & Update
                      ) {
                        var type = finishedWork.type;
                        var props = finishedWork.memoizedProps;
                        commitMount(_instance2, type, props, finishedWork);
                      }

                      return;
                    }

                    case HostText: {
                      // We have no life-cycles associated with text.
                      return;
                    }

                    case HostPortal: {
                      // We have no life-cycles associated with portals.
                      return;
                    }

                    case Profiler: {
                      if (enableProfilerTimer) {
                        var onRender = finishedWork.memoizedProps.onRender;

                        if (typeof onRender === 'function') {
                          if (enableSchedulerTracing) {
                            onRender(
                              finishedWork.memoizedProps.id,
                              current$$1 === null ? 'mount' : 'update',
                              finishedWork.actualDuration,
                              finishedWork.treeBaseDuration,
                              finishedWork.actualStartTime,
                              getCommitTime(),
                              finishedRoot.memoizedInteractions
                            );
                          } else {
                            onRender(
                              finishedWork.memoizedProps.id,
                              current$$1 === null ? 'mount' : 'update',
                              finishedWork.actualDuration,
                              finishedWork.treeBaseDuration,
                              finishedWork.actualStartTime,
                              getCommitTime()
                            );
                          }
                        }
                      }

                      return;
                    }

                    case SuspenseComponent: {
                      commitSuspenseHydrationCallbacks(
                        finishedRoot,
                        finishedWork
                      );
                      return;
                    }

                    case SuspenseListComponent:
                    case IncompleteClassComponent:
                    case FundamentalComponent:
                    case ScopeComponent:
                      return;

                    default: {
                      {
                        {
                          throw Error(
                            'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                          );
                        }
                      }
                    }
                  }
                }

                function hideOrUnhideAllChildren(finishedWork, isHidden) {
                  if (supportsMutation) {
                    // We only have the top Fiber that was inserted but we need to recurse down its
                    // children to find all the terminal nodes.
                    var node = finishedWork;

                    while (true) {
                      if (node.tag === HostComponent) {
                        var instance = node.stateNode;

                        if (isHidden) {
                          hideInstance(instance);
                        } else {
                          unhideInstance(node.stateNode, node.memoizedProps);
                        }
                      } else if (node.tag === HostText) {
                        var _instance3 = node.stateNode;

                        if (isHidden) {
                          hideTextInstance(_instance3);
                        } else {
                          unhideTextInstance(_instance3, node.memoizedProps);
                        }
                      } else if (
                        node.tag === SuspenseComponent &&
                        node.memoizedState !== null &&
                        node.memoizedState.dehydrated === null
                      ) {
                        // Found a nested Suspense component that timed out. Skip over the
                        // primary child fragment, which should remain hidden.
                        var fallbackChildFragment = node.child.sibling;
                        fallbackChildFragment.return = node;
                        node = fallbackChildFragment;
                        continue;
                      } else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      }

                      if (node === finishedWork) {
                        return;
                      }

                      while (node.sibling === null) {
                        if (
                          node.return === null ||
                          node.return === finishedWork
                        ) {
                          return;
                        }

                        node = node.return;
                      }

                      node.sibling.return = node.return;
                      node = node.sibling;
                    }
                  }
                }

                function commitAttachRef(finishedWork) {
                  var ref = finishedWork.ref;

                  if (ref !== null) {
                    var instance = finishedWork.stateNode;
                    var instanceToUse;

                    switch (finishedWork.tag) {
                      case HostComponent:
                        instanceToUse = getPublicInstance(instance);
                        break;

                      default:
                        instanceToUse = instance;
                    } // Moved outside to ensure DCE works with this flag

                    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {
                      instanceToUse = instance.methods;
                    }

                    if (typeof ref === 'function') {
                      ref(instanceToUse);
                    } else {
                      {
                        if (!ref.hasOwnProperty('current')) {
                          warningWithoutStack$1(
                            false,
                            'Unexpected ref object provided for %s. ' +
                              'Use either a ref-setter function or React.createRef().%s',
                            getComponentName(finishedWork.type),
                            getStackByFiberInDevAndProd(finishedWork)
                          );
                        }
                      }

                      ref.current = instanceToUse;
                    }
                  }
                }

                function commitDetachRef(current$$1) {
                  var currentRef = current$$1.ref;

                  if (currentRef !== null) {
                    if (typeof currentRef === 'function') {
                      currentRef(null);
                    } else {
                      currentRef.current = null;
                    }
                  }
                } // User-originating errors (lifecycles and refs) should not interrupt
                // deletion, so don't let them throw. Host-originating errors should
                // interrupt deletion, so it's okay

                function commitUnmount(
                  finishedRoot,
                  current$$1,
                  renderPriorityLevel
                ) {
                  onCommitUnmount(current$$1);

                  switch (current$$1.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case MemoComponent:
                    case SimpleMemoComponent: {
                      var updateQueue = current$$1.updateQueue;

                      if (updateQueue !== null) {
                        var lastEffect = updateQueue.lastEffect;

                        if (lastEffect !== null) {
                          var firstEffect = lastEffect.next; // When the owner fiber is deleted, the destroy function of a passive
                          // effect hook is called during the synchronous commit phase. This is
                          // a concession to implementation complexity. Calling it in the
                          // passive effect phase (like they usually are, when dependencies
                          // change during an update) would require either traversing the
                          // children of the deleted fiber again, or including unmount effects
                          // as part of the fiber effect list.
                          //
                          // Because this is during the sync commit phase, we need to change
                          // the priority.
                          //
                          // TODO: Reconsider this implementation trade off.

                          var priorityLevel =
                            renderPriorityLevel > NormalPriority
                              ? NormalPriority
                              : renderPriorityLevel;
                          runWithPriority(priorityLevel, function() {
                            var effect = firstEffect;

                            do {
                              var destroy = effect.destroy;

                              if (destroy !== undefined) {
                                safelyCallDestroy(current$$1, destroy);
                              }

                              effect = effect.next;
                            } while (effect !== firstEffect);
                          });
                        }
                      }

                      break;
                    }

                    case ClassComponent: {
                      safelyDetachRef(current$$1);
                      var instance = current$$1.stateNode;

                      if (typeof instance.componentWillUnmount === 'function') {
                        safelyCallComponentWillUnmount(current$$1, instance);
                      }

                      return;
                    }

                    case HostComponent: {
                      if (enableFlareAPI) {
                        var dependencies = current$$1.dependencies;

                        if (dependencies !== null) {
                          var respondersMap = dependencies.responders;

                          if (respondersMap !== null) {
                            var responderInstances = Array.from(
                              respondersMap.values()
                            );

                            for (
                              var i = 0, length = responderInstances.length;
                              i < length;
                              i++
                            ) {
                              var responderInstance = responderInstances[i];
                              unmountResponderInstance(responderInstance);
                            }

                            dependencies.responders = null;
                          }
                        }
                      }

                      safelyDetachRef(current$$1);
                      return;
                    }

                    case HostPortal: {
                      // TODO: this is recursive.
                      // We are also not using this parent because
                      // the portal will get pushed immediately.
                      if (supportsMutation) {
                        unmountHostComponents(
                          finishedRoot,
                          current$$1,
                          renderPriorityLevel
                        );
                      } else if (supportsPersistence) {
                        emptyPortalContainer(current$$1);
                      }

                      return;
                    }

                    case FundamentalComponent: {
                      if (enableFundamentalAPI) {
                        var fundamentalInstance = current$$1.stateNode;

                        if (fundamentalInstance !== null) {
                          unmountFundamentalComponent(fundamentalInstance);
                          current$$1.stateNode = null;
                        }
                      }

                      return;
                    }

                    case DehydratedFragment: {
                      if (enableSuspenseCallback) {
                        var hydrationCallbacks =
                          finishedRoot.hydrationCallbacks;

                        if (hydrationCallbacks !== null) {
                          var onDeleted = hydrationCallbacks.onDeleted;

                          if (onDeleted) {
                            onDeleted(current$$1.stateNode);
                          }
                        }
                      }

                      return;
                    }

                    case ScopeComponent: {
                      if (enableScopeAPI) {
                        safelyDetachRef(current$$1);
                      }
                    }
                  }
                }

                function commitNestedUnmounts(
                  finishedRoot,
                  root,
                  renderPriorityLevel
                ) {
                  // While we're inside a removed host node we don't want to call
                  // removeChild on the inner nodes because they're removed by the top
                  // call anyway. We also want to call componentWillUnmount on all
                  // composites before this host node is removed from the tree. Therefore
                  // we do an inner loop while we're still inside the host node.
                  var node = root;

                  while (true) {
                    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
                    // Skip portals because commitUnmount() currently visits them recursively.

                    if (
                      node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
                      // If we don't use mutation we drill down into portals here instead.
                      (!supportsMutation || node.tag !== HostPortal)
                    ) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === root) {
                      return;
                    }

                    while (node.sibling === null) {
                      if (node.return === null || node.return === root) {
                        return;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }
                }

                function detachFiber(current$$1) {
                  var alternate = current$$1.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
                  // should clear the child pointer of the parent alternate to let this
                  // get GC:ed but we don't know which for sure which parent is the current
                  // one so we'll settle for GC:ing the subtree of this child. This child
                  // itself will be GC:ed when the parent updates the next time.

                  current$$1.return = null;
                  current$$1.child = null;
                  current$$1.memoizedState = null;
                  current$$1.updateQueue = null;
                  current$$1.dependencies = null;
                  current$$1.alternate = null;
                  current$$1.firstEffect = null;
                  current$$1.lastEffect = null;
                  current$$1.pendingProps = null;
                  current$$1.memoizedProps = null;

                  if (alternate !== null) {
                    detachFiber(alternate);
                  }
                }

                function emptyPortalContainer(current$$1) {
                  if (!supportsPersistence) {
                    return;
                  }

                  var portal = current$$1.stateNode;
                  var containerInfo = portal.containerInfo;
                  var emptyChildSet = createContainerChildSet(containerInfo);
                  replaceContainerChildren(containerInfo, emptyChildSet);
                }

                function commitContainer(finishedWork) {
                  if (!supportsPersistence) {
                    return;
                  }

                  switch (finishedWork.tag) {
                    case ClassComponent:
                    case HostComponent:
                    case HostText:
                    case FundamentalComponent: {
                      return;
                    }

                    case HostRoot:
                    case HostPortal: {
                      var portalOrRoot = finishedWork.stateNode;
                      var containerInfo = portalOrRoot.containerInfo,
                        pendingChildren = portalOrRoot.pendingChildren;
                      replaceContainerChildren(containerInfo, pendingChildren);
                      return;
                    }

                    default: {
                      {
                        {
                          throw Error(
                            'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                          );
                        }
                      }
                    }
                  }
                }

                function getHostParentFiber(fiber) {
                  var parent = fiber.return;

                  while (parent !== null) {
                    if (isHostParent(parent)) {
                      return parent;
                    }

                    parent = parent.return;
                  }

                  {
                    {
                      throw Error(
                        'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
                      );
                    }
                  }
                }

                function isHostParent(fiber) {
                  return (
                    fiber.tag === HostComponent ||
                    fiber.tag === HostRoot ||
                    fiber.tag === HostPortal
                  );
                }

                function getHostSibling(fiber) {
                  // We're going to search forward into the tree until we find a sibling host
                  // node. Unfortunately, if multiple insertions are done in a row we have to
                  // search past them. This leads to exponential search for the next sibling.
                  // TODO: Find a more efficient way to do this.
                  var node = fiber;

                  siblings: while (true) {
                    // If we didn't find anything, let's try the next sibling.
                    while (node.sibling === null) {
                      if (node.return === null || isHostParent(node.return)) {
                        // If we pop out of the root or hit the parent the fiber we are the
                        // last sibling.
                        return null;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;

                    while (
                      node.tag !== HostComponent &&
                      node.tag !== HostText &&
                      node.tag !== DehydratedFragment
                    ) {
                      // If it is not host node and, we might have a host node inside it.
                      // Try to search down until we find one.
                      if (node.effectTag & Placement) {
                        // If we don't have a child, try the siblings instead.
                        continue siblings;
                      } // If we don't have a child, try the siblings instead.
                      // We also skip portals because they are not part of this host tree.

                      if (node.child === null || node.tag === HostPortal) {
                        continue siblings;
                      } else {
                        node.child.return = node;
                        node = node.child;
                      }
                    } // Check if this host node is stable or about to be placed.

                    if (!(node.effectTag & Placement)) {
                      // Found it!
                      return node.stateNode;
                    }
                  }
                }

                function commitPlacement(finishedWork) {
                  if (!supportsMutation) {
                    return;
                  } // Recursively insert all host nodes into the parent.

                  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

                  var parent;
                  var isContainer;
                  var parentStateNode = parentFiber.stateNode;

                  switch (parentFiber.tag) {
                    case HostComponent:
                      parent = parentStateNode;
                      isContainer = false;
                      break;

                    case HostRoot:
                      parent = parentStateNode.containerInfo;
                      isContainer = true;
                      break;

                    case HostPortal:
                      parent = parentStateNode.containerInfo;
                      isContainer = true;
                      break;

                    case FundamentalComponent:
                      if (enableFundamentalAPI) {
                        parent = parentStateNode.instance;
                        isContainer = false;
                      }

                    // eslint-disable-next-line-no-fallthrough

                    default: {
                      {
                        throw Error(
                          'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.'
                        );
                      }
                    }
                  }

                  if (parentFiber.effectTag & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent); // Clear ContentReset from the effect tag

                    parentFiber.effectTag &= ~ContentReset;
                  }

                  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                  // children to find all the terminal nodes.

                  var node = finishedWork;

                  while (true) {
                    var isHost =
                      node.tag === HostComponent || node.tag === HostText;

                    if (
                      isHost ||
                      (enableFundamentalAPI &&
                        node.tag === FundamentalComponent)
                    ) {
                      var stateNode = isHost
                        ? node.stateNode
                        : node.stateNode.instance;

                      if (before) {
                        if (isContainer) {
                          insertInContainerBefore(parent, stateNode, before);
                        } else {
                          insertBefore(parent, stateNode, before);
                        }
                      } else {
                        if (isContainer) {
                          appendChildToContainer(parent, stateNode);
                        } else {
                          appendChild(parent, stateNode);
                        }
                      }
                    } else if (node.tag === HostPortal) {
                      // If the insertion itself is a portal, then we don't want to traverse
                      // down its children. Instead, we'll get insertions from each child in
                      // the portal directly.
                    } else if (node.child !== null) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === finishedWork) {
                      return;
                    }

                    while (node.sibling === null) {
                      if (
                        node.return === null ||
                        node.return === finishedWork
                      ) {
                        return;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }
                }

                function unmountHostComponents(
                  finishedRoot,
                  current$$1,
                  renderPriorityLevel
                ) {
                  // We only have the top Fiber that was deleted but we need to recurse down its
                  // children to find all the terminal nodes.
                  var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
                  // currentParentIsValid.

                  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

                  var currentParent;
                  var currentParentIsContainer;

                  while (true) {
                    if (!currentParentIsValid) {
                      var parent = node.return;

                      findParent: while (true) {
                        if (!(parent !== null)) {
                          {
                            throw Error(
                              'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
                            );
                          }
                        }

                        var parentStateNode = parent.stateNode;

                        switch (parent.tag) {
                          case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;

                          case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;

                          case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;

                          case FundamentalComponent:
                            if (enableFundamentalAPI) {
                              currentParent = parentStateNode.instance;
                              currentParentIsContainer = false;
                            }
                        }

                        parent = parent.return;
                      }

                      currentParentIsValid = true;
                    }

                    if (node.tag === HostComponent || node.tag === HostText) {
                      commitNestedUnmounts(
                        finishedRoot,
                        node,
                        renderPriorityLevel
                      ); // After all the children have unmounted, it is now safe to remove the
                      // node from the tree.

                      if (currentParentIsContainer) {
                        removeChildFromContainer(currentParent, node.stateNode);
                      } else {
                        removeChild(currentParent, node.stateNode);
                      } // Don't visit children because we already visited them.
                    } else if (
                      enableFundamentalAPI &&
                      node.tag === FundamentalComponent
                    ) {
                      var fundamentalNode = node.stateNode.instance;
                      commitNestedUnmounts(
                        finishedRoot,
                        node,
                        renderPriorityLevel
                      ); // After all the children have unmounted, it is now safe to remove the
                      // node from the tree.

                      if (currentParentIsContainer) {
                        removeChildFromContainer(
                          currentParent,
                          fundamentalNode
                        );
                      } else {
                        removeChild(currentParent, fundamentalNode);
                      }
                    } else if (
                      enableSuspenseServerRenderer &&
                      node.tag === DehydratedFragment
                    ) {
                      if (enableSuspenseCallback) {
                        var hydrationCallbacks =
                          finishedRoot.hydrationCallbacks;

                        if (hydrationCallbacks !== null) {
                          var onDeleted = hydrationCallbacks.onDeleted;

                          if (onDeleted) {
                            onDeleted(node.stateNode);
                          }
                        }
                      } // Delete the dehydrated suspense boundary and all of its content.

                      if (currentParentIsContainer) {
                        clearSuspenseBoundaryFromContainer(
                          currentParent,
                          node.stateNode
                        );
                      } else {
                        clearSuspenseBoundary(currentParent, node.stateNode);
                      }
                    } else if (node.tag === HostPortal) {
                      if (node.child !== null) {
                        // When we go into a portal, it becomes the parent to remove from.
                        // We will reassign it back when we pop the portal on the way up.
                        currentParent = node.stateNode.containerInfo;
                        currentParentIsContainer = true; // Visit children because portals might contain host components.

                        node.child.return = node;
                        node = node.child;
                        continue;
                      }
                    } else {
                      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

                      if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      }
                    }

                    if (node === current$$1) {
                      return;
                    }

                    while (node.sibling === null) {
                      if (node.return === null || node.return === current$$1) {
                        return;
                      }

                      node = node.return;

                      if (node.tag === HostPortal) {
                        // When we go out of the portal, we need to restore the parent.
                        // Since we don't keep a stack of them, we will search for it.
                        currentParentIsValid = false;
                      }
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }
                }

                function commitDeletion(
                  finishedRoot,
                  current$$1,
                  renderPriorityLevel
                ) {
                  if (supportsMutation) {
                    // Recursively delete all host nodes from the parent.
                    // Detach refs and call componentWillUnmount() on the whole subtree.
                    unmountHostComponents(
                      finishedRoot,
                      current$$1,
                      renderPriorityLevel
                    );
                  } else {
                    // Detach refs and call componentWillUnmount() on the whole subtree.
                    commitNestedUnmounts(
                      finishedRoot,
                      current$$1,
                      renderPriorityLevel
                    );
                  }

                  detachFiber(current$$1);
                }

                function commitWork(current$$1, finishedWork) {
                  if (!supportsMutation) {
                    switch (finishedWork.tag) {
                      case FunctionComponent:
                      case ForwardRef:
                      case MemoComponent:
                      case SimpleMemoComponent: {
                        // Note: We currently never use MountMutation, but useLayout uses
                        // UnmountMutation.
                        commitHookEffectList(
                          UnmountMutation,
                          MountMutation,
                          finishedWork
                        );
                        return;
                      }

                      case Profiler: {
                        return;
                      }

                      case SuspenseComponent: {
                        commitSuspenseComponent(finishedWork);
                        attachSuspenseRetryListeners(finishedWork);
                        return;
                      }

                      case SuspenseListComponent: {
                        attachSuspenseRetryListeners(finishedWork);
                        return;
                      }

                      case HostRoot: {
                        if (supportsHydration) {
                          var root = finishedWork.stateNode;

                          if (root.hydrate) {
                            // We've just hydrated. No need to hydrate again.
                            root.hydrate = false;
                            commitHydratedContainer(root.containerInfo);
                          }
                        }

                        break;
                      }
                    }

                    commitContainer(finishedWork);
                    return;
                  }

                  switch (finishedWork.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case MemoComponent:
                    case SimpleMemoComponent: {
                      // Note: We currently never use MountMutation, but useLayout uses
                      // UnmountMutation.
                      commitHookEffectList(
                        UnmountMutation,
                        MountMutation,
                        finishedWork
                      );
                      return;
                    }

                    case ClassComponent: {
                      return;
                    }

                    case HostComponent: {
                      var instance = finishedWork.stateNode;

                      if (instance != null) {
                        // Commit the work prepared earlier.
                        var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                        // as the newProps. The updatePayload will contain the real change in
                        // this case.

                        var oldProps =
                          current$$1 !== null
                            ? current$$1.memoizedProps
                            : newProps;
                        var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

                        var updatePayload = finishedWork.updateQueue;
                        finishedWork.updateQueue = null;

                        if (updatePayload !== null) {
                          commitUpdate(
                            instance,
                            updatePayload,
                            type,
                            oldProps,
                            newProps,
                            finishedWork
                          );
                        }

                        if (enableFlareAPI) {
                          var prevListeners = oldProps.listeners;
                          var nextListeners = newProps.listeners;

                          if (prevListeners !== nextListeners) {
                            updateEventListeners(
                              nextListeners,
                              finishedWork,
                              null
                            );
                          }
                        }
                      }

                      return;
                    }

                    case HostText: {
                      if (!(finishedWork.stateNode !== null)) {
                        {
                          throw Error(
                            'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'
                          );
                        }
                      }

                      var textInstance = finishedWork.stateNode;
                      var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                      // as the newProps. The updatePayload will contain the real change in
                      // this case.

                      var oldText =
                        current$$1 !== null
                          ? current$$1.memoizedProps
                          : newText;
                      commitTextUpdate(textInstance, oldText, newText);
                      return;
                    }

                    case HostRoot: {
                      if (supportsHydration) {
                        var _root = finishedWork.stateNode;

                        if (_root.hydrate) {
                          // We've just hydrated. No need to hydrate again.
                          _root.hydrate = false;
                          commitHydratedContainer(_root.containerInfo);
                        }
                      }

                      return;
                    }

                    case Profiler: {
                      return;
                    }

                    case SuspenseComponent: {
                      commitSuspenseComponent(finishedWork);
                      attachSuspenseRetryListeners(finishedWork);
                      return;
                    }

                    case SuspenseListComponent: {
                      attachSuspenseRetryListeners(finishedWork);
                      return;
                    }

                    case IncompleteClassComponent: {
                      return;
                    }

                    case FundamentalComponent: {
                      if (enableFundamentalAPI) {
                        var fundamentalInstance = finishedWork.stateNode;
                        updateFundamentalComponent(fundamentalInstance);
                      }

                      return;
                    }

                    case ScopeComponent: {
                      if (enableScopeAPI) {
                        var scopeInstance = finishedWork.stateNode;
                        scopeInstance.fiber = finishedWork;

                        if (enableFlareAPI) {
                          var _newProps = finishedWork.memoizedProps;

                          var _oldProps =
                            current$$1 !== null
                              ? current$$1.memoizedProps
                              : _newProps;

                          var _prevListeners = _oldProps.listeners;
                          var _nextListeners = _newProps.listeners;

                          if (_prevListeners !== _nextListeners) {
                            updateEventListeners(
                              _nextListeners,
                              finishedWork,
                              null
                            );
                          }
                        }
                      }

                      return;
                    }

                    default: {
                      {
                        {
                          throw Error(
                            'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                          );
                        }
                      }
                    }
                  }
                }

                function commitSuspenseComponent(finishedWork) {
                  var newState = finishedWork.memoizedState;
                  var newDidTimeout;
                  var primaryChildParent = finishedWork;

                  if (newState === null) {
                    newDidTimeout = false;
                  } else {
                    newDidTimeout = true;
                    primaryChildParent = finishedWork.child;
                    markCommitTimeOfFallback();
                  }

                  if (supportsMutation && primaryChildParent !== null) {
                    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
                  }

                  if (enableSuspenseCallback && newState !== null) {
                    var suspenseCallback =
                      finishedWork.memoizedProps.suspenseCallback;

                    if (typeof suspenseCallback === 'function') {
                      var thenables = finishedWork.updateQueue;

                      if (thenables !== null) {
                        suspenseCallback(new Set(thenables));
                      }
                    } else {
                      if (suspenseCallback !== undefined) {
                        warning$1(
                          false,
                          'Unexpected type for suspenseCallback.'
                        );
                      }
                    }
                  }
                }

                function commitSuspenseHydrationCallbacks(
                  finishedRoot,
                  finishedWork
                ) {
                  if (!supportsHydration) {
                    return;
                  }

                  var newState = finishedWork.memoizedState;

                  if (newState === null) {
                    var current$$1 = finishedWork.alternate;

                    if (current$$1 !== null) {
                      var prevState = current$$1.memoizedState;

                      if (prevState !== null) {
                        var suspenseInstance = prevState.dehydrated;

                        if (suspenseInstance !== null) {
                          commitHydratedSuspenseInstance(suspenseInstance);

                          if (enableSuspenseCallback) {
                            var hydrationCallbacks =
                              finishedRoot.hydrationCallbacks;

                            if (hydrationCallbacks !== null) {
                              var onHydrated = hydrationCallbacks.onHydrated;

                              if (onHydrated) {
                                onHydrated(suspenseInstance);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

                function attachSuspenseRetryListeners(finishedWork) {
                  // If this boundary just timed out, then it will have a set of thenables.
                  // For each thenable, attach a listener so that when it resolves, React
                  // attempts to re-render the boundary in the primary (pre-timeout) state.
                  var thenables = finishedWork.updateQueue;

                  if (thenables !== null) {
                    finishedWork.updateQueue = null;
                    var retryCache = finishedWork.stateNode;

                    if (retryCache === null) {
                      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
                    }

                    thenables.forEach(function(thenable) {
                      // Memoize using the boundary fiber to prevent redundant listeners.
                      var retry = resolveRetryThenable.bind(
                        null,
                        finishedWork,
                        thenable
                      );

                      if (!retryCache.has(thenable)) {
                        if (enableSchedulerTracing) {
                          if (thenable.__reactDoNotTraceInteractions !== true) {
                            retry = tracing.unstable_wrap(retry);
                          }
                        }

                        retryCache.add(thenable);
                        thenable.then(retry, retry);
                      }
                    });
                  }
                }

                function commitResetTextContent(current$$1) {
                  if (!supportsMutation) {
                    return;
                  }

                  resetTextContent(current$$1.stateNode);
                }

                var PossiblyWeakMap =
                  typeof WeakMap === 'function' ? WeakMap : Map;

                function createRootErrorUpdate(
                  fiber,
                  errorInfo,
                  expirationTime
                ) {
                  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

                  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
                  // being called "element".

                  update.payload = {
                    element: null,
                  };
                  var error = errorInfo.value;

                  update.callback = function() {
                    onUncaughtError(error);
                    logError(fiber, errorInfo);
                  };

                  return update;
                }

                function createClassErrorUpdate(
                  fiber,
                  errorInfo,
                  expirationTime
                ) {
                  var update = createUpdate(expirationTime, null);
                  update.tag = CaptureUpdate;
                  var getDerivedStateFromError =
                    fiber.type.getDerivedStateFromError;

                  if (typeof getDerivedStateFromError === 'function') {
                    var error = errorInfo.value;

                    update.payload = function() {
                      logError(fiber, errorInfo);
                      return getDerivedStateFromError(error);
                    };
                  }

                  var inst = fiber.stateNode;

                  if (
                    inst !== null &&
                    typeof inst.componentDidCatch === 'function'
                  ) {
                    update.callback = function callback() {
                      {
                        markFailedErrorBoundaryForHotReloading(fiber);
                      }

                      if (typeof getDerivedStateFromError !== 'function') {
                        // To preserve the preexisting retry behavior of error boundaries,
                        // we keep track of which ones already failed during this batch.
                        // This gets reset before we yield back to the browser.
                        // TODO: Warn in strict mode if getDerivedStateFromError is
                        // not defined.
                        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

                        logError(fiber, errorInfo);
                      }

                      var error = errorInfo.value;
                      var stack = errorInfo.stack;
                      this.componentDidCatch(error, {
                        componentStack: stack !== null ? stack : '',
                      });

                      {
                        if (typeof getDerivedStateFromError !== 'function') {
                          // If componentDidCatch is the only error boundary method defined,
                          // then it needs to call setState to recover from errors.
                          // If no state update is scheduled then the boundary will swallow the error.
                          !(fiber.expirationTime === Sync)
                            ? warningWithoutStack$1(
                                false,
                                '%s: Error boundaries should implement getDerivedStateFromError(). ' +
                                  'In that method, return a state update to display an error message or fallback UI.',
                                getComponentName(fiber.type) || 'Unknown'
                              )
                            : void 0;
                        }
                      }
                    };
                  } else {
                    update.callback = function() {
                      markFailedErrorBoundaryForHotReloading(fiber);
                    };
                  }

                  return update;
                }

                function attachPingListener(
                  root,
                  renderExpirationTime,
                  thenable
                ) {
                  // Attach a listener to the promise to "ping" the root and retry. But
                  // only if one does not already exist for the current render expiration
                  // time (which acts like a "thread ID" here).
                  var pingCache = root.pingCache;
                  var threadIDs;

                  if (pingCache === null) {
                    pingCache = root.pingCache = new PossiblyWeakMap();
                    threadIDs = new Set();
                    pingCache.set(thenable, threadIDs);
                  } else {
                    threadIDs = pingCache.get(thenable);

                    if (threadIDs === undefined) {
                      threadIDs = new Set();
                      pingCache.set(thenable, threadIDs);
                    }
                  }

                  if (!threadIDs.has(renderExpirationTime)) {
                    // Memoize using the thread ID to prevent redundant listeners.
                    threadIDs.add(renderExpirationTime);
                    var ping = pingSuspendedRoot.bind(
                      null,
                      root,
                      thenable,
                      renderExpirationTime
                    );
                    thenable.then(ping, ping);
                  }
                }

                function throwException(
                  root,
                  returnFiber,
                  sourceFiber,
                  value,
                  renderExpirationTime
                ) {
                  // The source fiber did not complete.
                  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

                  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

                  if (
                    value !== null &&
                    typeof value === 'object' &&
                    typeof value.then === 'function'
                  ) {
                    // This is a thenable.
                    var thenable = value;
                    checkForWrongSuspensePriorityInDEV(sourceFiber);
                    var hasInvisibleParentBoundary = hasSuspenseContext(
                      suspenseStackCursor.current,
                      InvisibleParentSuspenseContext
                    ); // Schedule the nearest Suspense to re-render the timed out view.

                    var _workInProgress = returnFiber;

                    do {
                      if (
                        _workInProgress.tag === SuspenseComponent &&
                        shouldCaptureSuspense(
                          _workInProgress,
                          hasInvisibleParentBoundary
                        )
                      ) {
                        // Found the nearest boundary.
                        // Stash the promise on the boundary fiber. If the boundary times out, we'll
                        // attach another listener to flip the boundary back to its normal state.
                        var thenables = _workInProgress.updateQueue;

                        if (thenables === null) {
                          var updateQueue = new Set();
                          updateQueue.add(thenable);
                          _workInProgress.updateQueue = updateQueue;
                        } else {
                          thenables.add(thenable);
                        } // If the boundary is outside of blocking mode, we should *not*
                        // suspend the commit. Pretend as if the suspended component rendered
                        // null and keep rendering. In the commit phase, we'll schedule a
                        // subsequent synchronous update to re-render the Suspense.
                        //
                        // Note: It doesn't matter whether the component that suspended was
                        // inside a blocking mode tree. If the Suspense is outside of it, we
                        // should *not* suspend the commit.

                        if ((_workInProgress.mode & BlockingMode) === NoMode) {
                          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
                          // But we shouldn't call any lifecycle methods or callbacks. Remove
                          // all lifecycle effect tags.

                          sourceFiber.effectTag &= ~(
                            LifecycleEffectMask | Incomplete
                          );

                          if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;

                            if (currentSourceFiber === null) {
                              // This is a new mount. Change the tag so it's not mistaken for a
                              // completed class component. For example, we should not call
                              // componentWillUnmount if it is deleted.
                              sourceFiber.tag = IncompleteClassComponent;
                            } else {
                              // When we try rendering again, we should not reuse the current fiber,
                              // since it's known to be in an inconsistent state. Use a force update to
                              // prevent a bail out.
                              var update = createUpdate(Sync, null);
                              update.tag = ForceUpdate;
                              enqueueUpdate(sourceFiber, update);
                            }
                          } // The source fiber did not complete. Mark it with Sync priority to
                          // indicate that it still has pending work.

                          sourceFiber.expirationTime = Sync; // Exit without suspending.

                          return;
                        } // Confirmed that the boundary is in a concurrent mode tree. Continue
                        // with the normal suspend path.
                        //
                        // After this we'll use a set of heuristics to determine whether this
                        // render pass will run to completion or restart or "suspend" the commit.
                        // The actual logic for this is spread out in different places.
                        //
                        // This first principle is that if we're going to suspend when we complete
                        // a root, then we should also restart if we get an update or ping that
                        // might unsuspend it, and vice versa. The only reason to suspend is
                        // because you think you might want to restart before committing. However,
                        // it doesn't make sense to restart only while in the period we're suspended.
                        //
                        // Restarting too aggressively is also not good because it starves out any
                        // intermediate loading state. So we use heuristics to determine when.
                        // Suspense Heuristics
                        //
                        // If nothing threw a Promise or all the same fallbacks are already showing,
                        // then don't suspend/restart.
                        //
                        // If this is an initial render of a new tree of Suspense boundaries and
                        // those trigger a fallback, then don't suspend/restart. We want to ensure
                        // that we can show the initial loading state as quickly as possible.
                        //
                        // If we hit a "Delayed" case, such as when we'd switch from content back into
                        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
                        // this case. If none is defined, JND is used instead.
                        //
                        // If we're already showing a fallback and it gets "retried", allowing us to show
                        // another level, but there's still an inner boundary that would show a fallback,
                        // then we suspend/restart for 500ms since the last time we showed a fallback
                        // anywhere in the tree. This effectively throttles progressive loading into a
                        // consistent train of commits. This also gives us an opportunity to restart to
                        // get to the completed state slightly earlier.
                        //
                        // If there's ambiguity due to batching it's resolved in preference of:
                        // 1) "delayed", 2) "initial render", 3) "retry".
                        //
                        // We want to ensure that a "busy" state doesn't get force committed. We want to
                        // ensure that new initial loading states can commit as soon as possible.

                        attachPingListener(
                          root,
                          renderExpirationTime,
                          thenable
                        );
                        _workInProgress.effectTag |= ShouldCapture;
                        _workInProgress.expirationTime = renderExpirationTime;
                        return;
                      } // This boundary already captured during this render. Continue to the next
                      // boundary.

                      _workInProgress = _workInProgress.return;
                    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
                    // TODO: Use invariant so the message is stripped in prod?

                    value = new Error(
                      (getComponentName(sourceFiber.type) ||
                        'A React component') +
                        ' suspended while rendering, but no fallback UI was specified.\n' +
                        '\n' +
                        'Add a <Suspense fallback=...> component higher in the tree to ' +
                        'provide a loading indicator or placeholder to display.' +
                        getStackByFiberInDevAndProd(sourceFiber)
                    );
                  } // We didn't find a boundary that could handle this type of exception. Start
                  // over and traverse parent path again, this time treating the exception
                  // as an error.

                  renderDidError();
                  value = createCapturedValue(value, sourceFiber);
                  var workInProgress = returnFiber;

                  do {
                    switch (workInProgress.tag) {
                      case HostRoot: {
                        var _errorInfo = value;
                        workInProgress.effectTag |= ShouldCapture;
                        workInProgress.expirationTime = renderExpirationTime;

                        var _update = createRootErrorUpdate(
                          workInProgress,
                          _errorInfo,
                          renderExpirationTime
                        );

                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                      }

                      case ClassComponent:
                        // Capture and retry
                        var errorInfo = value;
                        var ctor = workInProgress.type;
                        var instance = workInProgress.stateNode;

                        if (
                          (workInProgress.effectTag & DidCapture) ===
                            NoEffect &&
                          (typeof ctor.getDerivedStateFromError ===
                            'function' ||
                            (instance !== null &&
                              typeof instance.componentDidCatch ===
                                'function' &&
                              !isAlreadyFailedLegacyErrorBoundary(instance)))
                        ) {
                          workInProgress.effectTag |= ShouldCapture;
                          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

                          var _update2 = createClassErrorUpdate(
                            workInProgress,
                            errorInfo,
                            renderExpirationTime
                          );

                          enqueueCapturedUpdate(workInProgress, _update2);
                          return;
                        }

                        break;

                      default:
                        break;
                    }

                    workInProgress = workInProgress.return;
                  } while (workInProgress !== null);
                }

                var ceil = Math.ceil;
                var ReactCurrentDispatcher =
                  ReactSharedInternals.ReactCurrentDispatcher;
                var ReactCurrentOwner$1 =
                  ReactSharedInternals.ReactCurrentOwner;
                var IsSomeRendererActing =
                  ReactSharedInternals.IsSomeRendererActing;
                var NoContext =
                  /*                    */
                  0;
                var BatchedContext =
                  /*               */
                  1;
                var EventContext =
                  /*                 */
                  2;
                var DiscreteEventContext =
                  /*         */
                  4;
                var LegacyUnbatchedContext =
                  /*       */
                  8;
                var RenderContext =
                  /*                */
                  16;
                var CommitContext =
                  /*                */
                  32;
                var RootIncomplete = 0;
                var RootFatalErrored = 1;
                var RootErrored = 2;
                var RootSuspended = 3;
                var RootSuspendedWithDelay = 4;
                var RootCompleted = 5;
                // Describes where we are in the React execution stack
                var executionContext = NoContext; // The root we're working on

                var workInProgressRoot = null; // The fiber we're working on

                var workInProgress = null; // The expiration time we're rendering

                var renderExpirationTime = NoWork; // Whether to root completed, errored, suspended, etc.

                var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

                var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
                // This is conceptually a time stamp but expressed in terms of an ExpirationTime
                // because we deal mostly with expiration times in the hot path, so this avoids
                // the conversion happening in the hot path.

                var workInProgressRootLatestProcessedExpirationTime = Sync;
                var workInProgressRootLatestSuspenseTimeout = Sync;
                var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
                // includes unprocessed updates, not work in bailed out children.

                var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
                // This flag determines if it might be worthwhile to restart if an opportunity
                // happens latere.

                var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
                // model where we don't commit new loading states in too quick succession.

                var globalMostRecentFallbackTime = 0;
                var FALLBACK_THROTTLE_MS = 500;
                var nextEffect = null;
                var hasUncaughtError = false;
                var firstUncaughtError = null;
                var legacyErrorBoundariesThatAlreadyFailed = null;
                var rootDoesHavePassiveEffects = false;
                var rootWithPendingPassiveEffects = null;
                var pendingPassiveEffectsRenderPriority = NoPriority;
                var pendingPassiveEffectsExpirationTime = NoWork;
                var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

                var NESTED_UPDATE_LIMIT = 50;
                var nestedUpdateCount = 0;
                var rootWithNestedUpdates = null;
                var NESTED_PASSIVE_UPDATE_LIMIT = 50;
                var nestedPassiveUpdateCount = 0;
                var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
                // during the commit phase. This enables them to be traced across components
                // that spawn new work during render. E.g. hidden boundaries, suspended SSR
                // hydration or SuspenseList.

                var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
                // time). However, if two updates are scheduled within the same event, we
                // should treat their start times as simultaneous, even if the actual clock
                // time has advanced between the first and second call.
                // In other words, because expiration times determine how updates are batched,
                // we want all updates of like priority that occur within the same event to
                // receive the same expiration time. Otherwise we get tearing.

                var currentEventTime = NoWork;
                function requestCurrentTimeForUpdate() {
                  if (
                    (executionContext & (RenderContext | CommitContext)) !==
                    NoContext
                  ) {
                    // We're inside React, so it's fine to read the actual time.
                    return msToExpirationTime(now$1());
                  } // We're not inside React, so we may be in the middle of a browser event.

                  if (currentEventTime !== NoWork) {
                    // Use the same start time for all updates until we enter React again.
                    return currentEventTime;
                  } // This is the first update since React yielded. Compute a new start time.

                  currentEventTime = msToExpirationTime(now$1());
                  return currentEventTime;
                }
                function getCurrentTime() {
                  return msToExpirationTime(now$1());
                }
                function computeExpirationForFiber(
                  currentTime,
                  fiber,
                  suspenseConfig
                ) {
                  var mode = fiber.mode;

                  if ((mode & BlockingMode) === NoMode) {
                    return Sync;
                  }

                  var priorityLevel = getCurrentPriorityLevel();

                  if ((mode & ConcurrentMode) === NoMode) {
                    return priorityLevel === ImmediatePriority ? Sync : Batched;
                  }

                  if ((executionContext & RenderContext) !== NoContext) {
                    // Use whatever time we're already rendering
                    // TODO: Should there be a way to opt out, like with `runWithPriority`?
                    return renderExpirationTime;
                  }

                  var expirationTime;

                  if (suspenseConfig !== null) {
                    // Compute an expiration time based on the Suspense timeout.
                    expirationTime = computeSuspenseExpiration(
                      currentTime,
                      suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION
                    );
                  } else {
                    // Compute an expiration time based on the Scheduler priority.
                    switch (priorityLevel) {
                      case ImmediatePriority:
                        expirationTime = Sync;
                        break;

                      case UserBlockingPriority:
                        // TODO: Rename this to computeUserBlockingExpiration
                        expirationTime = computeInteractiveExpiration(
                          currentTime
                        );
                        break;

                      case NormalPriority:
                      case LowPriority:
                        // TODO: Handle LowPriority
                        // TODO: Rename this to... something better.
                        expirationTime = computeAsyncExpiration(currentTime);
                        break;

                      case IdlePriority:
                        expirationTime = Idle;
                        break;

                      default: {
                        {
                          throw Error('Expected a valid priority level');
                        }
                      }
                    }
                  } // If we're in the middle of rendering a tree, do not update at the same
                  // expiration time that is already rendering.
                  // TODO: We shouldn't have to do this if the update is on a different root.
                  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
                  // the root when we check for this condition.

                  if (
                    workInProgressRoot !== null &&
                    expirationTime === renderExpirationTime
                  ) {
                    // This is a trick to move this update into a separate batch
                    expirationTime -= 1;
                  }

                  return expirationTime;
                }
                function scheduleUpdateOnFiber(fiber, expirationTime) {
                  checkForNestedUpdates();
                  warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
                  var root = markUpdateTimeFromFiberToRoot(
                    fiber,
                    expirationTime
                  );

                  if (root === null) {
                    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
                    return;
                  }

                  checkForInterruption(fiber, expirationTime);
                  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
                  // priority as an argument to that function and this one.

                  var priorityLevel = getCurrentPriorityLevel();

                  if (expirationTime === Sync) {
                    if (
                      // Check if we're inside unbatchedUpdates
                      (executionContext & LegacyUnbatchedContext) !==
                        NoContext && // Check if we're not already rendering
                      (executionContext & (RenderContext | CommitContext)) ===
                        NoContext
                    ) {
                      // Register pending interactions on the root to avoid losing traced interaction data.
                      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                      // root inside of batchedUpdates should be synchronous, but layout updates
                      // should be deferred until the end of the batch.

                      performSyncWorkOnRoot(root);
                    } else {
                      ensureRootIsScheduled(root);
                      schedulePendingInteractions(root, expirationTime);

                      if (executionContext === NoContext) {
                        // Flush the synchronous work now, unless we're already working or inside
                        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                        // scheduleCallbackForFiber to preserve the ability to schedule a callback
                        // without immediately flushing it. We only do this for user-initiated
                        // updates, to preserve historical behavior of legacy mode.
                        flushSyncCallbackQueue();
                      }
                    }
                  } else {
                    ensureRootIsScheduled(root);
                    schedulePendingInteractions(root, expirationTime);
                  }

                  if (
                    (executionContext & DiscreteEventContext) !== NoContext && // Only updates at user-blocking priority or greater are considered
                    // discrete, even inside a discrete event.
                    (priorityLevel === UserBlockingPriority ||
                      priorityLevel === ImmediatePriority)
                  ) {
                    // This is the result of a discrete event. Track the lowest priority
                    // discrete update per root so we can flush them early, if needed.
                    if (rootsWithPendingDiscreteUpdates === null) {
                      rootsWithPendingDiscreteUpdates = new Map([
                        [root, expirationTime],
                      ]);
                    } else {
                      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(
                        root
                      );

                      if (
                        lastDiscreteTime === undefined ||
                        lastDiscreteTime > expirationTime
                      ) {
                        rootsWithPendingDiscreteUpdates.set(
                          root,
                          expirationTime
                        );
                      }
                    }
                  }
                }
                var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
                // work without treating it as a typical update that originates from an event;
                // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
                // on a fiber.

                function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
                  // Update the source fiber's expiration time
                  if (fiber.expirationTime < expirationTime) {
                    fiber.expirationTime = expirationTime;
                  }

                  var alternate = fiber.alternate;

                  if (
                    alternate !== null &&
                    alternate.expirationTime < expirationTime
                  ) {
                    alternate.expirationTime = expirationTime;
                  } // Walk the parent path to the root and update the child expiration time.

                  var node = fiber.return;
                  var root = null;

                  if (node === null && fiber.tag === HostRoot) {
                    root = fiber.stateNode;
                  } else {
                    while (node !== null) {
                      alternate = node.alternate;

                      if (node.childExpirationTime < expirationTime) {
                        node.childExpirationTime = expirationTime;

                        if (
                          alternate !== null &&
                          alternate.childExpirationTime < expirationTime
                        ) {
                          alternate.childExpirationTime = expirationTime;
                        }
                      } else if (
                        alternate !== null &&
                        alternate.childExpirationTime < expirationTime
                      ) {
                        alternate.childExpirationTime = expirationTime;
                      }

                      if (node.return === null && node.tag === HostRoot) {
                        root = node.stateNode;
                        break;
                      }

                      node = node.return;
                    }
                  }

                  if (root !== null) {
                    if (workInProgressRoot === root) {
                      // Received an update to a tree that's in the middle of rendering. Mark
                      // that's unprocessed work on this root.
                      markUnprocessedUpdateTime(expirationTime);

                      if (
                        workInProgressRootExitStatus === RootSuspendedWithDelay
                      ) {
                        // The root already suspended with a delay, which means this render
                        // definitely won't finish. Since we have a new update, let's mark it as
                        // suspended now, right before marking the incoming update. This has the
                        // effect of interrupting the current render and switching to the update.
                        // TODO: This happens to work when receiving an update during the render
                        // phase, because of the trick inside computeExpirationForFiber to
                        // subtract 1 from `renderExpirationTime` to move it into a
                        // separate bucket. But we should probably model it with an exception,
                        // using the same mechanism we use to force hydration of a subtree.
                        // TODO: This does not account for low pri updates that were already
                        // scheduled before the root started rendering. Need to track the next
                        // pending expiration time (perhaps by backtracking the return path) and
                        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
                        markRootSuspendedAtTime(root, renderExpirationTime);
                      }
                    } // Mark that the root has a pending update.

                    markRootUpdatedAtTime(root, expirationTime);
                  }

                  return root;
                }

                function getNextRootExpirationTimeToWorkOn(root) {
                  // Determines the next expiration time that the root should render, taking
                  // into account levels that may be suspended, or levels that may have
                  // received a ping.
                  var lastExpiredTime = root.lastExpiredTime;

                  if (lastExpiredTime !== NoWork) {
                    return lastExpiredTime;
                  } // "Pending" refers to any update that hasn't committed yet, including if it
                  // suspended. The "suspended" range is therefore a subset.

                  var firstPendingTime = root.firstPendingTime;

                  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
                    // The highest priority pending time is not suspended. Let's work on that.
                    return firstPendingTime;
                  } // If the first pending time is suspended, check if there's a lower priority
                  // pending level that we know about. Or check if we received a ping. Work
                  // on whichever is higher priority.

                  var lastPingedTime = root.lastPingedTime;
                  var nextKnownPendingLevel = root.nextKnownPendingLevel;
                  return lastPingedTime > nextKnownPendingLevel
                    ? lastPingedTime
                    : nextKnownPendingLevel;
                } // Use this function to schedule a task for a root. There's only one task per
                // root; if a task was already scheduled, we'll check to make sure the
                // expiration time of the existing task is the same as the expiration time of
                // the next level that the root has work on. This function is called on every
                // update, and right before exiting a task.

                function ensureRootIsScheduled(root) {
                  var lastExpiredTime = root.lastExpiredTime;

                  if (lastExpiredTime !== NoWork) {
                    // Special case: Expired work should flush synchronously.
                    root.callbackExpirationTime = Sync;
                    root.callbackPriority = ImmediatePriority;
                    root.callbackNode = scheduleSyncCallback(
                      performSyncWorkOnRoot.bind(null, root)
                    );
                    return;
                  }

                  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
                  var existingCallbackNode = root.callbackNode;

                  if (expirationTime === NoWork) {
                    // There's nothing to work on.
                    if (existingCallbackNode !== null) {
                      root.callbackNode = null;
                      root.callbackExpirationTime = NoWork;
                      root.callbackPriority = NoPriority;
                    }

                    return;
                  } // TODO: If this is an update, we already read the current time. Pass the
                  // time as an argument.

                  var currentTime = requestCurrentTimeForUpdate();
                  var priorityLevel = inferPriorityFromExpirationTime(
                    currentTime,
                    expirationTime
                  ); // If there's an existing render task, confirm it has the correct priority and
                  // expiration time. Otherwise, we'll cancel it and schedule a new one.

                  if (existingCallbackNode !== null) {
                    var existingCallbackPriority = root.callbackPriority;
                    var existingCallbackExpirationTime =
                      root.callbackExpirationTime;

                    if (
                      // Callback must have the exact same expiration time.
                      existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
                      existingCallbackPriority >= priorityLevel
                    ) {
                      // Existing callback is sufficient.
                      return;
                    } // Need to schedule a new task.
                    // TODO: Instead of scheduling a new task, we should be able to change the
                    // priority of the existing one.

                    cancelCallback(existingCallbackNode);
                  }

                  root.callbackExpirationTime = expirationTime;
                  root.callbackPriority = priorityLevel;
                  var callbackNode;

                  if (expirationTime === Sync) {
                    // Sync React callbacks are scheduled on a special internal queue
                    callbackNode = scheduleSyncCallback(
                      performSyncWorkOnRoot.bind(null, root)
                    );
                  } else if (
                    disableSchedulerTimeoutBasedOnReactExpirationTime
                  ) {
                    callbackNode = scheduleCallback(
                      priorityLevel,
                      performConcurrentWorkOnRoot.bind(null, root)
                    );
                  } else {
                    callbackNode = scheduleCallback(
                      priorityLevel,
                      performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
                      // ordering because tasks are processed in timeout order.
                      {
                        timeout: expirationTimeToMs(expirationTime) - now$1(),
                      }
                    );
                  }

                  root.callbackNode = callbackNode;
                } // This is the entry point for every concurrent task, i.e. anything that
                // goes through Scheduler.

                function performConcurrentWorkOnRoot(root, didTimeout) {
                  // Since we know we're in a React event, we can clear the current
                  // event time. The next update will compute a new event time.
                  currentEventTime = NoWork;

                  if (didTimeout) {
                    // The render task took too long to complete. Mark the current time as
                    // expired to synchronously render all expired work in a single batch.
                    var currentTime = requestCurrentTimeForUpdate();
                    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

                    ensureRootIsScheduled(root);
                    return null;
                  } // Determine the next expiration time to work on, using the fields stored
                  // on the root.

                  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

                  if (expirationTime !== NoWork) {
                    var originalCallbackNode = root.callbackNode;

                    if (
                      !(
                        (executionContext & (RenderContext | CommitContext)) ===
                        NoContext
                      )
                    ) {
                      {
                        throw Error('Should not already be working.');
                      }
                    }

                    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
                    // and prepare a fresh one. Otherwise we'll continue where we left off.

                    if (
                      root !== workInProgressRoot ||
                      expirationTime !== renderExpirationTime
                    ) {
                      prepareFreshStack(root, expirationTime);
                      startWorkOnPendingInteractions(root, expirationTime);
                    } // If we have a work-in-progress fiber, it means there's still work to do
                    // in this root.

                    if (workInProgress !== null) {
                      var prevExecutionContext = executionContext;
                      executionContext |= RenderContext;
                      var prevDispatcher = pushDispatcher(root);
                      var prevInteractions = pushInteractions(root);
                      startWorkLoopTimer(workInProgress);

                      do {
                        try {
                          workLoopConcurrent();
                          break;
                        } catch (thrownValue) {
                          handleError(root, thrownValue);
                        }
                      } while (true);

                      resetContextDependencies();
                      executionContext = prevExecutionContext;
                      popDispatcher(prevDispatcher);

                      if (enableSchedulerTracing) {
                        popInteractions(prevInteractions);
                      }

                      if (workInProgressRootExitStatus === RootFatalErrored) {
                        var fatalError = workInProgressRootFatalError;
                        stopInterruptedWorkLoopTimer();
                        prepareFreshStack(root, expirationTime);
                        markRootSuspendedAtTime(root, expirationTime);
                        ensureRootIsScheduled(root);
                        throw fatalError;
                      }

                      if (workInProgress !== null) {
                        // There's still work left over. Exit without committing.
                        stopInterruptedWorkLoopTimer();
                      } else {
                        // We now have a consistent tree. The next step is either to commit it,
                        // or, if something suspended, wait to commit it after a timeout.
                        stopFinishedWorkLoopTimer();
                        var finishedWork = (root.finishedWork =
                          root.current.alternate);
                        root.finishedExpirationTime = expirationTime;
                        finishConcurrentRender(
                          root,
                          finishedWork,
                          workInProgressRootExitStatus,
                          expirationTime
                        );
                      }

                      ensureRootIsScheduled(root);

                      if (root.callbackNode === originalCallbackNode) {
                        // The task node scheduled for this root is the same one that's
                        // currently executed. Need to return a continuation.
                        return performConcurrentWorkOnRoot.bind(null, root);
                      }
                    }
                  }

                  return null;
                }

                function finishConcurrentRender(
                  root,
                  finishedWork,
                  exitStatus,
                  expirationTime
                ) {
                  // Set this to null to indicate there's no in-progress render.
                  workInProgressRoot = null;

                  switch (exitStatus) {
                    case RootIncomplete:
                    case RootFatalErrored: {
                      {
                        {
                          throw Error(
                            'Root did not complete. This is a bug in React.'
                          );
                        }
                      }
                    }
                    // Flow knows about invariant, so it complains if I add a break
                    // statement, but eslint doesn't know about invariant, so it complains
                    // if I do. eslint-disable-next-line no-fallthrough

                    case RootErrored: {
                      // If this was an async render, the error may have happened due to
                      // a mutation in a concurrent event. Try rendering one more time,
                      // synchronously, to see if the error goes away. If there are
                      // lower priority updates, let's include those, too, in case they
                      // fix the inconsistency. Render at Idle to include all updates.
                      // If it was Idle or Never or some not-yet-invented time, render
                      // at that time.
                      markRootExpiredAtTime(
                        root,
                        expirationTime > Idle ? Idle : expirationTime
                      ); // We assume that this second render pass will be synchronous
                      // and therefore not hit this path again.

                      break;
                    }

                    case RootSuspended: {
                      markRootSuspendedAtTime(root, expirationTime);
                      var lastSuspendedTime = root.lastSuspendedTime;

                      if (expirationTime === lastSuspendedTime) {
                        root.nextKnownPendingLevel = getRemainingExpirationTime(
                          finishedWork
                        );
                      }

                      flushSuspensePriorityWarningInDEV(); // We have an acceptable loading state. We need to figure out if we
                      // should immediately commit it or wait a bit.
                      // If we have processed new updates during this render, we may now
                      // have a new loading state ready. We want to ensure that we commit
                      // that as soon as possible.

                      var hasNotProcessedNewUpdates =
                        workInProgressRootLatestProcessedExpirationTime ===
                        Sync;

                      if (
                        hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
                        !(
                          true &&
                          flushSuspenseFallbacksInTests &&
                          IsThisRendererActing.current
                        )
                      ) {
                        // If we have not processed any new updates during this pass, then
                        // this is either a retry of an existing fallback state or a
                        // hidden tree. Hidden trees shouldn't be batched with other work
                        // and after that's fixed it can only be a retry. We're going to
                        // throttle committing retries so that we don't show too many
                        // loading states too quickly.
                        var msUntilTimeout =
                          globalMostRecentFallbackTime +
                          FALLBACK_THROTTLE_MS -
                          now$1(); // Don't bother with a very short suspense time.

                        if (msUntilTimeout > 10) {
                          if (workInProgressRootHasPendingPing) {
                            var lastPingedTime = root.lastPingedTime;

                            if (
                              lastPingedTime === NoWork ||
                              lastPingedTime >= expirationTime
                            ) {
                              // This render was pinged but we didn't get to restart
                              // earlier so try restarting now instead.
                              root.lastPingedTime = expirationTime;
                              prepareFreshStack(root, expirationTime);
                              break;
                            }
                          }

                          var nextTime = getNextRootExpirationTimeToWorkOn(
                            root
                          );

                          if (
                            nextTime !== NoWork &&
                            nextTime !== expirationTime
                          ) {
                            // There's additional work on this root.
                            break;
                          }

                          if (
                            lastSuspendedTime !== NoWork &&
                            lastSuspendedTime !== expirationTime
                          ) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            root.lastPingedTime = lastSuspendedTime;
                            break;
                          } // The render is suspended, it hasn't timed out, and there's no
                          // lower priority work to do. Instead of committing the fallback
                          // immediately, wait for more data to arrive.

                          root.timeoutHandle = scheduleTimeout(
                            commitRoot.bind(null, root),
                            msUntilTimeout
                          );
                          break;
                        }
                      } // The work expired. Commit immediately.

                      commitRoot(root);
                      break;
                    }

                    case RootSuspendedWithDelay: {
                      markRootSuspendedAtTime(root, expirationTime);
                      var _lastSuspendedTime = root.lastSuspendedTime;

                      if (expirationTime === _lastSuspendedTime) {
                        root.nextKnownPendingLevel = getRemainingExpirationTime(
                          finishedWork
                        );
                      }

                      flushSuspensePriorityWarningInDEV();

                      if (
                        // do not delay if we're inside an act() scope
                        !(
                          true &&
                          flushSuspenseFallbacksInTests &&
                          IsThisRendererActing.current
                        )
                      ) {
                        // We're suspended in a state that should be avoided. We'll try to
                        // avoid committing it for as long as the timeouts let us.
                        if (workInProgressRootHasPendingPing) {
                          var _lastPingedTime = root.lastPingedTime;

                          if (
                            _lastPingedTime === NoWork ||
                            _lastPingedTime >= expirationTime
                          ) {
                            // This render was pinged but we didn't get to restart earlier
                            // so try restarting now instead.
                            root.lastPingedTime = expirationTime;
                            prepareFreshStack(root, expirationTime);
                            break;
                          }
                        }

                        var _nextTime = getNextRootExpirationTimeToWorkOn(root);

                        if (
                          _nextTime !== NoWork &&
                          _nextTime !== expirationTime
                        ) {
                          // There's additional work on this root.
                          break;
                        }

                        if (
                          _lastSuspendedTime !== NoWork &&
                          _lastSuspendedTime !== expirationTime
                        ) {
                          // We should prefer to render the fallback of at the last
                          // suspended level. Ping the last suspended level to try
                          // rendering it again.
                          root.lastPingedTime = _lastSuspendedTime;
                          break;
                        }

                        var _msUntilTimeout;

                        if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                          // We have processed a suspense config whose expiration time we
                          // can use as the timeout.
                          _msUntilTimeout =
                            expirationTimeToMs(
                              workInProgressRootLatestSuspenseTimeout
                            ) - now$1();
                        } else if (
                          workInProgressRootLatestProcessedExpirationTime ===
                          Sync
                        ) {
                          // This should never normally happen because only new updates
                          // cause delayed states, so we should have processed something.
                          // However, this could also happen in an offscreen tree.
                          _msUntilTimeout = 0;
                        } else {
                          // If we don't have a suspense config, we're going to use a
                          // heuristic to determine how long we can suspend.
                          var eventTimeMs = inferTimeFromExpirationTime(
                            workInProgressRootLatestProcessedExpirationTime
                          );
                          var currentTimeMs = now$1();
                          var timeUntilExpirationMs =
                            expirationTimeToMs(expirationTime) - currentTimeMs;
                          var timeElapsed = currentTimeMs - eventTimeMs;

                          if (timeElapsed < 0) {
                            // We get this wrong some time since we estimate the time.
                            timeElapsed = 0;
                          }

                          _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
                          // event time is exact instead of inferred from expiration time
                          // we don't need this.

                          if (timeUntilExpirationMs < _msUntilTimeout) {
                            _msUntilTimeout = timeUntilExpirationMs;
                          }
                        } // Don't bother with a very short suspense time.

                        if (_msUntilTimeout > 10) {
                          // The render is suspended, it hasn't timed out, and there's no
                          // lower priority work to do. Instead of committing the fallback
                          // immediately, wait for more data to arrive.
                          root.timeoutHandle = scheduleTimeout(
                            commitRoot.bind(null, root),
                            _msUntilTimeout
                          );
                          break;
                        }
                      } // The work expired. Commit immediately.

                      commitRoot(root);
                      break;
                    }

                    case RootCompleted: {
                      // The work completed. Ready to commit.
                      if (
                        // do not delay if we're inside an act() scope
                        !(
                          true &&
                          flushSuspenseFallbacksInTests &&
                          IsThisRendererActing.current
                        ) &&
                        workInProgressRootLatestProcessedExpirationTime !==
                          Sync &&
                        workInProgressRootCanSuspendUsingConfig !== null
                      ) {
                        // If we have exceeded the minimum loading delay, which probably
                        // means we have shown a spinner already, we might have to suspend
                        // a bit longer to ensure that the spinner is shown for
                        // enough time.
                        var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(
                          workInProgressRootLatestProcessedExpirationTime,
                          expirationTime,
                          workInProgressRootCanSuspendUsingConfig
                        );

                        if (_msUntilTimeout2 > 10) {
                          markRootSuspendedAtTime(root, expirationTime);
                          root.timeoutHandle = scheduleTimeout(
                            commitRoot.bind(null, root),
                            _msUntilTimeout2
                          );
                          break;
                        }
                      }

                      commitRoot(root);
                      break;
                    }

                    default: {
                      {
                        {
                          throw Error('Unknown root exit status.');
                        }
                      }
                    }
                  }
                } // This is the entry point for synchronous tasks that don't go
                // through Scheduler

                function performSyncWorkOnRoot(root) {
                  // Check if there's expired work on this root. Otherwise, render at Sync.
                  var lastExpiredTime = root.lastExpiredTime;
                  var expirationTime =
                    lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

                  if (root.finishedExpirationTime === expirationTime) {
                    // There's already a pending commit at this expiration time.
                    // TODO: This is poorly factored. This case only exists for the
                    // batch.commit() API.
                    commitRoot(root);
                  } else {
                    if (
                      !(
                        (executionContext & (RenderContext | CommitContext)) ===
                        NoContext
                      )
                    ) {
                      {
                        throw Error('Should not already be working.');
                      }
                    }

                    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
                    // and prepare a fresh one. Otherwise we'll continue where we left off.

                    if (
                      root !== workInProgressRoot ||
                      expirationTime !== renderExpirationTime
                    ) {
                      prepareFreshStack(root, expirationTime);
                      startWorkOnPendingInteractions(root, expirationTime);
                    } // If we have a work-in-progress fiber, it means there's still work to do
                    // in this root.

                    if (workInProgress !== null) {
                      var prevExecutionContext = executionContext;
                      executionContext |= RenderContext;
                      var prevDispatcher = pushDispatcher(root);
                      var prevInteractions = pushInteractions(root);
                      startWorkLoopTimer(workInProgress);

                      do {
                        try {
                          workLoopSync();
                          break;
                        } catch (thrownValue) {
                          handleError(root, thrownValue);
                        }
                      } while (true);

                      resetContextDependencies();
                      executionContext = prevExecutionContext;
                      popDispatcher(prevDispatcher);

                      if (enableSchedulerTracing) {
                        popInteractions(prevInteractions);
                      }

                      if (workInProgressRootExitStatus === RootFatalErrored) {
                        var fatalError = workInProgressRootFatalError;
                        stopInterruptedWorkLoopTimer();
                        prepareFreshStack(root, expirationTime);
                        markRootSuspendedAtTime(root, expirationTime);
                        ensureRootIsScheduled(root);
                        throw fatalError;
                      }

                      if (workInProgress !== null) {
                        // This is a sync render, so we should have finished the whole tree.
                        {
                          {
                            throw Error(
                              'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.'
                            );
                          }
                        }
                      } else {
                        // We now have a consistent tree. Because this is a sync render, we
                        // will commit it even if something suspended.
                        stopFinishedWorkLoopTimer();
                        root.finishedWork = root.current.alternate;
                        root.finishedExpirationTime = expirationTime;
                        finishSyncRender(
                          root,
                          workInProgressRootExitStatus,
                          expirationTime
                        );
                      } // Before exiting, make sure there's a callback scheduled for the next
                      // pending level.

                      ensureRootIsScheduled(root);
                    }
                  }

                  return null;
                }

                function finishSyncRender(root, exitStatus, expirationTime) {
                  // Set this to null to indicate there's no in-progress render.
                  workInProgressRoot = null;

                  {
                    if (
                      exitStatus === RootSuspended ||
                      exitStatus === RootSuspendedWithDelay
                    ) {
                      flushSuspensePriorityWarningInDEV();
                    }
                  }

                  commitRoot(root);
                }

                function flushRoot(root, expirationTime) {
                  markRootExpiredAtTime(root, expirationTime);
                  ensureRootIsScheduled(root);

                  if (
                    (executionContext & (RenderContext | CommitContext)) ===
                    NoContext
                  ) {
                    flushSyncCallbackQueue();
                  }
                }
                function flushDiscreteUpdates() {
                  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
                  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
                  // those two cases. Need to fix this before exposing flushDiscreteUpdates
                  // as a public API.
                  if (
                    (executionContext &
                      (BatchedContext | RenderContext | CommitContext)) !==
                    NoContext
                  ) {
                    if (
                      true &&
                      (executionContext & RenderContext) !== NoContext
                    ) {
                      warning$1(
                        false,
                        'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' +
                          'already rendering.'
                      );
                    } // We're already rendering, so we can't synchronously flush pending work.
                    // This is probably a nested event dispatch triggered by a lifecycle/effect,
                    // like `el.focus()`. Exit.

                    return;
                  }

                  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
                  // they fire before the next serial event.

                  flushPassiveEffects();
                }
                function deferredUpdates(fn) {
                  // TODO: Remove in favor of Scheduler.next
                  return runWithPriority(NormalPriority, fn);
                }
                function syncUpdates(fn, a, b, c) {
                  return runWithPriority(
                    ImmediatePriority,
                    fn.bind(null, a, b, c)
                  );
                }

                function flushPendingDiscreteUpdates() {
                  if (rootsWithPendingDiscreteUpdates !== null) {
                    // For each root with pending discrete updates, schedule a callback to
                    // immediately flush them.
                    var roots = rootsWithPendingDiscreteUpdates;
                    rootsWithPendingDiscreteUpdates = null;
                    roots.forEach(function(expirationTime, root) {
                      markRootExpiredAtTime(root, expirationTime);
                      ensureRootIsScheduled(root);
                    }); // Now flush the immediate queue.

                    flushSyncCallbackQueue();
                  }
                }

                function batchedUpdates(fn, a) {
                  var prevExecutionContext = executionContext;
                  executionContext |= BatchedContext;

                  try {
                    return fn(a);
                  } finally {
                    executionContext = prevExecutionContext;

                    if (executionContext === NoContext) {
                      // Flush the immediate callbacks that were scheduled during this batch
                      flushSyncCallbackQueue();
                    }
                  }
                }
                function batchedEventUpdates(fn, a) {
                  var prevExecutionContext = executionContext;
                  executionContext |= EventContext;

                  try {
                    return fn(a);
                  } finally {
                    executionContext = prevExecutionContext;

                    if (executionContext === NoContext) {
                      // Flush the immediate callbacks that were scheduled during this batch
                      flushSyncCallbackQueue();
                    }
                  }
                }
                function discreteUpdates(fn, a, b, c) {
                  var prevExecutionContext = executionContext;
                  executionContext |= DiscreteEventContext;

                  try {
                    // Should this
                    return runWithPriority(
                      UserBlockingPriority,
                      fn.bind(null, a, b, c)
                    );
                  } finally {
                    executionContext = prevExecutionContext;

                    if (executionContext === NoContext) {
                      // Flush the immediate callbacks that were scheduled during this batch
                      flushSyncCallbackQueue();
                    }
                  }
                }
                function unbatchedUpdates(fn, a) {
                  var prevExecutionContext = executionContext;
                  executionContext &= ~BatchedContext;
                  executionContext |= LegacyUnbatchedContext;

                  try {
                    return fn(a);
                  } finally {
                    executionContext = prevExecutionContext;

                    if (executionContext === NoContext) {
                      // Flush the immediate callbacks that were scheduled during this batch
                      flushSyncCallbackQueue();
                    }
                  }
                }
                function flushSync(fn, a) {
                  if (
                    (executionContext & (RenderContext | CommitContext)) !==
                    NoContext
                  ) {
                    {
                      {
                        throw Error(
                          'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.'
                        );
                      }
                    }
                  }

                  var prevExecutionContext = executionContext;
                  executionContext |= BatchedContext;

                  try {
                    return runWithPriority(ImmediatePriority, fn.bind(null, a));
                  } finally {
                    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
                    // Note that this will happen even if batchedUpdates is higher up
                    // the stack.

                    flushSyncCallbackQueue();
                  }
                }
                function flushControlled(fn) {
                  var prevExecutionContext = executionContext;
                  executionContext |= BatchedContext;

                  try {
                    runWithPriority(ImmediatePriority, fn);
                  } finally {
                    executionContext = prevExecutionContext;

                    if (executionContext === NoContext) {
                      // Flush the immediate callbacks that were scheduled during this batch
                      flushSyncCallbackQueue();
                    }
                  }
                }

                function prepareFreshStack(root, expirationTime) {
                  root.finishedWork = null;
                  root.finishedExpirationTime = NoWork;
                  var timeoutHandle = root.timeoutHandle;

                  if (timeoutHandle !== noTimeout) {
                    // The root previous suspended and scheduled a timeout to commit a fallback
                    // state. Now that we have additional work, cancel the timeout.
                    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

                    cancelTimeout(timeoutHandle);
                  }

                  if (workInProgress !== null) {
                    var interruptedWork = workInProgress.return;

                    while (interruptedWork !== null) {
                      unwindInterruptedWork(interruptedWork);
                      interruptedWork = interruptedWork.return;
                    }
                  }

                  workInProgressRoot = root;
                  workInProgress = createWorkInProgress(
                    root.current,
                    null,
                    expirationTime
                  );
                  renderExpirationTime = expirationTime;
                  workInProgressRootExitStatus = RootIncomplete;
                  workInProgressRootFatalError = null;
                  workInProgressRootLatestProcessedExpirationTime = Sync;
                  workInProgressRootLatestSuspenseTimeout = Sync;
                  workInProgressRootCanSuspendUsingConfig = null;
                  workInProgressRootNextUnprocessedUpdateTime = NoWork;
                  workInProgressRootHasPendingPing = false;

                  if (enableSchedulerTracing) {
                    spawnedWorkDuringRender = null;
                  }

                  {
                    ReactStrictModeWarnings.discardPendingWarnings();
                    componentsThatTriggeredHighPriSuspend = null;
                  }
                }

                function handleError(root, thrownValue) {
                  do {
                    try {
                      // Reset module-level state that was set during the render phase.
                      resetContextDependencies();
                      resetHooks();
                      resetCurrentFiber();

                      if (
                        workInProgress === null ||
                        workInProgress.return === null
                      ) {
                        // Expected to be working on a non-root fiber. This is a fatal error
                        // because there's no ancestor that can handle it; the root is
                        // supposed to capture all errors that weren't caught by an error
                        // boundary.
                        workInProgressRootExitStatus = RootFatalErrored;
                        workInProgressRootFatalError = thrownValue;
                        return null;
                      }

                      if (
                        enableProfilerTimer &&
                        workInProgress.mode & ProfileMode
                      ) {
                        // Record the time spent rendering before an error was thrown. This
                        // avoids inaccurate Profiler durations in the case of a
                        // suspended render.
                        stopProfilerTimerIfRunningAndRecordDelta(
                          workInProgress,
                          true
                        );
                      }

                      throwException(
                        root,
                        workInProgress.return,
                        workInProgress,
                        thrownValue,
                        renderExpirationTime
                      );
                      workInProgress = completeUnitOfWork(workInProgress);
                    } catch (yetAnotherThrownValue) {
                      // Something in the return path also threw.
                      thrownValue = yetAnotherThrownValue;
                      continue;
                    } // Return to the normal work loop.

                    return;
                  } while (true);
                }

                function pushDispatcher(root) {
                  var prevDispatcher = ReactCurrentDispatcher.current;
                  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

                  if (prevDispatcher === null) {
                    // The React isomorphic package does not include a default dispatcher.
                    // Instead the first renderer will lazily attach one, in order to give
                    // nicer error messages.
                    return ContextOnlyDispatcher;
                  } else {
                    return prevDispatcher;
                  }
                }

                function popDispatcher(prevDispatcher) {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }

                function pushInteractions(root) {
                  if (enableSchedulerTracing) {
                    var prevInteractions = tracing.__interactionsRef.current;
                    tracing.__interactionsRef.current =
                      root.memoizedInteractions;
                    return prevInteractions;
                  }

                  return null;
                }

                function popInteractions(prevInteractions) {
                  if (enableSchedulerTracing) {
                    tracing.__interactionsRef.current = prevInteractions;
                  }
                }

                function markCommitTimeOfFallback() {
                  globalMostRecentFallbackTime = now$1();
                }
                function markRenderEventTimeAndConfig(
                  expirationTime,
                  suspenseConfig
                ) {
                  if (
                    expirationTime <
                      workInProgressRootLatestProcessedExpirationTime &&
                    expirationTime > Idle
                  ) {
                    workInProgressRootLatestProcessedExpirationTime = expirationTime;
                  }

                  if (suspenseConfig !== null) {
                    if (
                      expirationTime <
                        workInProgressRootLatestSuspenseTimeout &&
                      expirationTime > Idle
                    ) {
                      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

                      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
                    }
                  }
                }
                function markUnprocessedUpdateTime(expirationTime) {
                  if (
                    expirationTime > workInProgressRootNextUnprocessedUpdateTime
                  ) {
                    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
                  }
                }
                function renderDidSuspend() {
                  if (workInProgressRootExitStatus === RootIncomplete) {
                    workInProgressRootExitStatus = RootSuspended;
                  }
                }
                function renderDidSuspendDelayIfPossible() {
                  if (
                    workInProgressRootExitStatus === RootIncomplete ||
                    workInProgressRootExitStatus === RootSuspended
                  ) {
                    workInProgressRootExitStatus = RootSuspendedWithDelay;
                  } // Check if there's a lower priority update somewhere else in the tree.

                  if (
                    workInProgressRootNextUnprocessedUpdateTime !== NoWork &&
                    workInProgressRoot !== null
                  ) {
                    // Mark the current render as suspended, and then mark that there's a
                    // pending update.
                    // TODO: This should immediately interrupt the current render, instead
                    // of waiting until the next time we yield.
                    markRootSuspendedAtTime(
                      workInProgressRoot,
                      renderExpirationTime
                    );
                    markRootUpdatedAtTime(
                      workInProgressRoot,
                      workInProgressRootNextUnprocessedUpdateTime
                    );
                  }
                }
                function renderDidError() {
                  if (workInProgressRootExitStatus !== RootCompleted) {
                    workInProgressRootExitStatus = RootErrored;
                  }
                } // Called during render to determine if anything has suspended.
                // Returns false if we're not sure.

                function renderHasNotSuspendedYet() {
                  // If something errored or completed, we can't really be sure,
                  // so those are false.
                  return workInProgressRootExitStatus === RootIncomplete;
                }

                function inferTimeFromExpirationTime(expirationTime) {
                  // We don't know exactly when the update was scheduled, but we can infer an
                  // approximate start time from the expiration time.
                  var earliestExpirationTimeMs = expirationTimeToMs(
                    expirationTime
                  );
                  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
                }

                function inferTimeFromExpirationTimeWithSuspenseConfig(
                  expirationTime,
                  suspenseConfig
                ) {
                  // We don't know exactly when the update was scheduled, but we can infer an
                  // approximate start time from the expiration time by subtracting the timeout
                  // that was added to the event time.
                  var earliestExpirationTimeMs = expirationTimeToMs(
                    expirationTime
                  );
                  return (
                    earliestExpirationTimeMs -
                    (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION)
                  );
                } // The work loop is an extremely hot path. Tell Closure not to inline it.

                /** @noinline */

                function workLoopSync() {
                  // Already timed out, so perform work without checking if we need to yield.
                  while (workInProgress !== null) {
                    workInProgress = performUnitOfWork(workInProgress);
                  }
                }
                /** @noinline */

                function workLoopConcurrent() {
                  // Perform work until Scheduler asks us to yield
                  while (workInProgress !== null && !shouldYield()) {
                    workInProgress = performUnitOfWork(workInProgress);
                  }
                }

                function performUnitOfWork(unitOfWork) {
                  // The current, flushed, state of this fiber is the alternate. Ideally
                  // nothing should rely on this, but relying on it here means that we don't
                  // need an additional field on the work in progress.
                  var current$$1 = unitOfWork.alternate;
                  startWorkTimer(unitOfWork);
                  setCurrentFiber(unitOfWork);
                  var next;

                  if (
                    enableProfilerTimer &&
                    (unitOfWork.mode & ProfileMode) !== NoMode
                  ) {
                    startProfilerTimer(unitOfWork);
                    next = beginWork$$1(
                      current$$1,
                      unitOfWork,
                      renderExpirationTime
                    );
                    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
                  } else {
                    next = beginWork$$1(
                      current$$1,
                      unitOfWork,
                      renderExpirationTime
                    );
                  }

                  resetCurrentFiber();
                  unitOfWork.memoizedProps = unitOfWork.pendingProps;

                  if (next === null) {
                    // If this doesn't spawn new work, complete the current work.
                    next = completeUnitOfWork(unitOfWork);
                  }

                  ReactCurrentOwner$1.current = null;
                  return next;
                }

                function completeUnitOfWork(unitOfWork) {
                  // Attempt to complete the current unit of work, then move to the next
                  // sibling. If there are no more siblings, return to the parent fiber.
                  workInProgress = unitOfWork;

                  do {
                    // The current, flushed, state of this fiber is the alternate. Ideally
                    // nothing should rely on this, but relying on it here means that we don't
                    // need an additional field on the work in progress.
                    var current$$1 = workInProgress.alternate;
                    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

                    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                      setCurrentFiber(workInProgress);
                      var next = void 0;

                      if (
                        !enableProfilerTimer ||
                        (workInProgress.mode & ProfileMode) === NoMode
                      ) {
                        next = completeWork(
                          current$$1,
                          workInProgress,
                          renderExpirationTime
                        );
                      } else {
                        startProfilerTimer(workInProgress);
                        next = completeWork(
                          current$$1,
                          workInProgress,
                          renderExpirationTime
                        ); // Update render duration assuming we didn't error.

                        stopProfilerTimerIfRunningAndRecordDelta(
                          workInProgress,
                          false
                        );
                      }

                      stopWorkTimer(workInProgress);
                      resetCurrentFiber();
                      resetChildExpirationTime(workInProgress);

                      if (next !== null) {
                        // Completing this fiber spawned new work. Work on that next.
                        return next;
                      }

                      if (
                        returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
                        (returnFiber.effectTag & Incomplete) === NoEffect
                      ) {
                        // Append all the effects of the subtree and this fiber onto the effect
                        // list of the parent. The completion order of the children affects the
                        // side-effect order.
                        if (returnFiber.firstEffect === null) {
                          returnFiber.firstEffect = workInProgress.firstEffect;
                        }

                        if (workInProgress.lastEffect !== null) {
                          if (returnFiber.lastEffect !== null) {
                            returnFiber.lastEffect.nextEffect =
                              workInProgress.firstEffect;
                          }

                          returnFiber.lastEffect = workInProgress.lastEffect;
                        } // If this fiber had side-effects, we append it AFTER the children's
                        // side-effects. We can perform certain side-effects earlier if needed,
                        // by doing multiple passes over the effect list. We don't want to
                        // schedule our own side-effect on our own list because if end up
                        // reusing children we'll schedule this effect onto itself since we're
                        // at the end.

                        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
                        // list. PerformedWork effect is read by React DevTools but shouldn't be
                        // committed.

                        if (effectTag > PerformedWork) {
                          if (returnFiber.lastEffect !== null) {
                            returnFiber.lastEffect.nextEffect = workInProgress;
                          } else {
                            returnFiber.firstEffect = workInProgress;
                          }

                          returnFiber.lastEffect = workInProgress;
                        }
                      }
                    } else {
                      // This fiber did not complete because something threw. Pop values off
                      // the stack without entering the complete phase. If this is a boundary,
                      // capture values if possible.
                      var _next = unwindWork(
                        workInProgress,
                        renderExpirationTime
                      ); // Because this fiber did not complete, don't reset its expiration time.

                      if (
                        enableProfilerTimer &&
                        (workInProgress.mode & ProfileMode) !== NoMode
                      ) {
                        // Record the render duration for the fiber that errored.
                        stopProfilerTimerIfRunningAndRecordDelta(
                          workInProgress,
                          false
                        ); // Include the time spent working on failed children before continuing.

                        var actualDuration = workInProgress.actualDuration;
                        var child = workInProgress.child;

                        while (child !== null) {
                          actualDuration += child.actualDuration;
                          child = child.sibling;
                        }

                        workInProgress.actualDuration = actualDuration;
                      }

                      if (_next !== null) {
                        // If completing this work spawned new work, do that next. We'll come
                        // back here again.
                        // Since we're restarting, remove anything that is not a host effect
                        // from the effect tag.
                        // TODO: The name stopFailedWorkTimer is misleading because Suspense
                        // also captures and restarts.
                        stopFailedWorkTimer(workInProgress);
                        _next.effectTag &= HostEffectMask;
                        return _next;
                      }

                      stopWorkTimer(workInProgress);

                      if (returnFiber !== null) {
                        // Mark the parent fiber as incomplete and clear its effect list.
                        returnFiber.firstEffect = returnFiber.lastEffect = null;
                        returnFiber.effectTag |= Incomplete;
                      }
                    }

                    var siblingFiber = workInProgress.sibling;

                    if (siblingFiber !== null) {
                      // If there is more work to do in this returnFiber, do that next.
                      return siblingFiber;
                    } // Otherwise, return to the parent

                    workInProgress = returnFiber;
                  } while (workInProgress !== null); // We've reached the root.

                  if (workInProgressRootExitStatus === RootIncomplete) {
                    workInProgressRootExitStatus = RootCompleted;
                  }

                  return null;
                }

                function getRemainingExpirationTime(fiber) {
                  var updateExpirationTime = fiber.expirationTime;
                  var childExpirationTime = fiber.childExpirationTime;
                  return updateExpirationTime > childExpirationTime
                    ? updateExpirationTime
                    : childExpirationTime;
                }

                function resetChildExpirationTime(completedWork) {
                  if (
                    renderExpirationTime !== Never &&
                    completedWork.childExpirationTime === Never
                  ) {
                    // The children of this component are hidden. Don't bubble their
                    // expiration times.
                    return;
                  }

                  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

                  if (
                    enableProfilerTimer &&
                    (completedWork.mode & ProfileMode) !== NoMode
                  ) {
                    // In profiling mode, resetChildExpirationTime is also used to reset
                    // profiler durations.
                    var actualDuration = completedWork.actualDuration;
                    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                    // When work is done, it should bubble to the parent's actualDuration. If
                    // the fiber has not been cloned though, (meaning no work was done), then
                    // this value will reflect the amount of time spent working on a previous
                    // render. In that case it should not bubble. We determine whether it was
                    // cloned by comparing the child pointer.

                    var shouldBubbleActualDurations =
                      completedWork.alternate === null ||
                      completedWork.child !== completedWork.alternate.child;
                    var child = completedWork.child;

                    while (child !== null) {
                      var childUpdateExpirationTime = child.expirationTime;
                      var childChildExpirationTime = child.childExpirationTime;

                      if (childUpdateExpirationTime > newChildExpirationTime) {
                        newChildExpirationTime = childUpdateExpirationTime;
                      }

                      if (childChildExpirationTime > newChildExpirationTime) {
                        newChildExpirationTime = childChildExpirationTime;
                      }

                      if (shouldBubbleActualDurations) {
                        actualDuration += child.actualDuration;
                      }

                      treeBaseDuration += child.treeBaseDuration;
                      child = child.sibling;
                    }

                    completedWork.actualDuration = actualDuration;
                    completedWork.treeBaseDuration = treeBaseDuration;
                  } else {
                    var _child = completedWork.child;

                    while (_child !== null) {
                      var _childUpdateExpirationTime = _child.expirationTime;
                      var _childChildExpirationTime =
                        _child.childExpirationTime;

                      if (_childUpdateExpirationTime > newChildExpirationTime) {
                        newChildExpirationTime = _childUpdateExpirationTime;
                      }

                      if (_childChildExpirationTime > newChildExpirationTime) {
                        newChildExpirationTime = _childChildExpirationTime;
                      }

                      _child = _child.sibling;
                    }
                  }

                  completedWork.childExpirationTime = newChildExpirationTime;
                }

                function commitRoot(root) {
                  var renderPriorityLevel = getCurrentPriorityLevel();
                  runWithPriority(
                    ImmediatePriority,
                    commitRootImpl.bind(null, root, renderPriorityLevel)
                  );
                  return null;
                }

                function commitRootImpl(root, renderPriorityLevel) {
                  do {
                    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
                    // means `flushPassiveEffects` will sometimes result in additional
                    // passive effects. So we need to keep flushing in a loop until there are
                    // no more pending effects.
                    // TODO: Might be better if `flushPassiveEffects` did not automatically
                    // flush synchronous work at the end, to avoid factoring hazards like this.
                    flushPassiveEffects();
                  } while (rootWithPendingPassiveEffects !== null);

                  flushRenderPhaseStrictModeWarningsInDEV();

                  if (
                    !(
                      (executionContext & (RenderContext | CommitContext)) ===
                      NoContext
                    )
                  ) {
                    {
                      throw Error('Should not already be working.');
                    }
                  }

                  var finishedWork = root.finishedWork;
                  var expirationTime = root.finishedExpirationTime;

                  if (finishedWork === null) {
                    return null;
                  }

                  root.finishedWork = null;
                  root.finishedExpirationTime = NoWork;

                  if (!(finishedWork !== root.current)) {
                    {
                      throw Error(
                        'Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.'
                      );
                    }
                  } // commitRoot never returns a continuation; it always finishes synchronously.
                  // So we can clear these now to allow a new callback to be scheduled.

                  root.callbackNode = null;
                  root.callbackExpirationTime = NoWork;
                  root.callbackPriority = NoPriority;
                  root.nextKnownPendingLevel = NoWork;
                  startCommitTimer(); // Update the first and last pending times on this root. The new first
                  // pending time is whatever is left on the root fiber.

                  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(
                    finishedWork
                  );
                  markRootFinishedAtTime(
                    root,
                    expirationTime,
                    remainingExpirationTimeBeforeCommit
                  );

                  if (root === workInProgressRoot) {
                    // We can reset these now that they are finished.
                    workInProgressRoot = null;
                    workInProgress = null;
                    renderExpirationTime = NoWork;
                  } else {
                  } // This indicates that the last root we worked on is not the same one that
                  // we're committing now. This most commonly happens when a suspended root
                  // times out.
                  // Get the list of effects.

                  var firstEffect;

                  if (finishedWork.effectTag > PerformedWork) {
                    // A fiber's effect list consists only of its children, not itself. So if
                    // the root has an effect, we need to add it to the end of the list. The
                    // resulting list is the set that would belong to the root's parent, if it
                    // had one; that is, all the effects in the tree including the root.
                    if (finishedWork.lastEffect !== null) {
                      finishedWork.lastEffect.nextEffect = finishedWork;
                      firstEffect = finishedWork.firstEffect;
                    } else {
                      firstEffect = finishedWork;
                    }
                  } else {
                    // There is no effect on the root.
                    firstEffect = finishedWork.firstEffect;
                  }

                  if (firstEffect !== null) {
                    var prevExecutionContext = executionContext;
                    executionContext |= CommitContext;
                    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

                    ReactCurrentOwner$1.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
                    // of the effect list for each phase: all mutation effects come before all
                    // layout effects, and so on.
                    // The first phase a "before mutation" phase. We use this phase to read the
                    // state of the host tree right before we mutate it. This is where
                    // getSnapshotBeforeUpdate is called.

                    startCommitSnapshotEffectsTimer();
                    prepareForCommit(root.containerInfo);
                    nextEffect = firstEffect;

                    do {
                      {
                        invokeGuardedCallback(
                          null,
                          commitBeforeMutationEffects,
                          null
                        );

                        if (hasCaughtError()) {
                          if (!(nextEffect !== null)) {
                            {
                              throw Error('Should be working on an effect.');
                            }
                          }

                          var error = clearCaughtError();
                          captureCommitPhaseError(nextEffect, error);
                          nextEffect = nextEffect.nextEffect;
                        }
                      }
                    } while (nextEffect !== null);

                    stopCommitSnapshotEffectsTimer();

                    if (enableProfilerTimer) {
                      // Mark the current commit time to be shared by all Profilers in this
                      // batch. This enables them to be grouped later.
                      recordCommitTime();
                    } // The next phase is the mutation phase, where we mutate the host tree.

                    startCommitHostEffectsTimer();
                    nextEffect = firstEffect;

                    do {
                      {
                        invokeGuardedCallback(
                          null,
                          commitMutationEffects,
                          null,
                          root,
                          renderPriorityLevel
                        );

                        if (hasCaughtError()) {
                          if (!(nextEffect !== null)) {
                            {
                              throw Error('Should be working on an effect.');
                            }
                          }

                          var _error = clearCaughtError();

                          captureCommitPhaseError(nextEffect, _error);
                          nextEffect = nextEffect.nextEffect;
                        }
                      }
                    } while (nextEffect !== null);

                    stopCommitHostEffectsTimer();
                    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
                    // the mutation phase, so that the previous tree is still current during
                    // componentWillUnmount, but before the layout phase, so that the finished
                    // work is current during componentDidMount/Update.

                    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
                    // the host tree after it's been mutated. The idiomatic use case for this is
                    // layout, but class component lifecycles also fire here for legacy reasons.

                    startCommitLifeCyclesTimer();
                    nextEffect = firstEffect;

                    do {
                      {
                        invokeGuardedCallback(
                          null,
                          commitLayoutEffects,
                          null,
                          root,
                          expirationTime
                        );

                        if (hasCaughtError()) {
                          if (!(nextEffect !== null)) {
                            {
                              throw Error('Should be working on an effect.');
                            }
                          }

                          var _error2 = clearCaughtError();

                          captureCommitPhaseError(nextEffect, _error2);
                          nextEffect = nextEffect.nextEffect;
                        }
                      }
                    } while (nextEffect !== null);

                    stopCommitLifeCyclesTimer();
                    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
                    // opportunity to paint.

                    requestPaint();

                    if (enableSchedulerTracing) {
                      popInteractions(prevInteractions);
                    }

                    executionContext = prevExecutionContext;
                  } else {
                    // No effects.
                    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
                    // no effects.
                    // TODO: Maybe there's a better way to report this.

                    startCommitSnapshotEffectsTimer();
                    stopCommitSnapshotEffectsTimer();

                    if (enableProfilerTimer) {
                      recordCommitTime();
                    }

                    startCommitHostEffectsTimer();
                    stopCommitHostEffectsTimer();
                    startCommitLifeCyclesTimer();
                    stopCommitLifeCyclesTimer();
                  }

                  stopCommitTimer();
                  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

                  if (rootDoesHavePassiveEffects) {
                    // This commit has passive effects. Stash a reference to them. But don't
                    // schedule a callback until after flushing layout work.
                    rootDoesHavePassiveEffects = false;
                    rootWithPendingPassiveEffects = root;
                    pendingPassiveEffectsExpirationTime = expirationTime;
                    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
                  } else {
                    // We are done with the effect chain at this point so let's clear the
                    // nextEffect pointers to assist with GC. If we have passive effects, we'll
                    // clear this in flushPassiveEffects.
                    nextEffect = firstEffect;

                    while (nextEffect !== null) {
                      var nextNextEffect = nextEffect.nextEffect;
                      nextEffect.nextEffect = null;
                      nextEffect = nextNextEffect;
                    }
                  } // Check if there's remaining work on this root

                  var remainingExpirationTime = root.firstPendingTime;

                  if (remainingExpirationTime !== NoWork) {
                    if (enableSchedulerTracing) {
                      if (spawnedWorkDuringRender !== null) {
                        var expirationTimes = spawnedWorkDuringRender;
                        spawnedWorkDuringRender = null;

                        for (var i = 0; i < expirationTimes.length; i++) {
                          scheduleInteractions(
                            root,
                            expirationTimes[i],
                            root.memoizedInteractions
                          );
                        }
                      }

                      schedulePendingInteractions(
                        root,
                        remainingExpirationTime
                      );
                    }
                  } else {
                    // If there's no remaining work, we can clear the set of already failed
                    // error boundaries.
                    legacyErrorBoundariesThatAlreadyFailed = null;
                  }

                  if (enableSchedulerTracing) {
                    if (!rootDidHavePassiveEffects) {
                      // If there are no passive effects, then we can complete the pending interactions.
                      // Otherwise, we'll wait until after the passive effects are flushed.
                      // Wait to do this until after remaining work has been scheduled,
                      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
                      finishPendingInteractions(root, expirationTime);
                    }
                  }

                  if (remainingExpirationTime === Sync) {
                    // Count the number of times the root synchronously re-renders without
                    // finishing. If there are too many, it indicates an infinite update loop.
                    if (root === rootWithNestedUpdates) {
                      nestedUpdateCount++;
                    } else {
                      nestedUpdateCount = 0;
                      rootWithNestedUpdates = root;
                    }
                  } else {
                    nestedUpdateCount = 0;
                  }

                  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
                  // additional work on this root is scheduled.

                  ensureRootIsScheduled(root);

                  if (hasUncaughtError) {
                    hasUncaughtError = false;
                    var _error3 = firstUncaughtError;
                    firstUncaughtError = null;
                    throw _error3;
                  }

                  if (
                    (executionContext & LegacyUnbatchedContext) !==
                    NoContext
                  ) {
                    // This is a legacy edge case. We just committed the initial mount of
                    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
                    // synchronously, but layout updates should be deferred until the end
                    // of the batch.
                    return null;
                  } // If layout work was scheduled, flush it now.

                  flushSyncCallbackQueue();
                  return null;
                }

                function commitBeforeMutationEffects() {
                  while (nextEffect !== null) {
                    var effectTag = nextEffect.effectTag;

                    if ((effectTag & Snapshot) !== NoEffect) {
                      setCurrentFiber(nextEffect);
                      recordEffect();
                      var current$$1 = nextEffect.alternate;
                      commitBeforeMutationLifeCycles(current$$1, nextEffect);
                      resetCurrentFiber();
                    }

                    if ((effectTag & Passive) !== NoEffect) {
                      // If there are passive effects, schedule a callback to flush at
                      // the earliest opportunity.
                      if (!rootDoesHavePassiveEffects) {
                        rootDoesHavePassiveEffects = true;
                        scheduleCallback(NormalPriority, function() {
                          flushPassiveEffects();
                          return null;
                        });
                      }
                    }

                    nextEffect = nextEffect.nextEffect;
                  }
                }

                function commitMutationEffects(root, renderPriorityLevel) {
                  // TODO: Should probably move the bulk of this function to commitWork.
                  while (nextEffect !== null) {
                    setCurrentFiber(nextEffect);
                    var effectTag = nextEffect.effectTag;

                    if (effectTag & ContentReset) {
                      commitResetTextContent(nextEffect);
                    }

                    if (effectTag & Ref) {
                      var current$$1 = nextEffect.alternate;

                      if (current$$1 !== null) {
                        commitDetachRef(current$$1);
                      }
                    } // The following switch statement is only concerned about placement,
                    // updates, and deletions. To avoid needing to add a case for every possible
                    // bitmap value, we remove the secondary effects from the effect tag and
                    // switch on that value.

                    var primaryEffectTag =
                      effectTag & (Placement | Update | Deletion | Hydrating);

                    switch (primaryEffectTag) {
                      case Placement: {
                        commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                        // inserted, before any life-cycles like componentDidMount gets called.
                        // TODO: findDOMNode doesn't rely on this any more but isMounted does
                        // and isMounted is deprecated anyway so we should be able to kill this.

                        nextEffect.effectTag &= ~Placement;
                        break;
                      }

                      case PlacementAndUpdate: {
                        // Placement
                        commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                        // inserted, before any life-cycles like componentDidMount gets called.

                        nextEffect.effectTag &= ~Placement; // Update

                        var _current = nextEffect.alternate;
                        commitWork(_current, nextEffect);
                        break;
                      }

                      case Hydrating: {
                        nextEffect.effectTag &= ~Hydrating;
                        break;
                      }

                      case HydratingAndUpdate: {
                        nextEffect.effectTag &= ~Hydrating; // Update

                        var _current2 = nextEffect.alternate;
                        commitWork(_current2, nextEffect);
                        break;
                      }

                      case Update: {
                        var _current3 = nextEffect.alternate;
                        commitWork(_current3, nextEffect);
                        break;
                      }

                      case Deletion: {
                        commitDeletion(root, nextEffect, renderPriorityLevel);
                        break;
                      }
                    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.

                    recordEffect();
                    resetCurrentFiber();
                    nextEffect = nextEffect.nextEffect;
                  }
                }

                function commitLayoutEffects(root, committedExpirationTime) {
                  // TODO: Should probably move the bulk of this function to commitWork.
                  while (nextEffect !== null) {
                    setCurrentFiber(nextEffect);
                    var effectTag = nextEffect.effectTag;

                    if (effectTag & (Update | Callback)) {
                      recordEffect();
                      var current$$1 = nextEffect.alternate;
                      commitLifeCycles(
                        root,
                        current$$1,
                        nextEffect,
                        committedExpirationTime
                      );
                    }

                    if (effectTag & Ref) {
                      recordEffect();
                      commitAttachRef(nextEffect);
                    }

                    resetCurrentFiber();
                    nextEffect = nextEffect.nextEffect;
                  }
                }

                function flushPassiveEffects() {
                  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
                    var priorityLevel =
                      pendingPassiveEffectsRenderPriority > NormalPriority
                        ? NormalPriority
                        : pendingPassiveEffectsRenderPriority;
                    pendingPassiveEffectsRenderPriority = NoPriority;
                    return runWithPriority(
                      priorityLevel,
                      flushPassiveEffectsImpl
                    );
                  }
                }

                function flushPassiveEffectsImpl() {
                  if (rootWithPendingPassiveEffects === null) {
                    return false;
                  }

                  var root = rootWithPendingPassiveEffects;
                  var expirationTime = pendingPassiveEffectsExpirationTime;
                  rootWithPendingPassiveEffects = null;
                  pendingPassiveEffectsExpirationTime = NoWork;

                  if (
                    !(
                      (executionContext & (RenderContext | CommitContext)) ===
                      NoContext
                    )
                  ) {
                    {
                      throw Error(
                        'Cannot flush passive effects while already rendering.'
                      );
                    }
                  }

                  var prevExecutionContext = executionContext;
                  executionContext |= CommitContext;
                  var prevInteractions = pushInteractions(root); // Note: This currently assumes there are no passive effects on the root
                  // fiber, because the root is not part of its own effect list. This could
                  // change in the future.

                  var effect = root.current.firstEffect;

                  while (effect !== null) {
                    {
                      setCurrentFiber(effect);
                      invokeGuardedCallback(
                        null,
                        commitPassiveHookEffects,
                        null,
                        effect
                      );

                      if (hasCaughtError()) {
                        if (!(effect !== null)) {
                          {
                            throw Error('Should be working on an effect.');
                          }
                        }

                        var error = clearCaughtError();
                        captureCommitPhaseError(effect, error);
                      }

                      resetCurrentFiber();
                    }

                    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

                    effect.nextEffect = null;
                    effect = nextNextEffect;
                  }

                  if (enableSchedulerTracing) {
                    popInteractions(prevInteractions);
                    finishPendingInteractions(root, expirationTime);
                  }

                  executionContext = prevExecutionContext;
                  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
                  // exceeds the limit, we'll fire a warning.

                  nestedPassiveUpdateCount =
                    rootWithPendingPassiveEffects === null
                      ? 0
                      : nestedPassiveUpdateCount + 1;
                  return true;
                }

                function isAlreadyFailedLegacyErrorBoundary(instance) {
                  return (
                    legacyErrorBoundariesThatAlreadyFailed !== null &&
                    legacyErrorBoundariesThatAlreadyFailed.has(instance)
                  );
                }
                function markLegacyErrorBoundaryAsFailed(instance) {
                  if (legacyErrorBoundariesThatAlreadyFailed === null) {
                    legacyErrorBoundariesThatAlreadyFailed = new Set([
                      instance,
                    ]);
                  } else {
                    legacyErrorBoundariesThatAlreadyFailed.add(instance);
                  }
                }

                function prepareToThrowUncaughtError(error) {
                  if (!hasUncaughtError) {
                    hasUncaughtError = true;
                    firstUncaughtError = error;
                  }
                }

                var onUncaughtError = prepareToThrowUncaughtError;

                function captureCommitPhaseErrorOnRoot(
                  rootFiber,
                  sourceFiber,
                  error
                ) {
                  var errorInfo = createCapturedValue(error, sourceFiber);
                  var update = createRootErrorUpdate(
                    rootFiber,
                    errorInfo,
                    Sync
                  );
                  enqueueUpdate(rootFiber, update);
                  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

                  if (root !== null) {
                    ensureRootIsScheduled(root);
                    schedulePendingInteractions(root, Sync);
                  }
                }

                function captureCommitPhaseError(sourceFiber, error) {
                  if (sourceFiber.tag === HostRoot) {
                    // Error was thrown at the root. There is no parent, so the root
                    // itself should capture it.
                    captureCommitPhaseErrorOnRoot(
                      sourceFiber,
                      sourceFiber,
                      error
                    );
                    return;
                  }

                  var fiber = sourceFiber.return;

                  while (fiber !== null) {
                    if (fiber.tag === HostRoot) {
                      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
                      return;
                    } else if (fiber.tag === ClassComponent) {
                      var ctor = fiber.type;
                      var instance = fiber.stateNode;

                      if (
                        typeof ctor.getDerivedStateFromError === 'function' ||
                        (typeof instance.componentDidCatch === 'function' &&
                          !isAlreadyFailedLegacyErrorBoundary(instance))
                      ) {
                        var errorInfo = createCapturedValue(error, sourceFiber);
                        var update = createClassErrorUpdate(
                          fiber,
                          errorInfo, // TODO: This is always sync
                          Sync
                        );
                        enqueueUpdate(fiber, update);
                        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

                        if (root !== null) {
                          ensureRootIsScheduled(root);
                          schedulePendingInteractions(root, Sync);
                        }

                        return;
                      }
                    }

                    fiber = fiber.return;
                  }
                }
                function pingSuspendedRoot(root, thenable, suspendedTime) {
                  var pingCache = root.pingCache;

                  if (pingCache !== null) {
                    // The thenable resolved, so we no longer need to memoize, because it will
                    // never be thrown again.
                    pingCache.delete(thenable);
                  }

                  if (
                    workInProgressRoot === root &&
                    renderExpirationTime === suspendedTime
                  ) {
                    // Received a ping at the same priority level at which we're currently
                    // rendering. We might want to restart this render. This should mirror
                    // the logic of whether or not a root suspends once it completes.
                    // TODO: If we're rendering sync either due to Sync, Batched or expired,
                    // we should probably never restart.
                    // If we're suspended with delay, we'll always suspend so we can always
                    // restart. If we're suspended without any updates, it might be a retry.
                    // If it's early in the retry we can restart. We can't know for sure
                    // whether we'll eventually process an update during this render pass,
                    // but it's somewhat unlikely that we get to a ping before that, since
                    // getting to the root most update is usually very fast.
                    if (
                      workInProgressRootExitStatus === RootSuspendedWithDelay ||
                      (workInProgressRootExitStatus === RootSuspended &&
                        workInProgressRootLatestProcessedExpirationTime ===
                          Sync &&
                        now$1() - globalMostRecentFallbackTime <
                          FALLBACK_THROTTLE_MS)
                    ) {
                      // Restart from the root. Don't need to schedule a ping because
                      // we're already working on this tree.
                      prepareFreshStack(root, renderExpirationTime);
                    } else {
                      // Even though we can't restart right now, we might get an
                      // opportunity later. So we mark this render as having a ping.
                      workInProgressRootHasPendingPing = true;
                    }

                    return;
                  }

                  if (!isRootSuspendedAtTime(root, suspendedTime)) {
                    // The root is no longer suspended at this time.
                    return;
                  }

                  var lastPingedTime = root.lastPingedTime;

                  if (
                    lastPingedTime !== NoWork &&
                    lastPingedTime < suspendedTime
                  ) {
                    // There's already a lower priority ping scheduled.
                    return;
                  } // Mark the time at which this ping was scheduled.

                  root.lastPingedTime = suspendedTime;

                  if (root.finishedExpirationTime === suspendedTime) {
                    // If there's a pending fallback waiting to commit, throw it away.
                    root.finishedExpirationTime = NoWork;
                    root.finishedWork = null;
                  }

                  ensureRootIsScheduled(root);
                  schedulePendingInteractions(root, suspendedTime);
                }

                function retryTimedOutBoundary(boundaryFiber, retryTime) {
                  // The boundary fiber (a Suspense component or SuspenseList component)
                  // previously was rendered in its fallback state. One of the promises that
                  // suspended it has resolved, which means at least part of the tree was
                  // likely unblocked. Try rendering again, at a new expiration time.
                  if (retryTime === NoWork) {
                    var suspenseConfig = null; // Retries don't carry over the already committed update.

                    var currentTime = requestCurrentTimeForUpdate();
                    retryTime = computeExpirationForFiber(
                      currentTime,
                      boundaryFiber,
                      suspenseConfig
                    );
                  } // TODO: Special case idle priority?

                  var root = markUpdateTimeFromFiberToRoot(
                    boundaryFiber,
                    retryTime
                  );

                  if (root !== null) {
                    ensureRootIsScheduled(root);
                    schedulePendingInteractions(root, retryTime);
                  }
                }

                function retryDehydratedSuspenseBoundary(boundaryFiber) {
                  var suspenseState = boundaryFiber.memoizedState;
                  var retryTime = NoWork;

                  if (suspenseState !== null) {
                    retryTime = suspenseState.retryTime;
                  }

                  retryTimedOutBoundary(boundaryFiber, retryTime);
                }
                function resolveRetryThenable(boundaryFiber, thenable) {
                  var retryTime = NoWork; // Default

                  var retryCache;

                  if (enableSuspenseServerRenderer) {
                    switch (boundaryFiber.tag) {
                      case SuspenseComponent:
                        retryCache = boundaryFiber.stateNode;
                        var suspenseState = boundaryFiber.memoizedState;

                        if (suspenseState !== null) {
                          retryTime = suspenseState.retryTime;
                        }

                        break;

                      case SuspenseListComponent:
                        retryCache = boundaryFiber.stateNode;
                        break;

                      default: {
                        {
                          throw Error(
                            'Pinged unknown suspense boundary type. This is probably a bug in React.'
                          );
                        }
                      }
                    }
                  } else {
                    retryCache = boundaryFiber.stateNode;
                  }

                  if (retryCache !== null) {
                    // The thenable resolved, so we no longer need to memoize, because it will
                    // never be thrown again.
                    retryCache.delete(thenable);
                  }

                  retryTimedOutBoundary(boundaryFiber, retryTime);
                } // Computes the next Just Noticeable Difference (JND) boundary.
                // The theory is that a person can't tell the difference between small differences in time.
                // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
                // difference in the experience. However, waiting for longer might mean that we can avoid
                // showing an intermediate loading state. The longer we have already waited, the harder it
                // is to tell small differences in time. Therefore, the longer we've already waited,
                // the longer we can wait additionally. At some point we have to give up though.
                // We pick a train model where the next boundary commits at a consistent schedule.
                // These particular numbers are vague estimates. We expect to adjust them based on research.

                function jnd(timeElapsed) {
                  return timeElapsed < 120
                    ? 120
                    : timeElapsed < 480
                    ? 480
                    : timeElapsed < 1080
                    ? 1080
                    : timeElapsed < 1920
                    ? 1920
                    : timeElapsed < 3000
                    ? 3000
                    : timeElapsed < 4320
                    ? 4320
                    : ceil(timeElapsed / 1960) * 1960;
                }

                function computeMsUntilSuspenseLoadingDelay(
                  mostRecentEventTime,
                  committedExpirationTime,
                  suspenseConfig
                ) {
                  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

                  if (busyMinDurationMs <= 0) {
                    return 0;
                  }

                  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

                  var currentTimeMs = now$1();
                  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(
                    mostRecentEventTime,
                    suspenseConfig
                  );
                  var timeElapsed = currentTimeMs - eventTimeMs;

                  if (timeElapsed <= busyDelayMs) {
                    // If we haven't yet waited longer than the initial delay, we don't
                    // have to wait any additional time.
                    return 0;
                  }

                  var msUntilTimeout =
                    busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

                  return msUntilTimeout;
                }

                function checkForNestedUpdates() {
                  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                    nestedUpdateCount = 0;
                    rootWithNestedUpdates = null;

                    {
                      {
                        throw Error(
                          'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.'
                        );
                      }
                    }
                  }

                  {
                    if (
                      nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT
                    ) {
                      nestedPassiveUpdateCount = 0;
                      warning$1(
                        false,
                        'Maximum update depth exceeded. This can happen when a component ' +
                          "calls setState inside useEffect, but useEffect either doesn't " +
                          'have a dependency array, or one of the dependencies changes on ' +
                          'every render.'
                      );
                    }
                  }
                }

                function flushRenderPhaseStrictModeWarningsInDEV() {
                  {
                    ReactStrictModeWarnings.flushLegacyContextWarning();

                    if (warnAboutDeprecatedLifecycles) {
                      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                    }
                  }
                }

                function stopFinishedWorkLoopTimer() {
                  var didCompleteRoot = true;
                  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
                  interruptedBy = null;
                }

                function stopInterruptedWorkLoopTimer() {
                  // TODO: Track which fiber caused the interruption.
                  var didCompleteRoot = false;
                  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
                  interruptedBy = null;
                }

                function checkForInterruption(
                  fiberThatReceivedUpdate,
                  updateExpirationTime
                ) {
                  if (
                    enableUserTimingAPI &&
                    workInProgressRoot !== null &&
                    updateExpirationTime > renderExpirationTime
                  ) {
                    interruptedBy = fiberThatReceivedUpdate;
                  }
                }

                var didWarnStateUpdateForUnmountedComponent = null;

                function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
                  {
                    var tag = fiber.tag;

                    if (
                      tag !== HostRoot &&
                      tag !== ClassComponent &&
                      tag !== FunctionComponent &&
                      tag !== ForwardRef &&
                      tag !== MemoComponent &&
                      tag !== SimpleMemoComponent
                    ) {
                      // Only warn for user-defined components, not internal ones like Suspense.
                      return;
                    } // We show the whole stack but dedupe on the top component's name because
                    // the problematic code almost always lies inside that component.

                    var componentName =
                      getComponentName(fiber.type) || 'ReactComponent';

                    if (didWarnStateUpdateForUnmountedComponent !== null) {
                      if (
                        didWarnStateUpdateForUnmountedComponent.has(
                          componentName
                        )
                      ) {
                        return;
                      }

                      didWarnStateUpdateForUnmountedComponent.add(
                        componentName
                      );
                    } else {
                      didWarnStateUpdateForUnmountedComponent = new Set([
                        componentName,
                      ]);
                    }

                    warningWithoutStack$1(
                      false,
                      "Can't perform a React state update on an unmounted component. This " +
                        'is a no-op, but it indicates a memory leak in your application. To ' +
                        'fix, cancel all subscriptions and asynchronous tasks in %s.%s',
                      tag === ClassComponent
                        ? 'the componentWillUnmount method'
                        : 'a useEffect cleanup function',
                      getStackByFiberInDevAndProd(fiber)
                    );
                  }
                }

                var beginWork$$1;

                if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                  var dummyFiber = null;

                  beginWork$$1 = function(
                    current$$1,
                    unitOfWork,
                    expirationTime
                  ) {
                    // If a component throws an error, we replay it again in a synchronously
                    // dispatched event, so that the debugger will treat it as an uncaught
                    // error See ReactErrorUtils for more information.
                    // Before entering the begin phase, copy the work-in-progress onto a dummy
                    // fiber. If beginWork throws, we'll use this to reset the state.
                    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(
                      dummyFiber,
                      unitOfWork
                    );

                    try {
                      return beginWork$1(
                        current$$1,
                        unitOfWork,
                        expirationTime
                      );
                    } catch (originalError) {
                      if (
                        originalError !== null &&
                        typeof originalError === 'object' &&
                        typeof originalError.then === 'function'
                      ) {
                        // Don't replay promises. Treat everything else like an error.
                        throw originalError;
                      } // Keep this code in sync with handleError; any changes here must have
                      // corresponding changes there.

                      resetContextDependencies();
                      resetHooks(); // Don't reset current debug fiber, since we're about to work on the
                      // same fiber again.
                      // Unwind the failed stack frame

                      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

                      assignFiberPropertiesInDEV(
                        unitOfWork,
                        originalWorkInProgressCopy
                      );

                      if (
                        enableProfilerTimer &&
                        unitOfWork.mode & ProfileMode
                      ) {
                        // Reset the profiler timer.
                        startProfilerTimer(unitOfWork);
                      } // Run beginWork again.

                      invokeGuardedCallback(
                        null,
                        beginWork$1,
                        null,
                        current$$1,
                        unitOfWork,
                        expirationTime
                      );

                      if (hasCaughtError()) {
                        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                        // Rethrow this error instead of the original one.

                        throw replayError;
                      } else {
                        // This branch is reachable if the render phase is impure.
                        throw originalError;
                      }
                    }
                  };
                } else {
                  beginWork$$1 = beginWork$1;
                }

                var didWarnAboutUpdateInRender = false;
                var didWarnAboutUpdateInGetChildContext = false;

                function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
                  {
                    if (fiber.tag === ClassComponent) {
                      switch (phase) {
                        case 'getChildContext':
                          if (didWarnAboutUpdateInGetChildContext) {
                            return;
                          }

                          warningWithoutStack$1(
                            false,
                            'setState(...): Cannot call setState() inside getChildContext()'
                          );
                          didWarnAboutUpdateInGetChildContext = true;
                          break;

                        case 'render':
                          if (didWarnAboutUpdateInRender) {
                            return;
                          }

                          warningWithoutStack$1(
                            false,
                            'Cannot update during an existing state transition (such as ' +
                              'within `render`). Render methods should be a pure function of ' +
                              'props and state.'
                          );
                          didWarnAboutUpdateInRender = true;
                          break;
                      }
                    }
                  }
                } // a 'shared' variable that changes when act() opens/closes in tests.

                var IsThisRendererActing = {
                  current: false,
                };
                function warnIfNotScopedWithMatchingAct(fiber) {
                  {
                    if (
                      warnsIfNotActing === true &&
                      IsSomeRendererActing.current === true &&
                      IsThisRendererActing.current !== true
                    ) {
                      warningWithoutStack$1(
                        false,
                        "It looks like you're using the wrong act() around your test interactions.\n" +
                          'Be sure to use the matching version of act() corresponding to your renderer:\n\n' +
                          '// for react-dom:\n' +
                          "import {act} from 'react-dom/test-utils';\n" +
                          '// ...\n' +
                          'act(() => ...);\n\n' +
                          '// for react-test-renderer:\n' +
                          "import TestRenderer from 'react-test-renderer';\n" +
                          'const {act} = TestRenderer;\n' +
                          '// ...\n' +
                          'act(() => ...);' +
                          '%s',
                        getStackByFiberInDevAndProd(fiber)
                      );
                    }
                  }
                }
                function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
                  {
                    if (
                      warnsIfNotActing === true &&
                      (fiber.mode & StrictMode) !== NoMode &&
                      IsSomeRendererActing.current === false &&
                      IsThisRendererActing.current === false
                    ) {
                      warningWithoutStack$1(
                        false,
                        'An update to %s ran an effect, but was not wrapped in act(...).\n\n' +
                          'When testing, code that causes React state updates should be ' +
                          'wrapped into act(...):\n\n' +
                          'act(() => {\n' +
                          '  /* fire events that update state */\n' +
                          '});\n' +
                          '/* assert on the output */\n\n' +
                          "This ensures that you're testing the behavior the user would see " +
                          'in the browser.' +
                          ' Learn more at https://fb.me/react-wrap-tests-with-act' +
                          '%s',
                        getComponentName(fiber.type),
                        getStackByFiberInDevAndProd(fiber)
                      );
                    }
                  }
                }

                function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
                  {
                    if (
                      warnsIfNotActing === true &&
                      executionContext === NoContext &&
                      IsSomeRendererActing.current === false &&
                      IsThisRendererActing.current === false
                    ) {
                      warningWithoutStack$1(
                        false,
                        'An update to %s inside a test was not wrapped in act(...).\n\n' +
                          'When testing, code that causes React state updates should be ' +
                          'wrapped into act(...):\n\n' +
                          'act(() => {\n' +
                          '  /* fire events that update state */\n' +
                          '});\n' +
                          '/* assert on the output */\n\n' +
                          "This ensures that you're testing the behavior the user would see " +
                          'in the browser.' +
                          ' Learn more at https://fb.me/react-wrap-tests-with-act' +
                          '%s',
                        getComponentName(fiber.type),
                        getStackByFiberInDevAndProd(fiber)
                      );
                    }
                  }
                }

                var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

                var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
                // scheduler is the actual recommendation. The alternative could be a testing build,
                // a new lib, or whatever; we dunno just yet. This message is for early adopters
                // to get their tests right.

                function warnIfUnmockedScheduler(fiber) {
                  {
                    if (
                      didWarnAboutUnmockedScheduler === false &&
                      Scheduler.unstable_flushAllWithoutAsserting === undefined
                    ) {
                      if (
                        fiber.mode & BlockingMode ||
                        fiber.mode & ConcurrentMode
                      ) {
                        didWarnAboutUnmockedScheduler = true;
                        warningWithoutStack$1(
                          false,
                          'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' +
                            'to guarantee consistent behaviour across tests and browsers. ' +
                            'For example, with jest: \n' +
                            "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" +
                            'For more info, visit https://fb.me/react-mock-scheduler'
                        );
                      } else if (warnAboutUnmockedScheduler === true) {
                        didWarnAboutUnmockedScheduler = true;
                        warningWithoutStack$1(
                          false,
                          'Starting from React v17, the "scheduler" module will need to be mocked ' +
                            'to guarantee consistent behaviour across tests and browsers. ' +
                            'For example, with jest: \n' +
                            "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" +
                            'For more info, visit https://fb.me/react-mock-scheduler'
                        );
                      }
                    }
                  }
                }
                var componentsThatTriggeredHighPriSuspend = null;
                function checkForWrongSuspensePriorityInDEV(sourceFiber) {
                  {
                    var currentPriorityLevel = getCurrentPriorityLevel();

                    if (
                      (sourceFiber.mode & ConcurrentMode) !== NoEffect &&
                      (currentPriorityLevel === UserBlockingPriority ||
                        currentPriorityLevel === ImmediatePriority)
                    ) {
                      var workInProgressNode = sourceFiber;

                      while (workInProgressNode !== null) {
                        // Add the component that triggered the suspense
                        var current$$1 = workInProgressNode.alternate;

                        if (current$$1 !== null) {
                          // TODO: warn component that triggers the high priority
                          // suspend is the HostRoot
                          switch (workInProgressNode.tag) {
                            case ClassComponent:
                              // Loop through the component's update queue and see whether the component
                              // has triggered any high priority updates
                              var updateQueue = current$$1.updateQueue;

                              if (updateQueue !== null) {
                                var update = updateQueue.firstUpdate;

                                while (update !== null) {
                                  var priorityLevel = update.priority;

                                  if (
                                    priorityLevel === UserBlockingPriority ||
                                    priorityLevel === ImmediatePriority
                                  ) {
                                    if (
                                      componentsThatTriggeredHighPriSuspend ===
                                      null
                                    ) {
                                      componentsThatTriggeredHighPriSuspend = new Set(
                                        [
                                          getComponentName(
                                            workInProgressNode.type
                                          ),
                                        ]
                                      );
                                    } else {
                                      componentsThatTriggeredHighPriSuspend.add(
                                        getComponentName(
                                          workInProgressNode.type
                                        )
                                      );
                                    }

                                    break;
                                  }

                                  update = update.next;
                                }
                              }

                              break;

                            case FunctionComponent:
                            case ForwardRef:
                            case SimpleMemoComponent:
                              if (
                                workInProgressNode.memoizedState !== null &&
                                workInProgressNode.memoizedState.baseUpdate !==
                                  null
                              ) {
                                var _update =
                                  workInProgressNode.memoizedState.baseUpdate; // Loop through the functional component's memoized state to see whether
                                // the component has triggered any high pri updates

                                while (_update !== null) {
                                  var priority = _update.priority;

                                  if (
                                    priority === UserBlockingPriority ||
                                    priority === ImmediatePriority
                                  ) {
                                    if (
                                      componentsThatTriggeredHighPriSuspend ===
                                      null
                                    ) {
                                      componentsThatTriggeredHighPriSuspend = new Set(
                                        [
                                          getComponentName(
                                            workInProgressNode.type
                                          ),
                                        ]
                                      );
                                    } else {
                                      componentsThatTriggeredHighPriSuspend.add(
                                        getComponentName(
                                          workInProgressNode.type
                                        )
                                      );
                                    }

                                    break;
                                  }

                                  if (
                                    _update.next ===
                                    workInProgressNode.memoizedState.baseUpdate
                                  ) {
                                    break;
                                  }

                                  _update = _update.next;
                                }
                              }

                              break;

                            default:
                              break;
                          }
                        }

                        workInProgressNode = workInProgressNode.return;
                      }
                    }
                  }
                }

                function flushSuspensePriorityWarningInDEV() {
                  {
                    if (componentsThatTriggeredHighPriSuspend !== null) {
                      var componentNames = [];
                      componentsThatTriggeredHighPriSuspend.forEach(function(
                        name
                      ) {
                        return componentNames.push(name);
                      });
                      componentsThatTriggeredHighPriSuspend = null;

                      if (componentNames.length > 0) {
                        warningWithoutStack$1(
                          false,
                          '%s triggered a user-blocking update that suspended.' +
                            '\n\n' +
                            'The fix is to split the update into multiple parts: a user-blocking ' +
                            'update to provide immediate feedback, and another update that ' +
                            'triggers the bulk of the changes.' +
                            '\n\n' +
                            'Refer to the documentation for useTransition to learn how ' +
                            'to implement this pattern.', // TODO: Add link to React docs with more information, once it exists
                          componentNames.sort().join(', ')
                        );
                      }
                    }
                  }
                }

                function computeThreadID(root, expirationTime) {
                  // Interaction threads are unique per root and expiration time.
                  return expirationTime * 1000 + root.interactionThreadID;
                }

                function markSpawnedWork(expirationTime) {
                  if (!enableSchedulerTracing) {
                    return;
                  }

                  if (spawnedWorkDuringRender === null) {
                    spawnedWorkDuringRender = [expirationTime];
                  } else {
                    spawnedWorkDuringRender.push(expirationTime);
                  }
                }

                function scheduleInteractions(
                  root,
                  expirationTime,
                  interactions
                ) {
                  if (!enableSchedulerTracing) {
                    return;
                  }

                  if (interactions.size > 0) {
                    var pendingInteractionMap = root.pendingInteractionMap;
                    var pendingInteractions = pendingInteractionMap.get(
                      expirationTime
                    );

                    if (pendingInteractions != null) {
                      interactions.forEach(function(interaction) {
                        if (!pendingInteractions.has(interaction)) {
                          // Update the pending async work count for previously unscheduled interaction.
                          interaction.__count++;
                        }

                        pendingInteractions.add(interaction);
                      });
                    } else {
                      pendingInteractionMap.set(
                        expirationTime,
                        new Set(interactions)
                      ); // Update the pending async work count for the current interactions.

                      interactions.forEach(function(interaction) {
                        interaction.__count++;
                      });
                    }

                    var subscriber = tracing.__subscriberRef.current;

                    if (subscriber !== null) {
                      var threadID = computeThreadID(root, expirationTime);
                      subscriber.onWorkScheduled(interactions, threadID);
                    }
                  }
                }

                function schedulePendingInteractions(root, expirationTime) {
                  // This is called when work is scheduled on a root.
                  // It associates the current interactions with the newly-scheduled expiration.
                  // They will be restored when that expiration is later committed.
                  if (!enableSchedulerTracing) {
                    return;
                  }

                  scheduleInteractions(
                    root,
                    expirationTime,
                    tracing.__interactionsRef.current
                  );
                }

                function startWorkOnPendingInteractions(root, expirationTime) {
                  // This is called when new work is started on a root.
                  if (!enableSchedulerTracing) {
                    return;
                  } // Determine which interactions this batch of work currently includes, So that
                  // we can accurately attribute time spent working on it, And so that cascading
                  // work triggered during the render phase will be associated with it.

                  var interactions = new Set();
                  root.pendingInteractionMap.forEach(function(
                    scheduledInteractions,
                    scheduledExpirationTime
                  ) {
                    if (scheduledExpirationTime >= expirationTime) {
                      scheduledInteractions.forEach(function(interaction) {
                        return interactions.add(interaction);
                      });
                    }
                  }); // Store the current set of interactions on the FiberRoot for a few reasons:
                  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
                  // without having to recalculate it. We will also use it in commitWork() to
                  // pass to any Profiler onRender() hooks. This also provides DevTools with a
                  // way to access it when the onCommitRoot() hook is called.

                  root.memoizedInteractions = interactions;

                  if (interactions.size > 0) {
                    var subscriber = tracing.__subscriberRef.current;

                    if (subscriber !== null) {
                      var threadID = computeThreadID(root, expirationTime);

                      try {
                        subscriber.onWorkStarted(interactions, threadID);
                      } catch (error) {
                        // If the subscriber throws, rethrow it in a separate task
                        scheduleCallback(ImmediatePriority, function() {
                          throw error;
                        });
                      }
                    }
                  }
                }

                function finishPendingInteractions(
                  root,
                  committedExpirationTime
                ) {
                  if (!enableSchedulerTracing) {
                    return;
                  }

                  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
                  var subscriber;

                  try {
                    subscriber = tracing.__subscriberRef.current;

                    if (
                      subscriber !== null &&
                      root.memoizedInteractions.size > 0
                    ) {
                      var threadID = computeThreadID(
                        root,
                        committedExpirationTime
                      );
                      subscriber.onWorkStopped(
                        root.memoizedInteractions,
                        threadID
                      );
                    }
                  } catch (error) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority, function() {
                      throw error;
                    });
                  } finally {
                    // Clear completed interactions from the pending Map.
                    // Unless the render was suspended or cascading work was scheduled,
                    // In which case– leave pending interactions until the subsequent render.
                    var pendingInteractionMap = root.pendingInteractionMap;
                    pendingInteractionMap.forEach(function(
                      scheduledInteractions,
                      scheduledExpirationTime
                    ) {
                      // Only decrement the pending interaction count if we're done.
                      // If there's still work at the current priority,
                      // That indicates that we are waiting for suspense data.
                      if (
                        scheduledExpirationTime >
                        earliestRemainingTimeAfterCommit
                      ) {
                        pendingInteractionMap.delete(scheduledExpirationTime);
                        scheduledInteractions.forEach(function(interaction) {
                          interaction.__count--;

                          if (
                            subscriber !== null &&
                            interaction.__count === 0
                          ) {
                            try {
                              subscriber.onInteractionScheduledWorkCompleted(
                                interaction
                              );
                            } catch (error) {
                              // If the subscriber throws, rethrow it in a separate task
                              scheduleCallback(ImmediatePriority, function() {
                                throw error;
                              });
                            }
                          }
                        });
                      }
                    });
                  }
                }

                var onCommitFiberRoot = null;
                var onCommitFiberUnmount = null;
                var hasLoggedError = false;
                var isDevToolsPresent =
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
                function injectInternals(internals) {
                  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                    // No DevTools
                    return false;
                  }

                  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

                  if (hook.isDisabled) {
                    // This isn't a real property on the hook, but it can be set to opt out
                    // of DevTools integration and associated warnings and logs.
                    // https://github.com/facebook/react/issues/3877
                    return true;
                  }

                  if (!hook.supportsFiber) {
                    {
                      warningWithoutStack$1(
                        false,
                        'The installed version of React DevTools is too old and will not work ' +
                          'with the current version of React. Please update React DevTools. ' +
                          'https://fb.me/react-devtools'
                      );
                    } // DevTools exists, even though it doesn't support Fiber.

                    return true;
                  }

                  try {
                    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

                    onCommitFiberRoot = function(root, expirationTime) {
                      try {
                        var didError =
                          (root.current.effectTag & DidCapture) === DidCapture;

                        if (enableProfilerTimer) {
                          var currentTime = getCurrentTime();
                          var priorityLevel = inferPriorityFromExpirationTime(
                            currentTime,
                            expirationTime
                          );
                          hook.onCommitFiberRoot(
                            rendererID,
                            root,
                            priorityLevel,
                            didError
                          );
                        } else {
                          hook.onCommitFiberRoot(
                            rendererID,
                            root,
                            undefined,
                            didError
                          );
                        }
                      } catch (err) {
                        if (true && !hasLoggedError) {
                          hasLoggedError = true;
                          warningWithoutStack$1(
                            false,
                            'React DevTools encountered an error: %s',
                            err
                          );
                        }
                      }
                    };

                    onCommitFiberUnmount = function(fiber) {
                      try {
                        hook.onCommitFiberUnmount(rendererID, fiber);
                      } catch (err) {
                        if (true && !hasLoggedError) {
                          hasLoggedError = true;
                          warningWithoutStack$1(
                            false,
                            'React DevTools encountered an error: %s',
                            err
                          );
                        }
                      }
                    };
                  } catch (err) {
                    // Catch all errors because it is unsafe to throw during initialization.
                    {
                      warningWithoutStack$1(
                        false,
                        'React DevTools encountered an error: %s.',
                        err
                      );
                    }
                  } // DevTools exists

                  return true;
                }
                function onCommitRoot(root, expirationTime) {
                  if (typeof onCommitFiberRoot === 'function') {
                    onCommitFiberRoot(root, expirationTime);
                  }
                }
                function onCommitUnmount(fiber) {
                  if (typeof onCommitFiberUnmount === 'function') {
                    onCommitFiberUnmount(fiber);
                  }
                }

                var hasBadMapPolyfill;

                {
                  hasBadMapPolyfill = false;

                  try {
                    var nonExtensibleObject = Object.preventExtensions({});
                    var testMap = new Map([[nonExtensibleObject, null]]);
                    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
                    // https://github.com/rollup/rollup/issues/1771
                    // TODO: we can remove these if Rollup fixes the bug.

                    testMap.set(0, 0);
                    testSet.add(0);
                  } catch (e) {
                    // TODO: Consider warning about bad polyfills
                    hasBadMapPolyfill = true;
                  }
                }

                var debugCounter = 1;

                function FiberNode(tag, pendingProps, key, mode) {
                  // Instance
                  this.tag = tag;
                  this.key = key;
                  this.elementType = null;
                  this.type = null;
                  this.stateNode = null; // Fiber

                  this.return = null;
                  this.child = null;
                  this.sibling = null;
                  this.index = 0;
                  this.ref = null;
                  this.pendingProps = pendingProps;
                  this.memoizedProps = null;
                  this.updateQueue = null;
                  this.memoizedState = null;
                  this.dependencies = null;
                  this.mode = mode; // Effects

                  this.effectTag = NoEffect;
                  this.nextEffect = null;
                  this.firstEffect = null;
                  this.lastEffect = null;
                  this.expirationTime = NoWork;
                  this.childExpirationTime = NoWork;
                  this.alternate = null;

                  if (enableProfilerTimer) {
                    // Note: The following is done to avoid a v8 performance cliff.
                    //
                    // Initializing the fields below to smis and later updating them with
                    // double values will cause Fibers to end up having separate shapes.
                    // This behavior/bug has something to do with Object.preventExtension().
                    // Fortunately this only impacts DEV builds.
                    // Unfortunately it makes React unusably slow for some applications.
                    // To work around this, initialize the fields below with doubles.
                    //
                    // Learn more about this here:
                    // https://github.com/facebook/react/issues/14365
                    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
                    this.actualDuration = Number.NaN;
                    this.actualStartTime = Number.NaN;
                    this.selfBaseDuration = Number.NaN;
                    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
                    // This won't trigger the performance cliff mentioned above,
                    // and it simplifies other profiler code (including DevTools).

                    this.actualDuration = 0;
                    this.actualStartTime = -1;
                    this.selfBaseDuration = 0;
                    this.treeBaseDuration = 0;
                  } // This is normally DEV-only except www when it adds listeners.
                  // TODO: remove the User Timing integration in favor of Root Events.

                  if (enableUserTimingAPI) {
                    this._debugID = debugCounter++;
                    this._debugIsCurrentlyTiming = false;
                  }

                  {
                    this._debugSource = null;
                    this._debugOwner = null;
                    this._debugNeedsRemount = false;
                    this._debugHookTypes = null;

                    if (
                      !hasBadMapPolyfill &&
                      typeof Object.preventExtensions === 'function'
                    ) {
                      Object.preventExtensions(this);
                    }
                  }
                } // This is a constructor function, rather than a POJO constructor, still
                // please ensure we do the following:
                // 1) Nobody should add any instance methods on this. Instance methods can be
                //    more difficult to predict when they get optimized and they are almost
                //    never inlined properly in static compilers.
                // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
                //    always know when it is a fiber.
                // 3) We might want to experiment with using numeric keys since they are easier
                //    to optimize in a non-JIT environment.
                // 4) We can easily go from a constructor to a createFiber object literal if that
                //    is faster.
                // 5) It should be easy to port this to a C struct and keep a C implementation
                //    compatible.

                var createFiber = function(tag, pendingProps, key, mode) {
                  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
                  return new FiberNode(tag, pendingProps, key, mode);
                };

                function shouldConstruct(Component) {
                  var prototype = Component.prototype;
                  return !!(prototype && prototype.isReactComponent);
                }

                function isSimpleFunctionComponent(type) {
                  return (
                    typeof type === 'function' &&
                    !shouldConstruct(type) &&
                    type.defaultProps === undefined
                  );
                }
                function resolveLazyComponentTag(Component) {
                  if (typeof Component === 'function') {
                    return shouldConstruct(Component)
                      ? ClassComponent
                      : FunctionComponent;
                  } else if (Component !== undefined && Component !== null) {
                    var $$typeof = Component.$$typeof;

                    if ($$typeof === REACT_FORWARD_REF_TYPE) {
                      return ForwardRef;
                    }

                    if ($$typeof === REACT_MEMO_TYPE) {
                      return MemoComponent;
                    }
                  }

                  return IndeterminateComponent;
                } // This is used to create an alternate fiber to do work on.

                function createWorkInProgress(
                  current,
                  pendingProps,
                  expirationTime
                ) {
                  var workInProgress = current.alternate;

                  if (workInProgress === null) {
                    // We use a double buffering pooling technique because we know that we'll
                    // only ever need at most two versions of a tree. We pool the "other" unused
                    // node that we're free to reuse. This is lazily created to avoid allocating
                    // extra objects for things that are never updated. It also allow us to
                    // reclaim the extra memory if needed.
                    workInProgress = createFiber(
                      current.tag,
                      pendingProps,
                      current.key,
                      current.mode
                    );
                    workInProgress.elementType = current.elementType;
                    workInProgress.type = current.type;
                    workInProgress.stateNode = current.stateNode;

                    {
                      // DEV-only fields
                      workInProgress._debugID = current._debugID;
                      workInProgress._debugSource = current._debugSource;
                      workInProgress._debugOwner = current._debugOwner;
                      workInProgress._debugHookTypes = current._debugHookTypes;
                    }

                    workInProgress.alternate = current;
                    current.alternate = workInProgress;
                  } else {
                    workInProgress.pendingProps = pendingProps; // We already have an alternate.
                    // Reset the effect tag.

                    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

                    workInProgress.nextEffect = null;
                    workInProgress.firstEffect = null;
                    workInProgress.lastEffect = null;

                    if (enableProfilerTimer) {
                      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
                      // This prevents time from endlessly accumulating in new commits.
                      // This has the downside of resetting values for different priority renders,
                      // But works for yielding (the common case) and should support resuming.
                      workInProgress.actualDuration = 0;
                      workInProgress.actualStartTime = -1;
                    }
                  }

                  workInProgress.childExpirationTime =
                    current.childExpirationTime;
                  workInProgress.expirationTime = current.expirationTime;
                  workInProgress.child = current.child;
                  workInProgress.memoizedProps = current.memoizedProps;
                  workInProgress.memoizedState = current.memoizedState;
                  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
                  // it cannot be shared with the current fiber.

                  var currentDependencies = current.dependencies;
                  workInProgress.dependencies =
                    currentDependencies === null
                      ? null
                      : {
                          expirationTime: currentDependencies.expirationTime,
                          firstContext: currentDependencies.firstContext,
                          responders: currentDependencies.responders,
                        }; // These will be overridden during the parent's reconciliation

                  workInProgress.sibling = current.sibling;
                  workInProgress.index = current.index;
                  workInProgress.ref = current.ref;

                  if (enableProfilerTimer) {
                    workInProgress.selfBaseDuration = current.selfBaseDuration;
                    workInProgress.treeBaseDuration = current.treeBaseDuration;
                  }

                  {
                    workInProgress._debugNeedsRemount =
                      current._debugNeedsRemount;

                    switch (workInProgress.tag) {
                      case IndeterminateComponent:
                      case FunctionComponent:
                      case SimpleMemoComponent:
                        workInProgress.type = resolveFunctionForHotReloading(
                          current.type
                        );
                        break;

                      case ClassComponent:
                        workInProgress.type = resolveClassForHotReloading(
                          current.type
                        );
                        break;

                      case ForwardRef:
                        workInProgress.type = resolveForwardRefForHotReloading(
                          current.type
                        );
                        break;

                      default:
                        break;
                    }
                  }

                  return workInProgress;
                } // Used to reuse a Fiber for a second pass.

                function resetWorkInProgress(
                  workInProgress,
                  renderExpirationTime
                ) {
                  // This resets the Fiber to what createFiber or createWorkInProgress would
                  // have set the values to before during the first pass. Ideally this wouldn't
                  // be necessary but unfortunately many code paths reads from the workInProgress
                  // when they should be reading from current and writing to workInProgress.
                  // We assume pendingProps, index, key, ref, return are still untouched to
                  // avoid doing another reconciliation.
                  // Reset the effect tag but keep any Placement tags, since that's something
                  // that child fiber is setting, not the reconciliation.
                  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

                  workInProgress.nextEffect = null;
                  workInProgress.firstEffect = null;
                  workInProgress.lastEffect = null;
                  var current = workInProgress.alternate;

                  if (current === null) {
                    // Reset to createFiber's initial values.
                    workInProgress.childExpirationTime = NoWork;
                    workInProgress.expirationTime = renderExpirationTime;
                    workInProgress.child = null;
                    workInProgress.memoizedProps = null;
                    workInProgress.memoizedState = null;
                    workInProgress.updateQueue = null;
                    workInProgress.dependencies = null;

                    if (enableProfilerTimer) {
                      // Note: We don't reset the actualTime counts. It's useful to accumulate
                      // actual time across multiple render passes.
                      workInProgress.selfBaseDuration = 0;
                      workInProgress.treeBaseDuration = 0;
                    }
                  } else {
                    // Reset to the cloned values that createWorkInProgress would've.
                    workInProgress.childExpirationTime =
                      current.childExpirationTime;
                    workInProgress.expirationTime = current.expirationTime;
                    workInProgress.child = current.child;
                    workInProgress.memoizedProps = current.memoizedProps;
                    workInProgress.memoizedState = current.memoizedState;
                    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
                    // it cannot be shared with the current fiber.

                    var currentDependencies = current.dependencies;
                    workInProgress.dependencies =
                      currentDependencies === null
                        ? null
                        : {
                            expirationTime: currentDependencies.expirationTime,
                            firstContext: currentDependencies.firstContext,
                            responders: currentDependencies.responders,
                          };

                    if (enableProfilerTimer) {
                      // Note: We don't reset the actualTime counts. It's useful to accumulate
                      // actual time across multiple render passes.
                      workInProgress.selfBaseDuration =
                        current.selfBaseDuration;
                      workInProgress.treeBaseDuration =
                        current.treeBaseDuration;
                    }
                  }

                  return workInProgress;
                }
                function createHostRootFiber(tag) {
                  var mode;

                  if (tag === ConcurrentRoot) {
                    mode = ConcurrentMode | BlockingMode | StrictMode;
                  } else if (tag === BlockingRoot) {
                    mode = BlockingMode | StrictMode;
                  } else {
                    mode = NoMode;
                  }

                  if (enableProfilerTimer && isDevToolsPresent) {
                    // Always collect profile timings when DevTools are present.
                    // This enables DevTools to start capturing timing at any point–
                    // Without some nodes in the tree having empty base times.
                    mode |= ProfileMode;
                  }

                  return createFiber(HostRoot, null, null, mode);
                }
                function createFiberFromTypeAndProps(
                  type, // React$ElementType
                  key,
                  pendingProps,
                  owner,
                  mode,
                  expirationTime
                ) {
                  var fiber;
                  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

                  var resolvedType = type;

                  if (typeof type === 'function') {
                    if (shouldConstruct(type)) {
                      fiberTag = ClassComponent;

                      {
                        resolvedType = resolveClassForHotReloading(
                          resolvedType
                        );
                      }
                    } else {
                      {
                        resolvedType = resolveFunctionForHotReloading(
                          resolvedType
                        );
                      }
                    }
                  } else if (typeof type === 'string') {
                    fiberTag = HostComponent;
                  } else {
                    getTag: switch (type) {
                      case REACT_FRAGMENT_TYPE:
                        return createFiberFromFragment(
                          pendingProps.children,
                          mode,
                          expirationTime,
                          key
                        );

                      case REACT_CONCURRENT_MODE_TYPE:
                        fiberTag = Mode;
                        mode |= ConcurrentMode | BlockingMode | StrictMode;
                        break;

                      case REACT_STRICT_MODE_TYPE:
                        fiberTag = Mode;
                        mode |= StrictMode;
                        break;

                      case REACT_PROFILER_TYPE:
                        return createFiberFromProfiler(
                          pendingProps,
                          mode,
                          expirationTime,
                          key
                        );

                      case REACT_SUSPENSE_TYPE:
                        return createFiberFromSuspense(
                          pendingProps,
                          mode,
                          expirationTime,
                          key
                        );

                      case REACT_SUSPENSE_LIST_TYPE:
                        return createFiberFromSuspenseList(
                          pendingProps,
                          mode,
                          expirationTime,
                          key
                        );

                      default: {
                        if (typeof type === 'object' && type !== null) {
                          switch (type.$$typeof) {
                            case REACT_PROVIDER_TYPE:
                              fiberTag = ContextProvider;
                              break getTag;

                            case REACT_CONTEXT_TYPE:
                              // This is a consumer
                              fiberTag = ContextConsumer;
                              break getTag;

                            case REACT_FORWARD_REF_TYPE:
                              fiberTag = ForwardRef;

                              {
                                resolvedType = resolveForwardRefForHotReloading(
                                  resolvedType
                                );
                              }

                              break getTag;

                            case REACT_MEMO_TYPE:
                              fiberTag = MemoComponent;
                              break getTag;

                            case REACT_LAZY_TYPE:
                              fiberTag = LazyComponent;
                              resolvedType = null;
                              break getTag;

                            case REACT_FUNDAMENTAL_TYPE:
                              if (enableFundamentalAPI) {
                                return createFiberFromFundamental(
                                  type,
                                  pendingProps,
                                  mode,
                                  expirationTime,
                                  key
                                );
                              }

                              break;

                            case REACT_SCOPE_TYPE:
                              if (enableScopeAPI) {
                                return createFiberFromScope(
                                  type,
                                  pendingProps,
                                  mode,
                                  expirationTime,
                                  key
                                );
                              }
                          }
                        }

                        var info = '';

                        {
                          if (
                            type === undefined ||
                            (typeof type === 'object' &&
                              type !== null &&
                              Object.keys(type).length === 0)
                          ) {
                            info +=
                              ' You likely forgot to export your component from the file ' +
                              "it's defined in, or you might have mixed up default and " +
                              'named imports.';
                          }

                          var ownerName = owner
                            ? getComponentName(owner.type)
                            : null;

                          if (ownerName) {
                            info +=
                              '\n\nCheck the render method of `' +
                              ownerName +
                              '`.';
                          }
                        }

                        {
                          {
                            throw Error(
                              'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: ' +
                                (type == null ? type : typeof type) +
                                '.' +
                                info
                            );
                          }
                        }
                      }
                    }
                  }

                  fiber = createFiber(fiberTag, pendingProps, key, mode);
                  fiber.elementType = type;
                  fiber.type = resolvedType;
                  fiber.expirationTime = expirationTime;
                  return fiber;
                }
                function createFiberFromElement(element, mode, expirationTime) {
                  var owner = null;

                  {
                    owner = element._owner;
                  }

                  var type = element.type;
                  var key = element.key;
                  var pendingProps = element.props;
                  var fiber = createFiberFromTypeAndProps(
                    type,
                    key,
                    pendingProps,
                    owner,
                    mode,
                    expirationTime
                  );

                  {
                    fiber._debugSource = element._source;
                    fiber._debugOwner = element._owner;
                  }

                  return fiber;
                }
                function createFiberFromFragment(
                  elements,
                  mode,
                  expirationTime,
                  key
                ) {
                  var fiber = createFiber(Fragment, elements, key, mode);
                  fiber.expirationTime = expirationTime;
                  return fiber;
                }
                function createFiberFromFundamental(
                  fundamentalComponent,
                  pendingProps,
                  mode,
                  expirationTime,
                  key
                ) {
                  var fiber = createFiber(
                    FundamentalComponent,
                    pendingProps,
                    key,
                    mode
                  );
                  fiber.elementType = fundamentalComponent;
                  fiber.type = fundamentalComponent;
                  fiber.expirationTime = expirationTime;
                  return fiber;
                }

                function createFiberFromScope(
                  scope,
                  pendingProps,
                  mode,
                  expirationTime,
                  key
                ) {
                  var fiber = createFiber(
                    ScopeComponent,
                    pendingProps,
                    key,
                    mode
                  );
                  fiber.type = scope;
                  fiber.elementType = scope;
                  fiber.expirationTime = expirationTime;
                  return fiber;
                }

                function createFiberFromProfiler(
                  pendingProps,
                  mode,
                  expirationTime,
                  key
                ) {
                  {
                    if (
                      typeof pendingProps.id !== 'string' ||
                      typeof pendingProps.onRender !== 'function'
                    ) {
                      warningWithoutStack$1(
                        false,
                        'Profiler must specify an "id" string and "onRender" function as props'
                      );
                    }
                  }

                  var fiber = createFiber(
                    Profiler,
                    pendingProps,
                    key,
                    mode | ProfileMode
                  ); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

                  fiber.elementType = REACT_PROFILER_TYPE;
                  fiber.type = REACT_PROFILER_TYPE;
                  fiber.expirationTime = expirationTime;
                  return fiber;
                }

                function createFiberFromSuspense(
                  pendingProps,
                  mode,
                  expirationTime,
                  key
                ) {
                  var fiber = createFiber(
                    SuspenseComponent,
                    pendingProps,
                    key,
                    mode
                  ); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
                  // This needs to be fixed in getComponentName so that it relies on the tag
                  // instead.

                  fiber.type = REACT_SUSPENSE_TYPE;
                  fiber.elementType = REACT_SUSPENSE_TYPE;
                  fiber.expirationTime = expirationTime;
                  return fiber;
                }
                function createFiberFromSuspenseList(
                  pendingProps,
                  mode,
                  expirationTime,
                  key
                ) {
                  var fiber = createFiber(
                    SuspenseListComponent,
                    pendingProps,
                    key,
                    mode
                  );

                  {
                    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
                    // This needs to be fixed in getComponentName so that it relies on the tag
                    // instead.
                    fiber.type = REACT_SUSPENSE_LIST_TYPE;
                  }

                  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
                  fiber.expirationTime = expirationTime;
                  return fiber;
                }
                function createFiberFromText(content, mode, expirationTime) {
                  var fiber = createFiber(HostText, content, null, mode);
                  fiber.expirationTime = expirationTime;
                  return fiber;
                }
                function createFiberFromHostInstanceForDeletion() {
                  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

                  fiber.elementType = 'DELETED';
                  fiber.type = 'DELETED';
                  return fiber;
                }
                function createFiberFromDehydratedFragment(dehydratedNode) {
                  var fiber = createFiber(
                    DehydratedFragment,
                    null,
                    null,
                    NoMode
                  );
                  fiber.stateNode = dehydratedNode;
                  return fiber;
                }
                function createFiberFromPortal(portal, mode, expirationTime) {
                  var pendingProps =
                    portal.children !== null ? portal.children : [];
                  var fiber = createFiber(
                    HostPortal,
                    pendingProps,
                    portal.key,
                    mode
                  );
                  fiber.expirationTime = expirationTime;
                  fiber.stateNode = {
                    containerInfo: portal.containerInfo,
                    pendingChildren: null,
                    // Used by persistent updates
                    implementation: portal.implementation,
                  };
                  return fiber;
                } // Used for stashing WIP properties to replay failed work in DEV.

                function assignFiberPropertiesInDEV(target, source) {
                  if (target === null) {
                    // This Fiber's initial properties will always be overwritten.
                    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
                    target = createFiber(
                      IndeterminateComponent,
                      null,
                      null,
                      NoMode
                    );
                  } // This is intentionally written as a list of all properties.
                  // We tried to use Object.assign() instead but this is called in
                  // the hottest path, and Object.assign() was too slow:
                  // https://github.com/facebook/react/issues/12502
                  // This code is DEV-only so size is not a concern.

                  target.tag = source.tag;
                  target.key = source.key;
                  target.elementType = source.elementType;
                  target.type = source.type;
                  target.stateNode = source.stateNode;
                  target.return = source.return;
                  target.child = source.child;
                  target.sibling = source.sibling;
                  target.index = source.index;
                  target.ref = source.ref;
                  target.pendingProps = source.pendingProps;
                  target.memoizedProps = source.memoizedProps;
                  target.updateQueue = source.updateQueue;
                  target.memoizedState = source.memoizedState;
                  target.dependencies = source.dependencies;
                  target.mode = source.mode;
                  target.effectTag = source.effectTag;
                  target.nextEffect = source.nextEffect;
                  target.firstEffect = source.firstEffect;
                  target.lastEffect = source.lastEffect;
                  target.expirationTime = source.expirationTime;
                  target.childExpirationTime = source.childExpirationTime;
                  target.alternate = source.alternate;

                  if (enableProfilerTimer) {
                    target.actualDuration = source.actualDuration;
                    target.actualStartTime = source.actualStartTime;
                    target.selfBaseDuration = source.selfBaseDuration;
                    target.treeBaseDuration = source.treeBaseDuration;
                  }

                  target._debugID = source._debugID;
                  target._debugSource = source._debugSource;
                  target._debugOwner = source._debugOwner;
                  target._debugIsCurrentlyTiming =
                    source._debugIsCurrentlyTiming;
                  target._debugNeedsRemount = source._debugNeedsRemount;
                  target._debugHookTypes = source._debugHookTypes;
                  return target;
                }

                function FiberRootNode(containerInfo, tag, hydrate) {
                  this.tag = tag;
                  this.current = null;
                  this.containerInfo = containerInfo;
                  this.pendingChildren = null;
                  this.pingCache = null;
                  this.finishedExpirationTime = NoWork;
                  this.finishedWork = null;
                  this.timeoutHandle = noTimeout;
                  this.context = null;
                  this.pendingContext = null;
                  this.hydrate = hydrate;
                  this.callbackNode = null;
                  this.callbackPriority = NoPriority;
                  this.firstPendingTime = NoWork;
                  this.firstSuspendedTime = NoWork;
                  this.lastSuspendedTime = NoWork;
                  this.nextKnownPendingLevel = NoWork;
                  this.lastPingedTime = NoWork;
                  this.lastExpiredTime = NoWork;

                  if (enableSchedulerTracing) {
                    this.interactionThreadID = tracing.unstable_getThreadID();
                    this.memoizedInteractions = new Set();
                    this.pendingInteractionMap = new Map();
                  }

                  if (enableSuspenseCallback) {
                    this.hydrationCallbacks = null;
                  }
                }

                function createFiberRoot(
                  containerInfo,
                  tag,
                  hydrate,
                  hydrationCallbacks
                ) {
                  var root = new FiberRootNode(containerInfo, tag, hydrate);

                  if (enableSuspenseCallback) {
                    root.hydrationCallbacks = hydrationCallbacks;
                  } // Cyclic construction. This cheats the type system right now because
                  // stateNode is any.

                  var uninitializedFiber = createHostRootFiber(tag);
                  root.current = uninitializedFiber;
                  uninitializedFiber.stateNode = root;
                  return root;
                }
                function isRootSuspendedAtTime(root, expirationTime) {
                  var firstSuspendedTime = root.firstSuspendedTime;
                  var lastSuspendedTime = root.lastSuspendedTime;
                  return (
                    firstSuspendedTime !== NoWork &&
                    firstSuspendedTime >= expirationTime &&
                    lastSuspendedTime <= expirationTime
                  );
                }
                function markRootSuspendedAtTime(root, expirationTime) {
                  var firstSuspendedTime = root.firstSuspendedTime;
                  var lastSuspendedTime = root.lastSuspendedTime;

                  if (firstSuspendedTime < expirationTime) {
                    root.firstSuspendedTime = expirationTime;
                  }

                  if (
                    lastSuspendedTime > expirationTime ||
                    firstSuspendedTime === NoWork
                  ) {
                    root.lastSuspendedTime = expirationTime;
                  }

                  if (expirationTime <= root.lastPingedTime) {
                    root.lastPingedTime = NoWork;
                  }

                  if (expirationTime <= root.lastExpiredTime) {
                    root.lastExpiredTime = NoWork;
                  }
                }
                function markRootUpdatedAtTime(root, expirationTime) {
                  // Update the range of pending times
                  var firstPendingTime = root.firstPendingTime;

                  if (expirationTime > firstPendingTime) {
                    root.firstPendingTime = expirationTime;
                  } // Update the range of suspended times. Treat everything lower priority or
                  // equal to this update as unsuspended.

                  var firstSuspendedTime = root.firstSuspendedTime;

                  if (firstSuspendedTime !== NoWork) {
                    if (expirationTime >= firstSuspendedTime) {
                      // The entire suspended range is now unsuspended.
                      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
                    } else if (expirationTime >= root.lastSuspendedTime) {
                      root.lastSuspendedTime = expirationTime + 1;
                    } // This is a pending level. Check if it's higher priority than the next
                    // known pending level.

                    if (expirationTime > root.nextKnownPendingLevel) {
                      root.nextKnownPendingLevel = expirationTime;
                    }
                  }
                }
                function markRootFinishedAtTime(
                  root,
                  finishedExpirationTime,
                  remainingExpirationTime
                ) {
                  // Update the range of pending times
                  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
                  // equal to this update as unsuspended.

                  if (finishedExpirationTime <= root.lastSuspendedTime) {
                    // The entire suspended range is now unsuspended.
                    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
                  } else if (
                    finishedExpirationTime <= root.firstSuspendedTime
                  ) {
                    // Part of the suspended range is now unsuspended. Narrow the range to
                    // include everything between the unsuspended time (non-inclusive) and the
                    // last suspended time.
                    root.firstSuspendedTime = finishedExpirationTime - 1;
                  }

                  if (finishedExpirationTime <= root.lastPingedTime) {
                    // Clear the pinged time
                    root.lastPingedTime = NoWork;
                  }

                  if (finishedExpirationTime <= root.lastExpiredTime) {
                    // Clear the expired time
                    root.lastExpiredTime = NoWork;
                  }
                }
                function markRootExpiredAtTime(root, expirationTime) {
                  var lastExpiredTime = root.lastExpiredTime;

                  if (
                    lastExpiredTime === NoWork ||
                    lastExpiredTime > expirationTime
                  ) {
                    root.lastExpiredTime = expirationTime;
                  }
                }

                // This lets us hook into Fiber to debug what it's doing.
                // See https://github.com/facebook/react/pull/8033.
                // This is not part of the public API, not even for React DevTools.
                // You may only inject a debugTool if you work on React Fiber itself.
                var ReactFiberInstrumentation = {
                  debugTool: null,
                };
                var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

                var didWarnAboutNestedUpdates;
                var didWarnAboutFindNodeInStrictMode;

                {
                  didWarnAboutNestedUpdates = false;
                  didWarnAboutFindNodeInStrictMode = {};
                }

                function getContextForSubtree(parentComponent) {
                  if (!parentComponent) {
                    return emptyContextObject;
                  }

                  var fiber = get(parentComponent);
                  var parentContext = findCurrentUnmaskedContext(fiber);

                  if (fiber.tag === ClassComponent) {
                    var Component = fiber.type;

                    if (isContextProvider(Component)) {
                      return processChildContext(
                        fiber,
                        Component,
                        parentContext
                      );
                    }
                  }

                  return parentContext;
                }

                function findHostInstance(component) {
                  var fiber = get(component);

                  if (fiber === undefined) {
                    if (typeof component.render === 'function') {
                      {
                        {
                          throw Error(
                            'Unable to find node on an unmounted component.'
                          );
                        }
                      }
                    } else {
                      {
                        {
                          throw Error(
                            'Argument appears to not be a ReactComponent. Keys: ' +
                              Object.keys(component)
                          );
                        }
                      }
                    }
                  }

                  var hostFiber = findCurrentHostFiber(fiber);

                  if (hostFiber === null) {
                    return null;
                  }

                  return hostFiber.stateNode;
                }

                function findHostInstanceWithWarning(component, methodName) {
                  {
                    var fiber = get(component);

                    if (fiber === undefined) {
                      if (typeof component.render === 'function') {
                        {
                          {
                            throw Error(
                              'Unable to find node on an unmounted component.'
                            );
                          }
                        }
                      } else {
                        {
                          {
                            throw Error(
                              'Argument appears to not be a ReactComponent. Keys: ' +
                                Object.keys(component)
                            );
                          }
                        }
                      }
                    }

                    var hostFiber = findCurrentHostFiber(fiber);

                    if (hostFiber === null) {
                      return null;
                    }

                    if (hostFiber.mode & StrictMode) {
                      var componentName =
                        getComponentName(fiber.type) || 'Component';

                      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                        didWarnAboutFindNodeInStrictMode[componentName] = true;

                        if (fiber.mode & StrictMode) {
                          warningWithoutStack$1(
                            false,
                            '%s is deprecated in StrictMode. ' +
                              '%s was passed an instance of %s which is inside StrictMode. ' +
                              'Instead, add a ref directly to the element you want to reference. ' +
                              'Learn more about using refs safely here: ' +
                              'https://fb.me/react-strict-mode-find-node%s',
                            methodName,
                            methodName,
                            componentName,
                            getStackByFiberInDevAndProd(hostFiber)
                          );
                        } else {
                          warningWithoutStack$1(
                            false,
                            '%s is deprecated in StrictMode. ' +
                              '%s was passed an instance of %s which renders StrictMode children. ' +
                              'Instead, add a ref directly to the element you want to reference. ' +
                              'Learn more about using refs safely here: ' +
                              'https://fb.me/react-strict-mode-find-node%s',
                            methodName,
                            methodName,
                            componentName,
                            getStackByFiberInDevAndProd(hostFiber)
                          );
                        }
                      }
                    }

                    return hostFiber.stateNode;
                  }

                  return findHostInstance(component);
                }

                function createContainer(
                  containerInfo,
                  tag,
                  hydrate,
                  hydrationCallbacks
                ) {
                  return createFiberRoot(
                    containerInfo,
                    tag,
                    hydrate,
                    hydrationCallbacks
                  );
                }
                function updateContainer(
                  element,
                  container,
                  parentComponent,
                  callback
                ) {
                  var current$$1 = container.current;
                  var currentTime = requestCurrentTimeForUpdate();

                  {
                    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                    if ('undefined' !== typeof jest) {
                      warnIfUnmockedScheduler(current$$1);
                      warnIfNotScopedWithMatchingAct(current$$1);
                    }
                  }

                  var suspenseConfig = requestCurrentSuspenseConfig();
                  var expirationTime = computeExpirationForFiber(
                    currentTime,
                    current$$1,
                    suspenseConfig
                  );

                  {
                    if (ReactFiberInstrumentation_1.debugTool) {
                      if (current$$1.alternate === null) {
                        ReactFiberInstrumentation_1.debugTool.onMountContainer(
                          container
                        );
                      } else if (element === null) {
                        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(
                          container
                        );
                      } else {
                        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(
                          container
                        );
                      }
                    }
                  }

                  var context = getContextForSubtree(parentComponent);

                  if (container.context === null) {
                    container.context = context;
                  } else {
                    container.pendingContext = context;
                  }

                  {
                    if (
                      phase === 'render' &&
                      current !== null &&
                      !didWarnAboutNestedUpdates
                    ) {
                      didWarnAboutNestedUpdates = true;
                      warningWithoutStack$1(
                        false,
                        'Render methods should be a pure function of props and state; ' +
                          'triggering nested component updates from render is not allowed. ' +
                          'If necessary, trigger nested updates in componentDidUpdate.\n\n' +
                          'Check the render method of %s.',
                        getComponentName(current.type) || 'Unknown'
                      );
                    }
                  }

                  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
                  // being called "element".

                  update.payload = {
                    element: element,
                  };
                  callback = callback === undefined ? null : callback;

                  if (callback !== null) {
                    !(typeof callback === 'function')
                      ? warningWithoutStack$1(
                          false,
                          'render(...): Expected the last optional `callback` argument to be a ' +
                            'function. Instead received: %s.',
                          callback
                        )
                      : void 0;
                    update.callback = callback;
                  }

                  enqueueUpdate(current$$1, update);
                  scheduleWork(current$$1, expirationTime);
                  return expirationTime;
                }
                function getPublicRootInstance(container) {
                  var containerFiber = container.current;

                  if (!containerFiber.child) {
                    return null;
                  }

                  switch (containerFiber.child.tag) {
                    case HostComponent:
                      return getPublicInstance(containerFiber.child.stateNode);

                    default:
                      return containerFiber.child.stateNode;
                  }
                }
                function attemptSynchronousHydration(fiber) {
                  switch (fiber.tag) {
                    case HostRoot:
                      var root = fiber.stateNode;

                      if (root.hydrate) {
                        // Flush the first scheduled "update".
                        flushRoot(root, root.firstPendingTime);
                      }

                      break;

                    case SuspenseComponent:
                      flushSync(function() {
                        return scheduleWork(fiber, Sync);
                      }); // If we're still blocked after this, we need to increase
                      // the priority of any promises resolving within this
                      // boundary so that they next attempt also has higher pri.

                      var retryExpTime = computeInteractiveExpiration(
                        requestCurrentTimeForUpdate()
                      );
                      markRetryTimeIfNotHydrated(fiber, retryExpTime);
                      break;
                  }
                }

                function markRetryTimeImpl(fiber, retryTime) {
                  var suspenseState = fiber.memoizedState;

                  if (
                    suspenseState !== null &&
                    suspenseState.dehydrated !== null
                  ) {
                    if (suspenseState.retryTime < retryTime) {
                      suspenseState.retryTime = retryTime;
                    }
                  }
                } // Increases the priority of thennables when they resolve within this boundary.

                function markRetryTimeIfNotHydrated(fiber, retryTime) {
                  markRetryTimeImpl(fiber, retryTime);
                  var alternate = fiber.alternate;

                  if (alternate) {
                    markRetryTimeImpl(alternate, retryTime);
                  }
                }

                function attemptUserBlockingHydration(fiber) {
                  if (fiber.tag !== SuspenseComponent) {
                    // We ignore HostRoots here because we can't increase
                    // their priority and they should not suspend on I/O,
                    // since you have to wrap anything that might suspend in
                    // Suspense.
                    return;
                  }

                  var expTime = computeInteractiveExpiration(
                    requestCurrentTimeForUpdate()
                  );
                  scheduleWork(fiber, expTime);
                  markRetryTimeIfNotHydrated(fiber, expTime);
                }
                function attemptContinuousHydration(fiber) {
                  if (fiber.tag !== SuspenseComponent) {
                    // We ignore HostRoots here because we can't increase
                    // their priority and they should not suspend on I/O,
                    // since you have to wrap anything that might suspend in
                    // Suspense.
                    return;
                  }

                  var expTime = computeContinuousHydrationExpiration(
                    requestCurrentTimeForUpdate()
                  );
                  scheduleWork(fiber, expTime);
                  markRetryTimeIfNotHydrated(fiber, expTime);
                }
                function attemptHydrationAtCurrentPriority(fiber) {
                  if (fiber.tag !== SuspenseComponent) {
                    // We ignore HostRoots here because we can't increase
                    // their priority other than synchronously flush it.
                    return;
                  }

                  var currentTime = requestCurrentTimeForUpdate();
                  var expTime = computeExpirationForFiber(
                    currentTime,
                    fiber,
                    null
                  );
                  scheduleWork(fiber, expTime);
                  markRetryTimeIfNotHydrated(fiber, expTime);
                }
                function findHostInstanceWithNoPortals(fiber) {
                  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

                  if (hostFiber === null) {
                    return null;
                  }

                  if (hostFiber.tag === FundamentalComponent) {
                    return hostFiber.stateNode.instance;
                  }

                  return hostFiber.stateNode;
                }

                var shouldSuspendImpl = function(fiber) {
                  return false;
                };

                function shouldSuspend(fiber) {
                  return shouldSuspendImpl(fiber);
                }
                var overrideHookState = null;
                var overrideProps = null;
                var scheduleUpdate = null;
                var setSuspenseHandler = null;

                {
                  var copyWithSetImpl = function(obj, path, idx, value) {
                    if (idx >= path.length) {
                      return value;
                    }

                    var key = path[idx];
                    var updated = Array.isArray(obj)
                      ? obj.slice()
                      : _assign({}, obj); // $FlowFixMe number or string is fine here

                    updated[key] = copyWithSetImpl(
                      obj[key],
                      path,
                      idx + 1,
                      value
                    );
                    return updated;
                  };

                  var copyWithSet = function(obj, path, value) {
                    return copyWithSetImpl(obj, path, 0, value);
                  }; // Support DevTools editable values for useState and useReducer.

                  overrideHookState = function(fiber, id, path, value) {
                    // For now, the "id" of stateful hooks is just the stateful hook index.
                    // This may change in the future with e.g. nested hooks.
                    var currentHook = fiber.memoizedState;

                    while (currentHook !== null && id > 0) {
                      currentHook = currentHook.next;
                      id--;
                    }

                    if (currentHook !== null) {
                      var newState = copyWithSet(
                        currentHook.memoizedState,
                        path,
                        value
                      );
                      currentHook.memoizedState = newState;
                      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
                      // because there is no update we can add for useReducer hooks that won't trigger an error.
                      // (There's no appropriate action type for DevTools overrides.)
                      // As a result though, React will see the scheduled update as a noop and bailout.
                      // Shallow cloning props works as a workaround for now to bypass the bailout check.

                      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                      scheduleWork(fiber, Sync);
                    }
                  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.

                  overrideProps = function(fiber, path, value) {
                    fiber.pendingProps = copyWithSet(
                      fiber.memoizedProps,
                      path,
                      value
                    );

                    if (fiber.alternate) {
                      fiber.alternate.pendingProps = fiber.pendingProps;
                    }

                    scheduleWork(fiber, Sync);
                  };

                  scheduleUpdate = function(fiber) {
                    scheduleWork(fiber, Sync);
                  };

                  setSuspenseHandler = function(newShouldSuspendImpl) {
                    shouldSuspendImpl = newShouldSuspendImpl;
                  };
                }

                function injectIntoDevTools(devToolsConfig) {
                  var findFiberByHostInstance =
                    devToolsConfig.findFiberByHostInstance;
                  var ReactCurrentDispatcher =
                    ReactSharedInternals.ReactCurrentDispatcher;
                  return injectInternals(
                    _assign({}, devToolsConfig, {
                      overrideHookState: overrideHookState,
                      overrideProps: overrideProps,
                      setSuspenseHandler: setSuspenseHandler,
                      scheduleUpdate: scheduleUpdate,
                      currentDispatcherRef: ReactCurrentDispatcher,
                      findHostInstanceByFiber: function(fiber) {
                        var hostFiber = findCurrentHostFiber(fiber);

                        if (hostFiber === null) {
                          return null;
                        }

                        return hostFiber.stateNode;
                      },
                      findFiberByHostInstance: function(instance) {
                        if (!findFiberByHostInstance) {
                          // Might not be implemented by the renderer.
                          return null;
                        }

                        return findFiberByHostInstance(instance);
                      },
                      // React Refresh
                      findHostInstancesForRefresh: findHostInstancesForRefresh,
                      scheduleRefresh: scheduleRefresh,
                      scheduleRoot: scheduleRoot,
                      setRefreshHandler: setRefreshHandler,
                      // Enables DevTools to append owner stacks to error messages in DEV mode.
                      getCurrentFiber: function() {
                        return current;
                      },
                    })
                  );
                }

                var ReactFiberReconciler = Object.freeze({
                  createContainer: createContainer,
                  updateContainer: updateContainer,
                  batchedEventUpdates: batchedEventUpdates,
                  batchedUpdates: batchedUpdates,
                  unbatchedUpdates: unbatchedUpdates,
                  deferredUpdates: deferredUpdates,
                  syncUpdates: syncUpdates,
                  discreteUpdates: discreteUpdates,
                  flushDiscreteUpdates: flushDiscreteUpdates,
                  flushControlled: flushControlled,
                  flushSync: flushSync,
                  flushPassiveEffects: flushPassiveEffects,
                  IsThisRendererActing: IsThisRendererActing,
                  getPublicRootInstance: getPublicRootInstance,
                  attemptSynchronousHydration: attemptSynchronousHydration,
                  attemptUserBlockingHydration: attemptUserBlockingHydration,
                  attemptContinuousHydration: attemptContinuousHydration,
                  attemptHydrationAtCurrentPriority: attemptHydrationAtCurrentPriority,
                  findHostInstance: findHostInstance,
                  findHostInstanceWithWarning: findHostInstanceWithWarning,
                  findHostInstanceWithNoPortals: findHostInstanceWithNoPortals,
                  shouldSuspend: shouldSuspend,
                  injectIntoDevTools: injectIntoDevTools,
                });

                // This entry point is intentionally not typed. It exists only for third-party
                // renderers. The renderers we ship (such as React DOM) instead import a named
                // "inline" entry point (for example, `react-reconciler/inline.dom`). It uses
                // the same code, but the Flow configuration redirects the host config to its
                // real implementation so we can check it against exact intended host types.
                //
                // Only one renderer (the one you passed to `yarn flow <renderer>`) is fully
                // type-checked at any given time. The Flow config maps the
                // `react-reconciler/inline.<renderer>` import (which is *not* Flow typed) to
                // `react-reconciler/inline-typed` (which *is*) for the current renderer.
                // On CI, we run Flow checks for each renderer separately.

                // TODO: decide on the top-level export form.
                // This is hacky but makes it work with both Rollup and Jest.

                var reactReconciler =
                  ReactFiberReconciler.default || ReactFiberReconciler;

                module.exports = reactReconciler;
                var $$$renderer = module.exports;
                module.exports = $$$reconciler;
                return $$$renderer;
              };
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      {
        _process: 112,
        'object-assign': 117,
        'prop-types/checkPropTypes': 118,
        react: 131,
        scheduler: 136,
        'scheduler/tracing': 137,
      },
    ],
    127: [
      function(require, module, exports) {
        /** @license React v0.24.0
         * react-reconciler.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        module.exports = function $$$reconciler($$$hostConfig) {
          'use strict';
          var aa = require('object-assign'),
            ba = require('react'),
            m = require('scheduler');
          function n(a) {
            for (
              var b =
                  'https://reactjs.org/docs/error-decoder.html?invariant=' + a,
                c = 1;
              c < arguments.length;
              c++
            )
              b += '&args[]=' + encodeURIComponent(arguments[c]);
            return (
              'Minified React error #' +
              a +
              '; visit ' +
              b +
              ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.'
            );
          }
          var q = ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          q.hasOwnProperty('ReactCurrentDispatcher') ||
            (q.ReactCurrentDispatcher = { current: null });
          q.hasOwnProperty('ReactCurrentBatchConfig') ||
            (q.ReactCurrentBatchConfig = { suspense: null });
          var u = 'function' === typeof Symbol && Symbol.for,
            ca = u ? Symbol.for('react.element') : 60103,
            da = u ? Symbol.for('react.portal') : 60106,
            ea = u ? Symbol.for('react.fragment') : 60107,
            fa = u ? Symbol.for('react.strict_mode') : 60108,
            ha = u ? Symbol.for('react.profiler') : 60114,
            ia = u ? Symbol.for('react.provider') : 60109,
            ja = u ? Symbol.for('react.context') : 60110,
            ka = u ? Symbol.for('react.concurrent_mode') : 60111,
            la = u ? Symbol.for('react.forward_ref') : 60112,
            ma = u ? Symbol.for('react.suspense') : 60113,
            na = u ? Symbol.for('react.suspense_list') : 60120,
            oa = u ? Symbol.for('react.memo') : 60115,
            pa = u ? Symbol.for('react.lazy') : 60116;
          u && Symbol.for('react.fundamental');
          u && Symbol.for('react.responder');
          u && Symbol.for('react.scope');
          var qa = 'function' === typeof Symbol && Symbol.iterator;
          function ra(a) {
            if (null === a || 'object' !== typeof a) return null;
            a = (qa && a[qa]) || a['@@iterator'];
            return 'function' === typeof a ? a : null;
          }
          function sa(a) {
            if (-1 === a._status) {
              a._status = 0;
              var b = a._ctor;
              b = b();
              a._result = b;
              b.then(
                function(b) {
                  0 === a._status &&
                    ((b = b.default), (a._status = 1), (a._result = b));
                },
                function(b) {
                  0 === a._status && ((a._status = 2), (a._result = b));
                }
              );
            }
          }
          function ta(a) {
            if (null == a) return null;
            if ('function' === typeof a) return a.displayName || a.name || null;
            if ('string' === typeof a) return a;
            switch (a) {
              case ea:
                return 'Fragment';
              case da:
                return 'Portal';
              case ha:
                return 'Profiler';
              case fa:
                return 'StrictMode';
              case ma:
                return 'Suspense';
              case na:
                return 'SuspenseList';
            }
            if ('object' === typeof a)
              switch (a.$$typeof) {
                case ja:
                  return 'Context.Consumer';
                case ia:
                  return 'Context.Provider';
                case la:
                  var b = a.render;
                  b = b.displayName || b.name || '';
                  return (
                    a.displayName ||
                    ('' !== b ? 'ForwardRef(' + b + ')' : 'ForwardRef')
                  );
                case oa:
                  return ta(a.type);
                case pa:
                  if ((a = 1 === a._status ? a._result : null)) return ta(a);
              }
            return null;
          }
          function ua(a) {
            var b = a,
              c = a;
            if (a.alternate) for (; b.return; ) b = b.return;
            else {
              a = b;
              do
                (b = a),
                  0 !== (b.effectTag & 1026) && (c = b.return),
                  (a = b.return);
              while (a);
            }
            return 3 === b.tag ? c : null;
          }
          function va(a) {
            if (ua(a) !== a) throw Error(n(188));
          }
          function wa(a) {
            var b = a.alternate;
            if (!b) {
              b = ua(a);
              if (null === b) throw Error(n(188));
              return b !== a ? null : a;
            }
            for (var c = a, d = b; ; ) {
              var e = c.return;
              if (null === e) break;
              var f = e.alternate;
              if (null === f) {
                d = e.return;
                if (null !== d) {
                  c = d;
                  continue;
                }
                break;
              }
              if (e.child === f.child) {
                for (f = e.child; f; ) {
                  if (f === c) return va(e), a;
                  if (f === d) return va(e), b;
                  f = f.sibling;
                }
                throw Error(n(188));
              }
              if (c.return !== d.return) (c = e), (d = f);
              else {
                for (var g = !1, l = e.child; l; ) {
                  if (l === c) {
                    g = !0;
                    c = e;
                    d = f;
                    break;
                  }
                  if (l === d) {
                    g = !0;
                    d = e;
                    c = f;
                    break;
                  }
                  l = l.sibling;
                }
                if (!g) {
                  for (l = f.child; l; ) {
                    if (l === c) {
                      g = !0;
                      c = f;
                      d = e;
                      break;
                    }
                    if (l === d) {
                      g = !0;
                      d = f;
                      c = e;
                      break;
                    }
                    l = l.sibling;
                  }
                  if (!g) throw Error(n(189));
                }
              }
              if (c.alternate !== d) throw Error(n(190));
            }
            if (3 !== c.tag) throw Error(n(188));
            return c.stateNode.current === c ? a : b;
          }
          function xa(a) {
            a = wa(a);
            if (!a) return null;
            for (var b = a; ; ) {
              if (5 === b.tag || 6 === b.tag) return b;
              if (b.child) (b.child.return = b), (b = b.child);
              else {
                if (b === a) break;
                for (; !b.sibling; ) {
                  if (!b.return || b.return === a) return null;
                  b = b.return;
                }
                b.sibling.return = b.return;
                b = b.sibling;
              }
            }
            return null;
          }
          function ya(a) {
            a = wa(a);
            if (!a) return null;
            for (var b = a; ; ) {
              if (5 === b.tag || 6 === b.tag) return b;
              if (b.child && 4 !== b.tag) (b.child.return = b), (b = b.child);
              else {
                if (b === a) break;
                for (; !b.sibling; ) {
                  if (!b.return || b.return === a) return null;
                  b = b.return;
                }
                b.sibling.return = b.return;
                b = b.sibling;
              }
            }
            return null;
          }
          var za = $$$hostConfig.getPublicInstance,
            Aa = $$$hostConfig.getRootHostContext,
            Ba = $$$hostConfig.getChildHostContext,
            Ca = $$$hostConfig.prepareForCommit,
            Da = $$$hostConfig.resetAfterCommit,
            Ea = $$$hostConfig.createInstance,
            Fa = $$$hostConfig.appendInitialChild,
            Ga = $$$hostConfig.finalizeInitialChildren,
            Ia = $$$hostConfig.prepareUpdate,
            Ja = $$$hostConfig.shouldSetTextContent,
            Ka = $$$hostConfig.shouldDeprioritizeSubtree,
            La = $$$hostConfig.createTextInstance,
            Ma = $$$hostConfig.setTimeout,
            Na = $$$hostConfig.clearTimeout,
            Oa = $$$hostConfig.noTimeout,
            Pa = $$$hostConfig.isPrimaryRenderer,
            Qa = $$$hostConfig.supportsMutation,
            Ra = $$$hostConfig.supportsPersistence,
            Sa = $$$hostConfig.supportsHydration,
            Ta = $$$hostConfig.appendChild,
            Ua = $$$hostConfig.appendChildToContainer,
            Va = $$$hostConfig.commitTextUpdate,
            Wa = $$$hostConfig.commitMount,
            Xa = $$$hostConfig.commitUpdate,
            Ya = $$$hostConfig.insertBefore,
            Za = $$$hostConfig.insertInContainerBefore,
            $a = $$$hostConfig.removeChild,
            ab = $$$hostConfig.removeChildFromContainer,
            bb = $$$hostConfig.resetTextContent,
            cb = $$$hostConfig.hideInstance,
            db = $$$hostConfig.hideTextInstance,
            eb = $$$hostConfig.unhideInstance,
            fb = $$$hostConfig.unhideTextInstance,
            gb = $$$hostConfig.cloneInstance,
            hb = $$$hostConfig.createContainerChildSet,
            ib = $$$hostConfig.appendChildToContainerChildSet,
            kb = $$$hostConfig.finalizeContainerChildren,
            lb = $$$hostConfig.replaceContainerChildren,
            mb = $$$hostConfig.cloneHiddenInstance,
            nb = $$$hostConfig.cloneHiddenTextInstance,
            ob = $$$hostConfig.canHydrateInstance,
            pb = $$$hostConfig.canHydrateTextInstance,
            qb = $$$hostConfig.isSuspenseInstancePending,
            rb = $$$hostConfig.isSuspenseInstanceFallback,
            sb = $$$hostConfig.getNextHydratableSibling,
            tb = $$$hostConfig.getFirstHydratableChild,
            ub = $$$hostConfig.hydrateInstance,
            vb = $$$hostConfig.hydrateTextInstance,
            wb = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance,
            xb = $$$hostConfig.commitHydratedContainer,
            yb = $$$hostConfig.commitHydratedSuspenseInstance,
            zb = /^(.*)[\\\/]/;
          function Ab(a) {
            var b = '';
            do {
              a: switch (a.tag) {
                case 3:
                case 4:
                case 6:
                case 7:
                case 10:
                case 9:
                  var c = '';
                  break a;
                default:
                  var d = a._debugOwner,
                    e = a._debugSource,
                    f = ta(a.type);
                  c = null;
                  d && (c = ta(d.type));
                  d = f;
                  f = '';
                  e
                    ? (f =
                        ' (at ' +
                        e.fileName.replace(zb, '') +
                        ':' +
                        e.lineNumber +
                        ')')
                    : c && (f = ' (created by ' + c + ')');
                  c = '\n    in ' + (d || 'Unknown') + f;
              }
              b += c;
              a = a.return;
            } while (a);
            return b;
          }
          new Set();
          var Bb = [],
            Cb = -1;
          function y(a) {
            0 > Cb || ((a.current = Bb[Cb]), (Bb[Cb] = null), Cb--);
          }
          function z(a, b) {
            Cb++;
            Bb[Cb] = a.current;
            a.current = b;
          }
          var Db = {},
            A = { current: Db },
            B = { current: !1 },
            Eb = Db;
          function Fb(a, b) {
            var c = a.type.contextTypes;
            if (!c) return Db;
            var d = a.stateNode;
            if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
              return d.__reactInternalMemoizedMaskedChildContext;
            var e = {},
              f;
            for (f in c) e[f] = b[f];
            d &&
              ((a = a.stateNode),
              (a.__reactInternalMemoizedUnmaskedChildContext = b),
              (a.__reactInternalMemoizedMaskedChildContext = e));
            return e;
          }
          function C(a) {
            a = a.childContextTypes;
            return null !== a && void 0 !== a;
          }
          function Gb(a) {
            y(B, a);
            y(A, a);
          }
          function Hb(a) {
            y(B, a);
            y(A, a);
          }
          function Ib(a, b, c) {
            if (A.current !== Db) throw Error(n(168));
            z(A, b, a);
            z(B, c, a);
          }
          function Jb(a, b, c) {
            var d = a.stateNode;
            a = b.childContextTypes;
            if ('function' !== typeof d.getChildContext) return c;
            d = d.getChildContext();
            for (var e in d)
              if (!(e in a)) throw Error(n(108, ta(b) || 'Unknown', e));
            return aa({}, c, {}, d);
          }
          function Kb(a) {
            var b = a.stateNode;
            b = (b && b.__reactInternalMemoizedMergedChildContext) || Db;
            Eb = A.current;
            z(A, b, a);
            z(B, B.current, a);
            return !0;
          }
          function Lb(a, b, c) {
            var d = a.stateNode;
            if (!d) throw Error(n(169));
            c
              ? ((b = Jb(a, b, Eb)),
                (d.__reactInternalMemoizedMergedChildContext = b),
                y(B, a),
                y(A, a),
                z(A, b, a))
              : y(B, a);
            z(B, c, a);
          }
          var Mb = m.unstable_runWithPriority,
            Nb = m.unstable_scheduleCallback,
            Ob = m.unstable_cancelCallback,
            Pb = m.unstable_shouldYield,
            Qb = m.unstable_requestPaint,
            Rb = m.unstable_now,
            Ub = m.unstable_getCurrentPriorityLevel,
            Vb = m.unstable_ImmediatePriority,
            Wb = m.unstable_UserBlockingPriority,
            Xb = m.unstable_NormalPriority,
            Yb = m.unstable_LowPriority,
            Zb = m.unstable_IdlePriority,
            $b = {},
            ac = void 0 !== Qb ? Qb : function() {},
            bc = null,
            cc = null,
            dc = !1,
            ec = Rb(),
            E =
              1e4 > ec
                ? Rb
                : function() {
                    return Rb() - ec;
                  };
          function fc() {
            switch (Ub()) {
              case Vb:
                return 99;
              case Wb:
                return 98;
              case Xb:
                return 97;
              case Yb:
                return 96;
              case Zb:
                return 95;
              default:
                throw Error(n(332));
            }
          }
          function gc(a) {
            switch (a) {
              case 99:
                return Vb;
              case 98:
                return Wb;
              case 97:
                return Xb;
              case 96:
                return Yb;
              case 95:
                return Zb;
              default:
                throw Error(n(332));
            }
          }
          function hc(a, b) {
            a = gc(a);
            return Mb(a, b);
          }
          function ic(a, b, c) {
            a = gc(a);
            return Nb(a, b, c);
          }
          function jc(a) {
            null === bc ? ((bc = [a]), (cc = Nb(Vb, kc))) : bc.push(a);
            return $b;
          }
          function F() {
            if (null !== cc) {
              var a = cc;
              cc = null;
              Ob(a);
            }
            kc();
          }
          function kc() {
            if (!dc && null !== bc) {
              dc = !0;
              var a = 0;
              try {
                var b = bc;
                hc(99, function() {
                  for (; a < b.length; a++) {
                    var c = b[a];
                    do c = c(!0);
                    while (null !== c);
                  }
                });
                bc = null;
              } catch (c) {
                throw (null !== bc && (bc = bc.slice(a + 1)), Nb(Vb, F), c);
              } finally {
                dc = !1;
              }
            }
          }
          var lc = 3;
          function mc(a, b, c) {
            c /= 10;
            return 1073741821 - ((((1073741821 - a + b / 10) / c) | 0) + 1) * c;
          }
          function nc(a, b) {
            return (
              (a === b && (0 !== a || 1 / a === 1 / b)) || (a !== a && b !== b)
            );
          }
          var oc = 'function' === typeof Object.is ? Object.is : nc,
            pc = Object.prototype.hasOwnProperty;
          function qc(a, b) {
            if (oc(a, b)) return !0;
            if (
              'object' !== typeof a ||
              null === a ||
              'object' !== typeof b ||
              null === b
            )
              return !1;
            var c = Object.keys(a),
              d = Object.keys(b);
            if (c.length !== d.length) return !1;
            for (d = 0; d < c.length; d++)
              if (!pc.call(b, c[d]) || !oc(a[c[d]], b[c[d]])) return !1;
            return !0;
          }
          function rc(a, b) {
            if (a && a.defaultProps) {
              b = aa({}, b);
              a = a.defaultProps;
              for (var c in a) void 0 === b[c] && (b[c] = a[c]);
            }
            return b;
          }
          var sc = { current: null },
            tc = null,
            uc = null,
            vc = null;
          function wc() {
            vc = uc = tc = null;
          }
          function xc(a, b) {
            var c = a.type._context;
            Pa
              ? (z(sc, c._currentValue, a), (c._currentValue = b))
              : (z(sc, c._currentValue2, a), (c._currentValue2 = b));
          }
          function yc(a) {
            var b = sc.current;
            y(sc, a);
            a = a.type._context;
            Pa ? (a._currentValue = b) : (a._currentValue2 = b);
          }
          function zc(a, b) {
            for (; null !== a; ) {
              var c = a.alternate;
              if (a.childExpirationTime < b)
                (a.childExpirationTime = b),
                  null !== c &&
                    c.childExpirationTime < b &&
                    (c.childExpirationTime = b);
              else if (null !== c && c.childExpirationTime < b)
                c.childExpirationTime = b;
              else break;
              a = a.return;
            }
          }
          function Ac(a, b) {
            tc = a;
            vc = uc = null;
            a = a.dependencies;
            null !== a &&
              null !== a.firstContext &&
              (a.expirationTime >= b && (Bc = !0), (a.firstContext = null));
          }
          function Cc(a, b) {
            if (vc !== a && !1 !== b && 0 !== b) {
              if ('number' !== typeof b || 1073741823 === b)
                (vc = a), (b = 1073741823);
              b = { context: a, observedBits: b, next: null };
              if (null === uc) {
                if (null === tc) throw Error(n(308));
                uc = b;
                tc.dependencies = {
                  expirationTime: 0,
                  firstContext: b,
                  responders: null,
                };
              } else uc = uc.next = b;
            }
            return Pa ? a._currentValue : a._currentValue2;
          }
          var Dc = !1;
          function Ec(a) {
            return {
              baseState: a,
              firstUpdate: null,
              lastUpdate: null,
              firstCapturedUpdate: null,
              lastCapturedUpdate: null,
              firstEffect: null,
              lastEffect: null,
              firstCapturedEffect: null,
              lastCapturedEffect: null,
            };
          }
          function Fc(a) {
            return {
              baseState: a.baseState,
              firstUpdate: a.firstUpdate,
              lastUpdate: a.lastUpdate,
              firstCapturedUpdate: null,
              lastCapturedUpdate: null,
              firstEffect: null,
              lastEffect: null,
              firstCapturedEffect: null,
              lastCapturedEffect: null,
            };
          }
          function Gc(a, b) {
            return {
              expirationTime: a,
              suspenseConfig: b,
              tag: 0,
              payload: null,
              callback: null,
              next: null,
              nextEffect: null,
            };
          }
          function Hc(a, b) {
            null === a.lastUpdate
              ? (a.firstUpdate = a.lastUpdate = b)
              : ((a.lastUpdate.next = b), (a.lastUpdate = b));
          }
          function Ic(a, b) {
            var c = a.alternate;
            if (null === c) {
              var d = a.updateQueue;
              var e = null;
              null === d && (d = a.updateQueue = Ec(a.memoizedState));
            } else
              (d = a.updateQueue),
                (e = c.updateQueue),
                null === d
                  ? null === e
                    ? ((d = a.updateQueue = Ec(a.memoizedState)),
                      (e = c.updateQueue = Ec(c.memoizedState)))
                    : (d = a.updateQueue = Fc(e))
                  : null === e && (e = c.updateQueue = Fc(d));
            null === e || d === e
              ? Hc(d, b)
              : null === d.lastUpdate || null === e.lastUpdate
              ? (Hc(d, b), Hc(e, b))
              : (Hc(d, b), (e.lastUpdate = b));
          }
          function Jc(a, b) {
            var c = a.updateQueue;
            c = null === c ? (a.updateQueue = Ec(a.memoizedState)) : Kc(a, c);
            null === c.lastCapturedUpdate
              ? (c.firstCapturedUpdate = c.lastCapturedUpdate = b)
              : ((c.lastCapturedUpdate.next = b), (c.lastCapturedUpdate = b));
          }
          function Kc(a, b) {
            var c = a.alternate;
            null !== c && b === c.updateQueue && (b = a.updateQueue = Fc(b));
            return b;
          }
          function Lc(a, b, c, d, e, f) {
            switch (c.tag) {
              case 1:
                return (
                  (a = c.payload), 'function' === typeof a ? a.call(f, d, e) : a
                );
              case 3:
                a.effectTag = (a.effectTag & -4097) | 64;
              case 0:
                a = c.payload;
                e = 'function' === typeof a ? a.call(f, d, e) : a;
                if (null === e || void 0 === e) break;
                return aa({}, d, e);
              case 2:
                Dc = !0;
            }
            return d;
          }
          function Nc(a, b, c, d, e) {
            Dc = !1;
            b = Kc(a, b);
            for (
              var f = b.baseState, g = null, l = 0, h = b.firstUpdate, k = f;
              null !== h;

            ) {
              var p = h.expirationTime;
              p < e
                ? (null === g && ((g = h), (f = k)), l < p && (l = p))
                : (Oc(p, h.suspenseConfig),
                  (k = Lc(a, b, h, k, c, d)),
                  null !== h.callback &&
                    ((a.effectTag |= 32),
                    (h.nextEffect = null),
                    null === b.lastEffect
                      ? (b.firstEffect = b.lastEffect = h)
                      : ((b.lastEffect.nextEffect = h), (b.lastEffect = h))));
              h = h.next;
            }
            p = null;
            for (h = b.firstCapturedUpdate; null !== h; ) {
              var D = h.expirationTime;
              D < e
                ? (null === p && ((p = h), null === g && (f = k)),
                  l < D && (l = D))
                : ((k = Lc(a, b, h, k, c, d)),
                  null !== h.callback &&
                    ((a.effectTag |= 32),
                    (h.nextEffect = null),
                    null === b.lastCapturedEffect
                      ? (b.firstCapturedEffect = b.lastCapturedEffect = h)
                      : ((b.lastCapturedEffect.nextEffect = h),
                        (b.lastCapturedEffect = h))));
              h = h.next;
            }
            null === g && (b.lastUpdate = null);
            null === p ? (b.lastCapturedUpdate = null) : (a.effectTag |= 32);
            null === g && null === p && (f = k);
            b.baseState = f;
            b.firstUpdate = g;
            b.firstCapturedUpdate = p;
            Pc(l);
            a.expirationTime = l;
            a.memoizedState = k;
          }
          function Qc(a, b, c) {
            null !== b.firstCapturedUpdate &&
              (null !== b.lastUpdate &&
                ((b.lastUpdate.next = b.firstCapturedUpdate),
                (b.lastUpdate = b.lastCapturedUpdate)),
              (b.firstCapturedUpdate = b.lastCapturedUpdate = null));
            Rc(b.firstEffect, c);
            b.firstEffect = b.lastEffect = null;
            Rc(b.firstCapturedEffect, c);
            b.firstCapturedEffect = b.lastCapturedEffect = null;
          }
          function Rc(a, b) {
            for (; null !== a; ) {
              var c = a.callback;
              if (null !== c) {
                a.callback = null;
                var d = b;
                if ('function' !== typeof c) throw Error(n(191, c));
                c.call(d);
              }
              a = a.nextEffect;
            }
          }
          var Sc = q.ReactCurrentBatchConfig,
            Tc = new ba.Component().refs;
          function Uc(a, b, c, d) {
            b = a.memoizedState;
            c = c(d, b);
            c = null === c || void 0 === c ? b : aa({}, b, c);
            a.memoizedState = c;
            d = a.updateQueue;
            null !== d && 0 === a.expirationTime && (d.baseState = c);
          }
          var Xc = {
            isMounted: function(a) {
              return (a = a._reactInternalFiber) ? ua(a) === a : !1;
            },
            enqueueSetState: function(a, b, c) {
              a = a._reactInternalFiber;
              var d = G(),
                e = Sc.suspense;
              d = Vc(d, a, e);
              e = Gc(d, e);
              e.payload = b;
              void 0 !== c && null !== c && (e.callback = c);
              Ic(a, e);
              Wc(a, d);
            },
            enqueueReplaceState: function(a, b, c) {
              a = a._reactInternalFiber;
              var d = G(),
                e = Sc.suspense;
              d = Vc(d, a, e);
              e = Gc(d, e);
              e.tag = 1;
              e.payload = b;
              void 0 !== c && null !== c && (e.callback = c);
              Ic(a, e);
              Wc(a, d);
            },
            enqueueForceUpdate: function(a, b) {
              a = a._reactInternalFiber;
              var c = G(),
                d = Sc.suspense;
              c = Vc(c, a, d);
              d = Gc(c, d);
              d.tag = 2;
              void 0 !== b && null !== b && (d.callback = b);
              Ic(a, d);
              Wc(a, c);
            },
          };
          function Yc(a, b, c, d, e, f, g) {
            a = a.stateNode;
            return 'function' === typeof a.shouldComponentUpdate
              ? a.shouldComponentUpdate(d, f, g)
              : b.prototype && b.prototype.isPureReactComponent
              ? !qc(c, d) || !qc(e, f)
              : !0;
          }
          function Zc(a, b, c) {
            var d = !1,
              e = Db;
            var f = b.contextType;
            'object' === typeof f && null !== f
              ? (f = Cc(f))
              : ((e = C(b) ? Eb : A.current),
                (d = b.contextTypes),
                (f = (d = null !== d && void 0 !== d) ? Fb(a, e) : Db));
            b = new b(c, f);
            a.memoizedState =
              null !== b.state && void 0 !== b.state ? b.state : null;
            b.updater = Xc;
            a.stateNode = b;
            b._reactInternalFiber = a;
            d &&
              ((a = a.stateNode),
              (a.__reactInternalMemoizedUnmaskedChildContext = e),
              (a.__reactInternalMemoizedMaskedChildContext = f));
            return b;
          }
          function $c(a, b, c, d) {
            a = b.state;
            'function' === typeof b.componentWillReceiveProps &&
              b.componentWillReceiveProps(c, d);
            'function' === typeof b.UNSAFE_componentWillReceiveProps &&
              b.UNSAFE_componentWillReceiveProps(c, d);
            b.state !== a && Xc.enqueueReplaceState(b, b.state, null);
          }
          function ad(a, b, c, d) {
            var e = a.stateNode;
            e.props = c;
            e.state = a.memoizedState;
            e.refs = Tc;
            var f = b.contextType;
            'object' === typeof f && null !== f
              ? (e.context = Cc(f))
              : ((f = C(b) ? Eb : A.current), (e.context = Fb(a, f)));
            f = a.updateQueue;
            null !== f && (Nc(a, f, c, e, d), (e.state = a.memoizedState));
            f = b.getDerivedStateFromProps;
            'function' === typeof f &&
              (Uc(a, b, f, c), (e.state = a.memoizedState));
            'function' === typeof b.getDerivedStateFromProps ||
              'function' === typeof e.getSnapshotBeforeUpdate ||
              ('function' !== typeof e.UNSAFE_componentWillMount &&
                'function' !== typeof e.componentWillMount) ||
              ((b = e.state),
              'function' === typeof e.componentWillMount &&
                e.componentWillMount(),
              'function' === typeof e.UNSAFE_componentWillMount &&
                e.UNSAFE_componentWillMount(),
              b !== e.state && Xc.enqueueReplaceState(e, e.state, null),
              (f = a.updateQueue),
              null !== f && (Nc(a, f, c, e, d), (e.state = a.memoizedState)));
            'function' === typeof e.componentDidMount && (a.effectTag |= 4);
          }
          var bd = Array.isArray;
          function cd(a, b, c) {
            a = c.ref;
            if (
              null !== a &&
              'function' !== typeof a &&
              'object' !== typeof a
            ) {
              if (c._owner) {
                c = c._owner;
                if (c) {
                  if (1 !== c.tag) throw Error(n(309));
                  var d = c.stateNode;
                }
                if (!d) throw Error(n(147, a));
                var e = '' + a;
                if (
                  null !== b &&
                  null !== b.ref &&
                  'function' === typeof b.ref &&
                  b.ref._stringRef === e
                )
                  return b.ref;
                b = function(b) {
                  var a = d.refs;
                  a === Tc && (a = d.refs = {});
                  null === b ? delete a[e] : (a[e] = b);
                };
                b._stringRef = e;
                return b;
              }
              if ('string' !== typeof a) throw Error(n(284));
              if (!c._owner) throw Error(n(290, a));
            }
            return a;
          }
          function dd(a, b) {
            if ('textarea' !== a.type)
              throw Error(
                n(
                  31,
                  '[object Object]' === Object.prototype.toString.call(b)
                    ? 'object with keys {' + Object.keys(b).join(', ') + '}'
                    : b,
                  ''
                )
              );
          }
          function ed(a) {
            function b(b, c) {
              if (a) {
                var d = b.lastEffect;
                null !== d
                  ? ((d.nextEffect = c), (b.lastEffect = c))
                  : (b.firstEffect = b.lastEffect = c);
                c.nextEffect = null;
                c.effectTag = 8;
              }
            }
            function c(c, d) {
              if (!a) return null;
              for (; null !== d; ) b(c, d), (d = d.sibling);
              return null;
            }
            function d(b, a) {
              for (b = new Map(); null !== a; )
                null !== a.key ? b.set(a.key, a) : b.set(a.index, a),
                  (a = a.sibling);
              return b;
            }
            function e(b, a, c) {
              b = fd(b, a, c);
              b.index = 0;
              b.sibling = null;
              return b;
            }
            function f(b, c, d) {
              b.index = d;
              if (!a) return c;
              d = b.alternate;
              if (null !== d)
                return (d = d.index), d < c ? ((b.effectTag = 2), c) : d;
              b.effectTag = 2;
              return c;
            }
            function g(b) {
              a && null === b.alternate && (b.effectTag = 2);
              return b;
            }
            function l(b, a, c, d) {
              if (null === a || 6 !== a.tag)
                return (a = gd(c, b.mode, d)), (a.return = b), a;
              a = e(a, c, d);
              a.return = b;
              return a;
            }
            function h(b, a, c, d) {
              if (null !== a && a.elementType === c.type)
                return (
                  (d = e(a, c.props, d)),
                  (d.ref = cd(b, a, c)),
                  (d.return = b),
                  d
                );
              d = hd(c.type, c.key, c.props, null, b.mode, d);
              d.ref = cd(b, a, c);
              d.return = b;
              return d;
            }
            function k(b, a, c, d) {
              if (
                null === a ||
                4 !== a.tag ||
                a.stateNode.containerInfo !== c.containerInfo ||
                a.stateNode.implementation !== c.implementation
              )
                return (a = id(c, b.mode, d)), (a.return = b), a;
              a = e(a, c.children || [], d);
              a.return = b;
              return a;
            }
            function p(b, a, c, d, f) {
              if (null === a || 7 !== a.tag)
                return (a = jd(c, b.mode, d, f)), (a.return = b), a;
              a = e(a, c, d);
              a.return = b;
              return a;
            }
            function D(b, a, c) {
              if ('string' === typeof a || 'number' === typeof a)
                return (a = gd('' + a, b.mode, c)), (a.return = b), a;
              if ('object' === typeof a && null !== a) {
                switch (a.$$typeof) {
                  case ca:
                    return (
                      (c = hd(a.type, a.key, a.props, null, b.mode, c)),
                      (c.ref = cd(b, null, a)),
                      (c.return = b),
                      c
                    );
                  case da:
                    return (a = id(a, b.mode, c)), (a.return = b), a;
                }
                if (bd(a) || ra(a))
                  return (a = jd(a, b.mode, c, null)), (a.return = b), a;
                dd(b, a);
              }
              return null;
            }
            function x(b, a, c, d) {
              var e = null !== a ? a.key : null;
              if ('string' === typeof c || 'number' === typeof c)
                return null !== e ? null : l(b, a, '' + c, d);
              if ('object' === typeof c && null !== c) {
                switch (c.$$typeof) {
                  case ca:
                    return c.key === e
                      ? c.type === ea
                        ? p(b, a, c.props.children, d, e)
                        : h(b, a, c, d)
                      : null;
                  case da:
                    return c.key === e ? k(b, a, c, d) : null;
                }
                if (bd(c) || ra(c))
                  return null !== e ? null : p(b, a, c, d, null);
                dd(b, c);
              }
              return null;
            }
            function K(b, a, c, d, e) {
              if ('string' === typeof d || 'number' === typeof d)
                return (b = b.get(c) || null), l(a, b, '' + d, e);
              if ('object' === typeof d && null !== d) {
                switch (d.$$typeof) {
                  case ca:
                    return (
                      (b = b.get(null === d.key ? c : d.key) || null),
                      d.type === ea
                        ? p(a, b, d.props.children, e, d.key)
                        : h(a, b, d, e)
                    );
                  case da:
                    return (
                      (b = b.get(null === d.key ? c : d.key) || null),
                      k(a, b, d, e)
                    );
                }
                if (bd(d) || ra(d))
                  return (b = b.get(c) || null), p(a, b, d, e, null);
                dd(a, d);
              }
              return null;
            }
            function Ha(e, g, h, l) {
              for (
                var k = null, w = null, t = g, r = (g = 0), p = null;
                null !== t && r < h.length;
                r++
              ) {
                t.index > r ? ((p = t), (t = null)) : (p = t.sibling);
                var v = x(e, t, h[r], l);
                if (null === v) {
                  null === t && (t = p);
                  break;
                }
                a && t && null === v.alternate && b(e, t);
                g = f(v, g, r);
                null === w ? (k = v) : (w.sibling = v);
                w = v;
                t = p;
              }
              if (r === h.length) return c(e, t), k;
              if (null === t) {
                for (; r < h.length; r++)
                  (t = D(e, h[r], l)),
                    null !== t &&
                      ((g = f(t, g, r)),
                      null === w ? (k = t) : (w.sibling = t),
                      (w = t));
                return k;
              }
              for (t = d(e, t); r < h.length; r++)
                (p = K(t, e, r, h[r], l)),
                  null !== p &&
                    (a &&
                      null !== p.alternate &&
                      t.delete(null === p.key ? r : p.key),
                    (g = f(p, g, r)),
                    null === w ? (k = p) : (w.sibling = p),
                    (w = p));
              a &&
                t.forEach(function(a) {
                  return b(e, a);
                });
              return k;
            }
            function O(e, g, h, l) {
              var k = ra(h);
              if ('function' !== typeof k) throw Error(n(150));
              h = k.call(h);
              if (null == h) throw Error(n(151));
              for (
                var t = (k = null), r = g, w = (g = 0), p = null, v = h.next();
                null !== r && !v.done;
                w++, v = h.next()
              ) {
                r.index > w ? ((p = r), (r = null)) : (p = r.sibling);
                var N = x(e, r, v.value, l);
                if (null === N) {
                  null === r && (r = p);
                  break;
                }
                a && r && null === N.alternate && b(e, r);
                g = f(N, g, w);
                null === t ? (k = N) : (t.sibling = N);
                t = N;
                r = p;
              }
              if (v.done) return c(e, r), k;
              if (null === r) {
                for (; !v.done; w++, v = h.next())
                  (v = D(e, v.value, l)),
                    null !== v &&
                      ((g = f(v, g, w)),
                      null === t ? (k = v) : (t.sibling = v),
                      (t = v));
                return k;
              }
              for (r = d(e, r); !v.done; w++, v = h.next())
                (v = K(r, e, w, v.value, l)),
                  null !== v &&
                    (a &&
                      null !== v.alternate &&
                      r.delete(null === v.key ? w : v.key),
                    (g = f(v, g, w)),
                    null === t ? (k = v) : (t.sibling = v),
                    (t = v));
              a &&
                r.forEach(function(a) {
                  return b(e, a);
                });
              return k;
            }
            return function(a, d, f, h) {
              var k =
                'object' === typeof f &&
                null !== f &&
                f.type === ea &&
                null === f.key;
              k && (f = f.props.children);
              var l = 'object' === typeof f && null !== f;
              if (l)
                switch (f.$$typeof) {
                  case ca:
                    a: {
                      l = f.key;
                      for (k = d; null !== k; ) {
                        if (k.key === l)
                          if (
                            7 === k.tag
                              ? f.type === ea
                              : k.elementType === f.type
                          ) {
                            c(a, k.sibling);
                            d = e(
                              k,
                              f.type === ea ? f.props.children : f.props,
                              h
                            );
                            d.ref = cd(a, k, f);
                            d.return = a;
                            a = d;
                            break a;
                          } else {
                            c(a, k);
                            break;
                          }
                        else b(a, k);
                        k = k.sibling;
                      }
                      f.type === ea
                        ? ((d = jd(f.props.children, a.mode, h, f.key)),
                          (d.return = a),
                          (a = d))
                        : ((h = hd(f.type, f.key, f.props, null, a.mode, h)),
                          (h.ref = cd(a, d, f)),
                          (h.return = a),
                          (a = h));
                    }
                    return g(a);
                  case da:
                    a: {
                      for (k = f.key; null !== d; ) {
                        if (d.key === k)
                          if (
                            4 === d.tag &&
                            d.stateNode.containerInfo === f.containerInfo &&
                            d.stateNode.implementation === f.implementation
                          ) {
                            c(a, d.sibling);
                            d = e(d, f.children || [], h);
                            d.return = a;
                            a = d;
                            break a;
                          } else {
                            c(a, d);
                            break;
                          }
                        else b(a, d);
                        d = d.sibling;
                      }
                      d = id(f, a.mode, h);
                      d.return = a;
                      a = d;
                    }
                    return g(a);
                }
              if ('string' === typeof f || 'number' === typeof f)
                return (
                  (f = '' + f),
                  null !== d && 6 === d.tag
                    ? (c(a, d.sibling),
                      (d = e(d, f, h)),
                      (d.return = a),
                      (a = d))
                    : (c(a, d),
                      (d = gd(f, a.mode, h)),
                      (d.return = a),
                      (a = d)),
                  g(a)
                );
              if (bd(f)) return Ha(a, d, f, h);
              if (ra(f)) return O(a, d, f, h);
              l && dd(a, f);
              if ('undefined' === typeof f && !k)
                switch (a.tag) {
                  case 1:
                  case 0:
                    throw ((a = a.type),
                    Error(n(152, a.displayName || a.name || 'Component')));
                }
              return c(a, d);
            };
          }
          var kd = ed(!0),
            ld = ed(!1),
            md = {},
            H = { current: md },
            nd = { current: md },
            od = { current: md };
          function pd(a) {
            if (a === md) throw Error(n(174));
            return a;
          }
          function qd(a, b) {
            z(od, b, a);
            z(nd, a, a);
            z(H, md, a);
            b = Aa(b);
            y(H, a);
            z(H, b, a);
          }
          function rd(a) {
            y(H, a);
            y(nd, a);
            y(od, a);
          }
          function sd(a) {
            var b = pd(od.current),
              c = pd(H.current);
            b = Ba(c, a.type, b);
            c !== b && (z(nd, a, a), z(H, b, a));
          }
          function td(a) {
            nd.current === a && (y(H, a), y(nd, a));
          }
          var I = { current: 0 };
          function ud(a) {
            for (var b = a; null !== b; ) {
              if (13 === b.tag) {
                var c = b.memoizedState;
                if (
                  null !== c &&
                  ((c = c.dehydrated), null === c || qb(c) || rb(c))
                )
                  return b;
              } else if (
                19 === b.tag &&
                void 0 !== b.memoizedProps.revealOrder
              ) {
                if (0 !== (b.effectTag & 64)) return b;
              } else if (null !== b.child) {
                b.child.return = b;
                b = b.child;
                continue;
              }
              if (b === a) break;
              for (; null === b.sibling; ) {
                if (null === b.return || b.return === a) return null;
                b = b.return;
              }
              b.sibling.return = b.return;
              b = b.sibling;
            }
            return null;
          }
          function vd(a, b) {
            return { responder: a, props: b };
          }
          var wd = q.ReactCurrentDispatcher,
            J = q.ReactCurrentBatchConfig,
            xd = 0,
            yd = null,
            L = null,
            zd = null,
            Ad = null,
            M = null,
            Bd = null,
            Cd = 0,
            Dd = null,
            Ed = 0,
            Fd = !1,
            Gd = null,
            Hd = 0;
          function P() {
            throw Error(n(321));
          }
          function Id(a, b) {
            if (null === b) return !1;
            for (var c = 0; c < b.length && c < a.length; c++)
              if (!oc(a[c], b[c])) return !1;
            return !0;
          }
          function Jd(a, b, c, d, e, f) {
            xd = f;
            yd = b;
            zd = null !== a ? a.memoizedState : null;
            wd.current = null === zd ? Kd : Ld;
            b = c(d, e);
            if (Fd) {
              do
                (Fd = !1),
                  (Hd += 1),
                  (zd = null !== a ? a.memoizedState : null),
                  (Bd = Ad),
                  (Dd = M = L = null),
                  (wd.current = Ld),
                  (b = c(d, e));
              while (Fd);
              Gd = null;
              Hd = 0;
            }
            wd.current = Md;
            a = yd;
            a.memoizedState = Ad;
            a.expirationTime = Cd;
            a.updateQueue = Dd;
            a.effectTag |= Ed;
            a = null !== L && null !== L.next;
            xd = 0;
            Bd = M = Ad = zd = L = yd = null;
            Cd = 0;
            Dd = null;
            Ed = 0;
            if (a) throw Error(n(300));
            return b;
          }
          function Nd() {
            wd.current = Md;
            xd = 0;
            Bd = M = Ad = zd = L = yd = null;
            Cd = 0;
            Dd = null;
            Ed = 0;
            Fd = !1;
            Gd = null;
            Hd = 0;
          }
          function Od() {
            var a = {
              memoizedState: null,
              baseState: null,
              queue: null,
              baseUpdate: null,
              next: null,
            };
            null === M ? (Ad = M = a) : (M = M.next = a);
            return M;
          }
          function Pd() {
            if (null !== Bd)
              (M = Bd),
                (Bd = M.next),
                (L = zd),
                (zd = null !== L ? L.next : null);
            else {
              if (null === zd) throw Error(n(310));
              L = zd;
              var a = {
                memoizedState: L.memoizedState,
                baseState: L.baseState,
                queue: L.queue,
                baseUpdate: L.baseUpdate,
                next: null,
              };
              M = null === M ? (Ad = a) : (M.next = a);
              zd = L.next;
            }
            return M;
          }
          function Qd(a, b) {
            return 'function' === typeof b ? b(a) : b;
          }
          function Rd(a) {
            var b = Pd(),
              c = b.queue;
            if (null === c) throw Error(n(311));
            c.lastRenderedReducer = a;
            if (0 < Hd) {
              var d = c.dispatch;
              if (null !== Gd) {
                var e = Gd.get(c);
                if (void 0 !== e) {
                  Gd.delete(c);
                  var f = b.memoizedState;
                  do (f = a(f, e.action)), (e = e.next);
                  while (null !== e);
                  oc(f, b.memoizedState) || (Bc = !0);
                  b.memoizedState = f;
                  b.baseUpdate === c.last && (b.baseState = f);
                  c.lastRenderedState = f;
                  return [f, d];
                }
              }
              return [b.memoizedState, d];
            }
            d = c.last;
            var g = b.baseUpdate;
            f = b.baseState;
            null !== g
              ? (null !== d && (d.next = null), (d = g.next))
              : (d = null !== d ? d.next : null);
            if (null !== d) {
              var l = (e = null),
                h = d,
                k = !1;
              do {
                var p = h.expirationTime;
                p < xd
                  ? (k || ((k = !0), (l = g), (e = f)),
                    p > Cd && ((Cd = p), Pc(Cd)))
                  : (Oc(p, h.suspenseConfig),
                    (f = h.eagerReducer === a ? h.eagerState : a(f, h.action)));
                g = h;
                h = h.next;
              } while (null !== h && h !== d);
              k || ((l = g), (e = f));
              oc(f, b.memoizedState) || (Bc = !0);
              b.memoizedState = f;
              b.baseUpdate = l;
              b.baseState = e;
              c.lastRenderedState = f;
            }
            return [b.memoizedState, c.dispatch];
          }
          function Sd(a) {
            var b = Od();
            'function' === typeof a && (a = a());
            b.memoizedState = b.baseState = a;
            a = b.queue = {
              last: null,
              dispatch: null,
              lastRenderedReducer: Qd,
              lastRenderedState: a,
            };
            a = a.dispatch = Td.bind(null, yd, a);
            return [b.memoizedState, a];
          }
          function Ud(a) {
            return Rd(Qd, a);
          }
          function Vd(a, b, c, d) {
            a = { tag: a, create: b, destroy: c, deps: d, next: null };
            null === Dd
              ? ((Dd = { lastEffect: null }), (Dd.lastEffect = a.next = a))
              : ((b = Dd.lastEffect),
                null === b
                  ? (Dd.lastEffect = a.next = a)
                  : ((c = b.next),
                    (b.next = a),
                    (a.next = c),
                    (Dd.lastEffect = a)));
            return a;
          }
          function Wd(a, b, c, d) {
            var e = Od();
            Ed |= a;
            e.memoizedState = Vd(b, c, void 0, void 0 === d ? null : d);
          }
          function Xd(a, b, c, d) {
            var e = Pd();
            d = void 0 === d ? null : d;
            var f = void 0;
            if (null !== L) {
              var g = L.memoizedState;
              f = g.destroy;
              if (null !== d && Id(d, g.deps)) {
                Vd(0, c, f, d);
                return;
              }
            }
            Ed |= a;
            e.memoizedState = Vd(b, c, f, d);
          }
          function Yd(a, b) {
            return Wd(516, 192, a, b);
          }
          function Zd(a, b) {
            return Xd(516, 192, a, b);
          }
          function $d(a, b) {
            if ('function' === typeof b)
              return (
                (a = a()),
                b(a),
                function() {
                  b(null);
                }
              );
            if (null !== b && void 0 !== b)
              return (
                (a = a()),
                (b.current = a),
                function() {
                  b.current = null;
                }
              );
          }
          function ae() {}
          function be(a, b) {
            Od().memoizedState = [a, void 0 === b ? null : b];
            return a;
          }
          function ce(a, b) {
            var c = Pd();
            b = void 0 === b ? null : b;
            var d = c.memoizedState;
            if (null !== d && null !== b && Id(b, d[1])) return d[0];
            c.memoizedState = [a, b];
            return a;
          }
          function Td(a, b, c) {
            if (!(25 > Hd)) throw Error(n(301));
            var d = a.alternate;
            if (a === yd || (null !== d && d === yd))
              if (
                ((Fd = !0),
                (a = {
                  expirationTime: xd,
                  suspenseConfig: null,
                  action: c,
                  eagerReducer: null,
                  eagerState: null,
                  next: null,
                }),
                null === Gd && (Gd = new Map()),
                (c = Gd.get(b)),
                void 0 === c)
              )
                Gd.set(b, a);
              else {
                for (b = c; null !== b.next; ) b = b.next;
                b.next = a;
              }
            else {
              var e = G(),
                f = Sc.suspense;
              e = Vc(e, a, f);
              f = {
                expirationTime: e,
                suspenseConfig: f,
                action: c,
                eagerReducer: null,
                eagerState: null,
                next: null,
              };
              var g = b.last;
              if (null === g) f.next = f;
              else {
                var l = g.next;
                null !== l && (f.next = l);
                g.next = f;
              }
              b.last = f;
              if (
                0 === a.expirationTime &&
                (null === d || 0 === d.expirationTime) &&
                ((d = b.lastRenderedReducer), null !== d)
              )
                try {
                  var h = b.lastRenderedState,
                    k = d(h, c);
                  f.eagerReducer = d;
                  f.eagerState = k;
                  if (oc(k, h)) return;
                } catch (p) {
                } finally {
                }
              Wc(a, e);
            }
          }
          var Md = {
              readContext: Cc,
              useCallback: P,
              useContext: P,
              useEffect: P,
              useImperativeHandle: P,
              useLayoutEffect: P,
              useMemo: P,
              useReducer: P,
              useRef: P,
              useState: P,
              useDebugValue: P,
              useResponder: P,
              useDeferredValue: P,
              useTransition: P,
            },
            Kd = {
              readContext: Cc,
              useCallback: be,
              useContext: Cc,
              useEffect: Yd,
              useImperativeHandle: function(a, b, c) {
                c = null !== c && void 0 !== c ? c.concat([a]) : null;
                return Wd(4, 36, $d.bind(null, b, a), c);
              },
              useLayoutEffect: function(a, b) {
                return Wd(4, 36, a, b);
              },
              useMemo: function(a, b) {
                var c = Od();
                b = void 0 === b ? null : b;
                a = a();
                c.memoizedState = [a, b];
                return a;
              },
              useReducer: function(a, b, c) {
                var d = Od();
                b = void 0 !== c ? c(b) : b;
                d.memoizedState = d.baseState = b;
                a = d.queue = {
                  last: null,
                  dispatch: null,
                  lastRenderedReducer: a,
                  lastRenderedState: b,
                };
                a = a.dispatch = Td.bind(null, yd, a);
                return [d.memoizedState, a];
              },
              useRef: function(a) {
                var b = Od();
                a = { current: a };
                return (b.memoizedState = a);
              },
              useState: Sd,
              useDebugValue: ae,
              useResponder: vd,
              useDeferredValue: function(a, b) {
                var c = Sd(a),
                  d = c[0],
                  e = c[1];
                Yd(
                  function() {
                    m.unstable_next(function() {
                      var c = J.suspense;
                      J.suspense = void 0 === b ? null : b;
                      try {
                        e(a);
                      } finally {
                        J.suspense = c;
                      }
                    });
                  },
                  [a, b]
                );
                return d;
              },
              useTransition: function(a) {
                var b = Sd(!1),
                  c = b[0],
                  d = b[1];
                return [
                  be(
                    function(b) {
                      d(!0);
                      m.unstable_next(function() {
                        var c = J.suspense;
                        J.suspense = void 0 === a ? null : a;
                        try {
                          d(!1), b();
                        } finally {
                          J.suspense = c;
                        }
                      });
                    },
                    [a, c]
                  ),
                  c,
                ];
              },
            },
            Ld = {
              readContext: Cc,
              useCallback: ce,
              useContext: Cc,
              useEffect: Zd,
              useImperativeHandle: function(a, b, c) {
                c = null !== c && void 0 !== c ? c.concat([a]) : null;
                return Xd(4, 36, $d.bind(null, b, a), c);
              },
              useLayoutEffect: function(a, b) {
                return Xd(4, 36, a, b);
              },
              useMemo: function(a, b) {
                var c = Pd();
                b = void 0 === b ? null : b;
                var d = c.memoizedState;
                if (null !== d && null !== b && Id(b, d[1])) return d[0];
                a = a();
                c.memoizedState = [a, b];
                return a;
              },
              useReducer: Rd,
              useRef: function() {
                return Pd().memoizedState;
              },
              useState: Ud,
              useDebugValue: ae,
              useResponder: vd,
              useDeferredValue: function(a, b) {
                var c = Ud(a),
                  d = c[0],
                  e = c[1];
                Zd(
                  function() {
                    m.unstable_next(function() {
                      var c = J.suspense;
                      J.suspense = void 0 === b ? null : b;
                      try {
                        e(a);
                      } finally {
                        J.suspense = c;
                      }
                    });
                  },
                  [a, b]
                );
                return d;
              },
              useTransition: function(a) {
                var b = Ud(!1),
                  c = b[0],
                  d = b[1];
                return [
                  ce(
                    function(b) {
                      d(!0);
                      m.unstable_next(function() {
                        var c = J.suspense;
                        J.suspense = void 0 === a ? null : a;
                        try {
                          d(!1), b();
                        } finally {
                          J.suspense = c;
                        }
                      });
                    },
                    [a, c]
                  ),
                  c,
                ];
              },
            },
            de = null,
            ee = null,
            fe = !1;
          function ge(a, b) {
            var c = he(5, null, null, 0);
            c.elementType = 'DELETED';
            c.type = 'DELETED';
            c.stateNode = b;
            c.return = a;
            c.effectTag = 8;
            null !== a.lastEffect
              ? ((a.lastEffect.nextEffect = c), (a.lastEffect = c))
              : (a.firstEffect = a.lastEffect = c);
          }
          function ie(a, b) {
            switch (a.tag) {
              case 5:
                return (
                  (b = ob(b, a.type, a.pendingProps)),
                  null !== b ? ((a.stateNode = b), !0) : !1
                );
              case 6:
                return (
                  (b = pb(b, a.pendingProps)),
                  null !== b ? ((a.stateNode = b), !0) : !1
                );
              case 13:
                return !1;
              default:
                return !1;
            }
          }
          function je(a) {
            if (fe) {
              var b = ee;
              if (b) {
                var c = b;
                if (!ie(a, b)) {
                  b = sb(c);
                  if (!b || !ie(a, b)) {
                    a.effectTag = (a.effectTag & -1025) | 2;
                    fe = !1;
                    de = a;
                    return;
                  }
                  ge(de, c);
                }
                de = a;
                ee = tb(b);
              } else
                (a.effectTag = (a.effectTag & -1025) | 2), (fe = !1), (de = a);
            }
          }
          function ke(a) {
            for (
              a = a.return;
              null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;

            )
              a = a.return;
            de = a;
          }
          function ne(a) {
            if (!Sa || a !== de) return !1;
            if (!fe) return ke(a), (fe = !0), !1;
            var b = a.type;
            if (
              5 !== a.tag ||
              ('head' !== b && 'body' !== b && !Ja(b, a.memoizedProps))
            )
              for (b = ee; b; ) ge(a, b), (b = sb(b));
            ke(a);
            if (13 === a.tag) {
              if (!Sa) throw Error(n(316));
              a = a.memoizedState;
              a = null !== a ? a.dehydrated : null;
              if (!a) throw Error(n(317));
              ee = wb(a);
            } else ee = de ? sb(a.stateNode) : null;
            return !0;
          }
          function oe() {
            Sa && ((ee = de = null), (fe = !1));
          }
          var pe = q.ReactCurrentOwner,
            Bc = !1;
          function Q(a, b, c, d) {
            b.child = null === a ? ld(b, null, c, d) : kd(b, a.child, c, d);
          }
          function qe(a, b, c, d, e) {
            c = c.render;
            var f = b.ref;
            Ac(b, e);
            d = Jd(a, b, c, d, f, e);
            if (null !== a && !Bc)
              return (
                (b.updateQueue = a.updateQueue),
                (b.effectTag &= -517),
                a.expirationTime <= e && (a.expirationTime = 0),
                re(a, b, e)
              );
            b.effectTag |= 1;
            Q(a, b, d, e);
            return b.child;
          }
          function se(a, b, c, d, e, f) {
            if (null === a) {
              var g = c.type;
              if (
                'function' === typeof g &&
                !te(g) &&
                void 0 === g.defaultProps &&
                null === c.compare &&
                void 0 === c.defaultProps
              )
                return (b.tag = 15), (b.type = g), ue(a, b, g, d, e, f);
              a = hd(c.type, null, d, null, b.mode, f);
              a.ref = b.ref;
              a.return = b;
              return (b.child = a);
            }
            g = a.child;
            if (
              e < f &&
              ((e = g.memoizedProps),
              (c = c.compare),
              (c = null !== c ? c : qc),
              c(e, d) && a.ref === b.ref)
            )
              return re(a, b, f);
            b.effectTag |= 1;
            a = fd(g, d, f);
            a.ref = b.ref;
            a.return = b;
            return (b.child = a);
          }
          function ue(a, b, c, d, e, f) {
            return null !== a &&
              qc(a.memoizedProps, d) &&
              a.ref === b.ref &&
              ((Bc = !1), e < f)
              ? re(a, b, f)
              : ve(a, b, c, d, f);
          }
          function we(a, b) {
            var c = b.ref;
            if ((null === a && null !== c) || (null !== a && a.ref !== c))
              b.effectTag |= 128;
          }
          function ve(a, b, c, d, e) {
            var f = C(c) ? Eb : A.current;
            f = Fb(b, f);
            Ac(b, e);
            c = Jd(a, b, c, d, f, e);
            if (null !== a && !Bc)
              return (
                (b.updateQueue = a.updateQueue),
                (b.effectTag &= -517),
                a.expirationTime <= e && (a.expirationTime = 0),
                re(a, b, e)
              );
            b.effectTag |= 1;
            Q(a, b, c, e);
            return b.child;
          }
          function xe(a, b, c, d, e) {
            if (C(c)) {
              var f = !0;
              Kb(b);
            } else f = !1;
            Ac(b, e);
            if (null === b.stateNode)
              null !== a &&
                ((a.alternate = null),
                (b.alternate = null),
                (b.effectTag |= 2)),
                Zc(b, c, d, e),
                ad(b, c, d, e),
                (d = !0);
            else if (null === a) {
              var g = b.stateNode,
                l = b.memoizedProps;
              g.props = l;
              var h = g.context,
                k = c.contextType;
              'object' === typeof k && null !== k
                ? (k = Cc(k))
                : ((k = C(c) ? Eb : A.current), (k = Fb(b, k)));
              var p = c.getDerivedStateFromProps,
                D =
                  'function' === typeof p ||
                  'function' === typeof g.getSnapshotBeforeUpdate;
              D ||
                ('function' !== typeof g.UNSAFE_componentWillReceiveProps &&
                  'function' !== typeof g.componentWillReceiveProps) ||
                ((l !== d || h !== k) && $c(b, g, d, k));
              Dc = !1;
              var x = b.memoizedState;
              h = g.state = x;
              var K = b.updateQueue;
              null !== K && (Nc(b, K, d, g, e), (h = b.memoizedState));
              l !== d || x !== h || B.current || Dc
                ? ('function' === typeof p &&
                    (Uc(b, c, p, d), (h = b.memoizedState)),
                  (l = Dc || Yc(b, c, l, d, x, h, k))
                    ? (D ||
                        ('function' !== typeof g.UNSAFE_componentWillMount &&
                          'function' !== typeof g.componentWillMount) ||
                        ('function' === typeof g.componentWillMount &&
                          g.componentWillMount(),
                        'function' === typeof g.UNSAFE_componentWillMount &&
                          g.UNSAFE_componentWillMount()),
                      'function' === typeof g.componentDidMount &&
                        (b.effectTag |= 4))
                    : ('function' === typeof g.componentDidMount &&
                        (b.effectTag |= 4),
                      (b.memoizedProps = d),
                      (b.memoizedState = h)),
                  (g.props = d),
                  (g.state = h),
                  (g.context = k),
                  (d = l))
                : ('function' === typeof g.componentDidMount &&
                    (b.effectTag |= 4),
                  (d = !1));
            } else
              (g = b.stateNode),
                (l = b.memoizedProps),
                (g.props = b.type === b.elementType ? l : rc(b.type, l)),
                (h = g.context),
                (k = c.contextType),
                'object' === typeof k && null !== k
                  ? (k = Cc(k))
                  : ((k = C(c) ? Eb : A.current), (k = Fb(b, k))),
                (p = c.getDerivedStateFromProps),
                (D =
                  'function' === typeof p ||
                  'function' === typeof g.getSnapshotBeforeUpdate) ||
                  ('function' !== typeof g.UNSAFE_componentWillReceiveProps &&
                    'function' !== typeof g.componentWillReceiveProps) ||
                  ((l !== d || h !== k) && $c(b, g, d, k)),
                (Dc = !1),
                (h = b.memoizedState),
                (x = g.state = h),
                (K = b.updateQueue),
                null !== K && (Nc(b, K, d, g, e), (x = b.memoizedState)),
                l !== d || h !== x || B.current || Dc
                  ? ('function' === typeof p &&
                      (Uc(b, c, p, d), (x = b.memoizedState)),
                    (p = Dc || Yc(b, c, l, d, h, x, k))
                      ? (D ||
                          ('function' !== typeof g.UNSAFE_componentWillUpdate &&
                            'function' !== typeof g.componentWillUpdate) ||
                          ('function' === typeof g.componentWillUpdate &&
                            g.componentWillUpdate(d, x, k),
                          'function' === typeof g.UNSAFE_componentWillUpdate &&
                            g.UNSAFE_componentWillUpdate(d, x, k)),
                        'function' === typeof g.componentDidUpdate &&
                          (b.effectTag |= 4),
                        'function' === typeof g.getSnapshotBeforeUpdate &&
                          (b.effectTag |= 256))
                      : ('function' !== typeof g.componentDidUpdate ||
                          (l === a.memoizedProps && h === a.memoizedState) ||
                          (b.effectTag |= 4),
                        'function' !== typeof g.getSnapshotBeforeUpdate ||
                          (l === a.memoizedProps && h === a.memoizedState) ||
                          (b.effectTag |= 256),
                        (b.memoizedProps = d),
                        (b.memoizedState = x)),
                    (g.props = d),
                    (g.state = x),
                    (g.context = k),
                    (d = p))
                  : ('function' !== typeof g.componentDidUpdate ||
                      (l === a.memoizedProps && h === a.memoizedState) ||
                      (b.effectTag |= 4),
                    'function' !== typeof g.getSnapshotBeforeUpdate ||
                      (l === a.memoizedProps && h === a.memoizedState) ||
                      (b.effectTag |= 256),
                    (d = !1));
            return ye(a, b, c, d, f, e);
          }
          function ye(a, b, c, d, e, f) {
            we(a, b);
            var g = 0 !== (b.effectTag & 64);
            if (!d && !g) return e && Lb(b, c, !1), re(a, b, f);
            d = b.stateNode;
            pe.current = b;
            var l =
              g && 'function' !== typeof c.getDerivedStateFromError
                ? null
                : d.render();
            b.effectTag |= 1;
            null !== a && g
              ? ((b.child = kd(b, a.child, null, f)),
                (b.child = kd(b, null, l, f)))
              : Q(a, b, l, f);
            b.memoizedState = d.state;
            e && Lb(b, c, !0);
            return b.child;
          }
          function ze(a) {
            var b = a.stateNode;
            b.pendingContext
              ? Ib(a, b.pendingContext, b.pendingContext !== b.context)
              : b.context && Ib(a, b.context, !1);
            qd(a, b.containerInfo);
          }
          var Ae = { dehydrated: null, retryTime: 0 };
          function Be(a, b, c) {
            var d = b.mode,
              e = b.pendingProps,
              f = I.current,
              g = !1,
              l;
            (l = 0 !== (b.effectTag & 64)) ||
              (l = 0 !== (f & 2) && (null === a || null !== a.memoizedState));
            l
              ? ((g = !0), (b.effectTag &= -65))
              : (null !== a && null === a.memoizedState) ||
                void 0 === e.fallback ||
                !0 === e.unstable_avoidThisFallback ||
                (f |= 1);
            z(I, f & 1, b);
            if (null === a) {
              void 0 !== e.fallback && je(b);
              if (g) {
                g = e.fallback;
                e = jd(null, d, 0, null);
                e.return = b;
                if (0 === (b.mode & 2))
                  for (
                    a = null !== b.memoizedState ? b.child.child : b.child,
                      e.child = a;
                    null !== a;

                  )
                    (a.return = e), (a = a.sibling);
                c = jd(g, d, c, null);
                c.return = b;
                e.sibling = c;
                b.memoizedState = Ae;
                b.child = e;
                return c;
              }
              d = e.children;
              b.memoizedState = null;
              return (b.child = ld(b, null, d, c));
            }
            if (null !== a.memoizedState) {
              a = a.child;
              d = a.sibling;
              if (g) {
                e = e.fallback;
                c = fd(a, a.pendingProps, 0);
                c.return = b;
                if (
                  0 === (b.mode & 2) &&
                  ((g = null !== b.memoizedState ? b.child.child : b.child),
                  g !== a.child)
                )
                  for (c.child = g; null !== g; )
                    (g.return = c), (g = g.sibling);
                d = fd(d, e, d.expirationTime);
                d.return = b;
                c.sibling = d;
                c.childExpirationTime = 0;
                b.memoizedState = Ae;
                b.child = c;
                return d;
              }
              c = kd(b, a.child, e.children, c);
              b.memoizedState = null;
              return (b.child = c);
            }
            a = a.child;
            if (g) {
              g = e.fallback;
              e = jd(null, d, 0, null);
              e.return = b;
              e.child = a;
              null !== a && (a.return = e);
              if (0 === (b.mode & 2))
                for (
                  a = null !== b.memoizedState ? b.child.child : b.child,
                    e.child = a;
                  null !== a;

                )
                  (a.return = e), (a = a.sibling);
              c = jd(g, d, c, null);
              c.return = b;
              e.sibling = c;
              c.effectTag |= 2;
              e.childExpirationTime = 0;
              b.memoizedState = Ae;
              b.child = e;
              return c;
            }
            b.memoizedState = null;
            return (b.child = kd(b, a, e.children, c));
          }
          function Ce(a, b) {
            a.expirationTime < b && (a.expirationTime = b);
            var c = a.alternate;
            null !== c && c.expirationTime < b && (c.expirationTime = b);
            zc(a.return, b);
          }
          function De(a, b, c, d, e, f) {
            var g = a.memoizedState;
            null === g
              ? (a.memoizedState = {
                  isBackwards: b,
                  rendering: null,
                  last: d,
                  tail: c,
                  tailExpiration: 0,
                  tailMode: e,
                  lastEffect: f,
                })
              : ((g.isBackwards = b),
                (g.rendering = null),
                (g.last = d),
                (g.tail = c),
                (g.tailExpiration = 0),
                (g.tailMode = e),
                (g.lastEffect = f));
          }
          function Ee(a, b, c) {
            var d = b.pendingProps,
              e = d.revealOrder,
              f = d.tail;
            Q(a, b, d.children, c);
            d = I.current;
            if (0 !== (d & 2)) (d = (d & 1) | 2), (b.effectTag |= 64);
            else {
              if (null !== a && 0 !== (a.effectTag & 64))
                a: for (a = b.child; null !== a; ) {
                  if (13 === a.tag) null !== a.memoizedState && Ce(a, c);
                  else if (19 === a.tag) Ce(a, c);
                  else if (null !== a.child) {
                    a.child.return = a;
                    a = a.child;
                    continue;
                  }
                  if (a === b) break a;
                  for (; null === a.sibling; ) {
                    if (null === a.return || a.return === b) break a;
                    a = a.return;
                  }
                  a.sibling.return = a.return;
                  a = a.sibling;
                }
              d &= 1;
            }
            z(I, d, b);
            if (0 === (b.mode & 2)) b.memoizedState = null;
            else
              switch (e) {
                case 'forwards':
                  c = b.child;
                  for (e = null; null !== c; )
                    (a = c.alternate),
                      null !== a && null === ud(a) && (e = c),
                      (c = c.sibling);
                  c = e;
                  null === c
                    ? ((e = b.child), (b.child = null))
                    : ((e = c.sibling), (c.sibling = null));
                  De(b, !1, e, c, f, b.lastEffect);
                  break;
                case 'backwards':
                  c = null;
                  e = b.child;
                  for (b.child = null; null !== e; ) {
                    a = e.alternate;
                    if (null !== a && null === ud(a)) {
                      b.child = e;
                      break;
                    }
                    a = e.sibling;
                    e.sibling = c;
                    c = e;
                    e = a;
                  }
                  De(b, !0, c, null, f, b.lastEffect);
                  break;
                case 'together':
                  De(b, !1, null, null, void 0, b.lastEffect);
                  break;
                default:
                  b.memoizedState = null;
              }
            return b.child;
          }
          function re(a, b, c) {
            null !== a && (b.dependencies = a.dependencies);
            var d = b.expirationTime;
            0 !== d && Pc(d);
            if (b.childExpirationTime < c) return null;
            if (null !== a && b.child !== a.child) throw Error(n(153));
            if (null !== b.child) {
              a = b.child;
              c = fd(a, a.pendingProps, a.expirationTime);
              b.child = c;
              for (c.return = b; null !== a.sibling; )
                (a = a.sibling),
                  (c = c.sibling = fd(a, a.pendingProps, a.expirationTime)),
                  (c.return = b);
              c.sibling = null;
            }
            return b.child;
          }
          function Fe(a) {
            a.effectTag |= 4;
          }
          var Ge, He, Ie, Je;
          if (Qa)
            (Ge = function(a, b) {
              for (var c = b.child; null !== c; ) {
                if (5 === c.tag || 6 === c.tag) Fa(a, c.stateNode);
                else if (4 !== c.tag && null !== c.child) {
                  c.child.return = c;
                  c = c.child;
                  continue;
                }
                if (c === b) break;
                for (; null === c.sibling; ) {
                  if (null === c.return || c.return === b) return;
                  c = c.return;
                }
                c.sibling.return = c.return;
                c = c.sibling;
              }
            }),
              (He = function() {}),
              (Ie = function(a, b, c, d, e) {
                a = a.memoizedProps;
                if (a !== d) {
                  var f = b.stateNode,
                    g = pd(H.current);
                  c = Ia(f, c, a, d, e, g);
                  (b.updateQueue = c) && Fe(b);
                }
              }),
              (Je = function(a, b, c, d) {
                c !== d && Fe(b);
              });
          else if (Ra) {
            Ge = function(a, b, c, d) {
              for (var e = b.child; null !== e; ) {
                if (5 === e.tag) {
                  var f = e.stateNode;
                  c && d && (f = mb(f, e.type, e.memoizedProps, e));
                  Fa(a, f);
                } else if (6 === e.tag)
                  (f = e.stateNode),
                    c && d && (f = nb(f, e.memoizedProps, e)),
                    Fa(a, f);
                else if (4 !== e.tag) {
                  if (
                    13 === e.tag &&
                    0 !== (e.effectTag & 4) &&
                    (f = null !== e.memoizedState)
                  ) {
                    var g = e.child;
                    if (
                      null !== g &&
                      (null !== g.child &&
                        ((g.child.return = g), Ge(a, g, !0, f)),
                      (f = g.sibling),
                      null !== f)
                    ) {
                      f.return = e;
                      e = f;
                      continue;
                    }
                  }
                  if (null !== e.child) {
                    e.child.return = e;
                    e = e.child;
                    continue;
                  }
                }
                if (e === b) break;
                for (; null === e.sibling; ) {
                  if (null === e.return || e.return === b) return;
                  e = e.return;
                }
                e.sibling.return = e.return;
                e = e.sibling;
              }
            };
            var Ke = function(a, b, c, d) {
              for (var e = b.child; null !== e; ) {
                if (5 === e.tag) {
                  var f = e.stateNode;
                  c && d && (f = mb(f, e.type, e.memoizedProps, e));
                  ib(a, f);
                } else if (6 === e.tag)
                  (f = e.stateNode),
                    c && d && (f = nb(f, e.memoizedProps, e)),
                    ib(a, f);
                else if (4 !== e.tag) {
                  if (
                    13 === e.tag &&
                    0 !== (e.effectTag & 4) &&
                    (f = null !== e.memoizedState)
                  ) {
                    var g = e.child;
                    if (
                      null !== g &&
                      (null !== g.child &&
                        ((g.child.return = g), Ke(a, g, !0, f)),
                      (f = g.sibling),
                      null !== f)
                    ) {
                      f.return = e;
                      e = f;
                      continue;
                    }
                  }
                  if (null !== e.child) {
                    e.child.return = e;
                    e = e.child;
                    continue;
                  }
                }
                if (e === b) break;
                for (; null === e.sibling; ) {
                  if (null === e.return || e.return === b) return;
                  e = e.return;
                }
                e.sibling.return = e.return;
                e = e.sibling;
              }
            };
            He = function(a) {
              var b = a.stateNode;
              if (null !== a.firstEffect) {
                var c = b.containerInfo,
                  d = hb(c);
                Ke(d, a, !1, !1);
                b.pendingChildren = d;
                Fe(a);
                kb(c, d);
              }
            };
            Ie = function(a, b, c, d, e) {
              var f = a.stateNode,
                g = a.memoizedProps;
              if ((a = null === b.firstEffect) && g === d) b.stateNode = f;
              else {
                var l = b.stateNode,
                  h = pd(H.current),
                  k = null;
                g !== d && (k = Ia(l, c, g, d, e, h));
                a && null === k
                  ? (b.stateNode = f)
                  : ((f = gb(f, k, c, g, d, b, a, l)),
                    Ga(f, c, d, e, h) && Fe(b),
                    (b.stateNode = f),
                    a ? Fe(b) : Ge(f, b, !1, !1));
              }
            };
            Je = function(a, b, c, d) {
              c !== d &&
                ((a = pd(od.current)),
                (c = pd(H.current)),
                (b.stateNode = La(d, a, c, b)),
                Fe(b));
            };
          } else
            (He = function() {}), (Ie = function() {}), (Je = function() {});
          function Le(a, b) {
            switch (a.tailMode) {
              case 'hidden':
                b = a.tail;
                for (var c = null; null !== b; )
                  null !== b.alternate && (c = b), (b = b.sibling);
                null === c ? (a.tail = null) : (c.sibling = null);
                break;
              case 'collapsed':
                c = a.tail;
                for (var d = null; null !== c; )
                  null !== c.alternate && (d = c), (c = c.sibling);
                null === d
                  ? b || null === a.tail
                    ? (a.tail = null)
                    : (a.tail.sibling = null)
                  : (d.sibling = null);
            }
          }
          function Me(a) {
            switch (a.tag) {
              case 1:
                C(a.type) && Gb(a);
                var b = a.effectTag;
                return b & 4096 ? ((a.effectTag = (b & -4097) | 64), a) : null;
              case 3:
                rd(a);
                Hb(a);
                b = a.effectTag;
                if (0 !== (b & 64)) throw Error(n(285));
                a.effectTag = (b & -4097) | 64;
                return a;
              case 5:
                return td(a), null;
              case 13:
                return (
                  y(I, a),
                  (b = a.effectTag),
                  b & 4096 ? ((a.effectTag = (b & -4097) | 64), a) : null
                );
              case 19:
                return y(I, a), null;
              case 4:
                return rd(a), null;
              case 10:
                return yc(a), null;
              default:
                return null;
            }
          }
          function Ne(a, b) {
            return { value: a, source: b, stack: Ab(b) };
          }
          var Oe = 'function' === typeof WeakSet ? WeakSet : Set;
          function Pe(a, b) {
            var c = b.source,
              d = b.stack;
            null === d && null !== c && (d = Ab(c));
            null !== c && ta(c.type);
            b = b.value;
            null !== a && 1 === a.tag && ta(a.type);
            try {
              console.error(b);
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          function Qe(a, b) {
            try {
              (b.props = a.memoizedProps),
                (b.state = a.memoizedState),
                b.componentWillUnmount();
            } catch (c) {
              Re(a, c);
            }
          }
          function Se(a) {
            var b = a.ref;
            if (null !== b)
              if ('function' === typeof b)
                try {
                  b(null);
                } catch (c) {
                  Re(a, c);
                }
              else b.current = null;
          }
          function Te(a, b) {
            switch (b.tag) {
              case 0:
              case 11:
              case 15:
                Ue(2, 0, b);
                break;
              case 1:
                if (b.effectTag & 256 && null !== a) {
                  var c = a.memoizedProps,
                    d = a.memoizedState;
                  a = b.stateNode;
                  b = a.getSnapshotBeforeUpdate(
                    b.elementType === b.type ? c : rc(b.type, c),
                    d
                  );
                  a.__reactInternalSnapshotBeforeUpdate = b;
                }
                break;
              case 3:
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(n(163));
            }
          }
          function Ue(a, b, c) {
            c = c.updateQueue;
            c = null !== c ? c.lastEffect : null;
            if (null !== c) {
              var d = (c = c.next);
              do {
                if (0 !== (d.tag & a)) {
                  var e = d.destroy;
                  d.destroy = void 0;
                  void 0 !== e && e();
                }
                0 !== (d.tag & b) && ((e = d.create), (d.destroy = e()));
                d = d.next;
              } while (d !== c);
            }
          }
          function Ve(a, b, c) {
            'function' === typeof We && We(b);
            switch (b.tag) {
              case 0:
              case 11:
              case 14:
              case 15:
                a = b.updateQueue;
                if (null !== a && ((a = a.lastEffect), null !== a)) {
                  var d = a.next;
                  hc(97 < c ? 97 : c, function() {
                    var a = d;
                    do {
                      var c = a.destroy;
                      if (void 0 !== c) {
                        var g = b;
                        try {
                          c();
                        } catch (l) {
                          Re(g, l);
                        }
                      }
                      a = a.next;
                    } while (a !== d);
                  });
                }
                break;
              case 1:
                Se(b);
                c = b.stateNode;
                'function' === typeof c.componentWillUnmount && Qe(b, c);
                break;
              case 5:
                Se(b);
                break;
              case 4:
                Qa ? Xe(a, b, c) : Ra && Ye(b);
            }
          }
          function Ze(a, b, c) {
            for (var d = b; ; )
              if ((Ve(a, d, c), null === d.child || (Qa && 4 === d.tag))) {
                if (d === b) break;
                for (; null === d.sibling; ) {
                  if (null === d.return || d.return === b) return;
                  d = d.return;
                }
                d.sibling.return = d.return;
                d = d.sibling;
              } else (d.child.return = d), (d = d.child);
          }
          function $e(a) {
            var b = a.alternate;
            a.return = null;
            a.child = null;
            a.memoizedState = null;
            a.updateQueue = null;
            a.dependencies = null;
            a.alternate = null;
            a.firstEffect = null;
            a.lastEffect = null;
            a.pendingProps = null;
            a.memoizedProps = null;
            null !== b && $e(b);
          }
          function Ye(a) {
            if (Ra) {
              a = a.stateNode.containerInfo;
              var b = hb(a);
              lb(a, b);
            }
          }
          function af(a) {
            return 5 === a.tag || 3 === a.tag || 4 === a.tag;
          }
          function bf(a) {
            if (Qa) {
              a: {
                for (var b = a.return; null !== b; ) {
                  if (af(b)) {
                    var c = b;
                    break a;
                  }
                  b = b.return;
                }
                throw Error(n(160));
              }
              b = c.stateNode;
              switch (c.tag) {
                case 5:
                  var d = !1;
                  break;
                case 3:
                  b = b.containerInfo;
                  d = !0;
                  break;
                case 4:
                  b = b.containerInfo;
                  d = !0;
                  break;
                default:
                  throw Error(n(161));
              }
              c.effectTag & 16 && (bb(b), (c.effectTag &= -17));
              a: b: for (c = a; ; ) {
                for (; null === c.sibling; ) {
                  if (null === c.return || af(c.return)) {
                    c = null;
                    break a;
                  }
                  c = c.return;
                }
                c.sibling.return = c.return;
                for (
                  c = c.sibling;
                  5 !== c.tag && 6 !== c.tag && 18 !== c.tag;

                ) {
                  if (c.effectTag & 2) continue b;
                  if (null === c.child || 4 === c.tag) continue b;
                  else (c.child.return = c), (c = c.child);
                }
                if (!(c.effectTag & 2)) {
                  c = c.stateNode;
                  break a;
                }
              }
              for (var e = a; ; ) {
                var f = 5 === e.tag || 6 === e.tag;
                if (f)
                  (f = f ? e.stateNode : e.stateNode.instance),
                    c
                      ? d
                        ? Za(b, f, c)
                        : Ya(b, f, c)
                      : d
                      ? Ua(b, f)
                      : Ta(b, f);
                else if (4 !== e.tag && null !== e.child) {
                  e.child.return = e;
                  e = e.child;
                  continue;
                }
                if (e === a) break;
                for (; null === e.sibling; ) {
                  if (null === e.return || e.return === a) return;
                  e = e.return;
                }
                e.sibling.return = e.return;
                e = e.sibling;
              }
            }
          }
          function Xe(a, b, c) {
            for (var d = b, e = !1, f, g; ; ) {
              if (!e) {
                e = d.return;
                a: for (;;) {
                  if (null === e) throw Error(n(160));
                  f = e.stateNode;
                  switch (e.tag) {
                    case 5:
                      g = !1;
                      break a;
                    case 3:
                      f = f.containerInfo;
                      g = !0;
                      break a;
                    case 4:
                      f = f.containerInfo;
                      g = !0;
                      break a;
                  }
                  e = e.return;
                }
                e = !0;
              }
              if (5 === d.tag || 6 === d.tag)
                Ze(a, d, c), g ? ab(f, d.stateNode) : $a(f, d.stateNode);
              else if (4 === d.tag) {
                if (null !== d.child) {
                  f = d.stateNode.containerInfo;
                  g = !0;
                  d.child.return = d;
                  d = d.child;
                  continue;
                }
              } else if ((Ve(a, d, c), null !== d.child)) {
                d.child.return = d;
                d = d.child;
                continue;
              }
              if (d === b) break;
              for (; null === d.sibling; ) {
                if (null === d.return || d.return === b) return;
                d = d.return;
                4 === d.tag && (e = !1);
              }
              d.sibling.return = d.return;
              d = d.sibling;
            }
          }
          function cf(a, b) {
            if (Qa)
              switch (b.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Ue(4, 8, b);
                  break;
                case 1:
                  break;
                case 5:
                  var c = b.stateNode;
                  if (null != c) {
                    var d = b.memoizedProps;
                    a = null !== a ? a.memoizedProps : d;
                    var e = b.type,
                      f = b.updateQueue;
                    b.updateQueue = null;
                    null !== f && Xa(c, f, e, a, d, b);
                  }
                  break;
                case 6:
                  if (null === b.stateNode) throw Error(n(162));
                  c = b.memoizedProps;
                  Va(b.stateNode, null !== a ? a.memoizedProps : c, c);
                  break;
                case 3:
                  Sa &&
                    ((b = b.stateNode),
                    b.hydrate && ((b.hydrate = !1), xb(b.containerInfo)));
                  break;
                case 12:
                  break;
                case 13:
                  df(b);
                  ef(b);
                  break;
                case 19:
                  ef(b);
                  break;
                case 17:
                  break;
                case 20:
                  break;
                case 21:
                  break;
                default:
                  throw Error(n(163));
              }
            else {
              switch (b.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Ue(4, 8, b);
                  return;
                case 12:
                  return;
                case 13:
                  df(b);
                  ef(b);
                  return;
                case 19:
                  ef(b);
                  return;
                case 3:
                  Sa &&
                    ((c = b.stateNode),
                    c.hydrate && ((c.hydrate = !1), xb(c.containerInfo)));
              }
              a: if (Ra)
                switch (b.tag) {
                  case 1:
                  case 5:
                  case 6:
                  case 20:
                    break a;
                  case 3:
                  case 4:
                    b = b.stateNode;
                    lb(b.containerInfo, b.pendingChildren);
                    break a;
                  default:
                    throw Error(n(163));
                }
            }
          }
          function df(a) {
            var b = a;
            if (null === a.memoizedState) var c = !1;
            else (c = !0), (b = a.child), (ff = E());
            if (Qa && null !== b)
              a: if (((a = b), Qa))
                for (b = a; ; ) {
                  if (5 === b.tag) {
                    var d = b.stateNode;
                    c ? cb(d) : eb(b.stateNode, b.memoizedProps);
                  } else if (6 === b.tag)
                    (d = b.stateNode), c ? db(d) : fb(d, b.memoizedProps);
                  else if (
                    13 === b.tag &&
                    null !== b.memoizedState &&
                    null === b.memoizedState.dehydrated
                  ) {
                    d = b.child.sibling;
                    d.return = b;
                    b = d;
                    continue;
                  } else if (null !== b.child) {
                    b.child.return = b;
                    b = b.child;
                    continue;
                  }
                  if (b === a) break a;
                  for (; null === b.sibling; ) {
                    if (null === b.return || b.return === a) break a;
                    b = b.return;
                  }
                  b.sibling.return = b.return;
                  b = b.sibling;
                }
          }
          function ef(a) {
            var b = a.updateQueue;
            if (null !== b) {
              a.updateQueue = null;
              var c = a.stateNode;
              null === c && (c = a.stateNode = new Oe());
              b.forEach(function(b) {
                var d = gf.bind(null, a, b);
                c.has(b) || (c.add(b), b.then(d, d));
              });
            }
          }
          var hf = 'function' === typeof WeakMap ? WeakMap : Map;
          function jf(a, b, c) {
            c = Gc(c, null);
            c.tag = 3;
            c.payload = { element: null };
            var d = b.value;
            c.callback = function() {
              kf || ((kf = !0), (lf = d));
              Pe(a, b);
            };
            return c;
          }
          function mf(a, b, c) {
            c = Gc(c, null);
            c.tag = 3;
            var d = a.type.getDerivedStateFromError;
            if ('function' === typeof d) {
              var e = b.value;
              c.payload = function() {
                Pe(a, b);
                return d(e);
              };
            }
            var f = a.stateNode;
            null !== f &&
              'function' === typeof f.componentDidCatch &&
              (c.callback = function() {
                'function' !== typeof d &&
                  (null === nf ? (nf = new Set([this])) : nf.add(this),
                  Pe(a, b));
                var c = b.stack;
                this.componentDidCatch(b.value, {
                  componentStack: null !== c ? c : '',
                });
              });
            return c;
          }
          var of = Math.ceil,
            pf = q.ReactCurrentDispatcher,
            qf = q.ReactCurrentOwner,
            R = 0,
            rf = 8,
            S = 16,
            sf = 32,
            tf = 0,
            uf = 1,
            vf = 2,
            wf = 3,
            xf = 4,
            yf = 5,
            T = R,
            U = null,
            V = null,
            W = 0,
            X = tf,
            zf = null,
            Af = 1073741823,
            Bf = 1073741823,
            Cf = null,
            Df = 0,
            Ef = !1,
            ff = 0,
            Ff = 500,
            Y = null,
            kf = !1,
            lf = null,
            nf = null,
            Gf = !1,
            Hf = null,
            If = 90,
            Jf = null,
            Kf = 0,
            Lf = null,
            Mf = 0;
          function G() {
            return (T & (S | sf)) !== R
              ? 1073741821 - ((E() / 10) | 0)
              : 0 !== Mf
              ? Mf
              : (Mf = 1073741821 - ((E() / 10) | 0));
          }
          function Vc(a, b, c) {
            b = b.mode;
            if (0 === (b & 2)) return 1073741823;
            var d = fc();
            if (0 === (b & 4)) return 99 === d ? 1073741823 : 1073741822;
            if ((T & S) !== R) return W;
            if (null !== c) a = mc(a, c.timeoutMs | 0 || 5e3, 250);
            else
              switch (d) {
                case 99:
                  a = 1073741823;
                  break;
                case 98:
                  a = mc(a, 150, 100);
                  break;
                case 97:
                case 96:
                  a = mc(a, 5e3, 250);
                  break;
                case 95:
                  a = 2;
                  break;
                default:
                  throw Error(n(326));
              }
            null !== U && a === W && --a;
            return a;
          }
          function Wc(a, b) {
            if (50 < Kf) throw ((Kf = 0), (Lf = null), Error(n(185)));
            a = Nf(a, b);
            if (null !== a) {
              var c = fc();
              1073741823 === b
                ? (T & rf) !== R && (T & (S | sf)) === R
                  ? Of(a)
                  : (Z(a), T === R && F())
                : Z(a);
              (T & 4) === R ||
                (98 !== c && 99 !== c) ||
                (null === Jf
                  ? (Jf = new Map([[a, b]]))
                  : ((c = Jf.get(a)), (void 0 === c || c > b) && Jf.set(a, b)));
            }
          }
          function Nf(a, b) {
            a.expirationTime < b && (a.expirationTime = b);
            var c = a.alternate;
            null !== c && c.expirationTime < b && (c.expirationTime = b);
            var d = a.return,
              e = null;
            if (null === d && 3 === a.tag) e = a.stateNode;
            else
              for (; null !== d; ) {
                c = d.alternate;
                d.childExpirationTime < b && (d.childExpirationTime = b);
                null !== c &&
                  c.childExpirationTime < b &&
                  (c.childExpirationTime = b);
                if (null === d.return && 3 === d.tag) {
                  e = d.stateNode;
                  break;
                }
                d = d.return;
              }
            null !== e && (U === e && (Pc(b), X === xf && Pf(e, W)), Qf(e, b));
            return e;
          }
          function Rf(a) {
            var b = a.lastExpiredTime;
            if (0 !== b) return b;
            b = a.firstPendingTime;
            if (!Sf(a, b)) return b;
            b = a.lastPingedTime;
            a = a.nextKnownPendingLevel;
            return b > a ? b : a;
          }
          function Z(a) {
            if (0 !== a.lastExpiredTime)
              (a.callbackExpirationTime = 1073741823),
                (a.callbackPriority = 99),
                (a.callbackNode = jc(Of.bind(null, a)));
            else {
              var b = Rf(a),
                c = a.callbackNode;
              if (0 === b)
                null !== c &&
                  ((a.callbackNode = null),
                  (a.callbackExpirationTime = 0),
                  (a.callbackPriority = 90));
              else {
                var d = G();
                1073741823 === b
                  ? (d = 99)
                  : 1 === b || 2 === b
                  ? (d = 95)
                  : ((d = 10 * (1073741821 - b) - 10 * (1073741821 - d)),
                    (d = 0 >= d ? 99 : 250 >= d ? 98 : 5250 >= d ? 97 : 95));
                if (null !== c) {
                  var e = a.callbackPriority;
                  if (a.callbackExpirationTime === b && e >= d) return;
                  c !== $b && Ob(c);
                }
                a.callbackExpirationTime = b;
                a.callbackPriority = d;
                b =
                  1073741823 === b
                    ? jc(Of.bind(null, a))
                    : ic(d, Tf.bind(null, a), {
                        timeout: 10 * (1073741821 - b) - E(),
                      });
                a.callbackNode = b;
              }
            }
          }
          function Tf(a, b) {
            Mf = 0;
            if (b) return (b = G()), Uf(a, b), Z(a), null;
            var c = Rf(a);
            if (0 !== c) {
              b = a.callbackNode;
              if ((T & (S | sf)) !== R) throw Error(n(327));
              Vf();
              (a === U && c === W) || Wf(a, c);
              if (null !== V) {
                var d = T;
                T |= S;
                var e = Xf(a);
                do
                  try {
                    Yf();
                    break;
                  } catch (l) {
                    Zf(a, l);
                  }
                while (1);
                wc();
                T = d;
                pf.current = e;
                if (X === uf) throw ((b = zf), Wf(a, c), Pf(a, c), Z(a), b);
                if (null === V)
                  switch (
                    ((e = a.finishedWork = a.current.alternate),
                    (a.finishedExpirationTime = c),
                    (d = X),
                    (U = null),
                    d)
                  ) {
                    case tf:
                    case uf:
                      throw Error(n(345));
                    case vf:
                      Uf(a, 2 < c ? 2 : c);
                      break;
                    case wf:
                      Pf(a, c);
                      d = a.lastSuspendedTime;
                      c === d && (a.nextKnownPendingLevel = $f(e));
                      if (1073741823 === Af && ((e = ff + Ff - E()), 10 < e)) {
                        if (Ef) {
                          var f = a.lastPingedTime;
                          if (0 === f || f >= c) {
                            a.lastPingedTime = c;
                            Wf(a, c);
                            break;
                          }
                        }
                        f = Rf(a);
                        if (0 !== f && f !== c) break;
                        if (0 !== d && d !== c) {
                          a.lastPingedTime = d;
                          break;
                        }
                        a.timeoutHandle = Ma(ag.bind(null, a), e);
                        break;
                      }
                      ag(a);
                      break;
                    case xf:
                      Pf(a, c);
                      d = a.lastSuspendedTime;
                      c === d && (a.nextKnownPendingLevel = $f(e));
                      if (Ef && ((e = a.lastPingedTime), 0 === e || e >= c)) {
                        a.lastPingedTime = c;
                        Wf(a, c);
                        break;
                      }
                      e = Rf(a);
                      if (0 !== e && e !== c) break;
                      if (0 !== d && d !== c) {
                        a.lastPingedTime = d;
                        break;
                      }
                      1073741823 !== Bf
                        ? (d = 10 * (1073741821 - Bf) - E())
                        : 1073741823 === Af
                        ? (d = 0)
                        : ((d = 10 * (1073741821 - Af) - 5e3),
                          (e = E()),
                          (c = 10 * (1073741821 - c) - e),
                          (d = e - d),
                          0 > d && (d = 0),
                          (d =
                            (120 > d
                              ? 120
                              : 480 > d
                              ? 480
                              : 1080 > d
                              ? 1080
                              : 1920 > d
                              ? 1920
                              : 3e3 > d
                              ? 3e3
                              : 4320 > d
                              ? 4320
                              : 1960 * of(d / 1960)) - d),
                          c < d && (d = c));
                      if (10 < d) {
                        a.timeoutHandle = Ma(ag.bind(null, a), d);
                        break;
                      }
                      ag(a);
                      break;
                    case yf:
                      if (1073741823 !== Af && null !== Cf) {
                        f = Af;
                        var g = Cf;
                        d = g.busyMinDurationMs | 0;
                        0 >= d
                          ? (d = 0)
                          : ((e = g.busyDelayMs | 0),
                            (f =
                              E() -
                              (10 * (1073741821 - f) -
                                (g.timeoutMs | 0 || 5e3))),
                            (d = f <= e ? 0 : e + d - f));
                        if (10 < d) {
                          Pf(a, c);
                          a.timeoutHandle = Ma(ag.bind(null, a), d);
                          break;
                        }
                      }
                      ag(a);
                      break;
                    default:
                      throw Error(n(329));
                  }
                Z(a);
                if (a.callbackNode === b) return Tf.bind(null, a);
              }
            }
            return null;
          }
          function Of(a) {
            var b = a.lastExpiredTime;
            b = 0 !== b ? b : 1073741823;
            if (a.finishedExpirationTime === b) ag(a);
            else {
              if ((T & (S | sf)) !== R) throw Error(n(327));
              Vf();
              (a === U && b === W) || Wf(a, b);
              if (null !== V) {
                var c = T;
                T |= S;
                var d = Xf(a);
                do
                  try {
                    bg();
                    break;
                  } catch (e) {
                    Zf(a, e);
                  }
                while (1);
                wc();
                T = c;
                pf.current = d;
                if (X === uf) throw ((c = zf), Wf(a, b), Pf(a, b), Z(a), c);
                if (null !== V) throw Error(n(261));
                a.finishedWork = a.current.alternate;
                a.finishedExpirationTime = b;
                U = null;
                ag(a);
                Z(a);
              }
            }
            return null;
          }
          function cg(a, b) {
            Uf(a, b);
            Z(a);
            (T & (S | sf)) === R && F();
          }
          function dg() {
            if (null !== Jf) {
              var a = Jf;
              Jf = null;
              a.forEach(function(a, c) {
                Uf(c, a);
                Z(c);
              });
              F();
            }
          }
          function eg(a, b) {
            if ((T & (S | sf)) !== R) throw Error(n(187));
            var c = T;
            T |= 1;
            try {
              return hc(99, a.bind(null, b));
            } finally {
              (T = c), F();
            }
          }
          function Wf(a, b) {
            a.finishedWork = null;
            a.finishedExpirationTime = 0;
            var c = a.timeoutHandle;
            c !== Oa && ((a.timeoutHandle = Oa), Na(c));
            if (null !== V)
              for (c = V.return; null !== c; ) {
                var d = c;
                switch (d.tag) {
                  case 1:
                    var e = d.type.childContextTypes;
                    null !== e && void 0 !== e && Gb(d);
                    break;
                  case 3:
                    rd(d);
                    Hb(d);
                    break;
                  case 5:
                    td(d);
                    break;
                  case 4:
                    rd(d);
                    break;
                  case 13:
                    y(I, d);
                    break;
                  case 19:
                    y(I, d);
                    break;
                  case 10:
                    yc(d);
                }
                c = c.return;
              }
            U = a;
            V = fd(a.current, null, b);
            W = b;
            X = tf;
            zf = null;
            Bf = Af = 1073741823;
            Cf = null;
            Df = 0;
            Ef = !1;
          }
          function Zf(a, b) {
            do {
              try {
                wc();
                Nd();
                if (null === V || null === V.return)
                  return (X = uf), (zf = b), null;
                a: {
                  var c = a,
                    d = V.return,
                    e = V,
                    f = b;
                  b = W;
                  e.effectTag |= 2048;
                  e.firstEffect = e.lastEffect = null;
                  if (
                    null !== f &&
                    'object' === typeof f &&
                    'function' === typeof f.then
                  ) {
                    var g = f,
                      l = 0 !== (I.current & 1),
                      h = d;
                    do {
                      var k;
                      if ((k = 13 === h.tag)) {
                        var p = h.memoizedState;
                        if (null !== p) k = null !== p.dehydrated ? !0 : !1;
                        else {
                          var D = h.memoizedProps;
                          k =
                            void 0 === D.fallback
                              ? !1
                              : !0 !== D.unstable_avoidThisFallback
                              ? !0
                              : l
                              ? !1
                              : !0;
                        }
                      }
                      if (k) {
                        var x = h.updateQueue;
                        if (null === x) {
                          var K = new Set();
                          K.add(g);
                          h.updateQueue = K;
                        } else x.add(g);
                        if (0 === (h.mode & 2)) {
                          h.effectTag |= 64;
                          e.effectTag &= -2981;
                          if (1 === e.tag)
                            if (null === e.alternate) e.tag = 17;
                            else {
                              var Ha = Gc(1073741823, null);
                              Ha.tag = 2;
                              Ic(e, Ha);
                            }
                          e.expirationTime = 1073741823;
                          break a;
                        }
                        f = void 0;
                        e = b;
                        var O = c.pingCache;
                        null === O
                          ? ((O = c.pingCache = new hf()),
                            (f = new Set()),
                            O.set(g, f))
                          : ((f = O.get(g)),
                            void 0 === f && ((f = new Set()), O.set(g, f)));
                        if (!f.has(e)) {
                          f.add(e);
                          var w = fg.bind(null, c, g, e);
                          g.then(w, w);
                        }
                        h.effectTag |= 4096;
                        h.expirationTime = b;
                        break a;
                      }
                      h = h.return;
                    } while (null !== h);
                    f = Error(
                      (ta(e.type) || 'A React component') +
                        ' suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.' +
                        Ab(e)
                    );
                  }
                  X !== yf && (X = vf);
                  f = Ne(f, e);
                  h = d;
                  do {
                    switch (h.tag) {
                      case 3:
                        g = f;
                        h.effectTag |= 4096;
                        h.expirationTime = b;
                        var r = jf(h, g, b);
                        Jc(h, r);
                        break a;
                      case 1:
                        g = f;
                        var t = h.type,
                          N = h.stateNode;
                        if (
                          0 === (h.effectTag & 64) &&
                          ('function' === typeof t.getDerivedStateFromError ||
                            (null !== N &&
                              'function' === typeof N.componentDidCatch &&
                              (null === nf || !nf.has(N))))
                        ) {
                          h.effectTag |= 4096;
                          h.expirationTime = b;
                          var Mc = mf(h, g, b);
                          Jc(h, Mc);
                          break a;
                        }
                    }
                    h = h.return;
                  } while (null !== h);
                }
                V = gg(V);
              } catch (Sb) {
                b = Sb;
                continue;
              }
              break;
            } while (1);
          }
          function Xf() {
            var a = pf.current;
            pf.current = Md;
            return null === a ? Md : a;
          }
          function Oc(a, b) {
            a < Af && 2 < a && (Af = a);
            null !== b && a < Bf && 2 < a && ((Bf = a), (Cf = b));
          }
          function Pc(a) {
            a > Df && (Df = a);
          }
          function bg() {
            for (; null !== V; ) V = hg(V);
          }
          function Yf() {
            for (; null !== V && !Pb(); ) V = hg(V);
          }
          function hg(a) {
            var b = ig(a.alternate, a, W);
            a.memoizedProps = a.pendingProps;
            null === b && (b = gg(a));
            qf.current = null;
            return b;
          }
          function gg(a) {
            V = a;
            do {
              var b = V.alternate;
              a = V.return;
              if (0 === (V.effectTag & 2048)) {
                a: {
                  var c = b;
                  b = V;
                  var d = W,
                    e = b.pendingProps;
                  switch (b.tag) {
                    case 2:
                      break;
                    case 16:
                      break;
                    case 15:
                    case 0:
                      break;
                    case 1:
                      C(b.type) && Gb(b);
                      break;
                    case 3:
                      rd(b);
                      Hb(b);
                      e = b.stateNode;
                      e.pendingContext &&
                        ((e.context = e.pendingContext),
                        (e.pendingContext = null));
                      (null === c || null === c.child) && ne(b) && Fe(b);
                      He(b);
                      break;
                    case 5:
                      td(b);
                      var f = pd(od.current);
                      d = b.type;
                      if (null !== c && null != b.stateNode)
                        Ie(c, b, d, e, f),
                          c.ref !== b.ref && (b.effectTag |= 128);
                      else if (e) {
                        c = pd(H.current);
                        if (ne(b)) {
                          e = b;
                          if (!Sa) throw Error(n(175));
                          c = ub(e.stateNode, e.type, e.memoizedProps, f, c, e);
                          e.updateQueue = c;
                          c = null !== c ? !0 : !1;
                          c && Fe(b);
                        } else {
                          var g = Ea(d, e, f, c, b);
                          Ge(g, b, !1, !1);
                          b.stateNode = g;
                          Ga(g, d, e, f, c) && Fe(b);
                        }
                        null !== b.ref && (b.effectTag |= 128);
                      } else if (null === b.stateNode) throw Error(n(166));
                      break;
                    case 6:
                      if (c && null != b.stateNode)
                        Je(c, b, c.memoizedProps, e);
                      else {
                        if ('string' !== typeof e && null === b.stateNode)
                          throw Error(n(166));
                        c = pd(od.current);
                        f = pd(H.current);
                        if (ne(b)) {
                          c = b;
                          if (!Sa) throw Error(n(176));
                          (c = vb(c.stateNode, c.memoizedProps, c)) && Fe(b);
                        } else b.stateNode = La(e, c, f, b);
                      }
                      break;
                    case 11:
                      break;
                    case 13:
                      y(I, b);
                      e = b.memoizedState;
                      if (0 !== (b.effectTag & 64)) {
                        b.expirationTime = d;
                        break a;
                      }
                      e = null !== e;
                      f = !1;
                      null === c
                        ? void 0 !== b.memoizedProps.fallback && ne(b)
                        : ((d = c.memoizedState),
                          (f = null !== d),
                          e ||
                            null === d ||
                            ((d = c.child.sibling),
                            null !== d &&
                              ((g = b.firstEffect),
                              null !== g
                                ? ((b.firstEffect = d), (d.nextEffect = g))
                                : ((b.firstEffect = b.lastEffect = d),
                                  (d.nextEffect = null)),
                              (d.effectTag = 8))));
                      if (e && !f && 0 !== (b.mode & 2))
                        if (
                          (null === c &&
                            !0 !==
                              b.memoizedProps.unstable_avoidThisFallback) ||
                          0 !== (I.current & 1)
                        )
                          X === tf && (X = wf);
                        else {
                          if (X === tf || X === wf) X = xf;
                          0 !== Df && null !== U && (Pf(U, W), Qf(U, Df));
                        }
                      Ra && e && (b.effectTag |= 4);
                      Qa && (e || f) && (b.effectTag |= 4);
                      break;
                    case 7:
                      break;
                    case 8:
                      break;
                    case 12:
                      break;
                    case 4:
                      rd(b);
                      He(b);
                      break;
                    case 10:
                      yc(b);
                      break;
                    case 9:
                      break;
                    case 14:
                      break;
                    case 17:
                      C(b.type) && Gb(b);
                      break;
                    case 19:
                      y(I, b);
                      e = b.memoizedState;
                      if (null === e) break;
                      f = 0 !== (b.effectTag & 64);
                      g = e.rendering;
                      if (null === g)
                        if (f) Le(e, !1);
                        else {
                          if (
                            X !== tf ||
                            (null !== c && 0 !== (c.effectTag & 64))
                          )
                            for (c = b.child; null !== c; ) {
                              g = ud(c);
                              if (null !== g) {
                                b.effectTag |= 64;
                                Le(e, !1);
                                c = g.updateQueue;
                                null !== c &&
                                  ((b.updateQueue = c), (b.effectTag |= 4));
                                null === e.lastEffect && (b.firstEffect = null);
                                b.lastEffect = e.lastEffect;
                                c = d;
                                for (e = b.child; null !== e; )
                                  (f = e),
                                    (d = c),
                                    (f.effectTag &= 2),
                                    (f.nextEffect = null),
                                    (f.firstEffect = null),
                                    (f.lastEffect = null),
                                    (g = f.alternate),
                                    null === g
                                      ? ((f.childExpirationTime = 0),
                                        (f.expirationTime = d),
                                        (f.child = null),
                                        (f.memoizedProps = null),
                                        (f.memoizedState = null),
                                        (f.updateQueue = null),
                                        (f.dependencies = null))
                                      : ((f.childExpirationTime =
                                          g.childExpirationTime),
                                        (f.expirationTime = g.expirationTime),
                                        (f.child = g.child),
                                        (f.memoizedProps = g.memoizedProps),
                                        (f.memoizedState = g.memoizedState),
                                        (f.updateQueue = g.updateQueue),
                                        (d = g.dependencies),
                                        (f.dependencies =
                                          null === d
                                            ? null
                                            : {
                                                expirationTime:
                                                  d.expirationTime,
                                                firstContext: d.firstContext,
                                                responders: d.responders,
                                              })),
                                    (e = e.sibling);
                                z(I, (I.current & 1) | 2, b);
                                b = b.child;
                                break a;
                              }
                              c = c.sibling;
                            }
                        }
                      else {
                        if (!f)
                          if (((c = ud(g)), null !== c)) {
                            if (
                              ((b.effectTag |= 64),
                              (f = !0),
                              (c = c.updateQueue),
                              null !== c &&
                                ((b.updateQueue = c), (b.effectTag |= 4)),
                              Le(e, !0),
                              null === e.tail &&
                                'hidden' === e.tailMode &&
                                !g.alternate)
                            ) {
                              b = b.lastEffect = e.lastEffect;
                              null !== b && (b.nextEffect = null);
                              break;
                            }
                          } else
                            E() > e.tailExpiration &&
                              1 < d &&
                              ((b.effectTag |= 64),
                              (f = !0),
                              Le(e, !1),
                              (b.expirationTime = b.childExpirationTime =
                                d - 1));
                        e.isBackwards
                          ? ((g.sibling = b.child), (b.child = g))
                          : ((c = e.last),
                            null !== c ? (c.sibling = g) : (b.child = g),
                            (e.last = g));
                      }
                      if (null !== e.tail) {
                        0 === e.tailExpiration &&
                          (e.tailExpiration = E() + 500);
                        c = e.tail;
                        e.rendering = c;
                        e.tail = c.sibling;
                        e.lastEffect = b.lastEffect;
                        c.sibling = null;
                        e = I.current;
                        e = f ? (e & 1) | 2 : e & 1;
                        z(I, e, b);
                        b = c;
                        break a;
                      }
                      break;
                    case 20:
                      break;
                    case 21:
                      break;
                    default:
                      throw Error(n(156, b.tag));
                  }
                  b = null;
                }
                c = V;
                if (1 === W || 1 !== c.childExpirationTime) {
                  e = 0;
                  for (f = c.child; null !== f; )
                    (d = f.expirationTime),
                      (g = f.childExpirationTime),
                      d > e && (e = d),
                      g > e && (e = g),
                      (f = f.sibling);
                  c.childExpirationTime = e;
                }
                if (null !== b) return b;
                null !== a &&
                  0 === (a.effectTag & 2048) &&
                  (null === a.firstEffect && (a.firstEffect = V.firstEffect),
                  null !== V.lastEffect &&
                    (null !== a.lastEffect &&
                      (a.lastEffect.nextEffect = V.firstEffect),
                    (a.lastEffect = V.lastEffect)),
                  1 < V.effectTag &&
                    (null !== a.lastEffect
                      ? (a.lastEffect.nextEffect = V)
                      : (a.firstEffect = V),
                    (a.lastEffect = V)));
              } else {
                b = Me(V, W);
                if (null !== b) return (b.effectTag &= 2047), b;
                null !== a &&
                  ((a.firstEffect = a.lastEffect = null),
                  (a.effectTag |= 2048));
              }
              b = V.sibling;
              if (null !== b) return b;
              V = a;
            } while (null !== V);
            X === tf && (X = yf);
            return null;
          }
          function $f(a) {
            var b = a.expirationTime;
            a = a.childExpirationTime;
            return b > a ? b : a;
          }
          function ag(a) {
            var b = fc();
            hc(99, jg.bind(null, a, b));
            return null;
          }
          function jg(a, b) {
            do Vf();
            while (null !== Hf);
            if ((T & (S | sf)) !== R) throw Error(n(327));
            var c = a.finishedWork,
              d = a.finishedExpirationTime;
            if (null === c) return null;
            a.finishedWork = null;
            a.finishedExpirationTime = 0;
            if (c === a.current) throw Error(n(177));
            a.callbackNode = null;
            a.callbackExpirationTime = 0;
            a.callbackPriority = 90;
            a.nextKnownPendingLevel = 0;
            var e = $f(c);
            a.firstPendingTime = e;
            d <= a.lastSuspendedTime
              ? (a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0)
              : d <= a.firstSuspendedTime && (a.firstSuspendedTime = d - 1);
            d <= a.lastPingedTime && (a.lastPingedTime = 0);
            d <= a.lastExpiredTime && (a.lastExpiredTime = 0);
            a === U && ((V = U = null), (W = 0));
            1 < c.effectTag
              ? null !== c.lastEffect
                ? ((c.lastEffect.nextEffect = c), (e = c.firstEffect))
                : (e = c)
              : (e = c.firstEffect);
            if (null !== e) {
              var f = T;
              T |= sf;
              qf.current = null;
              Ca(a.containerInfo);
              Y = e;
              do
                try {
                  kg();
                } catch (jb) {
                  if (null === Y) throw Error(n(330));
                  Re(Y, jb);
                  Y = Y.nextEffect;
                }
              while (null !== Y);
              Y = e;
              do
                try {
                  for (var g = a, l = b; null !== Y; ) {
                    var h = Y.effectTag;
                    h & 16 && Qa && bb(Y.stateNode);
                    if (h & 128) {
                      var k = Y.alternate;
                      if (null !== k) {
                        var p = k.ref;
                        null !== p &&
                          ('function' === typeof p
                            ? p(null)
                            : (p.current = null));
                      }
                    }
                    switch (h & 1038) {
                      case 2:
                        bf(Y);
                        Y.effectTag &= -3;
                        break;
                      case 6:
                        bf(Y);
                        Y.effectTag &= -3;
                        cf(Y.alternate, Y);
                        break;
                      case 1024:
                        Y.effectTag &= -1025;
                        break;
                      case 1028:
                        Y.effectTag &= -1025;
                        cf(Y.alternate, Y);
                        break;
                      case 4:
                        cf(Y.alternate, Y);
                        break;
                      case 8:
                        var D = g,
                          x = Y,
                          K = l;
                        Qa ? Xe(D, x, K) : Ze(D, x, K);
                        $e(x);
                    }
                    Y = Y.nextEffect;
                  }
                } catch (jb) {
                  if (null === Y) throw Error(n(330));
                  Re(Y, jb);
                  Y = Y.nextEffect;
                }
              while (null !== Y);
              Da(a.containerInfo);
              a.current = c;
              Y = e;
              do
                try {
                  for (h = d; null !== Y; ) {
                    var Ha = Y.effectTag;
                    if (Ha & 36) {
                      var O = Y.alternate;
                      k = Y;
                      p = h;
                      switch (k.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Ue(16, 32, k);
                          break;
                        case 1:
                          var w = k.stateNode;
                          if (k.effectTag & 4)
                            if (null === O) w.componentDidMount();
                            else {
                              var r =
                                k.elementType === k.type
                                  ? O.memoizedProps
                                  : rc(k.type, O.memoizedProps);
                              w.componentDidUpdate(
                                r,
                                O.memoizedState,
                                w.__reactInternalSnapshotBeforeUpdate
                              );
                            }
                          var t = k.updateQueue;
                          null !== t && Qc(k, t, w, p);
                          break;
                        case 3:
                          var N = k.updateQueue;
                          if (null !== N) {
                            g = null;
                            if (null !== k.child)
                              switch (k.child.tag) {
                                case 5:
                                  g = za(k.child.stateNode);
                                  break;
                                case 1:
                                  g = k.child.stateNode;
                              }
                            Qc(k, N, g, p);
                          }
                          break;
                        case 5:
                          var Mc = k.stateNode;
                          null === O &&
                            k.effectTag & 4 &&
                            Wa(Mc, k.type, k.memoizedProps, k);
                          break;
                        case 6:
                          break;
                        case 4:
                          break;
                        case 12:
                          break;
                        case 13:
                          if (Sa && null === k.memoizedState) {
                            var Sb = k.alternate;
                            if (null !== Sb) {
                              var le = Sb.memoizedState;
                              if (null !== le) {
                                var me = le.dehydrated;
                                null !== me && yb(me);
                              }
                            }
                          }
                          break;
                        case 19:
                        case 17:
                        case 20:
                        case 21:
                          break;
                        default:
                          throw Error(n(163));
                      }
                    }
                    if (Ha & 128) {
                      k = void 0;
                      var Tb = Y.ref;
                      if (null !== Tb) {
                        var v = Y.stateNode;
                        switch (Y.tag) {
                          case 5:
                            k = za(v);
                            break;
                          default:
                            k = v;
                        }
                        'function' === typeof Tb ? Tb(k) : (Tb.current = k);
                      }
                    }
                    Y = Y.nextEffect;
                  }
                } catch (jb) {
                  if (null === Y) throw Error(n(330));
                  Re(Y, jb);
                  Y = Y.nextEffect;
                }
              while (null !== Y);
              Y = null;
              ac();
              T = f;
            } else a.current = c;
            if (Gf) (Gf = !1), (Hf = a), (If = b);
            else
              for (Y = e; null !== Y; )
                (b = Y.nextEffect), (Y.nextEffect = null), (Y = b);
            b = a.firstPendingTime;
            0 === b && (nf = null);
            1073741823 === b
              ? a === Lf
                ? Kf++
                : ((Kf = 0), (Lf = a))
              : (Kf = 0);
            'function' === typeof lg && lg(c.stateNode, d);
            Z(a);
            if (kf) throw ((kf = !1), (a = lf), (lf = null), a);
            if ((T & rf) !== R) return null;
            F();
            return null;
          }
          function kg() {
            for (; null !== Y; ) {
              var a = Y.effectTag;
              0 !== (a & 256) && Te(Y.alternate, Y);
              0 === (a & 512) ||
                Gf ||
                ((Gf = !0),
                ic(97, function() {
                  Vf();
                  return null;
                }));
              Y = Y.nextEffect;
            }
          }
          function Vf() {
            if (90 !== If) {
              var a = 97 < If ? 97 : If;
              If = 90;
              return hc(a, mg);
            }
          }
          function mg() {
            if (null === Hf) return !1;
            var a = Hf;
            Hf = null;
            if ((T & (S | sf)) !== R) throw Error(n(331));
            var b = T;
            T |= sf;
            for (a = a.current.firstEffect; null !== a; ) {
              try {
                var c = a;
                if (0 !== (c.effectTag & 512))
                  switch (c.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Ue(128, 0, c), Ue(0, 64, c);
                  }
              } catch (d) {
                if (null === a) throw Error(n(330));
                Re(a, d);
              }
              c = a.nextEffect;
              a.nextEffect = null;
              a = c;
            }
            T = b;
            F();
            return !0;
          }
          function ng(a, b, c) {
            b = Ne(c, b);
            b = jf(a, b, 1073741823);
            Ic(a, b);
            a = Nf(a, 1073741823);
            null !== a && Z(a);
          }
          function Re(a, b) {
            if (3 === a.tag) ng(a, a, b);
            else
              for (var c = a.return; null !== c; ) {
                if (3 === c.tag) {
                  ng(c, a, b);
                  break;
                } else if (1 === c.tag) {
                  var d = c.stateNode;
                  if (
                    'function' === typeof c.type.getDerivedStateFromError ||
                    ('function' === typeof d.componentDidCatch &&
                      (null === nf || !nf.has(d)))
                  ) {
                    a = Ne(b, a);
                    a = mf(c, a, 1073741823);
                    Ic(c, a);
                    c = Nf(c, 1073741823);
                    null !== c && Z(c);
                    break;
                  }
                }
                c = c.return;
              }
          }
          function fg(a, b, c) {
            var d = a.pingCache;
            null !== d && d.delete(b);
            U === a && W === c
              ? X === xf || (X === wf && 1073741823 === Af && E() - ff < Ff)
                ? Wf(a, W)
                : (Ef = !0)
              : Sf(a, c) &&
                ((b = a.lastPingedTime),
                (0 !== b && b < c) ||
                  ((a.lastPingedTime = c),
                  a.finishedExpirationTime === c &&
                    ((a.finishedExpirationTime = 0), (a.finishedWork = null)),
                  Z(a)));
          }
          function gf(a, b) {
            var c = a.stateNode;
            null !== c && c.delete(b);
            b = 0;
            0 === b && ((b = G()), (b = Vc(b, a, null)));
            a = Nf(a, b);
            null !== a && Z(a);
          }
          var ig;
          ig = function(a, b, c) {
            var d = b.expirationTime;
            if (null !== a) {
              var e = b.pendingProps;
              if (a.memoizedProps !== e || B.current) Bc = !0;
              else {
                if (d < c) {
                  Bc = !1;
                  switch (b.tag) {
                    case 3:
                      ze(b);
                      oe();
                      break;
                    case 5:
                      sd(b);
                      if (b.mode & 4 && 1 !== c && Ka(b.type, e))
                        return (
                          (b.expirationTime = b.childExpirationTime = 1), null
                        );
                      break;
                    case 1:
                      C(b.type) && Kb(b);
                      break;
                    case 4:
                      qd(b, b.stateNode.containerInfo);
                      break;
                    case 10:
                      xc(b, b.memoizedProps.value);
                      break;
                    case 13:
                      if (null !== b.memoizedState) {
                        d = b.child.childExpirationTime;
                        if (0 !== d && d >= c) return Be(a, b, c);
                        z(I, I.current & 1, b);
                        b = re(a, b, c);
                        return null !== b ? b.sibling : null;
                      }
                      z(I, I.current & 1, b);
                      break;
                    case 19:
                      d = b.childExpirationTime >= c;
                      if (0 !== (a.effectTag & 64)) {
                        if (d) return Ee(a, b, c);
                        b.effectTag |= 64;
                      }
                      e = b.memoizedState;
                      null !== e && ((e.rendering = null), (e.tail = null));
                      z(I, I.current, b);
                      if (!d) return null;
                  }
                  return re(a, b, c);
                }
                Bc = !1;
              }
            } else Bc = !1;
            b.expirationTime = 0;
            switch (b.tag) {
              case 2:
                d = b.type;
                null !== a &&
                  ((a.alternate = null),
                  (b.alternate = null),
                  (b.effectTag |= 2));
                a = b.pendingProps;
                e = Fb(b, A.current);
                Ac(b, c);
                e = Jd(null, b, d, a, e, c);
                b.effectTag |= 1;
                if (
                  'object' === typeof e &&
                  null !== e &&
                  'function' === typeof e.render &&
                  void 0 === e.$$typeof
                ) {
                  b.tag = 1;
                  Nd();
                  if (C(d)) {
                    var f = !0;
                    Kb(b);
                  } else f = !1;
                  b.memoizedState =
                    null !== e.state && void 0 !== e.state ? e.state : null;
                  var g = d.getDerivedStateFromProps;
                  'function' === typeof g && Uc(b, d, g, a);
                  e.updater = Xc;
                  b.stateNode = e;
                  e._reactInternalFiber = b;
                  ad(b, d, a, c);
                  b = ye(null, b, d, !0, f, c);
                } else (b.tag = 0), Q(null, b, e, c), (b = b.child);
                return b;
              case 16:
                e = b.elementType;
                null !== a &&
                  ((a.alternate = null),
                  (b.alternate = null),
                  (b.effectTag |= 2));
                a = b.pendingProps;
                sa(e);
                if (1 !== e._status) throw e._result;
                e = e._result;
                b.type = e;
                f = b.tag = og(e);
                a = rc(e, a);
                switch (f) {
                  case 0:
                    b = ve(null, b, e, a, c);
                    break;
                  case 1:
                    b = xe(null, b, e, a, c);
                    break;
                  case 11:
                    b = qe(null, b, e, a, c);
                    break;
                  case 14:
                    b = se(null, b, e, rc(e.type, a), d, c);
                    break;
                  default:
                    throw Error(n(306, e, ''));
                }
                return b;
              case 0:
                return (
                  (d = b.type),
                  (e = b.pendingProps),
                  (e = b.elementType === d ? e : rc(d, e)),
                  ve(a, b, d, e, c)
                );
              case 1:
                return (
                  (d = b.type),
                  (e = b.pendingProps),
                  (e = b.elementType === d ? e : rc(d, e)),
                  xe(a, b, d, e, c)
                );
              case 3:
                ze(b);
                d = b.updateQueue;
                if (null === d) throw Error(n(282));
                e = b.memoizedState;
                e = null !== e ? e.element : null;
                Nc(b, d, b.pendingProps, null, c);
                d = b.memoizedState.element;
                if (d === e) oe(), (b = re(a, b, c));
                else {
                  if ((e = b.stateNode.hydrate))
                    Sa
                      ? ((ee = tb(b.stateNode.containerInfo)),
                        (de = b),
                        (e = fe = !0))
                      : (e = !1);
                  if (e)
                    for (c = ld(b, null, d, c), b.child = c; c; )
                      (c.effectTag = (c.effectTag & -3) | 1024),
                        (c = c.sibling);
                  else Q(a, b, d, c), oe();
                  b = b.child;
                }
                return b;
              case 5:
                return (
                  sd(b),
                  null === a && je(b),
                  (d = b.type),
                  (e = b.pendingProps),
                  (f = null !== a ? a.memoizedProps : null),
                  (g = e.children),
                  Ja(d, e)
                    ? (g = null)
                    : null !== f && Ja(d, f) && (b.effectTag |= 16),
                  we(a, b),
                  b.mode & 4 && 1 !== c && Ka(d, e)
                    ? ((b.expirationTime = b.childExpirationTime = 1),
                      (b = null))
                    : (Q(a, b, g, c), (b = b.child)),
                  b
                );
              case 6:
                return null === a && je(b), null;
              case 13:
                return Be(a, b, c);
              case 4:
                return (
                  qd(b, b.stateNode.containerInfo),
                  (d = b.pendingProps),
                  null === a ? (b.child = kd(b, null, d, c)) : Q(a, b, d, c),
                  b.child
                );
              case 11:
                return (
                  (d = b.type),
                  (e = b.pendingProps),
                  (e = b.elementType === d ? e : rc(d, e)),
                  qe(a, b, d, e, c)
                );
              case 7:
                return Q(a, b, b.pendingProps, c), b.child;
              case 8:
                return Q(a, b, b.pendingProps.children, c), b.child;
              case 12:
                return Q(a, b, b.pendingProps.children, c), b.child;
              case 10:
                a: {
                  d = b.type._context;
                  e = b.pendingProps;
                  g = b.memoizedProps;
                  f = e.value;
                  xc(b, f);
                  if (null !== g) {
                    var l = g.value;
                    f = oc(l, f)
                      ? 0
                      : ('function' === typeof d._calculateChangedBits
                          ? d._calculateChangedBits(l, f)
                          : 1073741823) | 0;
                    if (0 === f) {
                      if (g.children === e.children && !B.current) {
                        b = re(a, b, c);
                        break a;
                      }
                    } else
                      for (
                        l = b.child, null !== l && (l.return = b);
                        null !== l;

                      ) {
                        var h = l.dependencies;
                        if (null !== h) {
                          g = l.child;
                          for (var k = h.firstContext; null !== k; ) {
                            if (k.context === d && 0 !== (k.observedBits & f)) {
                              1 === l.tag &&
                                ((k = Gc(c, null)), (k.tag = 2), Ic(l, k));
                              l.expirationTime < c && (l.expirationTime = c);
                              k = l.alternate;
                              null !== k &&
                                k.expirationTime < c &&
                                (k.expirationTime = c);
                              zc(l.return, c);
                              h.expirationTime < c && (h.expirationTime = c);
                              break;
                            }
                            k = k.next;
                          }
                        } else
                          g =
                            10 === l.tag
                              ? l.type === b.type
                                ? null
                                : l.child
                              : l.child;
                        if (null !== g) g.return = l;
                        else
                          for (g = l; null !== g; ) {
                            if (g === b) {
                              g = null;
                              break;
                            }
                            l = g.sibling;
                            if (null !== l) {
                              l.return = g.return;
                              g = l;
                              break;
                            }
                            g = g.return;
                          }
                        l = g;
                      }
                  }
                  Q(a, b, e.children, c);
                  b = b.child;
                }
                return b;
              case 9:
                return (
                  (e = b.type),
                  (f = b.pendingProps),
                  (d = f.children),
                  Ac(b, c),
                  (e = Cc(e, f.unstable_observedBits)),
                  (d = d(e)),
                  (b.effectTag |= 1),
                  Q(a, b, d, c),
                  b.child
                );
              case 14:
                return (
                  (e = b.type),
                  (f = rc(e, b.pendingProps)),
                  (f = rc(e.type, f)),
                  se(a, b, e, f, d, c)
                );
              case 15:
                return ue(a, b, b.type, b.pendingProps, d, c);
              case 17:
                return (
                  (d = b.type),
                  (e = b.pendingProps),
                  (e = b.elementType === d ? e : rc(d, e)),
                  null !== a &&
                    ((a.alternate = null),
                    (b.alternate = null),
                    (b.effectTag |= 2)),
                  (b.tag = 1),
                  C(d) ? ((a = !0), Kb(b)) : (a = !1),
                  Ac(b, c),
                  Zc(b, d, e, c),
                  ad(b, d, e, c),
                  ye(null, b, d, !0, a, c)
                );
              case 19:
                return Ee(a, b, c);
            }
            throw Error(n(156, b.tag));
          };
          var lg = null,
            We = null;
          function pg(a) {
            if ('undefined' === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
              return !1;
            var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (b.isDisabled || !b.supportsFiber) return !0;
            try {
              var c = b.inject(a);
              lg = function(a) {
                try {
                  b.onCommitFiberRoot(
                    c,
                    a,
                    void 0,
                    64 === (a.current.effectTag & 64)
                  );
                } catch (e) {}
              };
              We = function(a) {
                try {
                  b.onCommitFiberUnmount(c, a);
                } catch (e) {}
              };
            } catch (d) {}
            return !0;
          }
          function qg(a, b, c, d) {
            this.tag = a;
            this.key = c;
            this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = b;
            this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
            this.mode = d;
            this.effectTag = 0;
            this.lastEffect = this.firstEffect = this.nextEffect = null;
            this.childExpirationTime = this.expirationTime = 0;
            this.alternate = null;
          }
          function he(a, b, c, d) {
            return new qg(a, b, c, d);
          }
          function te(a) {
            a = a.prototype;
            return !(!a || !a.isReactComponent);
          }
          function og(a) {
            if ('function' === typeof a) return te(a) ? 1 : 0;
            if (void 0 !== a && null !== a) {
              a = a.$$typeof;
              if (a === la) return 11;
              if (a === oa) return 14;
            }
            return 2;
          }
          function fd(a, b) {
            var c = a.alternate;
            null === c
              ? ((c = he(a.tag, b, a.key, a.mode)),
                (c.elementType = a.elementType),
                (c.type = a.type),
                (c.stateNode = a.stateNode),
                (c.alternate = a),
                (a.alternate = c))
              : ((c.pendingProps = b),
                (c.effectTag = 0),
                (c.nextEffect = null),
                (c.firstEffect = null),
                (c.lastEffect = null));
            c.childExpirationTime = a.childExpirationTime;
            c.expirationTime = a.expirationTime;
            c.child = a.child;
            c.memoizedProps = a.memoizedProps;
            c.memoizedState = a.memoizedState;
            c.updateQueue = a.updateQueue;
            b = a.dependencies;
            c.dependencies =
              null === b
                ? null
                : {
                    expirationTime: b.expirationTime,
                    firstContext: b.firstContext,
                    responders: b.responders,
                  };
            c.sibling = a.sibling;
            c.index = a.index;
            c.ref = a.ref;
            return c;
          }
          function hd(a, b, c, d, e, f) {
            var g = 2;
            d = a;
            if ('function' === typeof a) te(a) && (g = 1);
            else if ('string' === typeof a) g = 5;
            else
              a: switch (a) {
                case ea:
                  return jd(c.children, e, f, b);
                case ka:
                  g = 8;
                  e |= 7;
                  break;
                case fa:
                  g = 8;
                  e |= 1;
                  break;
                case ha:
                  return (
                    (a = he(12, c, b, e | 8)),
                    (a.elementType = ha),
                    (a.type = ha),
                    (a.expirationTime = f),
                    a
                  );
                case ma:
                  return (
                    (a = he(13, c, b, e)),
                    (a.type = ma),
                    (a.elementType = ma),
                    (a.expirationTime = f),
                    a
                  );
                case na:
                  return (
                    (a = he(19, c, b, e)),
                    (a.elementType = na),
                    (a.expirationTime = f),
                    a
                  );
                default:
                  if ('object' === typeof a && null !== a)
                    switch (a.$$typeof) {
                      case ia:
                        g = 10;
                        break a;
                      case ja:
                        g = 9;
                        break a;
                      case la:
                        g = 11;
                        break a;
                      case oa:
                        g = 14;
                        break a;
                      case pa:
                        g = 16;
                        d = null;
                        break a;
                    }
                  throw Error(n(130, null == a ? a : typeof a, ''));
              }
            b = he(g, c, b, e);
            b.elementType = a;
            b.type = d;
            b.expirationTime = f;
            return b;
          }
          function jd(a, b, c, d) {
            a = he(7, a, d, b);
            a.expirationTime = c;
            return a;
          }
          function gd(a, b, c) {
            a = he(6, a, null, b);
            a.expirationTime = c;
            return a;
          }
          function id(a, b, c) {
            b = he(4, null !== a.children ? a.children : [], a.key, b);
            b.expirationTime = c;
            b.stateNode = {
              containerInfo: a.containerInfo,
              pendingChildren: null,
              implementation: a.implementation,
            };
            return b;
          }
          function rg(a, b, c) {
            this.tag = b;
            this.current = null;
            this.containerInfo = a;
            this.pingCache = this.pendingChildren = null;
            this.finishedExpirationTime = 0;
            this.finishedWork = null;
            this.timeoutHandle = Oa;
            this.pendingContext = this.context = null;
            this.hydrate = c;
            this.callbackNode = null;
            this.callbackPriority = 90;
            this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
          }
          function Sf(a, b) {
            var c = a.firstSuspendedTime;
            a = a.lastSuspendedTime;
            return 0 !== c && c >= b && a <= b;
          }
          function Pf(a, b) {
            var c = a.firstSuspendedTime,
              d = a.lastSuspendedTime;
            c < b && (a.firstSuspendedTime = b);
            if (d > b || 0 === c) a.lastSuspendedTime = b;
            b <= a.lastPingedTime && (a.lastPingedTime = 0);
            b <= a.lastExpiredTime && (a.lastExpiredTime = 0);
          }
          function Qf(a, b) {
            b > a.firstPendingTime && (a.firstPendingTime = b);
            var c = a.firstSuspendedTime;
            0 !== c &&
              (b >= c
                ? (a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0)
                : b >= a.lastSuspendedTime && (a.lastSuspendedTime = b + 1),
              b > a.nextKnownPendingLevel && (a.nextKnownPendingLevel = b));
          }
          function Uf(a, b) {
            var c = a.lastExpiredTime;
            if (0 === c || c > b) a.lastExpiredTime = b;
          }
          function sg(a) {
            var b = a._reactInternalFiber;
            if (void 0 === b) {
              if ('function' === typeof a.render) throw Error(n(188));
              throw Error(n(268, Object.keys(a)));
            }
            a = xa(b);
            return null === a ? null : a.stateNode;
          }
          function tg(a, b) {
            a = a.memoizedState;
            null !== a &&
              null !== a.dehydrated &&
              a.retryTime < b &&
              (a.retryTime = b);
          }
          function ug(a, b) {
            tg(a, b);
            (a = a.alternate) && tg(a, b);
          }
          var vg = {
            createContainer: function(a, b, c) {
              a = new rg(a, b, c);
              b = he(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
              a.current = b;
              return (b.stateNode = a);
            },
            updateContainer: function(a, b, c, d) {
              var e = b.current,
                f = G(),
                g = Sc.suspense;
              f = Vc(f, e, g);
              a: if (c) {
                c = c._reactInternalFiber;
                b: {
                  if (ua(c) !== c || 1 !== c.tag) throw Error(n(170));
                  var l = c;
                  do {
                    switch (l.tag) {
                      case 3:
                        l = l.stateNode.context;
                        break b;
                      case 1:
                        if (C(l.type)) {
                          l =
                            l.stateNode
                              .__reactInternalMemoizedMergedChildContext;
                          break b;
                        }
                    }
                    l = l.return;
                  } while (null !== l);
                  throw Error(n(171));
                }
                if (1 === c.tag) {
                  var h = c.type;
                  if (C(h)) {
                    c = Jb(c, h, l);
                    break a;
                  }
                }
                c = l;
              } else c = Db;
              null === b.context ? (b.context = c) : (b.pendingContext = c);
              b = Gc(f, g);
              b.payload = { element: a };
              d = void 0 === d ? null : d;
              null !== d && (b.callback = d);
              Ic(e, b);
              Wc(e, f);
              return f;
            },
            batchedEventUpdates: function(a, b) {
              var c = T;
              T |= 2;
              try {
                return a(b);
              } finally {
                (T = c), T === R && F();
              }
            },
            batchedUpdates: function(a, b) {
              var c = T;
              T |= 1;
              try {
                return a(b);
              } finally {
                (T = c), T === R && F();
              }
            },
            unbatchedUpdates: function(a, b) {
              var c = T;
              T &= -2;
              T |= rf;
              try {
                return a(b);
              } finally {
                (T = c), T === R && F();
              }
            },
            deferredUpdates: function(a) {
              return hc(97, a);
            },
            syncUpdates: function(a, b, c, d) {
              return hc(99, a.bind(null, b, c, d));
            },
            discreteUpdates: function(a, b, c, d) {
              var e = T;
              T |= 4;
              try {
                return hc(98, a.bind(null, b, c, d));
              } finally {
                (T = e), T === R && F();
              }
            },
            flushDiscreteUpdates: function() {
              (T & (1 | S | sf)) === R && (dg(), Vf());
            },
            flushControlled: function(a) {
              var b = T;
              T |= 1;
              try {
                hc(99, a);
              } finally {
                (T = b), T === R && F();
              }
            },
            flushSync: eg,
            flushPassiveEffects: Vf,
            IsThisRendererActing: { current: !1 },
            getPublicRootInstance: function(a) {
              a = a.current;
              if (!a.child) return null;
              switch (a.child.tag) {
                case 5:
                  return za(a.child.stateNode);
                default:
                  return a.child.stateNode;
              }
            },
            attemptSynchronousHydration: function(a) {
              switch (a.tag) {
                case 3:
                  var b = a.stateNode;
                  b.hydrate && cg(b, b.firstPendingTime);
                  break;
                case 13:
                  eg(function() {
                    return Wc(a, 1073741823);
                  }),
                    (b = mc(G(), 150, 100)),
                    ug(a, b);
              }
            },
            attemptUserBlockingHydration: function(a) {
              if (13 === a.tag) {
                var b = mc(G(), 150, 100);
                Wc(a, b);
                ug(a, b);
              }
            },
            attemptContinuousHydration: function(a) {
              if (13 === a.tag) {
                G();
                var b = lc++;
                Wc(a, b);
                ug(a, b);
              }
            },
            attemptHydrationAtCurrentPriority: function(a) {
              if (13 === a.tag) {
                var b = G();
                b = Vc(b, a, null);
                Wc(a, b);
                ug(a, b);
              }
            },
            findHostInstance: sg,
            findHostInstanceWithWarning: function(a) {
              return sg(a);
            },
            findHostInstanceWithNoPortals: function(a) {
              a = ya(a);
              return null === a
                ? null
                : 20 === a.tag
                ? a.stateNode.instance
                : a.stateNode;
            },
            shouldSuspend: function() {
              return !1;
            },
            injectIntoDevTools: function(a) {
              var b = a.findFiberByHostInstance;
              return pg(
                aa({}, a, {
                  overrideHookState: null,
                  overrideProps: null,
                  setSuspenseHandler: null,
                  scheduleUpdate: null,
                  currentDispatcherRef: q.ReactCurrentDispatcher,
                  findHostInstanceByFiber: function(a) {
                    a = xa(a);
                    return null === a ? null : a.stateNode;
                  },
                  findFiberByHostInstance: function(a) {
                    return b ? b(a) : null;
                  },
                  findHostInstancesForRefresh: null,
                  scheduleRefresh: null,
                  scheduleRoot: null,
                  setRefreshHandler: null,
                  getCurrentFiber: null,
                })
              );
            },
          };
          module.exports = vg.default || vg;

          var $$$renderer = module.exports;
          module.exports = $$$reconciler;
          return $$$renderer;
        };
      },
      { 'object-assign': 117, react: 131, scheduler: 136 },
    ],
    128: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            'use strict';

            if (process.env.NODE_ENV === 'production') {
              module.exports = require('./cjs/react-reconciler.production.min.js');
            } else {
              module.exports = require('./cjs/react-reconciler.development.js');
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      {
        './cjs/react-reconciler.development.js': 126,
        './cjs/react-reconciler.production.min.js': 127,
        _process: 112,
      },
    ],
    129: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /** @license React v16.14.0
             * react.development.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict';

            if (process.env.NODE_ENV !== 'production') {
              (function() {
                'use strict';

                var _assign = require('object-assign');
                var checkPropTypes = require('prop-types/checkPropTypes');

                var ReactVersion = '16.14.0';

                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                var REACT_ELEMENT_TYPE = hasSymbol
                  ? Symbol.for('react.element')
                  : 0xeac7;
                var REACT_PORTAL_TYPE = hasSymbol
                  ? Symbol.for('react.portal')
                  : 0xeaca;
                var REACT_FRAGMENT_TYPE = hasSymbol
                  ? Symbol.for('react.fragment')
                  : 0xeacb;
                var REACT_STRICT_MODE_TYPE = hasSymbol
                  ? Symbol.for('react.strict_mode')
                  : 0xeacc;
                var REACT_PROFILER_TYPE = hasSymbol
                  ? Symbol.for('react.profiler')
                  : 0xead2;
                var REACT_PROVIDER_TYPE = hasSymbol
                  ? Symbol.for('react.provider')
                  : 0xeacd;
                var REACT_CONTEXT_TYPE = hasSymbol
                  ? Symbol.for('react.context')
                  : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol
                  ? Symbol.for('react.concurrent_mode')
                  : 0xeacf;
                var REACT_FORWARD_REF_TYPE = hasSymbol
                  ? Symbol.for('react.forward_ref')
                  : 0xead0;
                var REACT_SUSPENSE_TYPE = hasSymbol
                  ? Symbol.for('react.suspense')
                  : 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = hasSymbol
                  ? Symbol.for('react.suspense_list')
                  : 0xead8;
                var REACT_MEMO_TYPE = hasSymbol
                  ? Symbol.for('react.memo')
                  : 0xead3;
                var REACT_LAZY_TYPE = hasSymbol
                  ? Symbol.for('react.lazy')
                  : 0xead4;
                var REACT_BLOCK_TYPE = hasSymbol
                  ? Symbol.for('react.block')
                  : 0xead9;
                var REACT_FUNDAMENTAL_TYPE = hasSymbol
                  ? Symbol.for('react.fundamental')
                  : 0xead5;
                var REACT_RESPONDER_TYPE = hasSymbol
                  ? Symbol.for('react.responder')
                  : 0xead6;
                var REACT_SCOPE_TYPE = hasSymbol
                  ? Symbol.for('react.scope')
                  : 0xead7;
                var MAYBE_ITERATOR_SYMBOL =
                  typeof Symbol === 'function' && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = '@@iterator';
                function getIteratorFn(maybeIterable) {
                  if (
                    maybeIterable === null ||
                    typeof maybeIterable !== 'object'
                  ) {
                    return null;
                  }

                  var maybeIterator =
                    (MAYBE_ITERATOR_SYMBOL &&
                      maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                    maybeIterable[FAUX_ITERATOR_SYMBOL];

                  if (typeof maybeIterator === 'function') {
                    return maybeIterator;
                  }

                  return null;
                }

                /**
                 * Keeps track of the current dispatcher.
                 */
                var ReactCurrentDispatcher = {
                  /**
                   * @internal
                   * @type {ReactComponent}
                   */
                  current: null,
                };

                /**
                 * Keeps track of the current batch's configuration such as how long an update
                 * should suspend for if it needs to.
                 */
                var ReactCurrentBatchConfig = {
                  suspense: null,
                };

                /**
                 * Keeps track of the current owner.
                 *
                 * The current owner is the component who should own any components that are
                 * currently being constructed.
                 */
                var ReactCurrentOwner = {
                  /**
                   * @internal
                   * @type {ReactComponent}
                   */
                  current: null,
                };

                var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
                function describeComponentFrame(name, source, ownerName) {
                  var sourceInfo = '';

                  if (source) {
                    var path = source.fileName;
                    var fileName = path.replace(BEFORE_SLASH_RE, '');

                    {
                      // In DEV, include code for a common special case:
                      // prefer "folder/index.js" instead of just "index.js".
                      if (/^index\./.test(fileName)) {
                        var match = path.match(BEFORE_SLASH_RE);

                        if (match) {
                          var pathBeforeSlash = match[1];

                          if (pathBeforeSlash) {
                            var folderName = pathBeforeSlash.replace(
                              BEFORE_SLASH_RE,
                              ''
                            );
                            fileName = folderName + '/' + fileName;
                          }
                        }
                      }
                    }

                    sourceInfo =
                      ' (at ' + fileName + ':' + source.lineNumber + ')';
                  } else if (ownerName) {
                    sourceInfo = ' (created by ' + ownerName + ')';
                  }

                  return '\n    in ' + (name || 'Unknown') + sourceInfo;
                }

                var Resolved = 1;
                function refineResolvedLazyComponent(lazyComponent) {
                  return lazyComponent._status === Resolved
                    ? lazyComponent._result
                    : null;
                }

                function getWrappedName(outerType, innerType, wrapperName) {
                  var functionName =
                    innerType.displayName || innerType.name || '';
                  return (
                    outerType.displayName ||
                    (functionName !== ''
                      ? wrapperName + '(' + functionName + ')'
                      : wrapperName)
                  );
                }

                function getComponentName(type) {
                  if (type == null) {
                    // Host root, text node or just invalid type.
                    return null;
                  }

                  {
                    if (typeof type.tag === 'number') {
                      error(
                        'Received an unexpected object in getComponentName(). ' +
                          'This is likely a bug in React. Please file an issue.'
                      );
                    }
                  }

                  if (typeof type === 'function') {
                    return type.displayName || type.name || null;
                  }

                  if (typeof type === 'string') {
                    return type;
                  }

                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                      return 'Fragment';

                    case REACT_PORTAL_TYPE:
                      return 'Portal';

                    case REACT_PROFILER_TYPE:
                      return 'Profiler';

                    case REACT_STRICT_MODE_TYPE:
                      return 'StrictMode';

                    case REACT_SUSPENSE_TYPE:
                      return 'Suspense';

                    case REACT_SUSPENSE_LIST_TYPE:
                      return 'SuspenseList';
                  }

                  if (typeof type === 'object') {
                    switch (type.$$typeof) {
                      case REACT_CONTEXT_TYPE:
                        return 'Context.Consumer';

                      case REACT_PROVIDER_TYPE:
                        return 'Context.Provider';

                      case REACT_FORWARD_REF_TYPE:
                        return getWrappedName(type, type.render, 'ForwardRef');

                      case REACT_MEMO_TYPE:
                        return getComponentName(type.type);

                      case REACT_BLOCK_TYPE:
                        return getComponentName(type.render);

                      case REACT_LAZY_TYPE: {
                        var thenable = type;
                        var resolvedThenable = refineResolvedLazyComponent(
                          thenable
                        );

                        if (resolvedThenable) {
                          return getComponentName(resolvedThenable);
                        }

                        break;
                      }
                    }
                  }

                  return null;
                }

                var ReactDebugCurrentFrame = {};
                var currentlyValidatingElement = null;
                function setCurrentlyValidatingElement(element) {
                  {
                    currentlyValidatingElement = element;
                  }
                }

                {
                  // Stack implementation injected by the current renderer.
                  ReactDebugCurrentFrame.getCurrentStack = null;

                  ReactDebugCurrentFrame.getStackAddendum = function() {
                    var stack = ''; // Add an extra top frame while an element is being validated

                    if (currentlyValidatingElement) {
                      var name = getComponentName(
                        currentlyValidatingElement.type
                      );
                      var owner = currentlyValidatingElement._owner;
                      stack += describeComponentFrame(
                        name,
                        currentlyValidatingElement._source,
                        owner && getComponentName(owner.type)
                      );
                    } // Delegate to the injected renderer-specific implementation

                    var impl = ReactDebugCurrentFrame.getCurrentStack;

                    if (impl) {
                      stack += impl() || '';
                    }

                    return stack;
                  };
                }

                /**
                 * Used by act() to track whether you're inside an act() scope.
                 */
                var IsSomeRendererActing = {
                  current: false,
                };

                var ReactSharedInternals = {
                  ReactCurrentDispatcher: ReactCurrentDispatcher,
                  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
                  ReactCurrentOwner: ReactCurrentOwner,
                  IsSomeRendererActing: IsSomeRendererActing,
                  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
                  assign: _assign,
                };

                {
                  _assign(ReactSharedInternals, {
                    // These should not be included in production.
                    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
                    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
                    // TODO: remove in React 17.0.
                    ReactComponentTreeHook: {},
                  });
                }

                // by calls to these methods by a Babel plugin.
                //
                // In PROD (or in packages without access to React internals),
                // they are left as they are instead.

                function warn(format) {
                  {
                    for (
                      var _len = arguments.length,
                        args = new Array(_len > 1 ? _len - 1 : 0),
                        _key = 1;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 1] = arguments[_key];
                    }

                    printWarning('warn', format, args);
                  }
                }
                function error(format) {
                  {
                    for (
                      var _len2 = arguments.length,
                        args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                        _key2 = 1;
                      _key2 < _len2;
                      _key2++
                    ) {
                      args[_key2 - 1] = arguments[_key2];
                    }

                    printWarning('error', format, args);
                  }
                }

                function printWarning(level, format, args) {
                  // When changing this logic, you might want to also
                  // update consoleWithStackDev.www.js as well.
                  {
                    var hasExistingStack =
                      args.length > 0 &&
                      typeof args[args.length - 1] === 'string' &&
                      args[args.length - 1].indexOf('\n    in') === 0;

                    if (!hasExistingStack) {
                      var ReactDebugCurrentFrame =
                        ReactSharedInternals.ReactDebugCurrentFrame;
                      var stack = ReactDebugCurrentFrame.getStackAddendum();

                      if (stack !== '') {
                        format += '%s';
                        args = args.concat([stack]);
                      }
                    }

                    var argsWithFormat = args.map(function(item) {
                      return '' + item;
                    }); // Careful: RN currently depends on this prefix

                    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                    // breaks IE9: https://github.com/facebook/react/issues/13610
                    // eslint-disable-next-line react-internal/no-production-logging

                    Function.prototype.apply.call(
                      console[level],
                      console,
                      argsWithFormat
                    );

                    try {
                      // --- Welcome to debugging React ---
                      // This error was thrown as a convenience so that you can use this stack
                      // to find the callsite that caused this warning to fire.
                      var argIndex = 0;
                      var message =
                        'Warning: ' +
                        format.replace(/%s/g, function() {
                          return args[argIndex++];
                        });
                      throw new Error(message);
                    } catch (x) {}
                  }
                }

                var didWarnStateUpdateForUnmountedComponent = {};

                function warnNoop(publicInstance, callerName) {
                  {
                    var _constructor = publicInstance.constructor;
                    var componentName =
                      (_constructor &&
                        (_constructor.displayName || _constructor.name)) ||
                      'ReactClass';
                    var warningKey = componentName + '.' + callerName;

                    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                      return;
                    }

                    error(
                      "Can't call %s on a component that is not yet mounted. " +
                        'This is a no-op, but it might indicate a bug in your application. ' +
                        'Instead, assign to `this.state` directly or define a `state = {};` ' +
                        'class property with the desired state in the %s component.',
                      callerName,
                      componentName
                    );

                    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
                  }
                }
                /**
                 * This is the abstract API for an update queue.
                 */

                var ReactNoopUpdateQueue = {
                  /**
                   * Checks whether or not this composite component is mounted.
                   * @param {ReactClass} publicInstance The instance we want to test.
                   * @return {boolean} True if mounted, false otherwise.
                   * @protected
                   * @final
                   */
                  isMounted: function(publicInstance) {
                    return false;
                  },

                  /**
                   * Forces an update. This should only be invoked when it is known with
                   * certainty that we are **not** in a DOM transaction.
                   *
                   * You may want to call this when you know that some deeper aspect of the
                   * component's state has changed but `setState` was not called.
                   *
                   * This will not invoke `shouldComponentUpdate`, but it will invoke
                   * `componentWillUpdate` and `componentDidUpdate`.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} callerName name of the calling function in the public API.
                   * @internal
                   */
                  enqueueForceUpdate: function(
                    publicInstance,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'forceUpdate');
                  },

                  /**
                   * Replaces all of the state. Always use this or `setState` to mutate state.
                   * You should treat `this.state` as immutable.
                   *
                   * There is no guarantee that `this.state` will be immediately updated, so
                   * accessing `this.state` after calling this method may return the old value.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {object} completeState Next state.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} callerName name of the calling function in the public API.
                   * @internal
                   */
                  enqueueReplaceState: function(
                    publicInstance,
                    completeState,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'replaceState');
                  },

                  /**
                   * Sets a subset of the state. This only exists because _pendingState is
                   * internal. This provides a merging strategy that is not available to deep
                   * properties which is confusing. TODO: Expose pendingState or don't use it
                   * during the merge.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {object} partialState Next partial state to be merged with state.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} Name of the calling function in the public API.
                   * @internal
                   */
                  enqueueSetState: function(
                    publicInstance,
                    partialState,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'setState');
                  },
                };

                var emptyObject = {};

                {
                  Object.freeze(emptyObject);
                }
                /**
                 * Base class helpers for the updating state of a component.
                 */

                function Component(props, context, updater) {
                  this.props = props;
                  this.context = context; // If a component has string refs, we will assign a different object later.

                  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
                  // renderer.

                  this.updater = updater || ReactNoopUpdateQueue;
                }

                Component.prototype.isReactComponent = {};
                /**
                 * Sets a subset of the state. Always use this to mutate
                 * state. You should treat `this.state` as immutable.
                 *
                 * There is no guarantee that `this.state` will be immediately updated, so
                 * accessing `this.state` after calling this method may return the old value.
                 *
                 * There is no guarantee that calls to `setState` will run synchronously,
                 * as they may eventually be batched together.  You can provide an optional
                 * callback that will be executed when the call to setState is actually
                 * completed.
                 *
                 * When a function is provided to setState, it will be called at some point in
                 * the future (not synchronously). It will be called with the up to date
                 * component arguments (state, props, context). These values can be different
                 * from this.* because your function may be called after receiveProps but before
                 * shouldComponentUpdate, and this new state, props, and context will not yet be
                 * assigned to this.
                 *
                 * @param {object|function} partialState Next partial state or function to
                 *        produce next partial state to be merged with current state.
                 * @param {?function} callback Called after state is updated.
                 * @final
                 * @protected
                 */

                Component.prototype.setState = function(
                  partialState,
                  callback
                ) {
                  if (
                    !(
                      typeof partialState === 'object' ||
                      typeof partialState === 'function' ||
                      partialState == null
                    )
                  ) {
                    {
                      throw Error(
                        'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'
                      );
                    }
                  }

                  this.updater.enqueueSetState(
                    this,
                    partialState,
                    callback,
                    'setState'
                  );
                };
                /**
                 * Forces an update. This should only be invoked when it is known with
                 * certainty that we are **not** in a DOM transaction.
                 *
                 * You may want to call this when you know that some deeper aspect of the
                 * component's state has changed but `setState` was not called.
                 *
                 * This will not invoke `shouldComponentUpdate`, but it will invoke
                 * `componentWillUpdate` and `componentDidUpdate`.
                 *
                 * @param {?function} callback Called after update is complete.
                 * @final
                 * @protected
                 */

                Component.prototype.forceUpdate = function(callback) {
                  this.updater.enqueueForceUpdate(
                    this,
                    callback,
                    'forceUpdate'
                  );
                };
                /**
                 * Deprecated APIs. These APIs used to exist on classic React classes but since
                 * we would like to deprecate them, we're not going to move them over to this
                 * modern base class. Instead, we define a getter that warns if it's accessed.
                 */

                {
                  var deprecatedAPIs = {
                    isMounted: [
                      'isMounted',
                      'Instead, make sure to clean up subscriptions and pending requests in ' +
                        'componentWillUnmount to prevent memory leaks.',
                    ],
                    replaceState: [
                      'replaceState',
                      'Refactor your code to use setState instead (see ' +
                        'https://github.com/facebook/react/issues/3236).',
                    ],
                  };

                  var defineDeprecationWarning = function(methodName, info) {
                    Object.defineProperty(Component.prototype, methodName, {
                      get: function() {
                        warn(
                          '%s(...) is deprecated in plain JavaScript React classes. %s',
                          info[0],
                          info[1]
                        );

                        return undefined;
                      },
                    });
                  };

                  for (var fnName in deprecatedAPIs) {
                    if (deprecatedAPIs.hasOwnProperty(fnName)) {
                      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                    }
                  }
                }

                function ComponentDummy() {}

                ComponentDummy.prototype = Component.prototype;
                /**
                 * Convenience component with default shallow equality check for sCU.
                 */

                function PureComponent(props, context, updater) {
                  this.props = props;
                  this.context = context; // If a component has string refs, we will assign a different object later.

                  this.refs = emptyObject;
                  this.updater = updater || ReactNoopUpdateQueue;
                }

                var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
                pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

                _assign(pureComponentPrototype, Component.prototype);

                pureComponentPrototype.isPureReactComponent = true;

                // an immutable object with a single mutable value
                function createRef() {
                  var refObject = {
                    current: null,
                  };

                  {
                    Object.seal(refObject);
                  }

                  return refObject;
                }

                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var RESERVED_PROPS = {
                  key: true,
                  ref: true,
                  __self: true,
                  __source: true,
                };
                var specialPropKeyWarningShown,
                  specialPropRefWarningShown,
                  didWarnAboutStringRefs;

                {
                  didWarnAboutStringRefs = {};
                }

                function hasValidRef(config) {
                  {
                    if (hasOwnProperty.call(config, 'ref')) {
                      var getter = Object.getOwnPropertyDescriptor(
                        config,
                        'ref'
                      ).get;

                      if (getter && getter.isReactWarning) {
                        return false;
                      }
                    }
                  }

                  return config.ref !== undefined;
                }

                function hasValidKey(config) {
                  {
                    if (hasOwnProperty.call(config, 'key')) {
                      var getter = Object.getOwnPropertyDescriptor(
                        config,
                        'key'
                      ).get;

                      if (getter && getter.isReactWarning) {
                        return false;
                      }
                    }
                  }

                  return config.key !== undefined;
                }

                function defineKeyPropWarningGetter(props, displayName) {
                  var warnAboutAccessingKey = function() {
                    {
                      if (!specialPropKeyWarningShown) {
                        specialPropKeyWarningShown = true;

                        error(
                          '%s: `key` is not a prop. Trying to access it will result ' +
                            'in `undefined` being returned. If you need to access the same ' +
                            'value within the child component, you should pass it as a different ' +
                            'prop. (https://fb.me/react-special-props)',
                          displayName
                        );
                      }
                    }
                  };

                  warnAboutAccessingKey.isReactWarning = true;
                  Object.defineProperty(props, 'key', {
                    get: warnAboutAccessingKey,
                    configurable: true,
                  });
                }

                function defineRefPropWarningGetter(props, displayName) {
                  var warnAboutAccessingRef = function() {
                    {
                      if (!specialPropRefWarningShown) {
                        specialPropRefWarningShown = true;

                        error(
                          '%s: `ref` is not a prop. Trying to access it will result ' +
                            'in `undefined` being returned. If you need to access the same ' +
                            'value within the child component, you should pass it as a different ' +
                            'prop. (https://fb.me/react-special-props)',
                          displayName
                        );
                      }
                    }
                  };

                  warnAboutAccessingRef.isReactWarning = true;
                  Object.defineProperty(props, 'ref', {
                    get: warnAboutAccessingRef,
                    configurable: true,
                  });
                }

                function warnIfStringRefCannotBeAutoConverted(config) {
                  {
                    if (
                      typeof config.ref === 'string' &&
                      ReactCurrentOwner.current &&
                      config.__self &&
                      ReactCurrentOwner.current.stateNode !== config.__self
                    ) {
                      var componentName = getComponentName(
                        ReactCurrentOwner.current.type
                      );

                      if (!didWarnAboutStringRefs[componentName]) {
                        error(
                          'Component "%s" contains the string ref "%s". ' +
                            'Support for string refs will be removed in a future major release. ' +
                            'This case cannot be automatically converted to an arrow function. ' +
                            'We ask you to manually fix this case by using useRef() or createRef() instead. ' +
                            'Learn more about using refs safely here: ' +
                            'https://fb.me/react-strict-mode-string-ref',
                          getComponentName(ReactCurrentOwner.current.type),
                          config.ref
                        );

                        didWarnAboutStringRefs[componentName] = true;
                      }
                    }
                  }
                }
                /**
                 * Factory method to create a new React element. This no longer adheres to
                 * the class pattern, so do not use new to call it. Also, instanceof check
                 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
                 * if something is a React Element.
                 *
                 * @param {*} type
                 * @param {*} props
                 * @param {*} key
                 * @param {string|object} ref
                 * @param {*} owner
                 * @param {*} self A *temporary* helper to detect places where `this` is
                 * different from the `owner` when React.createElement is called, so that we
                 * can warn. We want to get rid of owner and replace string `ref`s with arrow
                 * functions, and as long as `this` and owner are the same, there will be no
                 * change in behavior.
                 * @param {*} source An annotation object (added by a transpiler or otherwise)
                 * indicating filename, line number, and/or other information.
                 * @internal
                 */

                var ReactElement = function(
                  type,
                  key,
                  ref,
                  self,
                  source,
                  owner,
                  props
                ) {
                  var element = {
                    // This tag allows us to uniquely identify this as a React Element
                    $$typeof: REACT_ELEMENT_TYPE,
                    // Built-in properties that belong on the element
                    type: type,
                    key: key,
                    ref: ref,
                    props: props,
                    // Record the component responsible for creating this element.
                    _owner: owner,
                  };

                  {
                    // The validation flag is currently mutative. We put it on
                    // an external backing store so that we can freeze the whole object.
                    // This can be replaced with a WeakMap once they are implemented in
                    // commonly used development environments.
                    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
                    // the validation flag non-enumerable (where possible, which should
                    // include every environment we run tests in), so the test framework
                    // ignores it.

                    Object.defineProperty(element._store, 'validated', {
                      configurable: false,
                      enumerable: false,
                      writable: true,
                      value: false,
                    }); // self and source are DEV only properties.

                    Object.defineProperty(element, '_self', {
                      configurable: false,
                      enumerable: false,
                      writable: false,
                      value: self,
                    }); // Two elements created in two different places should be considered
                    // equal for testing purposes and therefore we hide it from enumeration.

                    Object.defineProperty(element, '_source', {
                      configurable: false,
                      enumerable: false,
                      writable: false,
                      value: source,
                    });

                    if (Object.freeze) {
                      Object.freeze(element.props);
                      Object.freeze(element);
                    }
                  }

                  return element;
                };
                /**
                 * Create and return a new ReactElement of the given type.
                 * See https://reactjs.org/docs/react-api.html#createelement
                 */

                function createElement(type, config, children) {
                  var propName; // Reserved names are extracted

                  var props = {};
                  var key = null;
                  var ref = null;
                  var self = null;
                  var source = null;

                  if (config != null) {
                    if (hasValidRef(config)) {
                      ref = config.ref;

                      {
                        warnIfStringRefCannotBeAutoConverted(config);
                      }
                    }

                    if (hasValidKey(config)) {
                      key = '' + config.key;
                    }

                    self = config.__self === undefined ? null : config.__self;
                    source =
                      config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

                    for (propName in config) {
                      if (
                        hasOwnProperty.call(config, propName) &&
                        !RESERVED_PROPS.hasOwnProperty(propName)
                      ) {
                        props[propName] = config[propName];
                      }
                    }
                  } // Children can be more than one argument, and those are transferred onto
                  // the newly allocated props object.

                  var childrenLength = arguments.length - 2;

                  if (childrenLength === 1) {
                    props.children = children;
                  } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength);

                    for (var i = 0; i < childrenLength; i++) {
                      childArray[i] = arguments[i + 2];
                    }

                    {
                      if (Object.freeze) {
                        Object.freeze(childArray);
                      }
                    }

                    props.children = childArray;
                  } // Resolve default props

                  if (type && type.defaultProps) {
                    var defaultProps = type.defaultProps;

                    for (propName in defaultProps) {
                      if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                      }
                    }
                  }

                  {
                    if (key || ref) {
                      var displayName =
                        typeof type === 'function'
                          ? type.displayName || type.name || 'Unknown'
                          : type;

                      if (key) {
                        defineKeyPropWarningGetter(props, displayName);
                      }

                      if (ref) {
                        defineRefPropWarningGetter(props, displayName);
                      }
                    }
                  }

                  return ReactElement(
                    type,
                    key,
                    ref,
                    self,
                    source,
                    ReactCurrentOwner.current,
                    props
                  );
                }
                function cloneAndReplaceKey(oldElement, newKey) {
                  var newElement = ReactElement(
                    oldElement.type,
                    newKey,
                    oldElement.ref,
                    oldElement._self,
                    oldElement._source,
                    oldElement._owner,
                    oldElement.props
                  );
                  return newElement;
                }
                /**
                 * Clone and return a new ReactElement using element as the starting point.
                 * See https://reactjs.org/docs/react-api.html#cloneelement
                 */

                function cloneElement(element, config, children) {
                  if (!!(element === null || element === undefined)) {
                    {
                      throw Error(
                        'React.cloneElement(...): The argument must be a React element, but you passed ' +
                          element +
                          '.'
                      );
                    }
                  }

                  var propName; // Original props are copied

                  var props = _assign({}, element.props); // Reserved names are extracted

                  var key = element.key;
                  var ref = element.ref; // Self is preserved since the owner is preserved.

                  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
                  // transpiler, and the original source is probably a better indicator of the
                  // true owner.

                  var source = element._source; // Owner will be preserved, unless ref is overridden

                  var owner = element._owner;

                  if (config != null) {
                    if (hasValidRef(config)) {
                      // Silently steal the ref from the parent.
                      ref = config.ref;
                      owner = ReactCurrentOwner.current;
                    }

                    if (hasValidKey(config)) {
                      key = '' + config.key;
                    } // Remaining properties override existing props

                    var defaultProps;

                    if (element.type && element.type.defaultProps) {
                      defaultProps = element.type.defaultProps;
                    }

                    for (propName in config) {
                      if (
                        hasOwnProperty.call(config, propName) &&
                        !RESERVED_PROPS.hasOwnProperty(propName)
                      ) {
                        if (
                          config[propName] === undefined &&
                          defaultProps !== undefined
                        ) {
                          // Resolve default props
                          props[propName] = defaultProps[propName];
                        } else {
                          props[propName] = config[propName];
                        }
                      }
                    }
                  } // Children can be more than one argument, and those are transferred onto
                  // the newly allocated props object.

                  var childrenLength = arguments.length - 2;

                  if (childrenLength === 1) {
                    props.children = children;
                  } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength);

                    for (var i = 0; i < childrenLength; i++) {
                      childArray[i] = arguments[i + 2];
                    }

                    props.children = childArray;
                  }

                  return ReactElement(
                    element.type,
                    key,
                    ref,
                    self,
                    source,
                    owner,
                    props
                  );
                }
                /**
                 * Verifies the object is a ReactElement.
                 * See https://reactjs.org/docs/react-api.html#isvalidelement
                 * @param {?object} object
                 * @return {boolean} True if `object` is a ReactElement.
                 * @final
                 */

                function isValidElement(object) {
                  return (
                    typeof object === 'object' &&
                    object !== null &&
                    object.$$typeof === REACT_ELEMENT_TYPE
                  );
                }

                var SEPARATOR = '.';
                var SUBSEPARATOR = ':';
                /**
                 * Escape and wrap key so it is safe to use as a reactid
                 *
                 * @param {string} key to be escaped.
                 * @return {string} the escaped key.
                 */

                function escape(key) {
                  var escapeRegex = /[=:]/g;
                  var escaperLookup = {
                    '=': '=0',
                    ':': '=2',
                  };
                  var escapedString = ('' + key).replace(escapeRegex, function(
                    match
                  ) {
                    return escaperLookup[match];
                  });
                  return '$' + escapedString;
                }
                /**
                 * TODO: Test that a single child and an array with one item have the same key
                 * pattern.
                 */

                var didWarnAboutMaps = false;
                var userProvidedKeyEscapeRegex = /\/+/g;

                function escapeUserProvidedKey(text) {
                  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
                }

                var POOL_SIZE = 10;
                var traverseContextPool = [];

                function getPooledTraverseContext(
                  mapResult,
                  keyPrefix,
                  mapFunction,
                  mapContext
                ) {
                  if (traverseContextPool.length) {
                    var traverseContext = traverseContextPool.pop();
                    traverseContext.result = mapResult;
                    traverseContext.keyPrefix = keyPrefix;
                    traverseContext.func = mapFunction;
                    traverseContext.context = mapContext;
                    traverseContext.count = 0;
                    return traverseContext;
                  } else {
                    return {
                      result: mapResult,
                      keyPrefix: keyPrefix,
                      func: mapFunction,
                      context: mapContext,
                      count: 0,
                    };
                  }
                }

                function releaseTraverseContext(traverseContext) {
                  traverseContext.result = null;
                  traverseContext.keyPrefix = null;
                  traverseContext.func = null;
                  traverseContext.context = null;
                  traverseContext.count = 0;

                  if (traverseContextPool.length < POOL_SIZE) {
                    traverseContextPool.push(traverseContext);
                  }
                }
                /**
                 * @param {?*} children Children tree container.
                 * @param {!string} nameSoFar Name of the key path so far.
                 * @param {!function} callback Callback to invoke with each child found.
                 * @param {?*} traverseContext Used to pass information throughout the traversal
                 * process.
                 * @return {!number} The number of children in this subtree.
                 */

                function traverseAllChildrenImpl(
                  children,
                  nameSoFar,
                  callback,
                  traverseContext
                ) {
                  var type = typeof children;

                  if (type === 'undefined' || type === 'boolean') {
                    // All of the above are perceived as null.
                    children = null;
                  }

                  var invokeCallback = false;

                  if (children === null) {
                    invokeCallback = true;
                  } else {
                    switch (type) {
                      case 'string':
                      case 'number':
                        invokeCallback = true;
                        break;

                      case 'object':
                        switch (children.$$typeof) {
                          case REACT_ELEMENT_TYPE:
                          case REACT_PORTAL_TYPE:
                            invokeCallback = true;
                        }
                    }
                  }

                  if (invokeCallback) {
                    callback(
                      traverseContext,
                      children, // If it's the only child, treat the name as if it was wrapped in an array
                      // so that it's consistent if the number of children grows.
                      nameSoFar === ''
                        ? SEPARATOR + getComponentKey(children, 0)
                        : nameSoFar
                    );
                    return 1;
                  }

                  var child;
                  var nextName;
                  var subtreeCount = 0; // Count of children found in the current subtree.

                  var nextNamePrefix =
                    nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

                  if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      child = children[i];
                      nextName = nextNamePrefix + getComponentKey(child, i);
                      subtreeCount += traverseAllChildrenImpl(
                        child,
                        nextName,
                        callback,
                        traverseContext
                      );
                    }
                  } else {
                    var iteratorFn = getIteratorFn(children);

                    if (typeof iteratorFn === 'function') {
                      {
                        // Warn about using Maps as children
                        if (iteratorFn === children.entries) {
                          if (!didWarnAboutMaps) {
                            warn(
                              'Using Maps as children is deprecated and will be removed in ' +
                                'a future major release. Consider converting children to ' +
                                'an array of keyed ReactElements instead.'
                            );
                          }

                          didWarnAboutMaps = true;
                        }
                      }

                      var iterator = iteratorFn.call(children);
                      var step;
                      var ii = 0;

                      while (!(step = iterator.next()).done) {
                        child = step.value;
                        nextName =
                          nextNamePrefix + getComponentKey(child, ii++);
                        subtreeCount += traverseAllChildrenImpl(
                          child,
                          nextName,
                          callback,
                          traverseContext
                        );
                      }
                    } else if (type === 'object') {
                      var addendum = '';

                      {
                        addendum =
                          ' If you meant to render a collection of children, use an array ' +
                          'instead.' +
                          ReactDebugCurrentFrame.getStackAddendum();
                      }

                      var childrenString = '' + children;

                      {
                        {
                          throw Error(
                            'Objects are not valid as a React child (found: ' +
                              (childrenString === '[object Object]'
                                ? 'object with keys {' +
                                  Object.keys(children).join(', ') +
                                  '}'
                                : childrenString) +
                              ').' +
                              addendum
                          );
                        }
                      }
                    }
                  }

                  return subtreeCount;
                }
                /**
                 * Traverses children that are typically specified as `props.children`, but
                 * might also be specified through attributes:
                 *
                 * - `traverseAllChildren(this.props.children, ...)`
                 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
                 *
                 * The `traverseContext` is an optional argument that is passed through the
                 * entire traversal. It can be used to store accumulations or anything else that
                 * the callback might find relevant.
                 *
                 * @param {?*} children Children tree object.
                 * @param {!function} callback To invoke upon traversing each child.
                 * @param {?*} traverseContext Context for traversal.
                 * @return {!number} The number of children in this subtree.
                 */

                function traverseAllChildren(
                  children,
                  callback,
                  traverseContext
                ) {
                  if (children == null) {
                    return 0;
                  }

                  return traverseAllChildrenImpl(
                    children,
                    '',
                    callback,
                    traverseContext
                  );
                }
                /**
                 * Generate a key string that identifies a component within a set.
                 *
                 * @param {*} component A component that could contain a manual key.
                 * @param {number} index Index that is used if a manual key is not provided.
                 * @return {string}
                 */

                function getComponentKey(component, index) {
                  // Do some typechecking here since we call this blindly. We want to ensure
                  // that we don't block potential future ES APIs.
                  if (
                    typeof component === 'object' &&
                    component !== null &&
                    component.key != null
                  ) {
                    // Explicit key
                    return escape(component.key);
                  } // Implicit key determined by the index in the set

                  return index.toString(36);
                }

                function forEachSingleChild(bookKeeping, child, name) {
                  var func = bookKeeping.func,
                    context = bookKeeping.context;
                  func.call(context, child, bookKeeping.count++);
                }
                /**
                 * Iterates through children that are typically specified as `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
                 *
                 * The provided forEachFunc(child, index) will be called for each
                 * leaf child.
                 *
                 * @param {?*} children Children tree container.
                 * @param {function(*, int)} forEachFunc
                 * @param {*} forEachContext Context for forEachContext.
                 */

                function forEachChildren(
                  children,
                  forEachFunc,
                  forEachContext
                ) {
                  if (children == null) {
                    return children;
                  }

                  var traverseContext = getPooledTraverseContext(
                    null,
                    null,
                    forEachFunc,
                    forEachContext
                  );
                  traverseAllChildren(
                    children,
                    forEachSingleChild,
                    traverseContext
                  );
                  releaseTraverseContext(traverseContext);
                }

                function mapSingleChildIntoContext(
                  bookKeeping,
                  child,
                  childKey
                ) {
                  var result = bookKeeping.result,
                    keyPrefix = bookKeeping.keyPrefix,
                    func = bookKeeping.func,
                    context = bookKeeping.context;
                  var mappedChild = func.call(
                    context,
                    child,
                    bookKeeping.count++
                  );

                  if (Array.isArray(mappedChild)) {
                    mapIntoWithKeyPrefixInternal(
                      mappedChild,
                      result,
                      childKey,
                      function(c) {
                        return c;
                      }
                    );
                  } else if (mappedChild != null) {
                    if (isValidElement(mappedChild)) {
                      mappedChild = cloneAndReplaceKey(
                        mappedChild, // Keep both the (mapped) and old keys if they differ, just as
                        // traverseAllChildren used to do for objects as children
                        keyPrefix +
                          (mappedChild.key &&
                          (!child || child.key !== mappedChild.key)
                            ? escapeUserProvidedKey(mappedChild.key) + '/'
                            : '') +
                          childKey
                      );
                    }

                    result.push(mappedChild);
                  }
                }

                function mapIntoWithKeyPrefixInternal(
                  children,
                  array,
                  prefix,
                  func,
                  context
                ) {
                  var escapedPrefix = '';

                  if (prefix != null) {
                    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
                  }

                  var traverseContext = getPooledTraverseContext(
                    array,
                    escapedPrefix,
                    func,
                    context
                  );
                  traverseAllChildren(
                    children,
                    mapSingleChildIntoContext,
                    traverseContext
                  );
                  releaseTraverseContext(traverseContext);
                }
                /**
                 * Maps children that are typically specified as `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
                 *
                 * The provided mapFunction(child, key, index) will be called for each
                 * leaf child.
                 *
                 * @param {?*} children Children tree container.
                 * @param {function(*, int)} func The map function.
                 * @param {*} context Context for mapFunction.
                 * @return {object} Object containing the ordered map of results.
                 */

                function mapChildren(children, func, context) {
                  if (children == null) {
                    return children;
                  }

                  var result = [];
                  mapIntoWithKeyPrefixInternal(
                    children,
                    result,
                    null,
                    func,
                    context
                  );
                  return result;
                }
                /**
                 * Count the number of children that are typically specified as
                 * `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrencount
                 *
                 * @param {?*} children Children tree container.
                 * @return {number} The number of children.
                 */

                function countChildren(children) {
                  return traverseAllChildren(
                    children,
                    function() {
                      return null;
                    },
                    null
                  );
                }
                /**
                 * Flatten a children object (typically specified as `props.children`) and
                 * return an array with appropriately re-keyed children.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
                 */

                function toArray(children) {
                  var result = [];
                  mapIntoWithKeyPrefixInternal(children, result, null, function(
                    child
                  ) {
                    return child;
                  });
                  return result;
                }
                /**
                 * Returns the first child in a collection of children and verifies that there
                 * is only one child in the collection.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
                 *
                 * The current implementation of this function assumes that a single child gets
                 * passed without a wrapper, but the purpose of this helper function is to
                 * abstract away the particular structure of children.
                 *
                 * @param {?object} children Child collection structure.
                 * @return {ReactElement} The first and only `ReactElement` contained in the
                 * structure.
                 */

                function onlyChild(children) {
                  if (!isValidElement(children)) {
                    {
                      throw Error(
                        'React.Children.only expected to receive a single React element child.'
                      );
                    }
                  }

                  return children;
                }

                function createContext(defaultValue, calculateChangedBits) {
                  if (calculateChangedBits === undefined) {
                    calculateChangedBits = null;
                  } else {
                    {
                      if (
                        calculateChangedBits !== null &&
                        typeof calculateChangedBits !== 'function'
                      ) {
                        error(
                          'createContext: Expected the optional second argument to be a ' +
                            'function. Instead received: %s',
                          calculateChangedBits
                        );
                      }
                    }
                  }

                  var context = {
                    $$typeof: REACT_CONTEXT_TYPE,
                    _calculateChangedBits: calculateChangedBits,
                    // As a workaround to support multiple concurrent renderers, we categorize
                    // some renderers as primary and others as secondary. We only expect
                    // there to be two concurrent renderers at most: React Native (primary) and
                    // Fabric (secondary); React DOM (primary) and React ART (secondary).
                    // Secondary renderers store their context values on separate fields.
                    _currentValue: defaultValue,
                    _currentValue2: defaultValue,
                    // Used to track how many concurrent renderers this context currently
                    // supports within in a single renderer. Such as parallel server rendering.
                    _threadCount: 0,
                    // These are circular
                    Provider: null,
                    Consumer: null,
                  };
                  context.Provider = {
                    $$typeof: REACT_PROVIDER_TYPE,
                    _context: context,
                  };
                  var hasWarnedAboutUsingNestedContextConsumers = false;
                  var hasWarnedAboutUsingConsumerProvider = false;

                  {
                    // A separate object, but proxies back to the original context object for
                    // backwards compatibility. It has a different $$typeof, so we can properly
                    // warn for the incorrect usage of Context as a Consumer.
                    var Consumer = {
                      $$typeof: REACT_CONTEXT_TYPE,
                      _context: context,
                      _calculateChangedBits: context._calculateChangedBits,
                    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

                    Object.defineProperties(Consumer, {
                      Provider: {
                        get: function() {
                          if (!hasWarnedAboutUsingConsumerProvider) {
                            hasWarnedAboutUsingConsumerProvider = true;

                            error(
                              'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +
                                'a future major release. Did you mean to render <Context.Provider> instead?'
                            );
                          }

                          return context.Provider;
                        },
                        set: function(_Provider) {
                          context.Provider = _Provider;
                        },
                      },
                      _currentValue: {
                        get: function() {
                          return context._currentValue;
                        },
                        set: function(_currentValue) {
                          context._currentValue = _currentValue;
                        },
                      },
                      _currentValue2: {
                        get: function() {
                          return context._currentValue2;
                        },
                        set: function(_currentValue2) {
                          context._currentValue2 = _currentValue2;
                        },
                      },
                      _threadCount: {
                        get: function() {
                          return context._threadCount;
                        },
                        set: function(_threadCount) {
                          context._threadCount = _threadCount;
                        },
                      },
                      Consumer: {
                        get: function() {
                          if (!hasWarnedAboutUsingNestedContextConsumers) {
                            hasWarnedAboutUsingNestedContextConsumers = true;

                            error(
                              'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +
                                'a future major release. Did you mean to render <Context.Consumer> instead?'
                            );
                          }

                          return context.Consumer;
                        },
                      },
                    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

                    context.Consumer = Consumer;
                  }

                  {
                    context._currentRenderer = null;
                    context._currentRenderer2 = null;
                  }

                  return context;
                }

                function lazy(ctor) {
                  var lazyType = {
                    $$typeof: REACT_LAZY_TYPE,
                    _ctor: ctor,
                    // React uses these fields to store the result.
                    _status: -1,
                    _result: null,
                  };

                  {
                    // In production, this would just set it on the object.
                    var defaultProps;
                    var propTypes;
                    Object.defineProperties(lazyType, {
                      defaultProps: {
                        configurable: true,
                        get: function() {
                          return defaultProps;
                        },
                        set: function(newDefaultProps) {
                          error(
                            'React.lazy(...): It is not supported to assign `defaultProps` to ' +
                              'a lazy component import. Either specify them where the component ' +
                              'is defined, or create a wrapping component around it.'
                          );

                          defaultProps = newDefaultProps; // Match production behavior more closely:

                          Object.defineProperty(lazyType, 'defaultProps', {
                            enumerable: true,
                          });
                        },
                      },
                      propTypes: {
                        configurable: true,
                        get: function() {
                          return propTypes;
                        },
                        set: function(newPropTypes) {
                          error(
                            'React.lazy(...): It is not supported to assign `propTypes` to ' +
                              'a lazy component import. Either specify them where the component ' +
                              'is defined, or create a wrapping component around it.'
                          );

                          propTypes = newPropTypes; // Match production behavior more closely:

                          Object.defineProperty(lazyType, 'propTypes', {
                            enumerable: true,
                          });
                        },
                      },
                    });
                  }

                  return lazyType;
                }

                function forwardRef(render) {
                  {
                    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                      error(
                        'forwardRef requires a render function but received a `memo` ' +
                          'component. Instead of forwardRef(memo(...)), use ' +
                          'memo(forwardRef(...)).'
                      );
                    } else if (typeof render !== 'function') {
                      error(
                        'forwardRef requires a render function but was given %s.',
                        render === null ? 'null' : typeof render
                      );
                    } else {
                      if (render.length !== 0 && render.length !== 2) {
                        error(
                          'forwardRef render functions accept exactly two parameters: props and ref. %s',
                          render.length === 1
                            ? 'Did you forget to use the ref parameter?'
                            : 'Any additional parameter will be undefined.'
                        );
                      }
                    }

                    if (render != null) {
                      if (
                        render.defaultProps != null ||
                        render.propTypes != null
                      ) {
                        error(
                          'forwardRef render functions do not support propTypes or defaultProps. ' +
                            'Did you accidentally pass a React component?'
                        );
                      }
                    }
                  }

                  return {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: render,
                  };
                }

                function isValidElementType(type) {
                  return (
                    typeof type === 'string' ||
                    typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                    type === REACT_FRAGMENT_TYPE ||
                    type === REACT_CONCURRENT_MODE_TYPE ||
                    type === REACT_PROFILER_TYPE ||
                    type === REACT_STRICT_MODE_TYPE ||
                    type === REACT_SUSPENSE_TYPE ||
                    type === REACT_SUSPENSE_LIST_TYPE ||
                    (typeof type === 'object' &&
                      type !== null &&
                      (type.$$typeof === REACT_LAZY_TYPE ||
                        type.$$typeof === REACT_MEMO_TYPE ||
                        type.$$typeof === REACT_PROVIDER_TYPE ||
                        type.$$typeof === REACT_CONTEXT_TYPE ||
                        type.$$typeof === REACT_FORWARD_REF_TYPE ||
                        type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                        type.$$typeof === REACT_RESPONDER_TYPE ||
                        type.$$typeof === REACT_SCOPE_TYPE ||
                        type.$$typeof === REACT_BLOCK_TYPE))
                  );
                }

                function memo(type, compare) {
                  {
                    if (!isValidElementType(type)) {
                      error(
                        'memo: The first argument must be a component. Instead ' +
                          'received: %s',
                        type === null ? 'null' : typeof type
                      );
                    }
                  }

                  return {
                    $$typeof: REACT_MEMO_TYPE,
                    type: type,
                    compare: compare === undefined ? null : compare,
                  };
                }

                function resolveDispatcher() {
                  var dispatcher = ReactCurrentDispatcher.current;

                  if (!(dispatcher !== null)) {
                    {
                      throw Error(
                        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.'
                      );
                    }
                  }

                  return dispatcher;
                }

                function useContext(Context, unstable_observedBits) {
                  var dispatcher = resolveDispatcher();

                  {
                    if (unstable_observedBits !== undefined) {
                      error(
                        'useContext() second argument is reserved for future ' +
                          'use in React. Passing it is not supported. ' +
                          'You passed: %s.%s',
                        unstable_observedBits,
                        typeof unstable_observedBits === 'number' &&
                          Array.isArray(arguments[2])
                          ? '\n\nDid you call array.map(useContext)? ' +
                              'Calling Hooks inside a loop is not supported. ' +
                              'Learn more at https://fb.me/rules-of-hooks'
                          : ''
                      );
                    } // TODO: add a more generic warning for invalid values.

                    if (Context._context !== undefined) {
                      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
                      // and nobody should be using this in existing code.

                      if (realContext.Consumer === Context) {
                        error(
                          'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' +
                            'removed in a future major release. Did you mean to call useContext(Context) instead?'
                        );
                      } else if (realContext.Provider === Context) {
                        error(
                          'Calling useContext(Context.Provider) is not supported. ' +
                            'Did you mean to call useContext(Context) instead?'
                        );
                      }
                    }
                  }

                  return dispatcher.useContext(Context, unstable_observedBits);
                }
                function useState(initialState) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useState(initialState);
                }
                function useReducer(reducer, initialArg, init) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useReducer(reducer, initialArg, init);
                }
                function useRef(initialValue) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useRef(initialValue);
                }
                function useEffect(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useEffect(create, deps);
                }
                function useLayoutEffect(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useLayoutEffect(create, deps);
                }
                function useCallback(callback, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useCallback(callback, deps);
                }
                function useMemo(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useMemo(create, deps);
                }
                function useImperativeHandle(ref, create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useImperativeHandle(ref, create, deps);
                }
                function useDebugValue(value, formatterFn) {
                  {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useDebugValue(value, formatterFn);
                  }
                }

                var propTypesMisspellWarningShown;

                {
                  propTypesMisspellWarningShown = false;
                }

                function getDeclarationErrorAddendum() {
                  if (ReactCurrentOwner.current) {
                    var name = getComponentName(ReactCurrentOwner.current.type);

                    if (name) {
                      return '\n\nCheck the render method of `' + name + '`.';
                    }
                  }

                  return '';
                }

                function getSourceInfoErrorAddendum(source) {
                  if (source !== undefined) {
                    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                    var lineNumber = source.lineNumber;
                    return (
                      '\n\nCheck your code at ' +
                      fileName +
                      ':' +
                      lineNumber +
                      '.'
                    );
                  }

                  return '';
                }

                function getSourceInfoErrorAddendumForProps(elementProps) {
                  if (elementProps !== null && elementProps !== undefined) {
                    return getSourceInfoErrorAddendum(elementProps.__source);
                  }

                  return '';
                }
                /**
                 * Warn if there's no key explicitly set on dynamic arrays of children or
                 * object keys are not valid. This allows us to keep track of children between
                 * updates.
                 */

                var ownerHasKeyUseWarning = {};

                function getCurrentComponentErrorInfo(parentType) {
                  var info = getDeclarationErrorAddendum();

                  if (!info) {
                    var parentName =
                      typeof parentType === 'string'
                        ? parentType
                        : parentType.displayName || parentType.name;

                    if (parentName) {
                      info =
                        '\n\nCheck the top-level render call using <' +
                        parentName +
                        '>.';
                    }
                  }

                  return info;
                }
                /**
                 * Warn if the element doesn't have an explicit key assigned to it.
                 * This element is in an array. The array could grow and shrink or be
                 * reordered. All children that haven't already been validated are required to
                 * have a "key" property assigned to it. Error statuses are cached so a warning
                 * will only be shown once.
                 *
                 * @internal
                 * @param {ReactElement} element Element that requires a key.
                 * @param {*} parentType element's parent's type.
                 */

                function validateExplicitKey(element, parentType) {
                  if (
                    !element._store ||
                    element._store.validated ||
                    element.key != null
                  ) {
                    return;
                  }

                  element._store.validated = true;
                  var currentComponentErrorInfo = getCurrentComponentErrorInfo(
                    parentType
                  );

                  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                    return;
                  }

                  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
                  // property, it may be the creator of the child that's responsible for
                  // assigning it a key.

                  var childOwner = '';

                  if (
                    element &&
                    element._owner &&
                    element._owner !== ReactCurrentOwner.current
                  ) {
                    // Give the component that originally created this child.
                    childOwner =
                      ' It was passed a child from ' +
                      getComponentName(element._owner.type) +
                      '.';
                  }

                  setCurrentlyValidatingElement(element);

                  {
                    error(
                      'Each child in a list should have a unique "key" prop.' +
                        '%s%s See https://fb.me/react-warning-keys for more information.',
                      currentComponentErrorInfo,
                      childOwner
                    );
                  }

                  setCurrentlyValidatingElement(null);
                }
                /**
                 * Ensure that every element either is passed in a static location, in an
                 * array with an explicit keys property defined, or in an object literal
                 * with valid key property.
                 *
                 * @internal
                 * @param {ReactNode} node Statically passed child of any type.
                 * @param {*} parentType node's parent's type.
                 */

                function validateChildKeys(node, parentType) {
                  if (typeof node !== 'object') {
                    return;
                  }

                  if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                      var child = node[i];

                      if (isValidElement(child)) {
                        validateExplicitKey(child, parentType);
                      }
                    }
                  } else if (isValidElement(node)) {
                    // This element was passed in a valid location.
                    if (node._store) {
                      node._store.validated = true;
                    }
                  } else if (node) {
                    var iteratorFn = getIteratorFn(node);

                    if (typeof iteratorFn === 'function') {
                      // Entry iterators used to provide implicit keys,
                      // but now we print a separate warning for them later.
                      if (iteratorFn !== node.entries) {
                        var iterator = iteratorFn.call(node);
                        var step;

                        while (!(step = iterator.next()).done) {
                          if (isValidElement(step.value)) {
                            validateExplicitKey(step.value, parentType);
                          }
                        }
                      }
                    }
                  }
                }
                /**
                 * Given an element, validate that its props follow the propTypes definition,
                 * provided by the type.
                 *
                 * @param {ReactElement} element
                 */

                function validatePropTypes(element) {
                  {
                    var type = element.type;

                    if (
                      type === null ||
                      type === undefined ||
                      typeof type === 'string'
                    ) {
                      return;
                    }

                    var name = getComponentName(type);
                    var propTypes;

                    if (typeof type === 'function') {
                      propTypes = type.propTypes;
                    } else if (
                      typeof type === 'object' &&
                      (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                        // Inner props are checked in the reconciler.
                        type.$$typeof === REACT_MEMO_TYPE)
                    ) {
                      propTypes = type.propTypes;
                    } else {
                      return;
                    }

                    if (propTypes) {
                      setCurrentlyValidatingElement(element);
                      checkPropTypes(
                        propTypes,
                        element.props,
                        'prop',
                        name,
                        ReactDebugCurrentFrame.getStackAddendum
                      );
                      setCurrentlyValidatingElement(null);
                    } else if (
                      type.PropTypes !== undefined &&
                      !propTypesMisspellWarningShown
                    ) {
                      propTypesMisspellWarningShown = true;

                      error(
                        'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                        name || 'Unknown'
                      );
                    }

                    if (
                      typeof type.getDefaultProps === 'function' &&
                      !type.getDefaultProps.isReactClassApproved
                    ) {
                      error(
                        'getDefaultProps is only used on classic React.createClass ' +
                          'definitions. Use a static property named `defaultProps` instead.'
                      );
                    }
                  }
                }
                /**
                 * Given a fragment, validate that it can only be provided with fragment props
                 * @param {ReactElement} fragment
                 */

                function validateFragmentProps(fragment) {
                  {
                    setCurrentlyValidatingElement(fragment);
                    var keys = Object.keys(fragment.props);

                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];

                      if (key !== 'children' && key !== 'key') {
                        error(
                          'Invalid prop `%s` supplied to `React.Fragment`. ' +
                            'React.Fragment can only have `key` and `children` props.',
                          key
                        );

                        break;
                      }
                    }

                    if (fragment.ref !== null) {
                      error(
                        'Invalid attribute `ref` supplied to `React.Fragment`.'
                      );
                    }

                    setCurrentlyValidatingElement(null);
                  }
                }
                function createElementWithValidation(type, props, children) {
                  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
                  // succeed and there will likely be errors in render.

                  if (!validType) {
                    var info = '';

                    if (
                      type === undefined ||
                      (typeof type === 'object' &&
                        type !== null &&
                        Object.keys(type).length === 0)
                    ) {
                      info +=
                        ' You likely forgot to export your component from the file ' +
                        "it's defined in, or you might have mixed up default and named imports.";
                    }

                    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

                    if (sourceInfo) {
                      info += sourceInfo;
                    } else {
                      info += getDeclarationErrorAddendum();
                    }

                    var typeString;

                    if (type === null) {
                      typeString = 'null';
                    } else if (Array.isArray(type)) {
                      typeString = 'array';
                    } else if (
                      type !== undefined &&
                      type.$$typeof === REACT_ELEMENT_TYPE
                    ) {
                      typeString =
                        '<' +
                        (getComponentName(type.type) || 'Unknown') +
                        ' />';
                      info =
                        ' Did you accidentally export a JSX literal instead of a component?';
                    } else {
                      typeString = typeof type;
                    }

                    {
                      error(
                        'React.createElement: type is invalid -- expected a string (for ' +
                          'built-in components) or a class/function (for composite ' +
                          'components) but got: %s.%s',
                        typeString,
                        info
                      );
                    }
                  }

                  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
                  // TODO: Drop this when these are no longer allowed as the type argument.

                  if (element == null) {
                    return element;
                  } // Skip key warning if the type isn't valid since our key validation logic
                  // doesn't expect a non-string/function type and can throw confusing errors.
                  // We don't want exception behavior to differ between dev and prod.
                  // (Rendering will throw with a helpful message and as soon as the type is
                  // fixed, the key warnings will appear.)

                  if (validType) {
                    for (var i = 2; i < arguments.length; i++) {
                      validateChildKeys(arguments[i], type);
                    }
                  }

                  if (type === REACT_FRAGMENT_TYPE) {
                    validateFragmentProps(element);
                  } else {
                    validatePropTypes(element);
                  }

                  return element;
                }
                var didWarnAboutDeprecatedCreateFactory = false;
                function createFactoryWithValidation(type) {
                  var validatedFactory = createElementWithValidation.bind(
                    null,
                    type
                  );
                  validatedFactory.type = type;

                  {
                    if (!didWarnAboutDeprecatedCreateFactory) {
                      didWarnAboutDeprecatedCreateFactory = true;

                      warn(
                        'React.createFactory() is deprecated and will be removed in ' +
                          'a future major release. Consider using JSX ' +
                          'or use React.createElement() directly instead.'
                      );
                    } // Legacy hook: remove it

                    Object.defineProperty(validatedFactory, 'type', {
                      enumerable: false,
                      get: function() {
                        warn(
                          'Factory.type is deprecated. Access the class directly ' +
                            'before passing it to createFactory.'
                        );

                        Object.defineProperty(this, 'type', {
                          value: type,
                        });
                        return type;
                      },
                    });
                  }

                  return validatedFactory;
                }
                function cloneElementWithValidation(element, props, children) {
                  var newElement = cloneElement.apply(this, arguments);

                  for (var i = 2; i < arguments.length; i++) {
                    validateChildKeys(arguments[i], newElement.type);
                  }

                  validatePropTypes(newElement);
                  return newElement;
                }

                {
                  try {
                    var frozenObject = Object.freeze({});
                    var testMap = new Map([[frozenObject, null]]);
                    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
                    // https://github.com/rollup/rollup/issues/1771
                    // TODO: we can remove these if Rollup fixes the bug.

                    testMap.set(0, 0);
                    testSet.add(0);
                  } catch (e) {}
                }

                var createElement$1 = createElementWithValidation;
                var cloneElement$1 = cloneElementWithValidation;
                var createFactory = createFactoryWithValidation;
                var Children = {
                  map: mapChildren,
                  forEach: forEachChildren,
                  count: countChildren,
                  toArray: toArray,
                  only: onlyChild,
                };

                exports.Children = Children;
                exports.Component = Component;
                exports.Fragment = REACT_FRAGMENT_TYPE;
                exports.Profiler = REACT_PROFILER_TYPE;
                exports.PureComponent = PureComponent;
                exports.StrictMode = REACT_STRICT_MODE_TYPE;
                exports.Suspense = REACT_SUSPENSE_TYPE;
                exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
                exports.cloneElement = cloneElement$1;
                exports.createContext = createContext;
                exports.createElement = createElement$1;
                exports.createFactory = createFactory;
                exports.createRef = createRef;
                exports.forwardRef = forwardRef;
                exports.isValidElement = isValidElement;
                exports.lazy = lazy;
                exports.memo = memo;
                exports.useCallback = useCallback;
                exports.useContext = useContext;
                exports.useDebugValue = useDebugValue;
                exports.useEffect = useEffect;
                exports.useImperativeHandle = useImperativeHandle;
                exports.useLayoutEffect = useLayoutEffect;
                exports.useMemo = useMemo;
                exports.useReducer = useReducer;
                exports.useRef = useRef;
                exports.useState = useState;
                exports.version = ReactVersion;
              })();
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      { _process: 112, 'object-assign': 117, 'prop-types/checkPropTypes': 118 },
    ],
    130: [
      function(require, module, exports) {
        /** @license React v16.14.0
         * react.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        'use strict';
        var l = require('object-assign'),
          n = 'function' === typeof Symbol && Symbol.for,
          p = n ? Symbol.for('react.element') : 60103,
          q = n ? Symbol.for('react.portal') : 60106,
          r = n ? Symbol.for('react.fragment') : 60107,
          t = n ? Symbol.for('react.strict_mode') : 60108,
          u = n ? Symbol.for('react.profiler') : 60114,
          v = n ? Symbol.for('react.provider') : 60109,
          w = n ? Symbol.for('react.context') : 60110,
          x = n ? Symbol.for('react.forward_ref') : 60112,
          y = n ? Symbol.for('react.suspense') : 60113,
          z = n ? Symbol.for('react.memo') : 60115,
          A = n ? Symbol.for('react.lazy') : 60116,
          B = 'function' === typeof Symbol && Symbol.iterator;
        function C(a) {
          for (
            var b =
                'https://reactjs.org/docs/error-decoder.html?invariant=' + a,
              c = 1;
            c < arguments.length;
            c++
          )
            b += '&args[]=' + encodeURIComponent(arguments[c]);
          return (
            'Minified React error #' +
            a +
            '; visit ' +
            b +
            ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.'
          );
        }
        var D = {
            isMounted: function() {
              return !1;
            },
            enqueueForceUpdate: function() {},
            enqueueReplaceState: function() {},
            enqueueSetState: function() {},
          },
          E = {};
        function F(a, b, c) {
          this.props = a;
          this.context = b;
          this.refs = E;
          this.updater = c || D;
        }
        F.prototype.isReactComponent = {};
        F.prototype.setState = function(a, b) {
          if ('object' !== typeof a && 'function' !== typeof a && null != a)
            throw Error(C(85));
          this.updater.enqueueSetState(this, a, b, 'setState');
        };
        F.prototype.forceUpdate = function(a) {
          this.updater.enqueueForceUpdate(this, a, 'forceUpdate');
        };
        function G() {}
        G.prototype = F.prototype;
        function H(a, b, c) {
          this.props = a;
          this.context = b;
          this.refs = E;
          this.updater = c || D;
        }
        var I = (H.prototype = new G());
        I.constructor = H;
        l(I, F.prototype);
        I.isPureReactComponent = !0;
        var J = { current: null },
          K = Object.prototype.hasOwnProperty,
          L = { key: !0, ref: !0, __self: !0, __source: !0 };
        function M(a, b, c) {
          var e,
            d = {},
            g = null,
            k = null;
          if (null != b)
            for (e in (void 0 !== b.ref && (k = b.ref),
            void 0 !== b.key && (g = '' + b.key),
            b))
              K.call(b, e) && !L.hasOwnProperty(e) && (d[e] = b[e]);
          var f = arguments.length - 2;
          if (1 === f) d.children = c;
          else if (1 < f) {
            for (var h = Array(f), m = 0; m < f; m++) h[m] = arguments[m + 2];
            d.children = h;
          }
          if (a && a.defaultProps)
            for (e in ((f = a.defaultProps), f))
              void 0 === d[e] && (d[e] = f[e]);
          return {
            $$typeof: p,
            type: a,
            key: g,
            ref: k,
            props: d,
            _owner: J.current,
          };
        }
        function N(a, b) {
          return {
            $$typeof: p,
            type: a.type,
            key: b,
            ref: a.ref,
            props: a.props,
            _owner: a._owner,
          };
        }
        function O(a) {
          return 'object' === typeof a && null !== a && a.$$typeof === p;
        }
        function escape(a) {
          var b = { '=': '=0', ':': '=2' };
          return (
            '$' +
            ('' + a).replace(/[=:]/g, function(a) {
              return b[a];
            })
          );
        }
        var P = /\/+/g,
          Q = [];
        function R(a, b, c, e) {
          if (Q.length) {
            var d = Q.pop();
            d.result = a;
            d.keyPrefix = b;
            d.func = c;
            d.context = e;
            d.count = 0;
            return d;
          }
          return { result: a, keyPrefix: b, func: c, context: e, count: 0 };
        }
        function S(a) {
          a.result = null;
          a.keyPrefix = null;
          a.func = null;
          a.context = null;
          a.count = 0;
          10 > Q.length && Q.push(a);
        }
        function T(a, b, c, e) {
          var d = typeof a;
          if ('undefined' === d || 'boolean' === d) a = null;
          var g = !1;
          if (null === a) g = !0;
          else
            switch (d) {
              case 'string':
              case 'number':
                g = !0;
                break;
              case 'object':
                switch (a.$$typeof) {
                  case p:
                  case q:
                    g = !0;
                }
            }
          if (g) return c(e, a, '' === b ? '.' + U(a, 0) : b), 1;
          g = 0;
          b = '' === b ? '.' : b + ':';
          if (Array.isArray(a))
            for (var k = 0; k < a.length; k++) {
              d = a[k];
              var f = b + U(d, k);
              g += T(d, f, c, e);
            }
          else if (
            (null === a || 'object' !== typeof a
              ? (f = null)
              : ((f = (B && a[B]) || a['@@iterator']),
                (f = 'function' === typeof f ? f : null)),
            'function' === typeof f)
          )
            for (a = f.call(a), k = 0; !(d = a.next()).done; )
              (d = d.value), (f = b + U(d, k++)), (g += T(d, f, c, e));
          else if ('object' === d)
            throw ((c = '' + a),
            Error(
              C(
                31,
                '[object Object]' === c
                  ? 'object with keys {' + Object.keys(a).join(', ') + '}'
                  : c,
                ''
              )
            ));
          return g;
        }
        function V(a, b, c) {
          return null == a ? 0 : T(a, '', b, c);
        }
        function U(a, b) {
          return 'object' === typeof a && null !== a && null != a.key
            ? escape(a.key)
            : b.toString(36);
        }
        function W(a, b) {
          a.func.call(a.context, b, a.count++);
        }
        function aa(a, b, c) {
          var e = a.result,
            d = a.keyPrefix;
          a = a.func.call(a.context, b, a.count++);
          Array.isArray(a)
            ? X(a, e, c, function(a) {
                return a;
              })
            : null != a &&
              (O(a) &&
                (a = N(
                  a,
                  d +
                    (!a.key || (b && b.key === a.key)
                      ? ''
                      : ('' + a.key).replace(P, '$&/') + '/') +
                    c
                )),
              e.push(a));
        }
        function X(a, b, c, e, d) {
          var g = '';
          null != c && (g = ('' + c).replace(P, '$&/') + '/');
          b = R(b, g, e, d);
          V(a, aa, b);
          S(b);
        }
        var Y = { current: null };
        function Z() {
          var a = Y.current;
          if (null === a) throw Error(C(321));
          return a;
        }
        var ba = {
          ReactCurrentDispatcher: Y,
          ReactCurrentBatchConfig: { suspense: null },
          ReactCurrentOwner: J,
          IsSomeRendererActing: { current: !1 },
          assign: l,
        };
        exports.Children = {
          map: function(a, b, c) {
            if (null == a) return a;
            var e = [];
            X(a, e, null, b, c);
            return e;
          },
          forEach: function(a, b, c) {
            if (null == a) return a;
            b = R(null, null, b, c);
            V(a, W, b);
            S(b);
          },
          count: function(a) {
            return V(
              a,
              function() {
                return null;
              },
              null
            );
          },
          toArray: function(a) {
            var b = [];
            X(a, b, null, function(a) {
              return a;
            });
            return b;
          },
          only: function(a) {
            if (!O(a)) throw Error(C(143));
            return a;
          },
        };
        exports.Component = F;
        exports.Fragment = r;
        exports.Profiler = u;
        exports.PureComponent = H;
        exports.StrictMode = t;
        exports.Suspense = y;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ba;
        exports.cloneElement = function(a, b, c) {
          if (null === a || void 0 === a) throw Error(C(267, a));
          var e = l({}, a.props),
            d = a.key,
            g = a.ref,
            k = a._owner;
          if (null != b) {
            void 0 !== b.ref && ((g = b.ref), (k = J.current));
            void 0 !== b.key && (d = '' + b.key);
            if (a.type && a.type.defaultProps) var f = a.type.defaultProps;
            for (h in b)
              K.call(b, h) &&
                !L.hasOwnProperty(h) &&
                (e[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);
          }
          var h = arguments.length - 2;
          if (1 === h) e.children = c;
          else if (1 < h) {
            f = Array(h);
            for (var m = 0; m < h; m++) f[m] = arguments[m + 2];
            e.children = f;
          }
          return {
            $$typeof: p,
            type: a.type,
            key: d,
            ref: g,
            props: e,
            _owner: k,
          };
        };
        exports.createContext = function(a, b) {
          void 0 === b && (b = null);
          a = {
            $$typeof: w,
            _calculateChangedBits: b,
            _currentValue: a,
            _currentValue2: a,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
          };
          a.Provider = { $$typeof: v, _context: a };
          return (a.Consumer = a);
        };
        exports.createElement = M;
        exports.createFactory = function(a) {
          var b = M.bind(null, a);
          b.type = a;
          return b;
        };
        exports.createRef = function() {
          return { current: null };
        };
        exports.forwardRef = function(a) {
          return { $$typeof: x, render: a };
        };
        exports.isValidElement = O;
        exports.lazy = function(a) {
          return { $$typeof: A, _ctor: a, _status: -1, _result: null };
        };
        exports.memo = function(a, b) {
          return { $$typeof: z, type: a, compare: void 0 === b ? null : b };
        };
        exports.useCallback = function(a, b) {
          return Z().useCallback(a, b);
        };
        exports.useContext = function(a, b) {
          return Z().useContext(a, b);
        };
        exports.useDebugValue = function() {};
        exports.useEffect = function(a, b) {
          return Z().useEffect(a, b);
        };
        exports.useImperativeHandle = function(a, b, c) {
          return Z().useImperativeHandle(a, b, c);
        };
        exports.useLayoutEffect = function(a, b) {
          return Z().useLayoutEffect(a, b);
        };
        exports.useMemo = function(a, b) {
          return Z().useMemo(a, b);
        };
        exports.useReducer = function(a, b, c) {
          return Z().useReducer(a, b, c);
        };
        exports.useRef = function(a) {
          return Z().useRef(a);
        };
        exports.useState = function(a) {
          return Z().useState(a);
        };
        exports.version = '16.14.0';
      },
      { 'object-assign': 117 },
    ],
    131: [
      function(require, module, exports) {
        arguments[4][115][0].apply(exports, arguments);
      },
      {
        './cjs/react.development.js': 129,
        './cjs/react.production.min.js': 130,
        _process: 112,
        dup: 115,
      },
    ],
    132: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /** @license React v0.18.0
             * scheduler-tracing.development.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict';

            if (process.env.NODE_ENV !== 'production') {
              (function() {
                'use strict';

                Object.defineProperty(exports, '__esModule', { value: true });

                // Helps identify side effects in render-phase lifecycle hooks and setState
                // reducers by double invoking them in Strict Mode.

                // To preserve the "Pause on caught exceptions" behavior of the debugger, we
                // replay the begin phase of a failed component inside invokeGuardedCallback.

                // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

                // Gather advanced timing metrics for Profiler subtrees.

                // Trace which interactions trigger each commit.

                var enableSchedulerTracing = true; // SSR experiments

                // Only used in www builds.

                // Only used in www builds.

                // Disable javascript: URL strings in href for XSS protection.

                // React Fire: prevent the value and checked attributes from syncing
                // with their related DOM properties

                // These APIs will no longer be "unstable" in the upcoming 16.7 release,
                // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

                // Experimental React Flare event system and event components support.

                // Experimental Host Component support.

                // Experimental Scope support.

                // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

                // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
                // Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version

                // For tests, we flush suspense fallbacks in an act scope;
                // *except* in some of our own tests, where we test incremental loading states.

                // Add a callback property to suspense to notify which promises are currently
                // in the update queue. This allows reporting and tracing of what is causing
                // the user to see a loading state.
                // Also allows hydration callbacks to fire when a dehydrated boundary gets
                // hydrated or deleted.

                // Part of the simplification of React.createElement so we can eventually move
                // from React.createElement to React.jsx
                // https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

                // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance

                var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

                var interactionIDCounter = 0;
                var threadIDCounter = 0; // Set of currently traced interactions.
                // Interactions "stack"–
                // Meaning that newly traced interactions are appended to the previously active set.
                // When an interaction goes out of scope, the previous set (if any) is restored.

                exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

                exports.__subscriberRef = null;

                if (enableSchedulerTracing) {
                  exports.__interactionsRef = {
                    current: new Set(),
                  };
                  exports.__subscriberRef = {
                    current: null,
                  };
                }

                function unstable_clear(callback) {
                  if (!enableSchedulerTracing) {
                    return callback();
                  }

                  var prevInteractions = exports.__interactionsRef.current;
                  exports.__interactionsRef.current = new Set();

                  try {
                    return callback();
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                  }
                }
                function unstable_getCurrent() {
                  if (!enableSchedulerTracing) {
                    return null;
                  } else {
                    return exports.__interactionsRef.current;
                  }
                }
                function unstable_getThreadID() {
                  return ++threadIDCounter;
                }
                function unstable_trace(name, timestamp, callback) {
                  var threadID =
                    arguments.length > 3 && arguments[3] !== undefined
                      ? arguments[3]
                      : DEFAULT_THREAD_ID;

                  if (!enableSchedulerTracing) {
                    return callback();
                  }

                  var interaction = {
                    __count: 1,
                    id: interactionIDCounter++,
                    name: name,
                    timestamp: timestamp,
                  };
                  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
                  // To do that, clone the current interactions.
                  // The previous set will be restored upon completion.

                  var interactions = new Set(prevInteractions);
                  interactions.add(interaction);
                  exports.__interactionsRef.current = interactions;
                  var subscriber = exports.__subscriberRef.current;
                  var returnValue;

                  try {
                    if (subscriber !== null) {
                      subscriber.onInteractionTraced(interaction);
                    }
                  } finally {
                    try {
                      if (subscriber !== null) {
                        subscriber.onWorkStarted(interactions, threadID);
                      }
                    } finally {
                      try {
                        returnValue = callback();
                      } finally {
                        exports.__interactionsRef.current = prevInteractions;

                        try {
                          if (subscriber !== null) {
                            subscriber.onWorkStopped(interactions, threadID);
                          }
                        } finally {
                          interaction.__count--; // If no async work was scheduled for this interaction,
                          // Notify subscribers that it's completed.

                          if (
                            subscriber !== null &&
                            interaction.__count === 0
                          ) {
                            subscriber.onInteractionScheduledWorkCompleted(
                              interaction
                            );
                          }
                        }
                      }
                    }
                  }

                  return returnValue;
                }
                function unstable_wrap(callback) {
                  var threadID =
                    arguments.length > 1 && arguments[1] !== undefined
                      ? arguments[1]
                      : DEFAULT_THREAD_ID;

                  if (!enableSchedulerTracing) {
                    return callback;
                  }

                  var wrappedInteractions = exports.__interactionsRef.current;
                  var subscriber = exports.__subscriberRef.current;

                  if (subscriber !== null) {
                    subscriber.onWorkScheduled(wrappedInteractions, threadID);
                  } // Update the pending async work count for the current interactions.
                  // Update after calling subscribers in case of error.

                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count++;
                  });
                  var hasRun = false;

                  function wrapped() {
                    var prevInteractions = exports.__interactionsRef.current;
                    exports.__interactionsRef.current = wrappedInteractions;
                    subscriber = exports.__subscriberRef.current;

                    try {
                      var returnValue;

                      try {
                        if (subscriber !== null) {
                          subscriber.onWorkStarted(
                            wrappedInteractions,
                            threadID
                          );
                        }
                      } finally {
                        try {
                          returnValue = callback.apply(undefined, arguments);
                        } finally {
                          exports.__interactionsRef.current = prevInteractions;

                          if (subscriber !== null) {
                            subscriber.onWorkStopped(
                              wrappedInteractions,
                              threadID
                            );
                          }
                        }
                      }

                      return returnValue;
                    } finally {
                      if (!hasRun) {
                        // We only expect a wrapped function to be executed once,
                        // But in the event that it's executed more than once–
                        // Only decrement the outstanding interaction counts once.
                        hasRun = true; // Update pending async counts for all wrapped interactions.
                        // If this was the last scheduled async work for any of them,
                        // Mark them as completed.

                        wrappedInteractions.forEach(function(interaction) {
                          interaction.__count--;

                          if (
                            subscriber !== null &&
                            interaction.__count === 0
                          ) {
                            subscriber.onInteractionScheduledWorkCompleted(
                              interaction
                            );
                          }
                        });
                      }
                    }
                  }

                  wrapped.cancel = function cancel() {
                    subscriber = exports.__subscriberRef.current;

                    try {
                      if (subscriber !== null) {
                        subscriber.onWorkCanceled(
                          wrappedInteractions,
                          threadID
                        );
                      }
                    } finally {
                      // Update pending async counts for all wrapped interactions.
                      // If this was the last scheduled async work for any of them,
                      // Mark them as completed.
                      wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;

                        if (subscriber && interaction.__count === 0) {
                          subscriber.onInteractionScheduledWorkCompleted(
                            interaction
                          );
                        }
                      });
                    }
                  };

                  return wrapped;
                }

                var subscribers = null;

                if (enableSchedulerTracing) {
                  subscribers = new Set();
                }

                function unstable_subscribe(subscriber) {
                  if (enableSchedulerTracing) {
                    subscribers.add(subscriber);

                    if (subscribers.size === 1) {
                      exports.__subscriberRef.current = {
                        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                        onInteractionTraced: onInteractionTraced,
                        onWorkCanceled: onWorkCanceled,
                        onWorkScheduled: onWorkScheduled,
                        onWorkStarted: onWorkStarted,
                        onWorkStopped: onWorkStopped,
                      };
                    }
                  }
                }
                function unstable_unsubscribe(subscriber) {
                  if (enableSchedulerTracing) {
                    subscribers.delete(subscriber);

                    if (subscribers.size === 0) {
                      exports.__subscriberRef.current = null;
                    }
                  }
                }

                function onInteractionTraced(interaction) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function(subscriber) {
                    try {
                      subscriber.onInteractionTraced(interaction);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onInteractionScheduledWorkCompleted(interaction) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function(subscriber) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(
                        interaction
                      );
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onWorkScheduled(interactions, threadID) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function(subscriber) {
                    try {
                      subscriber.onWorkScheduled(interactions, threadID);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onWorkStarted(interactions, threadID) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function(subscriber) {
                    try {
                      subscriber.onWorkStarted(interactions, threadID);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onWorkStopped(interactions, threadID) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function(subscriber) {
                    try {
                      subscriber.onWorkStopped(interactions, threadID);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onWorkCanceled(interactions, threadID) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function(subscriber) {
                    try {
                      subscriber.onWorkCanceled(interactions, threadID);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                exports.unstable_clear = unstable_clear;
                exports.unstable_getCurrent = unstable_getCurrent;
                exports.unstable_getThreadID = unstable_getThreadID;
                exports.unstable_trace = unstable_trace;
                exports.unstable_wrap = unstable_wrap;
                exports.unstable_subscribe = unstable_subscribe;
                exports.unstable_unsubscribe = unstable_unsubscribe;
              })();
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      { _process: 112 },
    ],
    133: [
      function(require, module, exports) {
        /** @license React v0.18.0
         * scheduler-tracing.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        'use strict';
        Object.defineProperty(exports, '__esModule', { value: !0 });
        var b = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        exports.unstable_clear = function(a) {
          return a();
        };
        exports.unstable_getCurrent = function() {
          return null;
        };
        exports.unstable_getThreadID = function() {
          return ++b;
        };
        exports.unstable_trace = function(a, d, c) {
          return c();
        };
        exports.unstable_wrap = function(a) {
          return a;
        };
        exports.unstable_subscribe = function() {};
        exports.unstable_unsubscribe = function() {};
      },
      {},
    ],
    134: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            /** @license React v0.18.0
             * scheduler.development.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict';

            if (process.env.NODE_ENV !== 'production') {
              (function() {
                'use strict';

                Object.defineProperty(exports, '__esModule', { value: true });

                var enableSchedulerDebugging = false;
                var enableIsInputPending = false;
                var enableProfiling = true;

                var requestHostCallback;

                var requestHostTimeout;
                var cancelHostTimeout;
                var shouldYieldToHost;
                var requestPaint;

                if (
                  // If Scheduler runs in a non-DOM environment, it falls back to a naive
                  // implementation using setTimeout.
                  typeof window === 'undefined' || // Check if MessageChannel is supported, too.
                  typeof MessageChannel !== 'function'
                ) {
                  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
                  // fallback to a naive implementation.
                  var _callback = null;
                  var _timeoutID = null;

                  var _flushCallback = function() {
                    if (_callback !== null) {
                      try {
                        var currentTime = exports.unstable_now();
                        var hasRemainingTime = true;

                        _callback(hasRemainingTime, currentTime);

                        _callback = null;
                      } catch (e) {
                        setTimeout(_flushCallback, 0);
                        throw e;
                      }
                    }
                  };

                  var initialTime = Date.now();

                  exports.unstable_now = function() {
                    return Date.now() - initialTime;
                  };

                  requestHostCallback = function(cb) {
                    if (_callback !== null) {
                      // Protect against re-entrancy.
                      setTimeout(requestHostCallback, 0, cb);
                    } else {
                      _callback = cb;
                      setTimeout(_flushCallback, 0);
                    }
                  };

                  requestHostTimeout = function(cb, ms) {
                    _timeoutID = setTimeout(cb, ms);
                  };

                  cancelHostTimeout = function() {
                    clearTimeout(_timeoutID);
                  };

                  shouldYieldToHost = function() {
                    return false;
                  };

                  requestPaint = exports.unstable_forceFrameRate = function() {};
                } else {
                  // Capture local references to native APIs, in case a polyfill overrides them.
                  var performance = window.performance;
                  var _Date = window.Date;
                  var _setTimeout = window.setTimeout;
                  var _clearTimeout = window.clearTimeout;

                  if (typeof console !== 'undefined') {
                    // TODO: Scheduler no longer requires these methods to be polyfilled. But
                    // maybe we want to continue warning if they don't exist, to preserve the
                    // option to rely on it in the future?
                    var requestAnimationFrame = window.requestAnimationFrame;
                    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

                    if (typeof requestAnimationFrame !== 'function') {
                      console.error(
                        "This browser doesn't support requestAnimationFrame. " +
                          'Make sure that you load a ' +
                          'polyfill in older browsers. https://fb.me/react-polyfills'
                      );
                    }

                    if (typeof cancelAnimationFrame !== 'function') {
                      console.error(
                        "This browser doesn't support cancelAnimationFrame. " +
                          'Make sure that you load a ' +
                          'polyfill in older browsers. https://fb.me/react-polyfills'
                      );
                    }
                  }

                  if (
                    typeof performance === 'object' &&
                    typeof performance.now === 'function'
                  ) {
                    exports.unstable_now = function() {
                      return performance.now();
                    };
                  } else {
                    var _initialTime = _Date.now();

                    exports.unstable_now = function() {
                      return _Date.now() - _initialTime;
                    };
                  }

                  var isMessageLoopRunning = false;
                  var scheduledHostCallback = null;
                  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
                  // thread, like user events. By default, it yields multiple times per frame.
                  // It does not attempt to align with frame boundaries, since most tasks don't
                  // need to be frame aligned; for those that do, use requestAnimationFrame.

                  var yieldInterval = 5;
                  var deadline = 0; // TODO: Make this configurable
                  // TODO: Adjust this based on priority?

                  var maxYieldInterval = 300;
                  var needsPaint = false;

                  if (
                    enableIsInputPending &&
                    navigator !== undefined &&
                    navigator.scheduling !== undefined &&
                    navigator.scheduling.isInputPending !== undefined
                  ) {
                    var scheduling = navigator.scheduling;

                    shouldYieldToHost = function() {
                      var currentTime = exports.unstable_now();

                      if (currentTime >= deadline) {
                        // There's no time left. We may want to yield control of the main
                        // thread, so the browser can perform high priority tasks. The main ones
                        // are painting and user input. If there's a pending paint or a pending
                        // input, then we should yield. But if there's neither, then we can
                        // yield less often while remaining responsive. We'll eventually yield
                        // regardless, since there could be a pending paint that wasn't
                        // accompanied by a call to `requestPaint`, or other main thread tasks
                        // like network events.
                        if (needsPaint || scheduling.isInputPending()) {
                          // There is either a pending paint or a pending input.
                          return true;
                        } // There's no pending input. Only yield if we've reached the max
                        // yield interval.

                        return currentTime >= maxYieldInterval;
                      } else {
                        // There's still time left in the frame.
                        return false;
                      }
                    };

                    requestPaint = function() {
                      needsPaint = true;
                    };
                  } else {
                    // `isInputPending` is not available. Since we have no way of knowing if
                    // there's pending input, always yield at the end of the frame.
                    shouldYieldToHost = function() {
                      return exports.unstable_now() >= deadline;
                    }; // Since we yield every frame regardless, `requestPaint` has no effect.

                    requestPaint = function() {};
                  }

                  exports.unstable_forceFrameRate = function(fps) {
                    if (fps < 0 || fps > 125) {
                      console.error(
                        'forceFrameRate takes a positive int between 0 and 125, ' +
                          'forcing framerates higher than 125 fps is not unsupported'
                      );
                      return;
                    }

                    if (fps > 0) {
                      yieldInterval = Math.floor(1000 / fps);
                    } else {
                      // reset the framerate
                      yieldInterval = 5;
                    }
                  };

                  var performWorkUntilDeadline = function() {
                    if (scheduledHostCallback !== null) {
                      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                      // cycle. This means there's always time remaining at the beginning of
                      // the message event.

                      deadline = currentTime + yieldInterval;
                      var hasTimeRemaining = true;

                      try {
                        var hasMoreWork = scheduledHostCallback(
                          hasTimeRemaining,
                          currentTime
                        );

                        if (!hasMoreWork) {
                          isMessageLoopRunning = false;
                          scheduledHostCallback = null;
                        } else {
                          // If there's more work, schedule the next message event at the end
                          // of the preceding one.
                          port.postMessage(null);
                        }
                      } catch (error) {
                        // If a scheduler task throws, exit the current browser task so the
                        // error can be observed.
                        port.postMessage(null);
                        throw error;
                      }
                    } else {
                      isMessageLoopRunning = false;
                    } // Yielding to the browser will give it a chance to paint, so we can
                    // reset this.

                    needsPaint = false;
                  };

                  var channel = new MessageChannel();
                  var port = channel.port2;
                  channel.port1.onmessage = performWorkUntilDeadline;

                  requestHostCallback = function(callback) {
                    scheduledHostCallback = callback;

                    if (!isMessageLoopRunning) {
                      isMessageLoopRunning = true;
                      port.postMessage(null);
                    }
                  };

                  requestHostTimeout = function(callback, ms) {
                    taskTimeoutID = _setTimeout(function() {
                      callback(exports.unstable_now());
                    }, ms);
                  };

                  cancelHostTimeout = function() {
                    _clearTimeout(taskTimeoutID);

                    taskTimeoutID = -1;
                  };
                }

                function push(heap, node) {
                  var index = heap.length;
                  heap.push(node);
                  siftUp(heap, node, index);
                }
                function peek(heap) {
                  var first = heap[0];
                  return first === undefined ? null : first;
                }
                function pop(heap) {
                  var first = heap[0];

                  if (first !== undefined) {
                    var last = heap.pop();

                    if (last !== first) {
                      heap[0] = last;
                      siftDown(heap, last, 0);
                    }

                    return first;
                  } else {
                    return null;
                  }
                }

                function siftUp(heap, node, i) {
                  var index = i;

                  while (true) {
                    var parentIndex = Math.floor((index - 1) / 2);
                    var parent = heap[parentIndex];

                    if (parent !== undefined && compare(parent, node) > 0) {
                      // The parent is larger. Swap positions.
                      heap[parentIndex] = node;
                      heap[index] = parent;
                      index = parentIndex;
                    } else {
                      // The parent is smaller. Exit.
                      return;
                    }
                  }
                }

                function siftDown(heap, node, i) {
                  var index = i;
                  var length = heap.length;

                  while (index < length) {
                    var leftIndex = (index + 1) * 2 - 1;
                    var left = heap[leftIndex];
                    var rightIndex = leftIndex + 1;
                    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

                    if (left !== undefined && compare(left, node) < 0) {
                      if (right !== undefined && compare(right, left) < 0) {
                        heap[index] = right;
                        heap[rightIndex] = node;
                        index = rightIndex;
                      } else {
                        heap[index] = left;
                        heap[leftIndex] = node;
                        index = leftIndex;
                      }
                    } else if (
                      right !== undefined &&
                      compare(right, node) < 0
                    ) {
                      heap[index] = right;
                      heap[rightIndex] = node;
                      index = rightIndex;
                    } else {
                      // Neither child is smaller. Exit.
                      return;
                    }
                  }
                }

                function compare(a, b) {
                  // Compare sort index first, then task id.
                  var diff = a.sortIndex - b.sortIndex;
                  return diff !== 0 ? diff : a.id - b.id;
                }

                // TODO: Use symbols?
                var NoPriority = 0;
                var ImmediatePriority = 1;
                var UserBlockingPriority = 2;
                var NormalPriority = 3;
                var LowPriority = 4;
                var IdlePriority = 5;

                var runIdCounter = 0;
                var mainThreadIdCounter = 0;
                var profilingStateSize = 4;
                var sharedProfilingBuffer = enableProfiling // $FlowFixMe Flow doesn't know about SharedArrayBuffer
                  ? typeof SharedArrayBuffer === 'function'
                    ? new SharedArrayBuffer(
                        profilingStateSize * Int32Array.BYTES_PER_ELEMENT
                      ) // $FlowFixMe Flow doesn't know about ArrayBuffer
                    : typeof ArrayBuffer === 'function'
                    ? new ArrayBuffer(
                        profilingStateSize * Int32Array.BYTES_PER_ELEMENT
                      )
                    : null // Don't crash the init path on IE9
                  : null;
                var profilingState =
                  enableProfiling && sharedProfilingBuffer !== null
                    ? new Int32Array(sharedProfilingBuffer)
                    : []; // We can't read this but it helps save bytes for null checks

                var PRIORITY = 0;
                var CURRENT_TASK_ID = 1;
                var CURRENT_RUN_ID = 2;
                var QUEUE_SIZE = 3;

                if (enableProfiling) {
                  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
                  // array might include canceled tasks.

                  profilingState[QUEUE_SIZE] = 0;
                  profilingState[CURRENT_TASK_ID] = 0;
                } // Bytes per element is 4

                var INITIAL_EVENT_LOG_SIZE = 131072;
                var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

                var eventLogSize = 0;
                var eventLogBuffer = null;
                var eventLog = null;
                var eventLogIndex = 0;
                var TaskStartEvent = 1;
                var TaskCompleteEvent = 2;
                var TaskErrorEvent = 3;
                var TaskCancelEvent = 4;
                var TaskRunEvent = 5;
                var TaskYieldEvent = 6;
                var SchedulerSuspendEvent = 7;
                var SchedulerResumeEvent = 8;

                function logEvent(entries) {
                  if (eventLog !== null) {
                    var offset = eventLogIndex;
                    eventLogIndex += entries.length;

                    if (eventLogIndex + 1 > eventLogSize) {
                      eventLogSize *= 2;

                      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                        console.error(
                          "Scheduler Profiling: Event log exceeded maximum size. Don't " +
                            'forget to call `stopLoggingProfilingEvents()`.'
                        );
                        stopLoggingProfilingEvents();
                        return;
                      }

                      var newEventLog = new Int32Array(eventLogSize * 4);
                      newEventLog.set(eventLog);
                      eventLogBuffer = newEventLog.buffer;
                      eventLog = newEventLog;
                    }

                    eventLog.set(entries, offset);
                  }
                }

                function startLoggingProfilingEvents() {
                  eventLogSize = INITIAL_EVENT_LOG_SIZE;
                  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
                  eventLog = new Int32Array(eventLogBuffer);
                  eventLogIndex = 0;
                }
                function stopLoggingProfilingEvents() {
                  var buffer = eventLogBuffer;
                  eventLogSize = 0;
                  eventLogBuffer = null;
                  eventLog = null;
                  eventLogIndex = 0;
                  return buffer;
                }
                function markTaskStart(task, ms) {
                  if (enableProfiling) {
                    profilingState[QUEUE_SIZE]++;

                    if (eventLog !== null) {
                      // performance.now returns a float, representing milliseconds. When the
                      // event is logged, it's coerced to an int. Convert to microseconds to
                      // maintain extra degrees of precision.
                      logEvent([
                        TaskStartEvent,
                        ms * 1000,
                        task.id,
                        task.priorityLevel,
                      ]);
                    }
                  }
                }
                function markTaskCompleted(task, ms) {
                  if (enableProfiling) {
                    profilingState[PRIORITY] = NoPriority;
                    profilingState[CURRENT_TASK_ID] = 0;
                    profilingState[QUEUE_SIZE]--;

                    if (eventLog !== null) {
                      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
                    }
                  }
                }
                function markTaskCanceled(task, ms) {
                  if (enableProfiling) {
                    profilingState[QUEUE_SIZE]--;

                    if (eventLog !== null) {
                      logEvent([TaskCancelEvent, ms * 1000, task.id]);
                    }
                  }
                }
                function markTaskErrored(task, ms) {
                  if (enableProfiling) {
                    profilingState[PRIORITY] = NoPriority;
                    profilingState[CURRENT_TASK_ID] = 0;
                    profilingState[QUEUE_SIZE]--;

                    if (eventLog !== null) {
                      logEvent([TaskErrorEvent, ms * 1000, task.id]);
                    }
                  }
                }
                function markTaskRun(task, ms) {
                  if (enableProfiling) {
                    runIdCounter++;
                    profilingState[PRIORITY] = task.priorityLevel;
                    profilingState[CURRENT_TASK_ID] = task.id;
                    profilingState[CURRENT_RUN_ID] = runIdCounter;

                    if (eventLog !== null) {
                      logEvent([
                        TaskRunEvent,
                        ms * 1000,
                        task.id,
                        runIdCounter,
                      ]);
                    }
                  }
                }
                function markTaskYield(task, ms) {
                  if (enableProfiling) {
                    profilingState[PRIORITY] = NoPriority;
                    profilingState[CURRENT_TASK_ID] = 0;
                    profilingState[CURRENT_RUN_ID] = 0;

                    if (eventLog !== null) {
                      logEvent([
                        TaskYieldEvent,
                        ms * 1000,
                        task.id,
                        runIdCounter,
                      ]);
                    }
                  }
                }
                function markSchedulerSuspended(ms) {
                  if (enableProfiling) {
                    mainThreadIdCounter++;

                    if (eventLog !== null) {
                      logEvent([
                        SchedulerSuspendEvent,
                        ms * 1000,
                        mainThreadIdCounter,
                      ]);
                    }
                  }
                }
                function markSchedulerUnsuspended(ms) {
                  if (enableProfiling) {
                    if (eventLog !== null) {
                      logEvent([
                        SchedulerResumeEvent,
                        ms * 1000,
                        mainThreadIdCounter,
                      ]);
                    }
                  }
                }

                /* eslint-disable no-var */
                // Math.pow(2, 30) - 1
                // 0b111111111111111111111111111111

                var maxSigned31BitInt = 1073741823; // Times out immediately

                var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

                var USER_BLOCKING_PRIORITY = 250;
                var NORMAL_PRIORITY_TIMEOUT = 5000;
                var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

                var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

                var taskQueue = [];
                var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

                var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.

                var isSchedulerPaused = false;
                var currentTask = null;
                var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

                var isPerformingWork = false;
                var isHostCallbackScheduled = false;
                var isHostTimeoutScheduled = false;

                function advanceTimers(currentTime) {
                  // Check for tasks that are no longer delayed and add them to the queue.
                  var timer = peek(timerQueue);

                  while (timer !== null) {
                    if (timer.callback === null) {
                      // Timer was cancelled.
                      pop(timerQueue);
                    } else if (timer.startTime <= currentTime) {
                      // Timer fired. Transfer to the task queue.
                      pop(timerQueue);
                      timer.sortIndex = timer.expirationTime;
                      push(taskQueue, timer);

                      if (enableProfiling) {
                        markTaskStart(timer, currentTime);
                        timer.isQueued = true;
                      }
                    } else {
                      // Remaining timers are pending.
                      return;
                    }

                    timer = peek(timerQueue);
                  }
                }

                function handleTimeout(currentTime) {
                  isHostTimeoutScheduled = false;
                  advanceTimers(currentTime);

                  if (!isHostCallbackScheduled) {
                    if (peek(taskQueue) !== null) {
                      isHostCallbackScheduled = true;
                      requestHostCallback(flushWork);
                    } else {
                      var firstTimer = peek(timerQueue);

                      if (firstTimer !== null) {
                        requestHostTimeout(
                          handleTimeout,
                          firstTimer.startTime - currentTime
                        );
                      }
                    }
                  }
                }

                function flushWork(hasTimeRemaining, initialTime) {
                  if (enableProfiling) {
                    markSchedulerUnsuspended(initialTime);
                  } // We'll need a host callback the next time work is scheduled.

                  isHostCallbackScheduled = false;

                  if (isHostTimeoutScheduled) {
                    // We scheduled a timeout but it's no longer needed. Cancel it.
                    isHostTimeoutScheduled = false;
                    cancelHostTimeout();
                  }

                  isPerformingWork = true;
                  var previousPriorityLevel = currentPriorityLevel;

                  try {
                    if (enableProfiling) {
                      try {
                        return workLoop(hasTimeRemaining, initialTime);
                      } catch (error) {
                        if (currentTask !== null) {
                          var currentTime = exports.unstable_now();
                          markTaskErrored(currentTask, currentTime);
                          currentTask.isQueued = false;
                        }

                        throw error;
                      }
                    } else {
                      // No catch in prod codepath.
                      return workLoop(hasTimeRemaining, initialTime);
                    }
                  } finally {
                    currentTask = null;
                    currentPriorityLevel = previousPriorityLevel;
                    isPerformingWork = false;

                    if (enableProfiling) {
                      var _currentTime = exports.unstable_now();

                      markSchedulerSuspended(_currentTime);
                    }
                  }
                }

                function workLoop(hasTimeRemaining, initialTime) {
                  var currentTime = initialTime;
                  advanceTimers(currentTime);
                  currentTask = peek(taskQueue);

                  while (
                    currentTask !== null &&
                    !(enableSchedulerDebugging && isSchedulerPaused)
                  ) {
                    if (
                      currentTask.expirationTime > currentTime &&
                      (!hasTimeRemaining || shouldYieldToHost())
                    ) {
                      // This currentTask hasn't expired, and we've reached the deadline.
                      break;
                    }

                    var callback = currentTask.callback;

                    if (callback !== null) {
                      currentTask.callback = null;
                      currentPriorityLevel = currentTask.priorityLevel;
                      var didUserCallbackTimeout =
                        currentTask.expirationTime <= currentTime;
                      markTaskRun(currentTask, currentTime);
                      var continuationCallback = callback(
                        didUserCallbackTimeout
                      );
                      currentTime = exports.unstable_now();

                      if (typeof continuationCallback === 'function') {
                        currentTask.callback = continuationCallback;
                        markTaskYield(currentTask, currentTime);
                      } else {
                        if (enableProfiling) {
                          markTaskCompleted(currentTask, currentTime);
                          currentTask.isQueued = false;
                        }

                        if (currentTask === peek(taskQueue)) {
                          pop(taskQueue);
                        }
                      }

                      advanceTimers(currentTime);
                    } else {
                      pop(taskQueue);
                    }

                    currentTask = peek(taskQueue);
                  } // Return whether there's additional work

                  if (currentTask !== null) {
                    return true;
                  } else {
                    var firstTimer = peek(timerQueue);

                    if (firstTimer !== null) {
                      requestHostTimeout(
                        handleTimeout,
                        firstTimer.startTime - currentTime
                      );
                    }

                    return false;
                  }
                }

                function unstable_runWithPriority(priorityLevel, eventHandler) {
                  switch (priorityLevel) {
                    case ImmediatePriority:
                    case UserBlockingPriority:
                    case NormalPriority:
                    case LowPriority:
                    case IdlePriority:
                      break;

                    default:
                      priorityLevel = NormalPriority;
                  }

                  var previousPriorityLevel = currentPriorityLevel;
                  currentPriorityLevel = priorityLevel;

                  try {
                    return eventHandler();
                  } finally {
                    currentPriorityLevel = previousPriorityLevel;
                  }
                }

                function unstable_next(eventHandler) {
                  var priorityLevel;

                  switch (currentPriorityLevel) {
                    case ImmediatePriority:
                    case UserBlockingPriority:
                    case NormalPriority:
                      // Shift down to normal priority
                      priorityLevel = NormalPriority;
                      break;

                    default:
                      // Anything lower than normal priority should remain at the current level.
                      priorityLevel = currentPriorityLevel;
                      break;
                  }

                  var previousPriorityLevel = currentPriorityLevel;
                  currentPriorityLevel = priorityLevel;

                  try {
                    return eventHandler();
                  } finally {
                    currentPriorityLevel = previousPriorityLevel;
                  }
                }

                function unstable_wrapCallback(callback) {
                  var parentPriorityLevel = currentPriorityLevel;
                  return function() {
                    // This is a fork of runWithPriority, inlined for performance.
                    var previousPriorityLevel = currentPriorityLevel;
                    currentPriorityLevel = parentPriorityLevel;

                    try {
                      return callback.apply(this, arguments);
                    } finally {
                      currentPriorityLevel = previousPriorityLevel;
                    }
                  };
                }

                function timeoutForPriorityLevel(priorityLevel) {
                  switch (priorityLevel) {
                    case ImmediatePriority:
                      return IMMEDIATE_PRIORITY_TIMEOUT;

                    case UserBlockingPriority:
                      return USER_BLOCKING_PRIORITY;

                    case IdlePriority:
                      return IDLE_PRIORITY;

                    case LowPriority:
                      return LOW_PRIORITY_TIMEOUT;

                    case NormalPriority:
                    default:
                      return NORMAL_PRIORITY_TIMEOUT;
                  }
                }

                function unstable_scheduleCallback(
                  priorityLevel,
                  callback,
                  options
                ) {
                  var currentTime = exports.unstable_now();
                  var startTime;
                  var timeout;

                  if (typeof options === 'object' && options !== null) {
                    var delay = options.delay;

                    if (typeof delay === 'number' && delay > 0) {
                      startTime = currentTime + delay;
                    } else {
                      startTime = currentTime;
                    }

                    timeout =
                      typeof options.timeout === 'number'
                        ? options.timeout
                        : timeoutForPriorityLevel(priorityLevel);
                  } else {
                    timeout = timeoutForPriorityLevel(priorityLevel);
                    startTime = currentTime;
                  }

                  var expirationTime = startTime + timeout;
                  var newTask = {
                    id: taskIdCounter++,
                    callback: callback,
                    priorityLevel: priorityLevel,
                    startTime: startTime,
                    expirationTime: expirationTime,
                    sortIndex: -1,
                  };

                  if (enableProfiling) {
                    newTask.isQueued = false;
                  }

                  if (startTime > currentTime) {
                    // This is a delayed task.
                    newTask.sortIndex = startTime;
                    push(timerQueue, newTask);

                    if (
                      peek(taskQueue) === null &&
                      newTask === peek(timerQueue)
                    ) {
                      // All tasks are delayed, and this is the task with the earliest delay.
                      if (isHostTimeoutScheduled) {
                        // Cancel an existing timeout.
                        cancelHostTimeout();
                      } else {
                        isHostTimeoutScheduled = true;
                      } // Schedule a timeout.

                      requestHostTimeout(
                        handleTimeout,
                        startTime - currentTime
                      );
                    }
                  } else {
                    newTask.sortIndex = expirationTime;
                    push(taskQueue, newTask);

                    if (enableProfiling) {
                      markTaskStart(newTask, currentTime);
                      newTask.isQueued = true;
                    } // Schedule a host callback, if needed. If we're already performing work,
                    // wait until the next time we yield.

                    if (!isHostCallbackScheduled && !isPerformingWork) {
                      isHostCallbackScheduled = true;
                      requestHostCallback(flushWork);
                    }
                  }

                  return newTask;
                }

                function unstable_pauseExecution() {
                  isSchedulerPaused = true;
                }

                function unstable_continueExecution() {
                  isSchedulerPaused = false;

                  if (!isHostCallbackScheduled && !isPerformingWork) {
                    isHostCallbackScheduled = true;
                    requestHostCallback(flushWork);
                  }
                }

                function unstable_getFirstCallbackNode() {
                  return peek(taskQueue);
                }

                function unstable_cancelCallback(task) {
                  if (enableProfiling) {
                    if (task.isQueued) {
                      var currentTime = exports.unstable_now();
                      markTaskCanceled(task, currentTime);
                      task.isQueued = false;
                    }
                  } // Null out the callback to indicate the task has been canceled. (Can't
                  // remove from the queue because you can't remove arbitrary nodes from an
                  // array based heap, only the first one.)

                  task.callback = null;
                }

                function unstable_getCurrentPriorityLevel() {
                  return currentPriorityLevel;
                }

                function unstable_shouldYield() {
                  var currentTime = exports.unstable_now();
                  advanceTimers(currentTime);
                  var firstTask = peek(taskQueue);
                  return (
                    (firstTask !== currentTask &&
                      currentTask !== null &&
                      firstTask !== null &&
                      firstTask.callback !== null &&
                      firstTask.startTime <= currentTime &&
                      firstTask.expirationTime < currentTask.expirationTime) ||
                    shouldYieldToHost()
                  );
                }

                var unstable_requestPaint = requestPaint;
                var unstable_Profiling = enableProfiling
                  ? {
                      startLoggingProfilingEvents: startLoggingProfilingEvents,
                      stopLoggingProfilingEvents: stopLoggingProfilingEvents,
                      sharedProfilingBuffer: sharedProfilingBuffer,
                    }
                  : null;

                exports.unstable_ImmediatePriority = ImmediatePriority;
                exports.unstable_UserBlockingPriority = UserBlockingPriority;
                exports.unstable_NormalPriority = NormalPriority;
                exports.unstable_IdlePriority = IdlePriority;
                exports.unstable_LowPriority = LowPriority;
                exports.unstable_runWithPriority = unstable_runWithPriority;
                exports.unstable_next = unstable_next;
                exports.unstable_scheduleCallback = unstable_scheduleCallback;
                exports.unstable_cancelCallback = unstable_cancelCallback;
                exports.unstable_wrapCallback = unstable_wrapCallback;
                exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
                exports.unstable_shouldYield = unstable_shouldYield;
                exports.unstable_requestPaint = unstable_requestPaint;
                exports.unstable_continueExecution = unstable_continueExecution;
                exports.unstable_pauseExecution = unstable_pauseExecution;
                exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
                exports.unstable_Profiling = unstable_Profiling;
              })();
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      { _process: 112 },
    ],
    135: [
      function(require, module, exports) {
        /** @license React v0.18.0
         * scheduler.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        'use strict';
        Object.defineProperty(exports, '__esModule', { value: !0 });
        var f, g, h, k, l;
        if (
          'undefined' === typeof window ||
          'function' !== typeof MessageChannel
        ) {
          var p = null,
            q = null,
            t = function() {
              if (null !== p)
                try {
                  var a = exports.unstable_now();
                  p(!0, a);
                  p = null;
                } catch (b) {
                  throw (setTimeout(t, 0), b);
                }
            },
            u = Date.now();
          exports.unstable_now = function() {
            return Date.now() - u;
          };
          f = function(a) {
            null !== p ? setTimeout(f, 0, a) : ((p = a), setTimeout(t, 0));
          };
          g = function(a, b) {
            q = setTimeout(a, b);
          };
          h = function() {
            clearTimeout(q);
          };
          k = function() {
            return !1;
          };
          l = exports.unstable_forceFrameRate = function() {};
        } else {
          var w = window.performance,
            x = window.Date,
            y = window.setTimeout,
            z = window.clearTimeout;
          if ('undefined' !== typeof console) {
            var A = window.cancelAnimationFrame;
            'function' !== typeof window.requestAnimationFrame &&
              console.error(
                "This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"
              );
            'function' !== typeof A &&
              console.error(
                "This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"
              );
          }
          if ('object' === typeof w && 'function' === typeof w.now)
            exports.unstable_now = function() {
              return w.now();
            };
          else {
            var B = x.now();
            exports.unstable_now = function() {
              return x.now() - B;
            };
          }
          var C = !1,
            D = null,
            E = -1,
            F = 5,
            G = 0;
          k = function() {
            return exports.unstable_now() >= G;
          };
          l = function() {};
          exports.unstable_forceFrameRate = function(a) {
            0 > a || 125 < a
              ? console.error(
                  'forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported'
                )
              : (F = 0 < a ? Math.floor(1e3 / a) : 5);
          };
          var H = new MessageChannel(),
            I = H.port2;
          H.port1.onmessage = function() {
            if (null !== D) {
              var a = exports.unstable_now();
              G = a + F;
              try {
                D(!0, a) ? I.postMessage(null) : ((C = !1), (D = null));
              } catch (b) {
                throw (I.postMessage(null), b);
              }
            } else C = !1;
          };
          f = function(a) {
            D = a;
            C || ((C = !0), I.postMessage(null));
          };
          g = function(a, b) {
            E = y(function() {
              a(exports.unstable_now());
            }, b);
          };
          h = function() {
            z(E);
            E = -1;
          };
        }
        function J(a, b) {
          var c = a.length;
          a.push(b);
          a: for (;;) {
            var d = Math.floor((c - 1) / 2),
              e = a[d];
            if (void 0 !== e && 0 < K(e, b)) (a[d] = b), (a[c] = e), (c = d);
            else break a;
          }
        }
        function L(a) {
          a = a[0];
          return void 0 === a ? null : a;
        }
        function M(a) {
          var b = a[0];
          if (void 0 !== b) {
            var c = a.pop();
            if (c !== b) {
              a[0] = c;
              a: for (var d = 0, e = a.length; d < e; ) {
                var m = 2 * (d + 1) - 1,
                  n = a[m],
                  v = m + 1,
                  r = a[v];
                if (void 0 !== n && 0 > K(n, c))
                  void 0 !== r && 0 > K(r, n)
                    ? ((a[d] = r), (a[v] = c), (d = v))
                    : ((a[d] = n), (a[m] = c), (d = m));
                else if (void 0 !== r && 0 > K(r, c))
                  (a[d] = r), (a[v] = c), (d = v);
                else break a;
              }
            }
            return b;
          }
          return null;
        }
        function K(a, b) {
          var c = a.sortIndex - b.sortIndex;
          return 0 !== c ? c : a.id - b.id;
        }
        var N = [],
          O = [],
          P = 1,
          Q = null,
          R = 3,
          S = !1,
          T = !1,
          U = !1;
        function V(a) {
          for (var b = L(O); null !== b; ) {
            if (null === b.callback) M(O);
            else if (b.startTime <= a)
              M(O), (b.sortIndex = b.expirationTime), J(N, b);
            else break;
            b = L(O);
          }
        }
        function W(a) {
          U = !1;
          V(a);
          if (!T)
            if (null !== L(N)) (T = !0), f(X);
            else {
              var b = L(O);
              null !== b && g(W, b.startTime - a);
            }
        }
        function X(a, b) {
          T = !1;
          U && ((U = !1), h());
          S = !0;
          var c = R;
          try {
            V(b);
            for (
              Q = L(N);
              null !== Q && (!(Q.expirationTime > b) || (a && !k()));

            ) {
              var d = Q.callback;
              if (null !== d) {
                Q.callback = null;
                R = Q.priorityLevel;
                var e = d(Q.expirationTime <= b);
                b = exports.unstable_now();
                'function' === typeof e ? (Q.callback = e) : Q === L(N) && M(N);
                V(b);
              } else M(N);
              Q = L(N);
            }
            if (null !== Q) var m = !0;
            else {
              var n = L(O);
              null !== n && g(W, n.startTime - b);
              m = !1;
            }
            return m;
          } finally {
            (Q = null), (R = c), (S = !1);
          }
        }
        function Y(a) {
          switch (a) {
            case 1:
              return -1;
            case 2:
              return 250;
            case 5:
              return 1073741823;
            case 4:
              return 1e4;
            default:
              return 5e3;
          }
        }
        var Z = l;
        exports.unstable_ImmediatePriority = 1;
        exports.unstable_UserBlockingPriority = 2;
        exports.unstable_NormalPriority = 3;
        exports.unstable_IdlePriority = 5;
        exports.unstable_LowPriority = 4;
        exports.unstable_runWithPriority = function(a, b) {
          switch (a) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              a = 3;
          }
          var c = R;
          R = a;
          try {
            return b();
          } finally {
            R = c;
          }
        };
        exports.unstable_next = function(a) {
          switch (R) {
            case 1:
            case 2:
            case 3:
              var b = 3;
              break;
            default:
              b = R;
          }
          var c = R;
          R = b;
          try {
            return a();
          } finally {
            R = c;
          }
        };
        exports.unstable_scheduleCallback = function(a, b, c) {
          var d = exports.unstable_now();
          if ('object' === typeof c && null !== c) {
            var e = c.delay;
            e = 'number' === typeof e && 0 < e ? d + e : d;
            c = 'number' === typeof c.timeout ? c.timeout : Y(a);
          } else (c = Y(a)), (e = d);
          c = e + c;
          a = {
            id: P++,
            callback: b,
            priorityLevel: a,
            startTime: e,
            expirationTime: c,
            sortIndex: -1,
          };
          e > d
            ? ((a.sortIndex = e),
              J(O, a),
              null === L(N) && a === L(O) && (U ? h() : (U = !0), g(W, e - d)))
            : ((a.sortIndex = c), J(N, a), T || S || ((T = !0), f(X)));
          return a;
        };
        exports.unstable_cancelCallback = function(a) {
          a.callback = null;
        };
        exports.unstable_wrapCallback = function(a) {
          var b = R;
          return function() {
            var c = R;
            R = b;
            try {
              return a.apply(this, arguments);
            } finally {
              R = c;
            }
          };
        };
        exports.unstable_getCurrentPriorityLevel = function() {
          return R;
        };
        exports.unstable_shouldYield = function() {
          var a = exports.unstable_now();
          V(a);
          var b = L(N);
          return (
            (b !== Q &&
              null !== Q &&
              null !== b &&
              null !== b.callback &&
              b.startTime <= a &&
              b.expirationTime < Q.expirationTime) ||
            k()
          );
        };
        exports.unstable_requestPaint = Z;
        exports.unstable_continueExecution = function() {
          T || S || ((T = !0), f(X));
        };
        exports.unstable_pauseExecution = function() {};
        exports.unstable_getFirstCallbackNode = function() {
          return L(N);
        };
        exports.unstable_Profiling = null;
      },
      {},
    ],
    136: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            'use strict';

            if (process.env.NODE_ENV === 'production') {
              module.exports = require('./cjs/scheduler.production.min.js');
            } else {
              module.exports = require('./cjs/scheduler.development.js');
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      {
        './cjs/scheduler.development.js': 134,
        './cjs/scheduler.production.min.js': 135,
        _process: 112,
      },
    ],
    137: [
      function(require, module, exports) {
        (function(process) {
          (function() {
            'use strict';

            if (process.env.NODE_ENV === 'production') {
              module.exports = require('./cjs/scheduler-tracing.production.min.js');
            } else {
              module.exports = require('./cjs/scheduler-tracing.development.js');
            }
          }.call(this));
        }.call(this, require('_process')));
      },
      {
        './cjs/scheduler-tracing.development.js': 132,
        './cjs/scheduler-tracing.production.min.js': 133,
        _process: 112,
      },
    ],
  },
  {},
  [109]
);
